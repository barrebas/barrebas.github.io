<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Misc | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-07-25T22:02:43+02:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John the Dropper]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper/"/>
    <updated>2015-07-12T12:00:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper</id>
    <content type="html"><![CDATA[<p>John the Dropper was an interesting 100 point challenge. I&rsquo;d love to see how it was implemented!</p>

<!--more-->


<p>We&rsquo;re given a host, <code>dropper.polictf.it</code>. It has no open ports, but the challenge description mentioned that John did not need ports to communicate. I left this challenge for a while, focusing on others. When I got back, superkojiman noticed that pinging this host dropped a lot of packets. He saw patterns: sometimes one packet dropped, sometimes three in a row. This made me think of Morse immediately.</p>

<p>I started pinging the host and grabbed the output of <code>ping</code>:</p>

<pre><code>PING dropper.polictf.it (52.18.119.20) 56(84) bytes of data.
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=1 ttl=50 time=23.8 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=3 ttl=50 time=24.2 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=5 ttl=50 time=24.1 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=7 ttl=50 time=23.8 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=8 ttl=50 time=23.9 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=12 ttl=50 time=23.8 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=16 ttl=50 time=24.2 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=20 ttl=50 time=23.9 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=21 ttl=50 time=24.0 ms
...snip...
</code></pre>

<p>As you can see, request 2, 4 and 6 are dropped. With the following one-liner, I extracted the icmp_req numbers:</p>

<pre><code class="bash">cat pings.txt |awk '{print $6}' |awk '{split($0,a,"="); print a[2]}' &gt; sequence.txt
</code></pre>

<p>I wrote a python script to translate the drops to Morse:</p>

<pre><code class="python">seq = []

with open('sequence.txt') as f:
    lines = f.readlines()
    for l in lines:
        seq.append(int(l))
    f.close()

msg = ""
for i in range(len(seq)-2):
    if seq[i+1] - seq[i] - 1 == 0:
        count += ' '
    if seq[i+1] - seq[i] - 1 == 1:
        msg += '.'
    if seq[i+1] - seq[i] - 1 == 3:
        msg += '-'
print msg
</code></pre>

<p>Which yielded:</p>

<pre><code>... --- ...    - .... .. ...    .. ...    - .... .    ..-. .-.. .- --. .--.- .. - -....- .. ... -....- -. . ...- . .-. -....- - --- --- -....- .-.. .- - . -....- ..-. --- .-. -....- .- -....- -.. .-. --- .--. .--.--   
</code></pre>

<p>The first three characters spell out &ldquo;SOS&rdquo;. I translated the rest by hand and found: <code>SOS THIS IS THE FLAG?IT?IS?NEVER?TOO?LATE?FOR?A?DROP?</code>. I couldn&rsquo;t really figure out the characters that are marked <code>?</code>. I guessed them to be underscores, but in the end, <a href="https://duckduckgo.com/?q=...+---+...++++-+....+..+...++++..+...++++-+....+.++++..-.+.-..+.-+--.+.--.-+..+-+-....-+..+...+-....-+-.+.+...-+.+.-.+-....-+-+---+---+-....-+.-..+.-+-+.+-....-+..-.+---+.-.+-....-+.-+-....-+-..+.-.+---+.--.+.--.--++++morse&amp;ia=answer">duckduckgo</a> came to the rescue. The final flag was lowercase: <code>flag{it-is-never-too-late-for-a-drop}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF - LHC]]></title>
    <link href="http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-lhc/"/>
    <updated>2015-04-02T19:59:55+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-lhc</id>
    <content type="html"><![CDATA[<p><code>LHC</code> was a short &amp; sweet challenge in Backdoor CTF. It had a nice &lsquo;aha-Erlebnis&rsquo; moment.</p>

<!-- more -->


<p>During the CTF, the organizers dropped this challenge. The description mentioned that the flag was hidden in a data file. This data file was kindly provided by the Large Hadron Collider and was 2049 GB large.</p>

<p>I&rsquo;ll let that sink in.</p>

<p>Two-thousand and forty nine <strong>gigabytes</strong>. Downloading it would take more than twenty days. The flag was in the middle of the file, but that still meant downloading more than a terabyte of data.</p>

<p>I fired up <code>curl</code> and looked at the download:</p>

<pre><code>bas@tritonal:~/tmp/bckdr/medusa$ curl -vvv https://lhc-cdn.herokuapp.com/data.txt &gt; /dev/null
* About to connect() to lhc-cdn.herokuapp.com port 443 (#0)
*   Trying 107.21.223.88...
...snip...
&gt; GET /data.txt HTTP/1.1
&gt; User-Agent: curl/7.26.0
&gt; Host: lhc-cdn.herokuapp.com
&gt; Accept: */*
&gt; 
* additional stuff not fine transfer.c:1037: 0 0
* HTTP 1.1 or later with persistent connection, pipelining supported
&lt; HTTP/1.1 200 OK
&lt; Server: Cowboy
&lt; Connection: keep-alive
&lt; X-Powered-By: Express
&lt; Accept-Ranges: bytes
&lt; Content-Type: text/plain; charset=utf-8
&lt; Content-Length: 2200000000000
&lt; Date: Wed, 01 Apr 2015 21:44:48 GMT
&lt; Via: 1.1 vegur
</code></pre>

<p>Yup, 2200000000000 bytes of data. But wait! <code>curl</code> has the option to resume a broken download; that meant that I could control where the download would start. I issued this command and started searching the output for the flag:</p>

<pre><code class="bash">$ curl -vvv https://lhc-cdn.herokuapp.com/data.txt -C 1100000000000 &gt; lhc-middle
...snip...
$ strings -n 20 ./lhc-middle
</code></pre>

<p>This gave me part of the flag; the description said it was in the middle of the datafile, so I subtracted another 1000 bytes:</p>

<pre><code>$ curl -vvv https://lhc-cdn.herokuapp.com/data.txt -C 1099999998999 &gt; lhc-middle
$ strings lhc-middle -n 20
              The flag is: [REDACTED]
</code></pre>

<p>Simple, really, once you know the trick.</p>
]]></content>
  </entry>
  
</feed>
