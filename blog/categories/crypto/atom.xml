<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Crypto | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/crypto/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-10-04T11:23:41+02:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ekoparty - Cry100]]></title>
    <link href="http://barrebas.github.io/blog/2015/09/21/ekoparty-cry100/"/>
    <updated>2015-09-21T23:54:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/09/21/ekoparty-cry100</id>
    <content type="html"><![CDATA[<p>We&rsquo;re given a public key and a encrypted flag, with the task to get the private key. I&rsquo;m not very good at crypto challenges so I wanted to see if I could break this one and learn something in the process.</p>

<!--more-->


<p>The public key is an RSA key:</p>

<pre><code class="bash">$ openssl rsa -inform PEM -pubin -in public.key -text -noout 
Public-Key: (2070 bit)
Modulus:
    25:b1:8b:f5:f3:89:09:7d:17:23:78:66:bb:51:cf:
    f8:de:92:24:53:74:9e:bc:40:3b:09:95:c9:7c:0e:
    38:6d:46:c1:61:ca:df:f7:7c:69:86:0d:ae:47:91:
    c2:14:cf:84:87:aa:aa:9f:26:e9:20:a9:77:83:49:
    06:03:8a:ef:b5:c3:08:27:df:cf:3f:c9:e9:76:95:
    44:f9:4e:07:cd:fe:08:72:03:9a:3a:62:62:11:66:
    78:b2:61:fb:2d:6b:9d:32:53:9e:92:a1:53:b3:67:
    56:29:ba:b3:94:2e:7d:35:e3:0f:7e:ef:5a:bf:1c:
    50:d7:97:d0:cc:88:e1:bd:cc:fd:1a:12:ea:6f:7e:
    f7:5c:37:27:db:df:2e:78:0f:34:28:ae:8f:7a:4f:
    b7:a8:9f:18:4a:36:50:32:b1:53:f8:42:5e:84:57:
    50:eb:2b:7a:bc:02:dc:15:ce:02:07:50:7a:a9:50:
    86:3b:b8:48:0a:78:02:8d:d6:29:79:94:4d:6c:63:
    3f:af:a1:03:e4:db:28:ce:87:f5:a0:c6:ed:4a:2f:
    26:64:42:7f:56:5c:77:81:ab:61:91:45:6d:97:1c:
    7f:fa:39:52:72:37:4c:ec:01:55:e5:f9:11:89:db:
    74:2e:4c:28:b0:3a:0f:a1:1c:ff:b0:31:73:d2:a4:
    cc:e6:ae:53
Exponent: 65537 (0x10001)
</code></pre>

<p>It has a rather weird number of bits, not a multiple of 256. The modulus is converted to hex using python and yields:</p>

<pre><code>n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443
</code></pre>

<p>Hmm. Since the modulus <code>n</code> is made from the product of two primes, we&rsquo;d better find those primes. Luckily, I found another <a href="http://hacktracking.blogspot.nl/2013/11/cscamp-ctf-quals-2k13-crypto-public-is.html">writeup</a> and a website called <a href="http://factordb.com/index.php?query=79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443">factordb.com</a>. Factordb does <em>exactly</em> what it says on the box and yields two factors, <code>3133337</code> and another large number. The first number made me think I was on the right way!</p>

<p>Now, we need to reconstruct the key. We have <code>n</code>, <code>p</code> and <code>q</code> which is all we need. I couldn&rsquo;t decrypt the message in Python, as Python&rsquo;s cryptolib requires the modulus to be a multiple of 256 bits. So I resorted to the voodoo magic that is <code>openssl</code>. I found this nice post on stackoverflow <a href="https://stackoverflow.com/questions/19850283/how-to-generate-rsa-keys-using-specific-input-numbers-in-openssl">about creating specific rsa keys</a>.</p>

<p>I followed that post, computing:</p>

<pre><code>d mod(p-1) = e1
d mod(q-1) = e2
q^-1 mod p = coeff
</code></pre>

<p>for which I needed</p>

<pre><code class="python">    def egcd(a, b):
        if a == 0:
            return (b, 0, 1)
        else:
            g, y, x = egcd(b % a, a)
            return (g, x - (b // a) * y, y)

    def modinv(a, m):
        g, x, y = egcd(a, m)
        if g != 1:
            raise Exception('modular inverse does not exist')
        else:
            return x % m
</code></pre>

<p>Then I put everything in a file called <code>newkey.der</code>:</p>

<pre><code>asn1=SEQUENCE:rsa_key

[rsa_key]
version=INTEGER:0
modulus=INTEGER:79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443
pubExp=INTEGER:65537    
privExp=INTEGER:406853230956379689450620815713768871010712825839536410687962650677800895818003893712259622281477453292088146173840036827322518131453630576229976208523593618949818777897059256426591560532784635697190752924923710375949616954069804342573867253630978123632384795587951365482103468722384133084798614863870775897915929475258974188300927376911833763105616386167881813301748585233563049693794370642976326692672223638908164822104832415788577945314264232531947860576966629150456995512932232264881080618006698700677529111454508900582785420549466798020451488168615035256292977390692401388790460066327347700109341639992159475755036449
p=INTEGER:25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939
q=INTEGER:3133337
e1=INTEGER:15320351458978192768467039741691432413958180349660930794740289485182452764579534136107456333762920952821710744567765011085892394594373698903583015958298729593743757394184665648601970820474550408544396720336394444082148339685815042712020243239641617201526913490150693257135882730015443734409342942381805505660243891614007699009146733904940642377373537806159587666380328759209553248526202577679304907571591265191240376778645354498599063176881375334380848007142765855272411310242667619720799140338871500103278100940728801960485534826631133256077779493381175185896255651752489800973249824932460228998596930117032675866465
e2=INTEGER:817841
coeff=INTEGER:0
</code></pre>

<p>The <code>privExp</code> was calculated like this:</p>

<pre><code class="python">import gmpy

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

p = 25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939
q = 3133337
totien = (p-1) * (q-1)
e = 65537
d = modinv(e,totien)
print d
</code></pre>

<p>I then ran <code>$ openssl asn1parse -genconf  newkey.der -out key.der</code>. After mucking around with the flag, I verified I had the right private key by encrypting a test message with the public key. I noticed that the flag was base64 encoded whereas my encrypted message wasn&rsquo;t&hellip;</p>

<pre><code class="bash">$ cat flag.enc |base64 -d &gt; test.enc
$ openssl rsautl -in test.enc -out /dev/tty -inkey private.key -decrypt -oaep
EKO{classic_rsa_challenge_is_boring_but_necessary}
</code></pre>

<p>That last <code>openssl</code> command was just tested with <code>-raw</code> and -<code>oaep</code> (options for padding). <code>-oaep</code> worked!</p>

<p>Flag was <code>EKO{classic_rsa_challenge_is_boring_but_necessary}</code>. I learned something \o/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - and the Prophet Said]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-and-the-prophet-said/"/>
    <updated>2015-07-12T11:47:44+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-and-the-prophet-said</id>
    <content type="html"><![CDATA[<p>After solving the first crypto challenge of PoliCTF 2015, I moved onto the 100 point challenge.</p>

<!--more-->


<p>The download contains a text file with base64-encoded data, which becomes a .gz archive. After decompressing, I obtained a text file with biblical text. Not my cup of tea, but I immediately saw that certain sentences were duplicated. I wrote a python script to count the occurences of lines:</p>

<pre><code class="python">d = {}

with open('text-file') as f:
    lines = f.readlines()
    for l in lines:
        if l in d:
            d[l] += 1
        else:
            d[l] = 1

for w in sorted(d, key=d.get):
    print w, d[w]
</code></pre>

<p>Which gave me these frequencies:</p>

<pre><code class="bash">...snip...
Ye shall not eat anything with the blood: neither shall ye use enchantments, nor practise augury.
21
And ye shall keep my statutes, and do them: I am Jehovah who sanctifieth you.
23
And if a man lie with a beast, he shall surely be put to death: and ye shall slay the beast.
26
And when he hath made an end of atoning for the holy place, and the tent of meeting, and the altar, he shall present the live goat:
47
</code></pre>

<p>A total of 30 distinct strings were found. I guessed these strings represented letters, so I extended the python script a bit and started puzzling:</p>

<pre><code class="python">d = {}

with open('text-file') as f:
    lines = f.readlines()
    for l in lines:
        if l in d:
            d[l] += 1
        else:
            d[l] = 1

for w in sorted(d, key=d.get):
    print w, d[w]

print len(d)    
x = dict(zip(sorted(d, key=d.get, reverse=True), ' etaoinsrhldcubkfgjmpqvwxyz012'))

# transpose the strings to letters and print out the message
out = ""
for l in lines:
    out += x[l]

print out
</code></pre>

<p>I guessed that the most common string was a space, which indeed yielded word- and sentence-like output:</p>

<pre><code>rtiisq eroa grniitlht oa wtdc tnac oalje oe1 ojk edcolh es bdoet n islh ktaanht as aeneoaeoga boii rtip csf boer ert iteetd mdtxftlgotav ufe ojk lse dtniic hssy ne ernev s0 erneja tlsfhrq nrnrq ojk ol iswt boer aokpit isbtdgnat minha boersfe apngta nly aednlht ackusiav minhziureuhhfwmacleuuxbus2
</code></pre>

<p>I then started to look for THE, THIS, A, AND to guess the first couple of letters:</p>

<pre><code>Heoosq THIS gHnooelre IS wedc enSc ISljT IT1 Ijk TdcIlr Ts bdITe n oslr keSSnre Ss STnTISTIgS bIoo Heop csf bITH THe oeTTed mdexfelgIeSv ufT Ijk lsT denooc rssy nT THnTv s0 THnTjS elsfrHq nHnHq Ijk Il oswe bITH SIkpoe osbedgnSe monrS bITHsfT SpngeS nly STdnlre SckusoSv monrzouHTurrfwmSclTuuxbus2
</code></pre>

<p>Slowly but surely, I translated all the letters, and the words slowly emerged (I love that!):</p>

<pre><code>HEoonq THIS gHAooEldE IS VERY EASY ISljT IT1 Ijk TRYIld Tn WRITE A onld kESSAdE Sn STATISTIgS WIoo HEop Ynf WITH THE oETTER mRExfElgIESb ufT Ijk lnT REAooY dnnc AT THATb n0 THATjS ElnfdHq AHAHq Ijk Il onVE WITH SIkpoE onWERgASE moAdS WITHnfT SpAgES Alc STRAldE SYkunoSb moAdzouHTuddfVmSYlTuuxWun2

HELLoq THIS CHALLENGE IS VERY EASY ISN'T IT? I'k TRYING To WRITE A LoNG kESSAGE So STATISTICS WILL HELp Yof WITH THE LETTER mRExfENCIESb ufT I'k NoT REALLY Good AT THATb oj THAT'S ENofGHq AHAHq I'k IN LoVE WITH SIkpLE LoWERCASE mLAGS WITHofT SpACES ANd STRANGE SYkuoLSb mLAGzLuHTuGGfVmSYNTuuxWuo2

HELLOq THIS CHALLENGE IS VERY EASY ISN'T IT? I'M TRYING TO WRITE A LONG MESSAGE SO STATISTICS WILL HELP YOU WITH THE LETTER kRExUENCIESb uUT I'M NOT REALLY GOOd AT THATb Oj THAT'S ENOUGHq AHAHq I'M IN LOVE WITH SIMPLE LOWERCASE kLAGS WITHOUT SPACES ANd STRANGE SYMuOLSb kLAGzLuHTuGGUVkSYNTuuxWuO2

HELLO! THIS CHALLENGE IS VERY EASY ISN'T IT? I'M TRYING TO WRITE A LONG MESSAGE SO STATISTICS WILL HELP YOU WITH THE LETTER FREQUENCIES, BUT I'M NOT REALLY GOOD AT THAT, OK THAT'S ENOUGH! AHAH! I'M IN LOVE WITH SIMPLE LOWERCASE FLAGS WITHOUT SPACES AND STRANGE SYMBOLS, FLAG{LBHTBGGUVFSYNTBBQWBO}
</code></pre>

<p>The final translation dictionary was: <code>x = dict(zip(sorted(d, key=d.get, reverse=True), " TESILAOHGNRYBWMUC'FP!,VQD{K?}"))</code>
The challenge already said that the flag needed a bit more work. Indeed, <code>flag{lbhtbgguvfsyntbbqwbo}</code> was not accepted. What then? Bitvijays suggested that the flag was another &ldquo;ciphertext&rdquo;, so I thought of Caesar cipher. The easiest is <a href="http://rot13.com">rot13</a> and indeed, the flag was <code>flag{yougotthisflagoodjob}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Exorcise]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-exorcise/"/>
    <updated>2015-07-12T11:39:10+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-exorcise</id>
    <content type="html"><![CDATA[<p>Exorcise was a 50 point crypto challenge for PoliCTF.</p>

<!--more-->


<p>We&rsquo;re asked to connect to <code>exorcise.polictf.it:80</code>. Upon connecting, we&rsquo;re presented with a hexadecimal string. I pressed return and got another:</p>

<pre><code class="bash">bas@tritonal:~$ nc exorcise.polictf.it 80
2e0540472c37151c4e007f481c2a0110311204084f

2e0541495b161248101c2a11122d16102d1608091902027f0d071c2c53050a061f05380d410f0a2a531f1e1907053d3310543e5d1c3a512653020c09461809025b341111475310451b3a014736000c4d0404002c1c4f142d164805001f107f094114103110074c190344283a00063b110c26413a00
</code></pre>

<p>Because of the challenge title, I xor&#8217;ed the second string using the first as a key and got gibberish. I decided to reconnect and send a bunch of NULL bytes (Ctrl+Space). When I xor&#8217;ed that string against the first, I got this:</p>

<pre><code>What's your name^i%UX`C=h=pN^xPdaW]j,1ISJC't yru4OBwguHi! What's your name^G
</code></pre>

<p>Hmmmmm. I reconnected again, sent a bunch of A characters and the resulting string was xor&#8217;ed vs 0x41:</p>

<pre><code class="python">e = "2e0541263a1e352928321e70321e32711e32282c312d241e382e341e32292e342d251e292037241e322e2d3724251e1e28351e702f1e741e3224223c272d20263a1e352928321e70321e32711e32282c312d241e382e341e32292e342d251e292037241e322e2d3724251e1e28351e702f1e741e3224223c272d2026557f3d0e490a3044533e01557f010c0c14050b38591b1d36004802101f173e0f04561c30064f1c040a063e3d050d7f50022d503b0a450412124c150f1e7f1f0d105d7f7e07371642281a1a0850180d3a0a0a553e010d4f1f19172b480056072a1d0c04560a027f280c1d2d554e3d4c2b1616"
msg = [e[start:start+2] for start in xrange(0, len(e), 2)]

out = ""
for i in range(len(msg)):
    b = (int(msg[i], 16))
    out += chr(0x41^b)
print out
</code></pre>

<pre><code class="bash">bas@tritonal:~/tmp/polictf/exorcise$ python exorcise.py
oDg{_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec}flag{_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec}flag
</code></pre>

<p>There&rsquo;s the flag: <code>flag{_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec}</code>. Took me a bit longer than 5 seconds&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Rotate]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/21/advent-ctf-2014-rotate/"/>
    <updated>2014-12-21T16:09:36+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/21/advent-ctf-2014-rotate</id>
    <content type="html"><![CDATA[<p>A crypto challenge! We&rsquo;re given a zip-file, containing <code>flag.jpg.enc</code> and <code>rotate.py</code>.</p>

<!-- more -->


<p><code>rotate.py</code> handles the encryption, but only does so one way:</p>

<pre><code class="python">import sys
import math
import struct

p = lambda x: struct.pack('f', x)
u = lambda x: struct.unpack('b', x)[0]

if len(sys.argv) != 3:
    sys.exit(1)

filename = sys.argv[1]
key = math.radians(int(sys.argv[2]))

bs = open(filename, 'rb').read()
enc = open(filename + '.enc', 'wb')

for i in range(0, len(bs), 2):
    x, y = u(bs[i]), u(bs[i+1])
    enc.write(p(x * math.cos(key) - y * math.sin(key)) + p(x * math.sin(key) + y * math.cos(key)))
</code></pre>

<p>The script takes two bytes at a time and transforms them into two floats via some goniometric functions, using a key. These floats are then dumped as DWORDS into the encrypted output file. Our first job is to determine what key was used.</p>

<p>Assuming the flag really <strong>is</strong> a JPEG, we have some prior knowledge. Namely, the first two bytes are <code>0xff,0xd8</code>. I made a small file that contains only these two bytes and I ripped the first 8 bytes from <code>flag.jpg.enc</code>. I encoded the small 2-byte file with all possible keys and then compared the md5sum of each file to the md5sum of the 8-byte encoded file:</p>

<pre><code class="bash">bas@tritonal:~/adventctf/rotate$ for i in `seq 0 360`; do python rotate.py ./header_real2 $i; mv header_real2.enc output$i; done
bas@tritonal:~/adventctf/rotate$ md5sum header_encoded8
ed3f26885ebe2ba3ec0aa61215e4dcf2  header_encoded8
bas@tritonal:~/adventctf/rotate$ md5sum output* |grep ed3f2
ed3f26885ebe2ba3ec0aa61215e4dcf2  output123
</code></pre>

<p>So I now know the key that was used was <code>123</code>. I then started building a decoder. I hit a few snags on the way. It turns out that <code>rotate.py</code> doesn&rsquo;t use the literal value of each byte, but instead uses <code>struct.unpack('b', byte)</code> to generate a <strong>signed</strong> representation. That threw me off for a good while.</p>

<p>The decoder first builds a lookup table of each possible two-byte combination. Then, to decode, it reads eight bytes at a time and looks up the corresponding values from the lookup table. If there are no more floats to be read, it catches the error and outputs the decrypted data:</p>

<pre><code class="python">import sys
import math
import struct

p = lambda x: struct.pack('f', x)
u = lambda x: struct.unpack('b', x)[0]

if len(sys.argv) != 3:
    sys.exit(1)

filename = sys.argv[1]
key = math.radians(int(sys.argv[2]))

enc = open(filename, 'rb')

lookup = {}
for k in xrange(256):
    for l in xrange(256):
        x = struct.unpack('b', chr(k))[0]
        y = struct.unpack('b', chr(l))[0]

        x1 = p(x * math.cos(key) - y * math.sin(key))
        x2 = p(x * math.sin(key) + y * math.cos(key))

        x3 = struct.unpack('&lt;L', x1)[0]
        x4 = struct.unpack('&lt;L', x2)[0]

        lookup[ (x3&lt;&lt;32)+x4 ] = (k, l)

going = 1
decoded = ""
while going:
    try:
        f1 = struct.unpack('&lt;L', enc.read(4))[0]
        f2 = struct.unpack('&lt;L', enc.read(4))[0]

        (x, y) = lookup[ (f1&lt;&lt;32)+f2 ]

        decoded += chr(x)
        decoded += chr(y)
    except:
        going = 0
        print decoded
</code></pre>

<p>It&rsquo;s <em>horrible</em> code, but it got the job done:</p>

<p><img src="/assets/adctf/rotate-flag.jpg" alt="" /></p>

<p>The flag was <code>ADCTF_TR0t4T3_f4C3</code>.</p>
]]></content>
  </entry>
  
</feed>
